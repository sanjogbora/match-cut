/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csanjo%5C%5CDocuments%5C%5Cmatch%20cut%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csanjo%5C%5CDocuments%5C%5Cmatch%20cut%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \**************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.tsx */ \"(app-pages-browser)/./app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDc2Fuam8lNUMlNUNEb2N1bWVudHMlNUMlNUNtYXRjaCUyMGN1dCU1QyU1Q2FwcCU1QyU1Q3BhZ2UudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsc0pBQTBGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/YWNmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXHNhbmpvXFxcXERvY3VtZW50c1xcXFxtYXRjaCBjdXRcXFxcYXBwXFxcXHBhZ2UudHN4XCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csanjo%5C%5CDocuments%5C%5Cmatch%20cut%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FFmpeg: function() { return /* binding */ FFmpeg; }\n/* harmony export */ });\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./const.js */ \"(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js\");\n\n\n\n/**\n * Provides APIs to interact with ffmpeg web worker.\n *\n * @example\n * ```ts\n * const ffmpeg = new FFmpeg();\n * ```\n */\nclass FFmpeg {\n    #worker = null;\n    /**\n     * #resolves and #rejects tracks Promise resolves and rejects to\n     * be called when we receive message from web worker.\n     */\n    #resolves = {};\n    #rejects = {};\n    #logEventCallbacks = [];\n    #progressEventCallbacks = [];\n    loaded = false;\n    /**\n     * register worker message event handlers.\n     */\n    #registerHandlers = () => {\n        if (this.#worker) {\n            this.#worker.onmessage = ({ data: { id, type, data }, }) => {\n                switch (type) {\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LOAD:\n                        this.loaded = true;\n                        this.#resolves[id](data);\n                        break;\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.MOUNT:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.UNMOUNT:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.EXEC:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.FFPROBE:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.WRITE_FILE:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.READ_FILE:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.DELETE_FILE:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.RENAME:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.CREATE_DIR:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LIST_DIR:\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.DELETE_DIR:\n                        this.#resolves[id](data);\n                        break;\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LOG:\n                        this.#logEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.PROGRESS:\n                        this.#progressEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.ERROR:\n                        this.#rejects[id](data);\n                        break;\n                }\n                delete this.#resolves[id];\n                delete this.#rejects[id];\n            };\n        }\n    };\n    /**\n     * Generic function to send messages to web worker.\n     */\n    #send = ({ type, data }, trans = [], signal) => {\n        if (!this.#worker) {\n            return Promise.reject(_errors_js__WEBPACK_IMPORTED_MODULE_2__.ERROR_NOT_LOADED);\n        }\n        return new Promise((resolve, reject) => {\n            const id = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getMessageID)();\n            this.#worker && this.#worker.postMessage({ id, type, data }, trans);\n            this.#resolves[id] = resolve;\n            this.#rejects[id] = reject;\n            signal?.addEventListener(\"abort\", () => {\n                reject(new DOMException(`Message # ${id} was aborted`, \"AbortError\"));\n            }, { once: true });\n        });\n    };\n    on(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks.push(callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks.push(callback);\n        }\n    }\n    off(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);\n        }\n    }\n    /**\n     * Loads ffmpeg-core inside web worker. It is required to call this method first\n     * as it initializes WebAssembly and other essential variables.\n     *\n     * @category FFmpeg\n     * @returns `true` if ffmpeg core is loaded for the first time.\n     */\n    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {\n        if (!this.#worker) {\n            this.#worker = classWorkerURL ?\n                new Worker(new URL(classWorkerURL, \"file:///C:/Users/sanjo/Documents/match%20cut/node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js\"), {\n                    type: \"module\",\n                }) :\n                // We need to duplicated the code here to enable webpack\n                // to bundle worekr.js here.\n                new Worker(__webpack_require__.tu(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(\"_app-pages-browser_node_modules_ffmpeg_ffmpeg_dist_esm_worker_js\"), __webpack_require__.b)), {\n                    type: undefined,\n                });\n            this.#registerHandlers();\n        }\n        return this.#send({\n            type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LOAD,\n            data: config,\n        }, undefined, signal);\n    };\n    /**\n     * Execute ffmpeg command.\n     *\n     * @remarks\n     * To avoid common I/O issues, [\"-nostdin\", \"-y\"] are prepended to the args\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // ffmpeg -i video.avi video.mp4\n     * await ffmpeg.exec([\"-i\", \"video.avi\", \"video.mp4\"]);\n     * const data = ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    exec = (\n    /** ffmpeg command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.EXEC,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Execute ffprobe command.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // Getting duration of a video in seconds: ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 video.avi -o output.txt\n     * await ffmpeg.ffprobe([\"-v\", \"error\", \"-show_entries\", \"format=duration\", \"-of\", \"default=noprint_wrappers=1:nokey=1\", \"video.avi\", \"-o\", \"output.txt\"]);\n     * const data = ffmpeg.readFile(\"output.txt\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    ffprobe = (\n    /** ffprobe command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.FFPROBE,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Terminate all ongoing API calls and terminate web worker.\n     * `FFmpeg.load()` must be called again before calling any other APIs.\n     *\n     * @category FFmpeg\n     */\n    terminate = () => {\n        const ids = Object.keys(this.#rejects);\n        // rejects all incomplete Promises.\n        for (const id of ids) {\n            this.#rejects[id](_errors_js__WEBPACK_IMPORTED_MODULE_2__.ERROR_TERMINATED);\n            delete this.#rejects[id];\n            delete this.#resolves[id];\n        }\n        if (this.#worker) {\n            this.#worker.terminate();\n            this.#worker = null;\n            this.loaded = false;\n        }\n    };\n    /**\n     * Write data to ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", await fetchFile(\"../video.avi\"));\n     * await ffmpeg.writeFile(\"text.txt\", \"hello world\");\n     * ```\n     *\n     * @category File System\n     */\n    writeFile = (path, data, { signal } = {}) => {\n        const trans = [];\n        if (data instanceof Uint8Array) {\n            trans.push(data.buffer);\n        }\n        return this.#send({\n            type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.WRITE_FILE,\n            data: { path, data },\n        }, trans, signal);\n    };\n    mount = (fsType, options, mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.MOUNT,\n            data: { fsType, options, mountPoint },\n        }, trans);\n    };\n    unmount = (mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.UNMOUNT,\n            data: { mountPoint },\n        }, trans);\n    };\n    /**\n     * Read data from ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * const data = await ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @category File System\n     */\n    readFile = (path, \n    /**\n     * File content encoding, supports two encodings:\n     * - utf8: read file as text file, return data in string type.\n     * - binary: read file as binary file, return data in Uint8Array type.\n     *\n     * @defaultValue binary\n     */\n    encoding = \"binary\", { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.READ_FILE,\n        data: { path, encoding },\n    }, undefined, signal);\n    /**\n     * Delete a file.\n     *\n     * @category File System\n     */\n    deleteFile = (path, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.DELETE_FILE,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Rename a file or directory.\n     *\n     * @category File System\n     */\n    rename = (oldPath, newPath, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.RENAME,\n        data: { oldPath, newPath },\n    }, undefined, signal);\n    /**\n     * Create a directory.\n     *\n     * @category File System\n     */\n    createDir = (path, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.CREATE_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * List directory contents.\n     *\n     * @category File System\n     */\n    listDir = (path, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.LIST_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Delete an empty directory.\n     *\n     * @category File System\n     */\n    deleteDir = (path, { signal } = {}) => this.#send({\n        type: _const_js__WEBPACK_IMPORTED_MODULE_0__.FFMessageType.DELETE_DIR,\n        data: { path },\n    }, undefined, signal);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_URL: function() { return /* binding */ CORE_URL; },\n/* harmony export */   CORE_VERSION: function() { return /* binding */ CORE_VERSION; },\n/* harmony export */   FFMessageType: function() { return /* binding */ FFMessageType; },\n/* harmony export */   MIME_TYPE_JAVASCRIPT: function() { return /* binding */ MIME_TYPE_JAVASCRIPT; },\n/* harmony export */   MIME_TYPE_WASM: function() { return /* binding */ MIME_TYPE_WASM; }\n/* harmony export */ });\nconst MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nconst MIME_TYPE_WASM = \"application/wasm\";\nconst CORE_VERSION = \"0.12.9\";\nconst CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nvar FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"FFPROBE\"] = \"FFPROBE\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS9jb25zdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFPO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxhQUFhO0FBQ2hFO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS9jb25zdC5qcz81NzM1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBNSU1FX1RZUEVfSkFWQVNDUklQVCA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG5leHBvcnQgY29uc3QgTUlNRV9UWVBFX1dBU00gPSBcImFwcGxpY2F0aW9uL3dhc21cIjtcbmV4cG9ydCBjb25zdCBDT1JFX1ZFUlNJT04gPSBcIjAuMTIuOVwiO1xuZXhwb3J0IGNvbnN0IENPUkVfVVJMID0gYGh0dHBzOi8vdW5wa2cuY29tL0BmZm1wZWcvY29yZUAke0NPUkVfVkVSU0lPTn0vZGlzdC91bWQvZmZtcGVnLWNvcmUuanNgO1xuZXhwb3J0IHZhciBGRk1lc3NhZ2VUeXBlO1xuKGZ1bmN0aW9uIChGRk1lc3NhZ2VUeXBlKSB7XG4gICAgRkZNZXNzYWdlVHlwZVtcIkxPQURcIl0gPSBcIkxPQURcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiRVhFQ1wiXSA9IFwiRVhFQ1wiO1xuICAgIEZGTWVzc2FnZVR5cGVbXCJGRlBST0JFXCJdID0gXCJGRlBST0JFXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIldSSVRFX0ZJTEVcIl0gPSBcIldSSVRFX0ZJTEVcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiUkVBRF9GSUxFXCJdID0gXCJSRUFEX0ZJTEVcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiREVMRVRFX0ZJTEVcIl0gPSBcIkRFTEVURV9GSUxFXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIlJFTkFNRVwiXSA9IFwiUkVOQU1FXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIkNSRUFURV9ESVJcIl0gPSBcIkNSRUFURV9ESVJcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiTElTVF9ESVJcIl0gPSBcIkxJU1RfRElSXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIkRFTEVURV9ESVJcIl0gPSBcIkRFTEVURV9ESVJcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiRVJST1JcIl0gPSBcIkVSUk9SXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIkRPV05MT0FEXCJdID0gXCJET1dOTE9BRFwiO1xuICAgIEZGTWVzc2FnZVR5cGVbXCJQUk9HUkVTU1wiXSA9IFwiUFJPR1JFU1NcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiTE9HXCJdID0gXCJMT0dcIjtcbiAgICBGRk1lc3NhZ2VUeXBlW1wiTU9VTlRcIl0gPSBcIk1PVU5UXCI7XG4gICAgRkZNZXNzYWdlVHlwZVtcIlVOTU9VTlRcIl0gPSBcIlVOTU9VTlRcIjtcbn0pKEZGTWVzc2FnZVR5cGUgfHwgKEZGTWVzc2FnZVR5cGUgPSB7fSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js":
/*!********************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_IMPORT_FAILURE: function() { return /* binding */ ERROR_IMPORT_FAILURE; },\n/* harmony export */   ERROR_NOT_LOADED: function() { return /* binding */ ERROR_NOT_LOADED; },\n/* harmony export */   ERROR_TERMINATED: function() { return /* binding */ ERROR_TERMINATED; },\n/* harmony export */   ERROR_UNKNOWN_MESSAGE_TYPE: function() { return /* binding */ ERROR_UNKNOWN_MESSAGE_TYPE; }\n/* harmony export */ });\nconst ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nconst ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nconst ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nconst ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS9lcnJvcnMuanM/ZDNjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRVJST1JfVU5LTk9XTl9NRVNTQUdFX1RZUEUgPSBuZXcgRXJyb3IoXCJ1bmtub3duIG1lc3NhZ2UgdHlwZVwiKTtcbmV4cG9ydCBjb25zdCBFUlJPUl9OT1RfTE9BREVEID0gbmV3IEVycm9yKFwiZmZtcGVnIGlzIG5vdCBsb2FkZWQsIGNhbGwgYGF3YWl0IGZmbXBlZy5sb2FkKClgIGZpcnN0XCIpO1xuZXhwb3J0IGNvbnN0IEVSUk9SX1RFUk1JTkFURUQgPSBuZXcgRXJyb3IoXCJjYWxsZWQgRkZtcGVnLnRlcm1pbmF0ZSgpXCIpO1xuZXhwb3J0IGNvbnN0IEVSUk9SX0lNUE9SVF9GQUlMVVJFID0gbmV3IEVycm9yKFwiZmFpbGVkIHRvIGltcG9ydCBmZm1wZWctY29yZS5qc1wiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FFFSType: function() { return /* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_1__.FFFSType; },\n/* harmony export */   FFmpeg: function() { return /* reexport safe */ _classes_js__WEBPACK_IMPORTED_MODULE_0__.FFmpeg; }\n/* harmony export */ });\n/* harmony import */ var _classes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes.js */ \"(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ \"(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/types.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BmZm1wZWcvZmZtcGVnL2Rpc3QvZXNtL2luZGV4LmpzP2FjNTUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY2xhc3Nlcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXMuanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/types.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/types.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FFFSType: function() { return /* binding */ FFFSType; }\n/* harmony export */ });\nvar FFFSType;\n(function (FFFSType) {\n    FFFSType[\"MEMFS\"] = \"MEMFS\";\n    FFFSType[\"NODEFS\"] = \"NODEFS\";\n    FFFSType[\"NODERAWFS\"] = \"NODERAWFS\";\n    FFFSType[\"IDBFS\"] = \"IDBFS\";\n    FFFSType[\"WORKERFS\"] = \"WORKERFS\";\n    FFFSType[\"PROXYFS\"] = \"PROXYFS\";\n})(FFFSType || (FFFSType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNEJBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS90eXBlcy5qcz83YTcyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgRkZGU1R5cGU7XG4oZnVuY3Rpb24gKEZGRlNUeXBlKSB7XG4gICAgRkZGU1R5cGVbXCJNRU1GU1wiXSA9IFwiTUVNRlNcIjtcbiAgICBGRkZTVHlwZVtcIk5PREVGU1wiXSA9IFwiTk9ERUZTXCI7XG4gICAgRkZGU1R5cGVbXCJOT0RFUkFXRlNcIl0gPSBcIk5PREVSQVdGU1wiO1xuICAgIEZGRlNUeXBlW1wiSURCRlNcIl0gPSBcIklEQkZTXCI7XG4gICAgRkZGU1R5cGVbXCJXT1JLRVJGU1wiXSA9IFwiV09SS0VSRlNcIjtcbiAgICBGRkZTVHlwZVtcIlBST1hZRlNcIl0gPSBcIlBST1hZRlNcIjtcbn0pKEZGRlNUeXBlIHx8IChGRkZTVHlwZSA9IHt9KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMessageID: function() { return /* binding */ getMessageID; }\n/* harmony export */ });\n/**\n * Generate an unique message ID.\n */\nconst getMessageID = (() => {\n    let messageID = 0;\n    return () => messageID++;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvZGlzdC9lc20vdXRpbHMuanM/ZDJkOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlbmVyYXRlIGFuIHVuaXF1ZSBtZXNzYWdlIElELlxuICovXG5leHBvcnQgY29uc3QgZ2V0TWVzc2FnZUlEID0gKCgpID0+IHtcbiAgICBsZXQgbWVzc2FnZUlEID0gMDtcbiAgICByZXR1cm4gKCkgPT4gbWVzc2FnZUlEKys7XG59KSgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/createLucideIcon.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ createLucideIcon; },\n/* harmony export */   toKebabCase: function() { return /* binding */ toKebabCase; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _defaultAttributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultAttributes.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/defaultAttributes.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \n\nconst toKebabCase = (string)=>string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase().trim();\nconst createLucideIcon = (iconName, iconNode)=>{\n    const Component = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((param, ref)=>{\n        let { color = \"currentColor\", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = \"\", children, ...rest } = param;\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"svg\", {\n            ref,\n            ..._defaultAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n            width: size,\n            height: size,\n            stroke: color,\n            strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n            className: [\n                \"lucide\",\n                \"lucide-\".concat(toKebabCase(iconName)),\n                className\n            ].join(\" \"),\n            ...rest\n        }, [\n            ...iconNode.map((param)=>{\n                let [tag, attrs] = param;\n                return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(tag, attrs);\n            }),\n            ...Array.isArray(children) ? children : [\n                children\n            ]\n        ]);\n    });\n    Component.displayName = \"\".concat(iconName);\n    return Component;\n};\n //# sourceMappingURL=createLucideIcon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vY3JlYXRlTHVjaWRlSWNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUE2QmEsTUFBQUEsY0FBYyxDQUFDQyxTQUMxQkEsT0FDR0MsT0FBQSxDQUFRLHNCQUFzQixTQUM5QkMsV0FBWSxHQUNaQyxJQUFLO0FBRUosTUFBQUMsbUJBQW1CLENBQUNDLFVBQWtCQztJQUMxQyxNQUFNQywwQkFBWUMsaURBQVVBLENBQzFCLFFBQWlIQztZQUFoSCxFQUFFQyxRQUFRLGdCQUFnQkMsT0FBTyxFQUFJLEVBQUFDLGNBQWMsQ0FBRyxFQUFBQyxtQkFBQSxFQUFxQkMsWUFBWSxJQUFJQyxRQUFhLEtBQUFDLE1BQUE7NkJBQ3ZHQyxvREFBYUEsQ0FDWCxPQUNBO1lBQ0VSO1lBQ0EsR0FBR1MsNkRBQUE7WUFDSEMsT0FBT1I7WUFDUFMsUUFBUVQ7WUFDUlUsUUFBUVg7WUFDUkUsYUFBYUMsc0JBQXNCUyxPQUFPVixlQUFlLEtBQUtVLE9BQU9YLFFBQVFDO1lBQzdFRSxXQUFXO2dCQUFDO2dCQUFvQixVQUF5QixPQUF6QmYsWUFBWU07Z0JBQWFTO2FBQVcsQ0FBQVMsSUFBQSxDQUFLO1lBQ3pFLEdBQUdQLElBQUE7UUFDTCxHQUNBO2VBQ0tWLFNBQVNrQixHQUFBLENBQUk7b0JBQUMsQ0FBQ0MsS0FBS0MsTUFBVztxQ0FBQVQsb0RBQWFBLENBQUNRLEtBQUtDOztlQUNqREMsTUFBTUMsT0FBQSxDQUFRYixZQUFZQSxXQUFXO2dCQUFDQTthQUFRO1NBQ3BEOztJQUlOUixVQUFVc0IsV0FBQSxHQUFjLEdBQUcsT0FBQXhCO0lBRXBCLE9BQUFFO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL3NyYy9jcmVhdGVMdWNpZGVJY29uLnRzPzA0ODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZm9yd2FyZFJlZixcbiAgY3JlYXRlRWxlbWVudCxcbiAgUmVhY3RTVkcsXG4gIFNWR1Byb3BzLFxuICBGb3J3YXJkUmVmRXhvdGljQ29tcG9uZW50LFxuICBSZWZBdHRyaWJ1dGVzLFxufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVmYXVsdEF0dHJpYnV0ZXMgZnJvbSAnLi9kZWZhdWx0QXR0cmlidXRlcyc7XG5cbmV4cG9ydCB0eXBlIEljb25Ob2RlID0gW2VsZW1lbnROYW1lOiBrZXlvZiBSZWFjdFNWRywgYXR0cnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5dW107XG5cbmV4cG9ydCB0eXBlIFNWR0F0dHJpYnV0ZXMgPSBQYXJ0aWFsPFNWR1Byb3BzPFNWR1NWR0VsZW1lbnQ+PjtcbnR5cGUgQ29tcG9uZW50QXR0cmlidXRlcyA9IFJlZkF0dHJpYnV0ZXM8U1ZHU1ZHRWxlbWVudD4gJiBTVkdBdHRyaWJ1dGVzO1xuXG5leHBvcnQgaW50ZXJmYWNlIEx1Y2lkZVByb3BzIGV4dGVuZHMgQ29tcG9uZW50QXR0cmlidXRlcyB7XG4gIHNpemU/OiBzdHJpbmcgfCBudW1iZXI7XG4gIGFic29sdXRlU3Ryb2tlV2lkdGg/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBMdWNpZGVJY29uID0gRm9yd2FyZFJlZkV4b3RpY0NvbXBvbmVudDxMdWNpZGVQcm9wcz47XG4vKipcbiAqIENvbnZlcnRzIHN0cmluZyB0byBLZWJhYkNhc2VcbiAqIENvcGllZCBmcm9tIHNjcmlwdHMvaGVscGVyLiBJZiBhbnlvbmUga25vd3MgaG93IHRvIHByb3Blcmx5IGltcG9ydCBpdCBoZXJlXG4gKiB0aGVuIHBsZWFzZSBmaXggaXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gQSBrZWJhYml6ZWQgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCB0b0tlYmFiQ2FzZSA9IChzdHJpbmc6IHN0cmluZykgPT5cbiAgc3RyaW5nXG4gICAgLnJlcGxhY2UoLyhbYS16MC05XSkoW0EtWl0pL2csICckMS0kMicpXG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAudHJpbSgpO1xuXG5jb25zdCBjcmVhdGVMdWNpZGVJY29uID0gKGljb25OYW1lOiBzdHJpbmcsIGljb25Ob2RlOiBJY29uTm9kZSk6IEx1Y2lkZUljb24gPT4ge1xuICBjb25zdCBDb21wb25lbnQgPSBmb3J3YXJkUmVmPFNWR1NWR0VsZW1lbnQsIEx1Y2lkZVByb3BzPihcbiAgICAoeyBjb2xvciA9ICdjdXJyZW50Q29sb3InLCBzaXplID0gMjQsIHN0cm9rZVdpZHRoID0gMiwgYWJzb2x1dGVTdHJva2VXaWR0aCwgY2xhc3NOYW1lID0gJycsIGNoaWxkcmVuLCAuLi5yZXN0IH0sIHJlZikgPT5cbiAgICAgIGNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzdmcnLFxuICAgICAgICB7XG4gICAgICAgICAgcmVmLFxuICAgICAgICAgIC4uLmRlZmF1bHRBdHRyaWJ1dGVzLFxuICAgICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgICBzdHJva2U6IGNvbG9yLFxuICAgICAgICAgIHN0cm9rZVdpZHRoOiBhYnNvbHV0ZVN0cm9rZVdpZHRoID8gTnVtYmVyKHN0cm9rZVdpZHRoKSAqIDI0IC8gTnVtYmVyKHNpemUpIDogc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgY2xhc3NOYW1lOiBbJ2x1Y2lkZScsIGBsdWNpZGUtJHt0b0tlYmFiQ2FzZShpY29uTmFtZSl9YCwgY2xhc3NOYW1lXS5qb2luKCcgJyksXG4gICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIC4uLmljb25Ob2RlLm1hcCgoW3RhZywgYXR0cnNdKSA9PiBjcmVhdGVFbGVtZW50KHRhZywgYXR0cnMpKSxcbiAgICAgICAgICAuLi4oQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbiA6IFtjaGlsZHJlbl0pLFxuICAgICAgICBdXG4gICAgICApXG4gICk7XG5cbiAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gYCR7aWNvbk5hbWV9YDtcblxuICByZXR1cm4gQ29tcG9uZW50O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTHVjaWRlSWNvbjtcbiJdLCJuYW1lcyI6WyJ0b0tlYmFiQ2FzZSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInRyaW0iLCJjcmVhdGVMdWNpZGVJY29uIiwiaWNvbk5hbWUiLCJpY29uTm9kZSIsIkNvbXBvbmVudCIsImZvcndhcmRSZWYiLCJyZWYiLCJjb2xvciIsInNpemUiLCJzdHJva2VXaWR0aCIsImFic29sdXRlU3Ryb2tlV2lkdGgiLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsInJlc3QiLCJjcmVhdGVFbGVtZW50IiwiZGVmYXVsdEF0dHJpYnV0ZXMiLCJ3aWR0aCIsImhlaWdodCIsInN0cm9rZSIsIk51bWJlciIsImpvaW4iLCJtYXAiLCJ0YWciLCJhdHRycyIsIkFycmF5IiwiaXNBcnJheSIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/defaultAttributes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/defaultAttributes.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ defaultAttributes; }\n/* harmony export */ });\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ var defaultAttributes = {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n};\n //# sourceMappingURL=defaultAttributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vZGVmYXVsdEF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0lBQUEsSUFBZUEsb0JBQUE7SUFDYkMsT0FBTztJQUNQQyxPQUFPO0lBQ1BDLFFBQVE7SUFDUkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLFFBQVE7SUFDUkMsYUFBYTtJQUNiQyxlQUFlO0lBQ2ZDLGdCQUFnQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vc3JjL2RlZmF1bHRBdHRyaWJ1dGVzLnRzPzM3MGMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICB4bWxuczogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgd2lkdGg6IDI0LFxuICBoZWlnaHQ6IDI0LFxuICB2aWV3Qm94OiAnMCAwIDI0IDI0JyxcbiAgZmlsbDogJ25vbmUnLFxuICBzdHJva2U6ICdjdXJyZW50Q29sb3InLFxuICBzdHJva2VXaWR0aDogMixcbiAgc3Ryb2tlTGluZWNhcDogJ3JvdW5kJyxcbiAgc3Ryb2tlTGluZWpvaW46ICdyb3VuZCcsXG59O1xuIl0sIm5hbWVzIjpbImRlZmF1bHRBdHRyaWJ1dGVzIiwieG1sbnMiLCJ3aWR0aCIsImhlaWdodCIsInZpZXdCb3giLCJmaWxsIiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlTGluZWpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/defaultAttributes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-down.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/arrow-down.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ArrowDown; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst ArrowDown = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ArrowDown\", [\n    [\n        \"path\",\n        {\n            d: \"M12 5v14\",\n            key: \"s699le\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m19 12-7 7-7-7\",\n            key: \"1idqje\"\n        }\n    ]\n]);\n //# sourceMappingURL=arrow-down.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYXJyb3ctZG93bi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWFNLE1BQUFBLFlBQVlDLGdFQUFnQkEsQ0FBQyxhQUFhO0lBQzlDO1FBQUM7UUFBUTtZQUFFQyxHQUFHO1lBQVlDLEtBQUs7UUFBQTtLQUFVO0lBQ3pDO1FBQUM7UUFBUTtZQUFFRCxHQUFHO1lBQWtCQyxLQUFLO1FBQUE7S0FBVTtDQUNoRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL2ljb25zL2Fycm93LWRvd24udHM/YmQ0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uJztcblxuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIEFycm93RG93blxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOTVRJZ05YWXhOQ0lnTHo0S0lDQThjR0YwYUNCa1BTSnRNVGtnTVRJdE55QTNMVGN0TnlJZ0x6NEtQQzl6ZG1jK0NnPT0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2Fycm93LWRvd25cbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBBcnJvd0Rvd24gPSBjcmVhdGVMdWNpZGVJY29uKCdBcnJvd0Rvd24nLCBbXG4gIFsncGF0aCcsIHsgZDogJ00xMiA1djE0Jywga2V5OiAnczY5OWxlJyB9XSxcbiAgWydwYXRoJywgeyBkOiAnbTE5IDEyLTcgNy03LTcnLCBrZXk6ICcxaWRxamUnIH1dLFxuXSk7XG5cbmV4cG9ydCBkZWZhdWx0IEFycm93RG93bjtcbiJdLCJuYW1lcyI6WyJBcnJvd0Rvd24iLCJjcmVhdGVMdWNpZGVJY29uIiwiZCIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-down.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-up.js":
/*!**************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/arrow-up.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ArrowUp; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst ArrowUp = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ArrowUp\", [\n    [\n        \"path\",\n        {\n            d: \"m5 12 7-7 7 7\",\n            key: \"hav0vg\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 19V5\",\n            key: \"x0mq9r\"\n        }\n    ]\n]);\n //# sourceMappingURL=arrow-up.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYXJyb3ctdXAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFhTSxNQUFBQSxVQUFVQyxnRUFBZ0JBLENBQUMsV0FBVztJQUMxQztRQUFDO1FBQVE7WUFBRUMsR0FBRztZQUFpQkMsS0FBSztRQUFBO0tBQVU7SUFDOUM7UUFBQztRQUFRO1lBQUVELEdBQUc7WUFBWUMsS0FBSztRQUFBO0tBQVU7Q0FDMUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL3NyYy9pY29ucy9hcnJvdy11cC50cz82M2Y2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24nO1xuXG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgQXJyb3dVcFxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0p0TlNBeE1pQTNMVGNnTnlBM0lpQXZQZ29nSUR4d1lYUm9JR1E5SWsweE1pQXhPVlkxSWlBdlBnbzhMM04yWno0SykgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvYXJyb3ctdXBcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBBcnJvd1VwID0gY3JlYXRlTHVjaWRlSWNvbignQXJyb3dVcCcsIFtcbiAgWydwYXRoJywgeyBkOiAnbTUgMTIgNy03IDcgNycsIGtleTogJ2hhdjB2ZycgfV0sXG4gIFsncGF0aCcsIHsgZDogJ00xMiAxOVY1Jywga2V5OiAneDBtcTlyJyB9XSxcbl0pO1xuXG5leHBvcnQgZGVmYXVsdCBBcnJvd1VwO1xuIl0sIm5hbWVzIjpbIkFycm93VXAiLCJjcmVhdGVMdWNpZGVJY29uIiwiZCIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-up.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/download.js":
/*!**************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/download.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Download; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Download = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Download\", [\n    [\n        \"path\",\n        {\n            d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\",\n            key: \"ih7n3h\"\n        }\n    ],\n    [\n        \"polyline\",\n        {\n            points: \"7 10 12 15 17 10\",\n            key: \"2ggqvy\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"12\",\n            x2: \"12\",\n            y1: \"15\",\n            y2: \"3\",\n            key: \"1vk2je\"\n        }\n    ]\n]);\n //# sourceMappingURL=download.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvZG93bmxvYWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFhTSxNQUFBQSxXQUFXQyxnRUFBZ0JBLENBQUMsWUFBWTtJQUM1QztRQUFDO1FBQVE7WUFBRUMsR0FBRztZQUE2Q0MsS0FBSztRQUFBO0tBQVU7SUFDMUU7UUFBQztRQUFZO1lBQUVDLFFBQVE7WUFBb0JELEtBQUs7UUFBQTtLQUFVO0lBQzFEO1FBQUM7UUFBUTtZQUFFRSxJQUFJO1lBQU1DLElBQUk7WUFBTUMsSUFBSTtZQUFNQyxJQUFJO1lBQUtMLEtBQUs7UUFBQTtLQUFVO0NBQ2xFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9zcmMvaWNvbnMvZG93bmxvYWQudHM/N2EzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uJztcblxuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIERvd25sb2FkXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSk5NakVnTVRWMk5HRXlJRElnTUNBd0lERXRNaUF5U0RWaE1pQXlJREFnTUNBeExUSXRNbll0TkNJZ0x6NEtJQ0E4Y0c5c2VXeHBibVVnY0c5cGJuUnpQU0kzSURFd0lERXlJREUxSURFM0lERXdJaUF2UGdvZ0lEeHNhVzVsSUhneFBTSXhNaUlnZURJOUlqRXlJaUI1TVQwaU1UVWlJSGt5UFNJeklpQXZQZ284TDNOMlp6NEspIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2Rvd25sb2FkXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtcmVhY3QgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0pTWC5FbGVtZW50fSBKU1ggRWxlbWVudFxuICpcbiAqL1xuY29uc3QgRG93bmxvYWQgPSBjcmVhdGVMdWNpZGVJY29uKCdEb3dubG9hZCcsIFtcbiAgWydwYXRoJywgeyBkOiAnTTIxIDE1djRhMiAyIDAgMCAxLTIgMkg1YTIgMiAwIDAgMS0yLTJ2LTQnLCBrZXk6ICdpaDduM2gnIH1dLFxuICBbJ3BvbHlsaW5lJywgeyBwb2ludHM6ICc3IDEwIDEyIDE1IDE3IDEwJywga2V5OiAnMmdncXZ5JyB9XSxcbiAgWydsaW5lJywgeyB4MTogJzEyJywgeDI6ICcxMicsIHkxOiAnMTUnLCB5MjogJzMnLCBrZXk6ICcxdmsyamUnIH1dLFxuXSk7XG5cbmV4cG9ydCBkZWZhdWx0IERvd25sb2FkO1xuIl0sIm5hbWVzIjpbIkRvd25sb2FkIiwiY3JlYXRlTHVjaWRlSWNvbiIsImQiLCJrZXkiLCJwb2ludHMiLCJ4MSIsIngyIiwieTEiLCJ5MiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/download.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/eye.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/eye.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Eye; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Eye = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Eye\", [\n    [\n        \"path\",\n        {\n            d: \"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\",\n            key: \"rwhkz3\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"3\",\n            key: \"1v7zrd\"\n        }\n    ]\n]);\n //# sourceMappingURL=eye.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvZXllLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBYU0sTUFBQUEsTUFBTUMsZ0VBQWdCQSxDQUFDLE9BQU87SUFDbEM7UUFBQztRQUFRO1lBQUVDLEdBQUc7WUFBZ0RDLEtBQUs7UUFBQTtLQUFVO0lBQzdFO1FBQUM7UUFBVTtZQUFFQyxJQUFJO1lBQU1DLElBQUk7WUFBTUMsR0FBRztZQUFLSCxLQUFLO1FBQUE7S0FBVTtDQUN6RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL2ljb25zL2V5ZS50cz84Y2I4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24nO1xuXG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgRXllXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSk5NaUF4TW5NekxUY2dNVEF0TnlBeE1DQTNJREV3SURjdE15QTNMVEV3SURjdE1UQXROeTB4TUMwM1dpSWdMejRLSUNBOFkybHlZMnhsSUdONFBTSXhNaUlnWTNrOUlqRXlJaUJ5UFNJeklpQXZQZ284TDNOMlp6NEspIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL2V5ZVxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXJlYWN0IC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtKU1guRWxlbWVudH0gSlNYIEVsZW1lbnRcbiAqXG4gKi9cbmNvbnN0IEV5ZSA9IGNyZWF0ZUx1Y2lkZUljb24oJ0V5ZScsIFtcbiAgWydwYXRoJywgeyBkOiAnTTIgMTJzMy03IDEwLTcgMTAgNyAxMCA3LTMgNy0xMCA3LTEwLTctMTAtN1onLCBrZXk6ICdyd2hrejMnIH1dLFxuICBbJ2NpcmNsZScsIHsgY3g6ICcxMicsIGN5OiAnMTInLCByOiAnMycsIGtleTogJzF2N3pyZCcgfV0sXG5dKTtcblxuZXhwb3J0IGRlZmF1bHQgRXllO1xuIl0sIm5hbWVzIjpbIkV5ZSIsImNyZWF0ZUx1Y2lkZUljb24iLCJkIiwia2V5IiwiY3giLCJjeSIsInIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/eye.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/github.js":
/*!************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/github.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Github; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Github = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Github\", [\n    [\n        \"path\",\n        {\n            d: \"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4\",\n            key: \"tonef\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M9 18c-4.51 2-5-2-7-2\",\n            key: \"9comsn\"\n        }\n    ]\n]);\n //# sourceMappingURL=github.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvZ2l0aHViLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBYU0sTUFBQUEsU0FBU0MsZ0VBQWdCQSxDQUFDLFVBQVU7SUFDeEM7UUFDRTtRQUNBO1lBQ0VDLEdBQUc7WUFDSEMsS0FBSztRQUNQO0tBQ0Y7SUFDQTtRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUF5QkMsS0FBSztRQUFBO0tBQVU7Q0FDdkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL3NyYy9pY29ucy9naXRodWIudHM/MjZiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uJztcblxuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIEdpdGh1YlxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOTVRVZ01qSjJMVFJoTkM0NElEUXVPQ0F3SURBZ01DMHhMVE11TldNeklEQWdOaTB5SURZdE5TNDFMakE0TFRFdU1qVXRMakkzTFRJdU5EZ3RNUzB6TGpVdU1qZ3RNUzR4TlM0eU9DMHlMak0xSURBdE15NDFJREFnTUMweElEQXRNeUF4TGpVdE1pNDJOQzB1TlMwMUxqTTJMUzQxTFRnZ01FTTJJRElnTlNBeUlEVWdNbU10TGpNZ01TNHhOUzB1TXlBeUxqTTFJREFnTXk0MVFUVXVOREF6SURVdU5EQXpJREFnTUNBd0lEUWdPV013SURNdU5TQXpJRFV1TlNBMklEVXVOUzB1TXprdU5Ea3RMalk0SURFdU1EVXRMamcxSURFdU5qVXRMakUzTGpZdExqSXlJREV1TWpNdExqRTFJREV1T0RWMk5DSWdMejRLSUNBOGNHRjBhQ0JrUFNKTk9TQXhPR010TkM0MU1TQXlMVFV0TWkwM0xUSWlJQzgrQ2p3dmMzWm5QZ289KSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9naXRodWJcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBHaXRodWIgPSBjcmVhdGVMdWNpZGVJY29uKCdHaXRodWInLCBbXG4gIFtcbiAgICAncGF0aCcsXG4gICAge1xuICAgICAgZDogJ00xNSAyMnYtNGE0LjggNC44IDAgMCAwLTEtMy41YzMgMCA2LTIgNi01LjUuMDgtMS4yNS0uMjctMi40OC0xLTMuNS4yOC0xLjE1LjI4LTIuMzUgMC0zLjUgMCAwLTEgMC0zIDEuNS0yLjY0LS41LTUuMzYtLjUtOCAwQzYgMiA1IDIgNSAyYy0uMyAxLjE1LS4zIDIuMzUgMCAzLjVBNS40MDMgNS40MDMgMCAwIDAgNCA5YzAgMy41IDMgNS41IDYgNS41LS4zOS40OS0uNjggMS4wNS0uODUgMS42NS0uMTcuNi0uMjIgMS4yMy0uMTUgMS44NXY0JyxcbiAgICAgIGtleTogJ3RvbmVmJyxcbiAgICB9LFxuICBdLFxuICBbJ3BhdGgnLCB7IGQ6ICdNOSAxOGMtNC41MSAyLTUtMi03LTInLCBrZXk6ICc5Y29tc24nIH1dLFxuXSk7XG5cbmV4cG9ydCBkZWZhdWx0IEdpdGh1YjtcbiJdLCJuYW1lcyI6WyJHaXRodWIiLCJjcmVhdGVMdWNpZGVJY29uIiwiZCIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/github.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/image.js":
/*!***********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/image.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Image; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Image = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Image\", [\n    [\n        \"rect\",\n        {\n            width: \"18\",\n            height: \"18\",\n            x: \"3\",\n            y: \"3\",\n            rx: \"2\",\n            ry: \"2\",\n            key: \"1m3agn\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"9\",\n            cy: \"9\",\n            r: \"2\",\n            key: \"af1f0g\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21\",\n            key: \"1xmnt7\"\n        }\n    ]\n]);\n //# sourceMappingURL=image.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvaW1hZ2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFhTSxNQUFBQSxRQUFRQyxnRUFBZ0JBLENBQUMsU0FBUztJQUN0QztRQUFDO1FBQVE7WUFBRUMsT0FBTztZQUFNQyxRQUFRO1lBQU1DLEdBQUc7WUFBS0MsR0FBRztZQUFLQyxJQUFJO1lBQUtDLElBQUk7WUFBS0MsS0FBSztRQUFBO0tBQVU7SUFDdkY7UUFBQztRQUFVO1lBQUVDLElBQUk7WUFBS0MsSUFBSTtZQUFLQyxHQUFHO1lBQUtILEtBQUs7UUFBQTtLQUFVO0lBQ3REO1FBQUM7UUFBUTtZQUFFSSxHQUFHO1lBQTZDSixLQUFLO1FBQUE7S0FBVTtDQUMzRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL2ljb25zL2ltYWdlLnRzP2UwZjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbic7XG5cbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBJbWFnZVxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y21WamRDQjNhV1IwYUQwaU1UZ2lJR2hsYVdkb2REMGlNVGdpSUhnOUlqTWlJSGs5SWpNaUlISjRQU0l5SWlCeWVUMGlNaUlnTHo0S0lDQThZMmx5WTJ4bElHTjRQU0k1SWlCamVUMGlPU0lnY2owaU1pSWdMejRLSUNBOGNHRjBhQ0JrUFNKdE1qRWdNVFV0TXk0d09EWXRNeTR3T0RaaE1pQXlJREFnTUNBd0xUSXVPREk0SURCTU5pQXlNU0lnTHo0S1BDOXpkbWMrQ2c9PSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvaW1hZ2VcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBJbWFnZSA9IGNyZWF0ZUx1Y2lkZUljb24oJ0ltYWdlJywgW1xuICBbJ3JlY3QnLCB7IHdpZHRoOiAnMTgnLCBoZWlnaHQ6ICcxOCcsIHg6ICczJywgeTogJzMnLCByeDogJzInLCByeTogJzInLCBrZXk6ICcxbTNhZ24nIH1dLFxuICBbJ2NpcmNsZScsIHsgY3g6ICc5JywgY3k6ICc5JywgcjogJzInLCBrZXk6ICdhZjFmMGcnIH1dLFxuICBbJ3BhdGgnLCB7IGQ6ICdtMjEgMTUtMy4wODYtMy4wODZhMiAyIDAgMCAwLTIuODI4IDBMNiAyMScsIGtleTogJzF4bW50NycgfV0sXG5dKTtcblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2U7XG4iXSwibmFtZXMiOlsiSW1hZ2UiLCJjcmVhdGVMdWNpZGVJY29uIiwid2lkdGgiLCJoZWlnaHQiLCJ4IiwieSIsInJ4IiwicnkiLCJrZXkiLCJjeCIsImN5IiwiciIsImQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/image.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/info.js":
/*!**********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/info.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Info; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Info = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Info\", [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            key: \"1mglay\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 16v-4\",\n            key: \"1dtifu\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 8h.01\",\n            key: \"e9boi3\"\n        }\n    ]\n]);\n //# sourceMappingURL=info.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvaW5mby5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWFNLE1BQUFBLE9BQU9DLGdFQUFnQkEsQ0FBQyxRQUFRO0lBQ3BDO1FBQUM7UUFBVTtZQUFFQyxJQUFJO1lBQU1DLElBQUk7WUFBTUMsR0FBRztZQUFNQyxLQUFLO1FBQUE7S0FBVTtJQUN6RDtRQUFDO1FBQVE7WUFBRUMsR0FBRztZQUFhRCxLQUFLO1FBQUE7S0FBVTtJQUMxQztRQUFDO1FBQVE7WUFBRUMsR0FBRztZQUFhRCxLQUFLO1FBQUE7S0FBVTtDQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL2ljb25zL2luZm8udHM/NTRiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uJztcblxuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIEluZm9cbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOFkybHlZMnhsSUdONFBTSXhNaUlnWTNrOUlqRXlJaUJ5UFNJeE1DSWdMejRLSUNBOGNHRjBhQ0JrUFNKTk1USWdNVFoyTFRRaUlDOCtDaUFnUEhCaGRHZ2daRDBpVFRFeUlEaG9MakF4SWlBdlBnbzhMM04yWno0SykgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvaW5mb1xuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXJlYWN0IC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtKU1guRWxlbWVudH0gSlNYIEVsZW1lbnRcbiAqXG4gKi9cbmNvbnN0IEluZm8gPSBjcmVhdGVMdWNpZGVJY29uKCdJbmZvJywgW1xuICBbJ2NpcmNsZScsIHsgY3g6ICcxMicsIGN5OiAnMTInLCByOiAnMTAnLCBrZXk6ICcxbWdsYXknIH1dLFxuICBbJ3BhdGgnLCB7IGQ6ICdNMTIgMTZ2LTQnLCBrZXk6ICcxZHRpZnUnIH1dLFxuICBbJ3BhdGgnLCB7IGQ6ICdNMTIgOGguMDEnLCBrZXk6ICdlOWJvaTMnIH1dLFxuXSk7XG5cbmV4cG9ydCBkZWZhdWx0IEluZm87XG4iXSwibmFtZXMiOlsiSW5mbyIsImNyZWF0ZUx1Y2lkZUljb24iLCJjeCIsImN5IiwiciIsImtleSIsImQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/info.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/pause.js":
/*!***********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/pause.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Pause; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Pause = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Pause\", [\n    [\n        \"rect\",\n        {\n            width: \"4\",\n            height: \"16\",\n            x: \"6\",\n            y: \"4\",\n            key: \"iffhe4\"\n        }\n    ],\n    [\n        \"rect\",\n        {\n            width: \"4\",\n            height: \"16\",\n            x: \"14\",\n            y: \"4\",\n            key: \"sjin7j\"\n        }\n    ]\n]);\n //# sourceMappingURL=pause.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvcGF1c2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFhTSxNQUFBQSxRQUFRQyxnRUFBZ0JBLENBQUMsU0FBUztJQUN0QztRQUFDO1FBQVE7WUFBRUMsT0FBTztZQUFLQyxRQUFRO1lBQU1DLEdBQUc7WUFBS0MsR0FBRztZQUFLQyxLQUFLO1FBQUE7S0FBVTtJQUNwRTtRQUFDO1FBQVE7WUFBRUosT0FBTztZQUFLQyxRQUFRO1lBQU1DLEdBQUc7WUFBTUMsR0FBRztZQUFLQyxLQUFLO1FBQUE7S0FBVTtDQUN0RSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL2ljb25zL3BhdXNlLnRzPzJmYmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbic7XG5cbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBQYXVzZVxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y21WamRDQjNhV1IwYUQwaU5DSWdhR1ZwWjJoMFBTSXhOaUlnZUQwaU5pSWdlVDBpTkNJZ0x6NEtJQ0E4Y21WamRDQjNhV1IwYUQwaU5DSWdhR1ZwWjJoMFBTSXhOaUlnZUQwaU1UUWlJSGs5SWpRaUlDOCtDand2YzNablBnbz0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL3BhdXNlXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtcmVhY3QgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0pTWC5FbGVtZW50fSBKU1ggRWxlbWVudFxuICpcbiAqL1xuY29uc3QgUGF1c2UgPSBjcmVhdGVMdWNpZGVJY29uKCdQYXVzZScsIFtcbiAgWydyZWN0JywgeyB3aWR0aDogJzQnLCBoZWlnaHQ6ICcxNicsIHg6ICc2JywgeTogJzQnLCBrZXk6ICdpZmZoZTQnIH1dLFxuICBbJ3JlY3QnLCB7IHdpZHRoOiAnNCcsIGhlaWdodDogJzE2JywgeDogJzE0JywgeTogJzQnLCBrZXk6ICdzamluN2onIH1dLFxuXSk7XG5cbmV4cG9ydCBkZWZhdWx0IFBhdXNlO1xuIl0sIm5hbWVzIjpbIlBhdXNlIiwiY3JlYXRlTHVjaWRlSWNvbiIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/pause.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/play.js":
/*!**********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/play.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Play; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Play = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Play\", [\n    [\n        \"polygon\",\n        {\n            points: \"5 3 19 12 5 21 5 3\",\n            key: \"191637\"\n        }\n    ]\n]);\n //# sourceMappingURL=play.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvcGxheS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWFNLE1BQUFBLE9BQU9DLGdFQUFnQkEsQ0FBQyxRQUFRO0lBQ3BDO1FBQUM7UUFBVztZQUFFQyxRQUFRO1lBQXNCQyxLQUFLO1FBQUE7S0FBVTtDQUM1RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL2ljb25zL3BsYXkudHM/OTE3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uJztcblxuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIFBsYXlcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHOXNlV2R2YmlCd2IybHVkSE05SWpVZ015QXhPU0F4TWlBMUlESXhJRFVnTXlJZ0x6NEtQQzl6ZG1jK0NnPT0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL3BsYXlcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBQbGF5ID0gY3JlYXRlTHVjaWRlSWNvbignUGxheScsIFtcbiAgWydwb2x5Z29uJywgeyBwb2ludHM6ICc1IDMgMTkgMTIgNSAyMSA1IDMnLCBrZXk6ICcxOTE2MzcnIH1dLFxuXSk7XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXk7XG4iXSwibmFtZXMiOlsiUGxheSIsImNyZWF0ZUx1Y2lkZUljb24iLCJwb2ludHMiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/play.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/rotate-ccw.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/rotate-ccw.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ RotateCcw; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst RotateCcw = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"RotateCcw\", [\n    [\n        \"path\",\n        {\n            d: \"M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8\",\n            key: \"1357e3\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M3 3v5h5\",\n            key: \"1xhq8a\"\n        }\n    ]\n]);\n //# sourceMappingURL=rotate-ccw.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvcm90YXRlLWNjdy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWFNLE1BQUFBLFlBQVlDLGdFQUFnQkEsQ0FBQyxhQUFhO0lBQzlDO1FBQUM7UUFBUTtZQUFFQyxHQUFHO1lBQXFEQyxLQUFLO1FBQUE7S0FBVTtJQUNsRjtRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUFZQyxLQUFLO1FBQUE7S0FBVTtDQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL2ljb25zL3JvdGF0ZS1jY3cudHM/ODNkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uJztcblxuLyoqXG4gKiBAY29tcG9uZW50IEBuYW1lIFJvdGF0ZUNjd1xuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOTXlBeE1tRTVJRGtnTUNBeElEQWdPUzA1SURrdU56VWdPUzQzTlNBd0lEQWdNQzAyTGpjMElESXVOelJNTXlBNElpQXZQZ29nSUR4d1lYUm9JR1E5SWsweklETjJOV2cxSWlBdlBnbzhMM04yWno0SykgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvcm90YXRlLWNjd1xuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXJlYWN0IC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtKU1guRWxlbWVudH0gSlNYIEVsZW1lbnRcbiAqXG4gKi9cbmNvbnN0IFJvdGF0ZUNjdyA9IGNyZWF0ZUx1Y2lkZUljb24oJ1JvdGF0ZUNjdycsIFtcbiAgWydwYXRoJywgeyBkOiAnTTMgMTJhOSA5IDAgMSAwIDktOSA5Ljc1IDkuNzUgMCAwIDAtNi43NCAyLjc0TDMgOCcsIGtleTogJzEzNTdlMycgfV0sXG4gIFsncGF0aCcsIHsgZDogJ00zIDN2NWg1Jywga2V5OiAnMXhocThhJyB9XSxcbl0pO1xuXG5leHBvcnQgZGVmYXVsdCBSb3RhdGVDY3c7XG4iXSwibmFtZXMiOlsiUm90YXRlQ2N3IiwiY3JlYXRlTHVjaWRlSWNvbiIsImQiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/rotate-ccw.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/settings.js":
/*!**************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/settings.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Settings; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Settings = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Settings\", [\n    [\n        \"path\",\n        {\n            d: \"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\",\n            key: \"1qme2f\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"3\",\n            key: \"1v7zrd\"\n        }\n    ]\n]);\n //# sourceMappingURL=settings.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvc2V0dGluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFhTSxNQUFBQSxXQUFXQyxnRUFBZ0JBLENBQUMsWUFBWTtJQUM1QztRQUNFO1FBQ0E7WUFDRUMsR0FBRztZQUNIQyxLQUFLO1FBQ1A7S0FDRjtJQUNBO1FBQUM7UUFBVTtZQUFFQyxJQUFJO1lBQU1DLElBQUk7WUFBTUMsR0FBRztZQUFLSCxLQUFLO1FBQUE7S0FBVTtDQUN6RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL2ljb25zL3NldHRpbmdzLnRzP2E4NGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbic7XG5cbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBTZXR0aW5nc1xuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOTVRJdU1qSWdNbWd0TGpRMFlUSWdNaUF3SURBZ01DMHlJREoyTGpFNFlUSWdNaUF3SURBZ01TMHhJREV1TnpOc0xTNDBNeTR5TldFeUlESWdNQ0F3SURFdE1pQXdiQzB1TVRVdExqQTRZVElnTWlBd0lEQWdNQzB5TGpjekxqY3piQzB1TWpJdU16aGhNaUF5SURBZ01DQXdJQzQzTXlBeUxqY3piQzR4TlM0eFlUSWdNaUF3SURBZ01TQXhJREV1TnpKMkxqVXhZVElnTWlBd0lEQWdNUzB4SURFdU56UnNMUzR4TlM0d09XRXlJRElnTUNBd0lEQXRMamN6SURJdU56TnNMakl5TGpNNFlUSWdNaUF3SURBZ01DQXlMamN6TGpjemJDNHhOUzB1TURoaE1pQXlJREFnTUNBeElESWdNR3d1TkRNdU1qVmhNaUF5SURBZ01DQXhJREVnTVM0M00xWXlNR0V5SURJZ01DQXdJREFnTWlBeWFDNDBOR0V5SURJZ01DQXdJREFnTWkweWRpMHVNVGhoTWlBeUlEQWdNQ0F4SURFdE1TNDNNMnd1TkRNdExqSTFZVElnTWlBd0lEQWdNU0F5SURCc0xqRTFMakE0WVRJZ01pQXdJREFnTUNBeUxqY3pMUzQzTTJ3dU1qSXRMak01WVRJZ01pQXdJREFnTUMwdU56TXRNaTQzTTJ3dExqRTFMUzR3T0dFeUlESWdNQ0F3SURFdE1TMHhMamMwZGkwdU5XRXlJRElnTUNBd0lERWdNUzB4TGpjMGJDNHhOUzB1TURsaE1pQXlJREFnTUNBd0lDNDNNeTB5TGpjemJDMHVNakl0TGpNNFlUSWdNaUF3SURBZ01DMHlMamN6TFM0M00yd3RMakUxTGpBNFlUSWdNaUF3SURBZ01TMHlJREJzTFM0ME15MHVNalZoTWlBeUlEQWdNQ0F4TFRFdE1TNDNNMVkwWVRJZ01pQXdJREFnTUMweUxUSjZJaUF2UGdvZ0lEeGphWEpqYkdVZ1kzZzlJakV5SWlCamVUMGlNVElpSUhJOUlqTWlJQzgrQ2p3dmMzWm5QZ289KSAtIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy9zZXR0aW5nc1xuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXJlYWN0IC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtKU1guRWxlbWVudH0gSlNYIEVsZW1lbnRcbiAqXG4gKi9cbmNvbnN0IFNldHRpbmdzID0gY3JlYXRlTHVjaWRlSWNvbignU2V0dGluZ3MnLCBbXG4gIFtcbiAgICAncGF0aCcsXG4gICAge1xuICAgICAgZDogJ00xMi4yMiAyaC0uNDRhMiAyIDAgMCAwLTIgMnYuMThhMiAyIDAgMCAxLTEgMS43M2wtLjQzLjI1YTIgMiAwIDAgMS0yIDBsLS4xNS0uMDhhMiAyIDAgMCAwLTIuNzMuNzNsLS4yMi4zOGEyIDIgMCAwIDAgLjczIDIuNzNsLjE1LjFhMiAyIDAgMCAxIDEgMS43MnYuNTFhMiAyIDAgMCAxLTEgMS43NGwtLjE1LjA5YTIgMiAwIDAgMC0uNzMgMi43M2wuMjIuMzhhMiAyIDAgMCAwIDIuNzMuNzNsLjE1LS4wOGEyIDIgMCAwIDEgMiAwbC40My4yNWEyIDIgMCAwIDEgMSAxLjczVjIwYTIgMiAwIDAgMCAyIDJoLjQ0YTIgMiAwIDAgMCAyLTJ2LS4xOGEyIDIgMCAwIDEgMS0xLjczbC40My0uMjVhMiAyIDAgMCAxIDIgMGwuMTUuMDhhMiAyIDAgMCAwIDIuNzMtLjczbC4yMi0uMzlhMiAyIDAgMCAwLS43My0yLjczbC0uMTUtLjA4YTIgMiAwIDAgMS0xLTEuNzR2LS41YTIgMiAwIDAgMSAxLTEuNzRsLjE1LS4wOWEyIDIgMCAwIDAgLjczLTIuNzNsLS4yMi0uMzhhMiAyIDAgMCAwLTIuNzMtLjczbC0uMTUuMDhhMiAyIDAgMCAxLTIgMGwtLjQzLS4yNWEyIDIgMCAwIDEtMS0xLjczVjRhMiAyIDAgMCAwLTItMnonLFxuICAgICAga2V5OiAnMXFtZTJmJyxcbiAgICB9LFxuICBdLFxuICBbJ2NpcmNsZScsIHsgY3g6ICcxMicsIGN5OiAnMTInLCByOiAnMycsIGtleTogJzF2N3pyZCcgfV0sXG5dKTtcblxuZXhwb3J0IGRlZmF1bHQgU2V0dGluZ3M7XG4iXSwibmFtZXMiOlsiU2V0dGluZ3MiLCJjcmVhdGVMdWNpZGVJY29uIiwiZCIsImtleSIsImN4IiwiY3kiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/settings.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/upload.js":
/*!************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/upload.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Upload; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Upload = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Upload\", [\n    [\n        \"path\",\n        {\n            d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\",\n            key: \"ih7n3h\"\n        }\n    ],\n    [\n        \"polyline\",\n        {\n            points: \"17 8 12 3 7 8\",\n            key: \"t8dd8p\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"12\",\n            x2: \"12\",\n            y1: \"3\",\n            y2: \"15\",\n            key: \"widbto\"\n        }\n    ]\n]);\n //# sourceMappingURL=upload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvdXBsb2FkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBYU0sTUFBQUEsU0FBU0MsZ0VBQWdCQSxDQUFDLFVBQVU7SUFDeEM7UUFBQztRQUFRO1lBQUVDLEdBQUc7WUFBNkNDLEtBQUs7UUFBQTtLQUFVO0lBQzFFO1FBQUM7UUFBWTtZQUFFQyxRQUFRO1lBQWlCRCxLQUFLO1FBQUE7S0FBVTtJQUN2RDtRQUFDO1FBQVE7WUFBRUUsSUFBSTtZQUFNQyxJQUFJO1lBQU1DLElBQUk7WUFBS0MsSUFBSTtZQUFNTCxLQUFLO1FBQUE7S0FBVTtDQUNsRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL2ljb25zL3VwbG9hZC50cz81MzUwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24nO1xuXG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgVXBsb2FkXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjR0YwYUNCa1BTSk5NakVnTVRWMk5HRXlJRElnTUNBd0lERXRNaUF5U0RWaE1pQXlJREFnTUNBeExUSXRNbll0TkNJZ0x6NEtJQ0E4Y0c5c2VXeHBibVVnY0c5cGJuUnpQU0l4TnlBNElERXlJRE1nTnlBNElpQXZQZ29nSUR4c2FXNWxJSGd4UFNJeE1pSWdlREk5SWpFeUlpQjVNVDBpTXlJZ2VUSTlJakUxSWlBdlBnbzhMM04yWno0SykgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvdXBsb2FkXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtcmVhY3QgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0pTWC5FbGVtZW50fSBKU1ggRWxlbWVudFxuICpcbiAqL1xuY29uc3QgVXBsb2FkID0gY3JlYXRlTHVjaWRlSWNvbignVXBsb2FkJywgW1xuICBbJ3BhdGgnLCB7IGQ6ICdNMjEgMTV2NGEyIDIgMCAwIDEtMiAySDVhMiAyIDAgMCAxLTItMnYtNCcsIGtleTogJ2loN24zaCcgfV0sXG4gIFsncG9seWxpbmUnLCB7IHBvaW50czogJzE3IDggMTIgMyA3IDgnLCBrZXk6ICd0OGRkOHAnIH1dLFxuICBbJ2xpbmUnLCB7IHgxOiAnMTInLCB4MjogJzEyJywgeTE6ICczJywgeTI6ICcxNScsIGtleTogJ3dpZGJ0bycgfV0sXG5dKTtcblxuZXhwb3J0IGRlZmF1bHQgVXBsb2FkO1xuIl0sIm5hbWVzIjpbIlVwbG9hZCIsImNyZWF0ZUx1Y2lkZUljb24iLCJkIiwia2V5IiwicG9pbnRzIiwieDEiLCJ4MiIsInkxIiwieTIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/upload.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/volume-2.js":
/*!**************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/volume-2.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Volume2; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Volume2 = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Volume2\", [\n    [\n        \"polygon\",\n        {\n            points: \"11 5 6 9 2 9 2 15 6 15 11 19 11 5\",\n            key: \"16drj5\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M15.54 8.46a5 5 0 0 1 0 7.07\",\n            key: \"ltjumu\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M19.07 4.93a10 10 0 0 1 0 14.14\",\n            key: \"1kegas\"\n        }\n    ]\n]);\n //# sourceMappingURL=volume-2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvdm9sdW1lLTIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFhTSxNQUFBQSxVQUFVQyxnRUFBZ0JBLENBQUMsV0FBVztJQUMxQztRQUFDO1FBQVc7WUFBRUMsUUFBUTtZQUFxQ0MsS0FBSztRQUFBO0tBQVU7SUFDMUU7UUFBQztRQUFRO1lBQUVDLEdBQUc7WUFBZ0NELEtBQUs7UUFBQTtLQUFVO0lBQzdEO1FBQUM7UUFBUTtZQUFFQyxHQUFHO1lBQW1DRCxLQUFLO1FBQUE7S0FBVTtDQUNqRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL2ljb25zL3ZvbHVtZS0yLnRzPzEyOWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbic7XG5cbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBWb2x1bWUyXG4gKiBAZGVzY3JpcHRpb24gTHVjaWRlIFNWRyBpY29uIGNvbXBvbmVudCwgcmVuZGVycyBTVkcgRWxlbWVudCB3aXRoIGNoaWxkcmVuLlxuICpcbiAqIEBwcmV2aWV3ICFbaW1nXShkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUFnZUcxc2JuTTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5JZ29nSUhkcFpIUm9QU0l5TkNJS0lDQm9aV2xuYUhROUlqSTBJZ29nSUhacFpYZENiM2c5SWpBZ01DQXlOQ0F5TkNJS0lDQm1hV3hzUFNKdWIyNWxJZ29nSUhOMGNtOXJaVDBpSXpBd01DSWdjM1I1YkdVOUltSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTm1abVk3SUdKdmNtUmxjaTF5WVdScGRYTTZJREp3ZUNJS0lDQnpkSEp2YTJVdGQybGtkR2c5SWpJaUNpQWdjM1J5YjJ0bExXeHBibVZqWVhBOUluSnZkVzVrSWdvZ0lITjBjbTlyWlMxc2FXNWxhbTlwYmowaWNtOTFibVFpQ2o0S0lDQThjRzlzZVdkdmJpQndiMmx1ZEhNOUlqRXhJRFVnTmlBNUlESWdPU0F5SURFMUlEWWdNVFVnTVRFZ01Ua2dNVEVnTlNJZ0x6NEtJQ0E4Y0dGMGFDQmtQU0pOTVRVdU5UUWdPQzQwTm1FMUlEVWdNQ0F3SURFZ01DQTNMakEzSWlBdlBnb2dJRHh3WVhSb0lHUTlJazB4T1M0d055QTBMamt6WVRFd0lERXdJREFnTUNBeElEQWdNVFF1TVRRaUlDOCtDand2YzNablBnbz0pIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL3ZvbHVtZS0yXG4gKiBAc2VlIGh0dHBzOi8vbHVjaWRlLmRldi9ndWlkZS9wYWNrYWdlcy9sdWNpZGUtcmVhY3QgLSBEb2N1bWVudGF0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gTHVjaWRlIGljb25zIHByb3BzIGFuZCBhbnkgdmFsaWQgU1ZHIGF0dHJpYnV0ZVxuICogQHJldHVybnMge0pTWC5FbGVtZW50fSBKU1ggRWxlbWVudFxuICpcbiAqL1xuY29uc3QgVm9sdW1lMiA9IGNyZWF0ZUx1Y2lkZUljb24oJ1ZvbHVtZTInLCBbXG4gIFsncG9seWdvbicsIHsgcG9pbnRzOiAnMTEgNSA2IDkgMiA5IDIgMTUgNiAxNSAxMSAxOSAxMSA1Jywga2V5OiAnMTZkcmo1JyB9XSxcbiAgWydwYXRoJywgeyBkOiAnTTE1LjU0IDguNDZhNSA1IDAgMCAxIDAgNy4wNycsIGtleTogJ2x0anVtdScgfV0sXG4gIFsncGF0aCcsIHsgZDogJ00xOS4wNyA0LjkzYTEwIDEwIDAgMCAxIDAgMTQuMTQnLCBrZXk6ICcxa2VnYXMnIH1dLFxuXSk7XG5cbmV4cG9ydCBkZWZhdWx0IFZvbHVtZTI7XG4iXSwibmFtZXMiOlsiVm9sdW1lMiIsImNyZWF0ZUx1Y2lkZUljb24iLCJwb2ludHMiLCJrZXkiLCJkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/volume-2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/volume-x.js":
/*!**************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/volume-x.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ VolumeX; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst VolumeX = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"VolumeX\", [\n    [\n        \"polygon\",\n        {\n            points: \"11 5 6 9 2 9 2 15 6 15 11 19 11 5\",\n            key: \"16drj5\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"22\",\n            x2: \"16\",\n            y1: \"9\",\n            y2: \"15\",\n            key: \"1ewh16\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"16\",\n            x2: \"22\",\n            y1: \"9\",\n            y2: \"15\",\n            key: \"5ykzw1\"\n        }\n    ]\n]);\n //# sourceMappingURL=volume-x.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvdm9sdW1lLXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFhTSxNQUFBQSxVQUFVQyxnRUFBZ0JBLENBQUMsV0FBVztJQUMxQztRQUFDO1FBQVc7WUFBRUMsUUFBUTtZQUFxQ0MsS0FBSztRQUFBO0tBQVU7SUFDMUU7UUFBQztRQUFRO1lBQUVDLElBQUk7WUFBTUMsSUFBSTtZQUFNQyxJQUFJO1lBQUtDLElBQUk7WUFBTUosS0FBSztRQUFBO0tBQVU7SUFDakU7UUFBQztRQUFRO1lBQUVDLElBQUk7WUFBTUMsSUFBSTtZQUFNQyxJQUFJO1lBQUtDLElBQUk7WUFBTUosS0FBSztRQUFBO0tBQVU7Q0FDbEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL3NyYy9pY29ucy92b2x1bWUteC50cz8xMjRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24nO1xuXG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgVm9sdW1lWFxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0c5c2VXZHZiaUJ3YjJsdWRITTlJakV4SURVZ05pQTVJRElnT1NBeUlERTFJRFlnTVRVZ01URWdNVGtnTVRFZ05TSWdMejRLSUNBOGJHbHVaU0I0TVQwaU1qSWlJSGd5UFNJeE5pSWdlVEU5SWpraUlIa3lQU0l4TlNJZ0x6NEtJQ0E4YkdsdVpTQjRNVDBpTVRZaUlIZ3lQU0l5TWlJZ2VURTlJamtpSUhreVBTSXhOU0lnTHo0S1BDOXpkbWMrQ2c9PSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMvdm9sdW1lLXhcbiAqIEBzZWUgaHR0cHM6Ly9sdWNpZGUuZGV2L2d1aWRlL3BhY2thZ2VzL2x1Y2lkZS1yZWFjdCAtIERvY3VtZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBMdWNpZGUgaWNvbnMgcHJvcHMgYW5kIGFueSB2YWxpZCBTVkcgYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEpTWCBFbGVtZW50XG4gKlxuICovXG5jb25zdCBWb2x1bWVYID0gY3JlYXRlTHVjaWRlSWNvbignVm9sdW1lWCcsIFtcbiAgWydwb2x5Z29uJywgeyBwb2ludHM6ICcxMSA1IDYgOSAyIDkgMiAxNSA2IDE1IDExIDE5IDExIDUnLCBrZXk6ICcxNmRyajUnIH1dLFxuICBbJ2xpbmUnLCB7IHgxOiAnMjInLCB4MjogJzE2JywgeTE6ICc5JywgeTI6ICcxNScsIGtleTogJzFld2gxNicgfV0sXG4gIFsnbGluZScsIHsgeDE6ICcxNicsIHgyOiAnMjInLCB5MTogJzknLCB5MjogJzE1Jywga2V5OiAnNXlrencxJyB9XSxcbl0pO1xuXG5leHBvcnQgZGVmYXVsdCBWb2x1bWVYO1xuIl0sIm5hbWVzIjpbIlZvbHVtZVgiLCJjcmVhdGVMdWNpZGVJY29uIiwicG9pbnRzIiwia2V5IiwieDEiLCJ4MiIsInkxIiwieTIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/volume-x.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/x.js":
/*!*******************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/x.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ X; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst X = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"X\", [\n    [\n        \"path\",\n        {\n            d: \"M18 6 6 18\",\n            key: \"1bl5f8\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m6 6 12 12\",\n            key: \"d8bk6v\"\n        }\n    ]\n]);\n //# sourceMappingURL=x.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMveC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWFNLE1BQUFBLElBQUlDLGdFQUFnQkEsQ0FBQyxLQUFLO0lBQzlCO1FBQUM7UUFBUTtZQUFFQyxHQUFHO1lBQWNDLEtBQUs7UUFBQTtLQUFVO0lBQzNDO1FBQUM7UUFBUTtZQUFFRCxHQUFHO1lBQWNDLEtBQUs7UUFBQTtLQUFVO0NBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9zcmMvaWNvbnMveC50cz9iYzM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24nO1xuXG4vKipcbiAqIEBjb21wb25lbnQgQG5hbWUgWFxuICogQGRlc2NyaXB0aW9uIEx1Y2lkZSBTVkcgaWNvbiBjb21wb25lbnQsIHJlbmRlcnMgU1ZHIEVsZW1lbnQgd2l0aCBjaGlsZHJlbi5cbiAqXG4gKiBAcHJldmlldyAhW2ltZ10oZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlBZ2VHMXNibk05SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puSWdvZ0lIZHBaSFJvUFNJeU5DSUtJQ0JvWldsbmFIUTlJakkwSWdvZ0lIWnBaWGRDYjNnOUlqQWdNQ0F5TkNBeU5DSUtJQ0JtYVd4c1BTSnViMjVsSWdvZ0lITjBjbTlyWlQwaUl6QXdNQ0lnYzNSNWJHVTlJbUpoWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1ZN0lHSnZjbVJsY2kxeVlXUnBkWE02SURKd2VDSUtJQ0J6ZEhKdmEyVXRkMmxrZEdnOUlqSWlDaUFnYzNSeWIydGxMV3hwYm1WallYQTlJbkp2ZFc1a0lnb2dJSE4wY205clpTMXNhVzVsYW05cGJqMGljbTkxYm1RaUNqNEtJQ0E4Y0dGMGFDQmtQU0pOTVRnZ05pQTJJREU0SWlBdlBnb2dJRHh3WVhSb0lHUTlJbTAySURZZ01USWdNVElpSUM4K0Nqd3ZjM1puUGdvPSkgLSBodHRwczovL2x1Y2lkZS5kZXYvaWNvbnMveFxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXJlYWN0IC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtKU1guRWxlbWVudH0gSlNYIEVsZW1lbnRcbiAqXG4gKi9cbmNvbnN0IFggPSBjcmVhdGVMdWNpZGVJY29uKCdYJywgW1xuICBbJ3BhdGgnLCB7IGQ6ICdNMTggNiA2IDE4Jywga2V5OiAnMWJsNWY4JyB9XSxcbiAgWydwYXRoJywgeyBkOiAnbTYgNiAxMiAxMicsIGtleTogJ2Q4Yms2dicgfV0sXG5dKTtcblxuZXhwb3J0IGRlZmF1bHQgWDtcbiJdLCJuYW1lcyI6WyJYIiwiY3JlYXRlTHVjaWRlSWNvbiIsImQiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/x.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/zap.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/zap.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Zap; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Zap = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Zap\", [\n    [\n        \"polygon\",\n        {\n            points: \"13 2 3 14 12 14 11 22 21 10 12 10 13 2\",\n            key: \"45s27k\"\n        }\n    ]\n]);\n //# sourceMappingURL=zap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvemFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBYU0sTUFBQUEsTUFBTUMsZ0VBQWdCQSxDQUFDLE9BQU87SUFDbEM7UUFBQztRQUFXO1lBQUVDLFFBQVE7WUFBMENDLEtBQUs7UUFBQTtLQUFVO0NBQ2hGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9zcmMvaWNvbnMvemFwLnRzPzkxMjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbic7XG5cbi8qKlxuICogQGNvbXBvbmVudCBAbmFtZSBaYXBcbiAqIEBkZXNjcmlwdGlvbiBMdWNpZGUgU1ZHIGljb24gY29tcG9uZW50LCByZW5kZXJzIFNWRyBFbGVtZW50IHdpdGggY2hpbGRyZW4uXG4gKlxuICogQHByZXZpZXcgIVtpbWddKGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklnb2dJSGRwWkhSb1BTSXlOQ0lLSUNCb1pXbG5hSFE5SWpJMElnb2dJSFpwWlhkQ2IzZzlJakFnTUNBeU5DQXlOQ0lLSUNCbWFXeHNQU0p1YjI1bElnb2dJSE4wY205clpUMGlJekF3TUNJZ2MzUjViR1U5SW1KaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObVptWTdJR0p2Y21SbGNpMXlZV1JwZFhNNklESndlQ0lLSUNCemRISnZhMlV0ZDJsa2RHZzlJaklpQ2lBZ2MzUnliMnRsTFd4cGJtVmpZWEE5SW5KdmRXNWtJZ29nSUhOMGNtOXJaUzFzYVc1bGFtOXBiajBpY205MWJtUWlDajRLSUNBOGNHOXNlV2R2YmlCd2IybHVkSE05SWpFeklESWdNeUF4TkNBeE1pQXhOQ0F4TVNBeU1pQXlNU0F4TUNBeE1pQXhNQ0F4TXlBeUlpQXZQZ284TDNOMlp6NEspIC0gaHR0cHM6Ly9sdWNpZGUuZGV2L2ljb25zL3phcFxuICogQHNlZSBodHRwczovL2x1Y2lkZS5kZXYvZ3VpZGUvcGFja2FnZXMvbHVjaWRlLXJlYWN0IC0gRG9jdW1lbnRhdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIEx1Y2lkZSBpY29ucyBwcm9wcyBhbmQgYW55IHZhbGlkIFNWRyBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtKU1guRWxlbWVudH0gSlNYIEVsZW1lbnRcbiAqXG4gKi9cbmNvbnN0IFphcCA9IGNyZWF0ZUx1Y2lkZUljb24oJ1phcCcsIFtcbiAgWydwb2x5Z29uJywgeyBwb2ludHM6ICcxMyAyIDMgMTQgMTIgMTQgMTEgMjIgMjEgMTAgMTIgMTAgMTMgMicsIGtleTogJzQ1czI3aycgfV0sXG5dKTtcblxuZXhwb3J0IGRlZmF1bHQgWmFwO1xuIl0sIm5hbWVzIjpbIlphcCIsImNyZWF0ZUx1Y2lkZUljb24iLCJwb2ludHMiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/zap.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_Eye_Github_Info_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=Eye,Github,Info,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/eye.js\");\n/* harmony import */ var _barrel_optimize_names_Eye_Github_Info_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=Eye,Github,Info,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/github.js\");\n/* harmony import */ var _barrel_optimize_names_Eye_Github_Info_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=Eye,Github,Info,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/info.js\");\n/* harmony import */ var _barrel_optimize_names_Eye_Github_Info_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=Eye,Github,Info,Zap!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/zap.js\");\n/* harmony import */ var _components_ImageUpload__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/ImageUpload */ \"(app-pages-browser)/./components/ImageUpload.tsx\");\n/* harmony import */ var _components_ImageGrid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/ImageGrid */ \"(app-pages-browser)/./components/ImageGrid.tsx\");\n/* harmony import */ var _components_AnimationPreview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/AnimationPreview */ \"(app-pages-browser)/./components/AnimationPreview.tsx\");\n/* harmony import */ var _components_ExportOptions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/ExportOptions */ \"(app-pages-browser)/./components/ExportOptions.tsx\");\n/* harmony import */ var _components_ProcessingIndicator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/components/ProcessingIndicator */ \"(app-pages-browser)/./components/ProcessingIndicator.tsx\");\n/* harmony import */ var _lib_faceDetection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/lib/faceDetection */ \"(app-pages-browser)/./lib/faceDetection.ts\");\n/* harmony import */ var _lib_imageAlignment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/lib/imageAlignment */ \"(app-pages-browser)/./lib/imageAlignment.ts\");\n/* harmony import */ var _lib_videoExport__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/lib/videoExport */ \"(app-pages-browser)/./lib/videoExport.ts\");\n/* harmony import */ var _lib_types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/lib/types */ \"(app-pages-browser)/./lib/types.ts\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Home() {\n    _s();\n    // Core state\n    const [images, setImages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [processingStatus, setProcessingStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isProcessing: false,\n        currentStep: \"\",\n        progress: 0\n    });\n    const [exportSettings, setExportSettings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        format: \"gif\",\n        resolution: \"720p\",\n        frameDuration: 0.2,\n        addSound: false,\n        loop: true,\n        alignmentMode: \"face-crop\"\n    });\n    // Animation state\n    const [previewFrames, setPreviewFrames] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentFrame, setCurrentFrame] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Export state\n    const [isExporting, setIsExporting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [exportProgress, setExportProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    // Services\n    const faceDetector = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const imageAligner = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const videoExporter = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [servicesReady, setServicesReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Initialize services\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initializeServices = async ()=>{\n            try {\n                setProcessingStatus({\n                    isProcessing: true,\n                    currentStep: \"Initializing AI services...\",\n                    progress: 0\n                });\n                // Initialize MediaPipe face detector\n                faceDetector.current = new _lib_faceDetection__WEBPACK_IMPORTED_MODULE_7__.FaceDetector();\n                await faceDetector.current.initialize();\n                setProcessingStatus((prev)=>({\n                        ...prev,\n                        progress: 0.33\n                    }));\n                // Initialize image aligner\n                imageAligner.current = new _lib_imageAlignment__WEBPACK_IMPORTED_MODULE_8__.ImageAligner();\n                setProcessingStatus((prev)=>({\n                        ...prev,\n                        progress: 0.66\n                    }));\n                // Initialize video exporter\n                videoExporter.current = new _lib_videoExport__WEBPACK_IMPORTED_MODULE_9__.VideoExporter();\n                await videoExporter.current.initialize();\n                setProcessingStatus({\n                    isProcessing: false,\n                    currentStep: \"Ready\",\n                    progress: 1\n                });\n                setServicesReady(true);\n                console.log(\"All services initialized successfully\");\n            } catch (error) {\n                console.error(\"Failed to initialize services:\", error);\n                setProcessingStatus({\n                    isProcessing: false,\n                    currentStep: \"Initialization failed\",\n                    progress: 0,\n                    error: \"Failed to initialize AI services. Please refresh the page.\"\n                });\n            }\n        };\n        initializeServices();\n        return ()=>{\n            var _faceDetector_current, _videoExporter_current;\n            (_faceDetector_current = faceDetector.current) === null || _faceDetector_current === void 0 ? void 0 : _faceDetector_current.cleanup();\n            (_videoExporter_current = videoExporter.current) === null || _videoExporter_current === void 0 ? void 0 : _videoExporter_current.cleanup();\n        };\n    }, []);\n    // Handle image upload\n    const handleImagesUpload = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (files)=>{\n        if (!servicesReady) return;\n        const newImages = files.map((file)=>({\n                id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_11__.generateId)(),\n                file,\n                url: URL.createObjectURL(file),\n                aligned: false\n            }));\n        setImages((prev)=>[\n                ...prev,\n                ...newImages\n            ]);\n        // Process images automatically\n        await processImages([\n            ...images,\n            ...newImages\n        ]);\n    }, [\n        servicesReady,\n        images\n    ]);\n    // Process images with face detection and alignment\n    const processImages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (imagesToProcess)=>{\n        if (!faceDetector.current || !imageAligner.current) return;\n        const unalignedImages = imagesToProcess.filter((img)=>!img.aligned);\n        if (unalignedImages.length === 0) return;\n        setProcessingStatus({\n            isProcessing: true,\n            currentStep: \"Detecting faces and aligning images...\",\n            progress: 0\n        });\n        const resolution = _lib_types__WEBPACK_IMPORTED_MODULE_10__.RESOLUTION_CONFIGS[exportSettings.resolution];\n        const processedImages = [];\n        for(let i = 0; i < unalignedImages.length; i++){\n            const image = unalignedImages[i];\n            try {\n                setProcessingStatus((prev)=>({\n                        ...prev,\n                        currentStep: \"Processing \".concat(image.file.name, \"...\"),\n                        progress: i / unalignedImages.length\n                    }));\n                // Load image\n                const imgElement = await (0,_lib_utils__WEBPACK_IMPORTED_MODULE_11__.loadImageFromFile)(image.file);\n                // Detect face and eyes\n                const faceResult = await faceDetector.current.detectFace(imgElement);\n                if (!faceResult || !faceResult.eyePoints) {\n                    console.warn(\"No face detected in \".concat(image.file.name));\n                    // Show more helpful message to user\n                    setProcessingStatus((prev)=>({\n                            ...prev,\n                            currentStep: \"No face found in \".concat(image.file.name, \" - skipping\")\n                        }));\n                    processedImages.push({\n                        ...image,\n                        aligned: false\n                    });\n                    continue;\n                }\n                // Validate eye points\n                if (!imageAligner.current.validateEyePoints(faceResult.eyePoints, imgElement.width, imgElement.height)) {\n                    console.warn(\"Invalid eye points in \".concat(image.file.name));\n                    processedImages.push({\n                        ...image,\n                        aligned: false\n                    });\n                    continue;\n                }\n                // Align image using selected alignment mode\n                let alignedCanvas;\n                if (exportSettings.alignmentMode === \"face-crop\") {\n                    alignedCanvas = imageAligner.current.alignImageFaceCrop(imgElement, faceResult, resolution);\n                } else {\n                    // Default to full alignment\n                    alignedCanvas = imageAligner.current.alignImageFull(imgElement, faceResult.eyePoints, resolution);\n                }\n                // Create processed URL\n                const processedUrl = await new Promise((resolve)=>{\n                    alignedCanvas.toBlob((blob)=>{\n                        if (blob) {\n                            resolve(URL.createObjectURL(blob));\n                        }\n                    }, \"image/png\");\n                });\n                processedImages.push({\n                    ...image,\n                    aligned: true,\n                    eyePoints: faceResult.eyePoints,\n                    faceResult: faceResult,\n                    alignedCanvas,\n                    processedUrl\n                });\n            } catch (error) {\n                console.error(\"Failed to process \".concat(image.file.name, \":\"), error);\n                processedImages.push({\n                    ...image,\n                    aligned: false\n                });\n            }\n        }\n        // Update images state\n        setImages((prev)=>{\n            const updated = [\n                ...prev\n            ];\n            processedImages.forEach((processedImg)=>{\n                const index = updated.findIndex((img)=>img.id === processedImg.id);\n                if (index !== -1) {\n                    updated[index] = processedImg;\n                }\n            });\n            return updated;\n        });\n        // Generate preview frames\n        await generatePreviewFrames(imagesToProcess.map((img)=>{\n            const processed = processedImages.find((p)=>p.id === img.id);\n            return processed || img;\n        }).filter((img)=>img.aligned));\n        setProcessingStatus({\n            isProcessing: false,\n            currentStep: \"Processing complete - \".concat(processedImages.filter((p)=>p.aligned).length, \" of \").concat(processedImages.length, \" images aligned\"),\n            progress: 1\n        });\n    }, [\n        exportSettings.resolution,\n        exportSettings.alignmentMode\n    ]);\n    // Generate preview frames\n    const generatePreviewFrames = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (alignedImages)=>{\n        if (alignedImages.length === 0) {\n            setPreviewFrames([]);\n            return;\n        }\n        console.log(\"Generating preview frames for\", alignedImages.length, \"images\");\n        const frames = alignedImages.map((image, index)=>{\n            const canvas = image.alignedCanvas;\n            // Debug: Check if each canvas has content\n            const ctx = canvas.getContext(\"2d\");\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            const hasContent = imageData.data.some((value, index)=>{\n                return index % 4 === 3 && value > 0; // Check alpha channel for non-transparent pixels\n            });\n            console.log(\"Frame \".concat(index + 1, \":\"), {\n                canvasSize: {\n                    width: canvas.width,\n                    height: canvas.height\n                },\n                hasContent,\n                imageId: image.id\n            });\n            if (!hasContent) {\n                console.warn(\"WARNING: Frame \".concat(index + 1, \" (\").concat(image.id, \") appears to be empty!\"));\n            }\n            return {\n                canvas,\n                duration: exportSettings.frameDuration,\n                imageId: image.id\n            };\n        });\n        console.log(\"Generated\", frames.length, \"frames for preview\");\n        setPreviewFrames(frames);\n    }, [\n        exportSettings.frameDuration\n    ]);\n    // Handle image removal\n    const handleRemoveImage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((id)=>{\n        setImages((prev)=>{\n            const filtered = prev.filter((img)=>img.id !== id);\n            // Update preview frames\n            generatePreviewFrames(filtered.filter((img)=>img.aligned));\n            return filtered;\n        });\n    }, [\n        generatePreviewFrames\n    ]);\n    // Handle image reordering\n    const handleReorderImages = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((fromIndex, toIndex)=>{\n        setImages((prev)=>{\n            const newImages = [\n                ...prev\n            ];\n            const [moved] = newImages.splice(fromIndex, 1);\n            newImages.splice(toIndex, 0, moved);\n            // Update preview frames\n            generatePreviewFrames(newImages.filter((img)=>img.aligned));\n            return newImages;\n        });\n    }, [\n        generatePreviewFrames\n    ]);\n    // Handle retry alignment\n    const handleRetryAlignment = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (id)=>{\n        const imageToRetry = images.find((img)=>img.id === id);\n        if (!imageToRetry) return;\n        await processImages([\n            imageToRetry\n        ]);\n    }, [\n        images\n    ]);\n    // Handle export\n    const handleExport = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (!videoExporter.current || previewFrames.length === 0) {\n            alert(\"No frames available for export. Please ensure images are processed and aligned.\");\n            return;\n        }\n        console.log(\"Starting export...\");\n        setIsExporting(true);\n        setExportProgress({\n            phase: \"preparing\",\n            progress: 0\n        });\n        try {\n            const resolution = _lib_types__WEBPACK_IMPORTED_MODULE_10__.RESOLUTION_CONFIGS[exportSettings.resolution];\n            console.log(\"Export configuration:\", {\n                frames: previewFrames.length,\n                settings: exportSettings,\n                resolution\n            });\n            await videoExporter.current.exportAndDownload(previewFrames, exportSettings, resolution, \"match-cut-\".concat(Date.now()), setExportProgress);\n            console.log(\"Export completed successfully\");\n        } catch (error) {\n            console.error(\"Export failed:\", error);\n            const errorMessage = error instanceof Error ? error.message : \"Unknown export error\";\n            alert(\"Export failed: \".concat(errorMessage, \"\\n\\nTips:\\n- Try a different format (GIF vs MP4)\\n- Check your internet connection\\n- Try with fewer images\"));\n        } finally{\n            setIsExporting(false);\n            setExportProgress(undefined);\n        }\n    }, [\n        previewFrames,\n        exportSettings\n    ]);\n    // Update preview frames when settings change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const alignedImages = images.filter((img)=>img.aligned);\n        generatePreviewFrames(alignedImages);\n    }, [\n        images,\n        generatePreviewFrames\n    ]);\n    // Reprocess images when alignment mode changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const alignedImages = images.filter((img)=>img.aligned && img.faceResult);\n        if (alignedImages.length > 0) {\n            // Re-align existing images with new mode\n            alignedImages.forEach(async (image)=>{\n                if (image.faceResult && imageAligner.current) {\n                    const resolution = _lib_types__WEBPACK_IMPORTED_MODULE_10__.RESOLUTION_CONFIGS[exportSettings.resolution];\n                    let alignedCanvas;\n                    if (exportSettings.alignmentMode === \"face-crop\") {\n                        alignedCanvas = imageAligner.current.alignImageFaceCrop(await (0,_lib_utils__WEBPACK_IMPORTED_MODULE_11__.loadImageFromFile)(image.file), image.faceResult, resolution);\n                    } else {\n                        alignedCanvas = imageAligner.current.alignImageFull(await (0,_lib_utils__WEBPACK_IMPORTED_MODULE_11__.loadImageFromFile)(image.file), image.faceResult.eyePoints, resolution);\n                    }\n                    // Update processed URL\n                    const processedUrl = await new Promise((resolve)=>{\n                        alignedCanvas.toBlob((blob)=>{\n                            if (blob) {\n                                resolve(URL.createObjectURL(blob));\n                            }\n                        }, \"image/png\");\n                    });\n                    // Update image data\n                    setImages((prev)=>prev.map((img)=>img.id === image.id ? {\n                                ...img,\n                                alignedCanvas,\n                                processedUrl\n                            } : img));\n                }\n            });\n        }\n    }, [\n        exportSettings.alignmentMode,\n        exportSettings.resolution\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n                className: \"bg-white shadow-sm border-b\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center justify-between h-16\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center space-x-3\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Eye_Github_Info_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                            className: \"w-5 h-5 text-white\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                            lineNumber: 421,\n                                            columnNumber: 17\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 420,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                        className: \"text-xl font-bold text-gray-900\",\n                                        children: \"Match Cut Generator\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 423,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 419,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center space-x-4\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                        href: \"https://github.com\",\n                                        target: \"_blank\",\n                                        rel: \"noopener noreferrer\",\n                                        className: \"text-gray-500 hover:text-gray-700\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Eye_Github_Info_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                                            className: \"w-5 h-5\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                            lineNumber: 435,\n                                            columnNumber: 17\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 429,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        className: \"text-gray-500 hover:text-gray-700\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Eye_Github_Info_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n                                            className: \"w-5 h-5\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                            lineNumber: 439,\n                                            columnNumber: 17\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 438,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 428,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                        lineNumber: 418,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                    lineNumber: 417,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                lineNumber: 416,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\",\n                children: [\n                    images.length === 0 && !processingStatus.isProcessing && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-center mb-12\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-6\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Eye_Github_Info_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n                                    className: \"w-8 h-8 text-blue-600\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                    lineNumber: 451,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 450,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                className: \"text-3xl font-bold text-gray-900 mb-4\",\n                                children: \"Create Eye-Aligned Match Cut Videos\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 453,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-lg text-gray-600 max-w-2xl mx-auto\",\n                                children: \"Upload multiple photos and automatically generate smooth match cut animations with perfect eye alignment. Export as GIF or MP4 with customizable settings.\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 456,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                        lineNumber: 449,\n                        columnNumber: 11\n                    }, this),\n                    (processingStatus.isProcessing || processingStatus.error) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mb-8\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ProcessingIndicator__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                            status: processingStatus\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                            lineNumber: 466,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                        lineNumber: 465,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"grid grid-cols-1 lg:grid-cols-3 gap-8\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"lg:col-span-2 space-y-8\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"card p-6\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                className: \"text-lg font-semibold text-gray-900 mb-4\",\n                                                children: \"Upload Images\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                lineNumber: 476,\n                                                columnNumber: 15\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ImageUpload__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                                onImagesUpload: handleImagesUpload,\n                                                disabled: !servicesReady || processingStatus.isProcessing\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                lineNumber: 479,\n                                                columnNumber: 15\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 475,\n                                        columnNumber: 13\n                                    }, this),\n                                    images.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"card p-6\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                className: \"text-lg font-semibold text-gray-900 mb-4\",\n                                                children: \"Alignment Mode\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                lineNumber: 488,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"grid grid-cols-2 gap-3\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                        onClick: ()=>setExportSettings((prev)=>({\n                                                                    ...prev,\n                                                                    alignmentMode: \"face-crop\"\n                                                                })),\n                                                        disabled: !servicesReady || processingStatus.isProcessing,\n                                                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_11__.cn)(\"p-4 border-2 rounded-lg text-left transition-all\", \"hover:border-blue-300 disabled:opacity-50\", {\n                                                            \"border-blue-500 bg-blue-50\": exportSettings.alignmentMode === \"face-crop\",\n                                                            \"border-gray-200\": exportSettings.alignmentMode !== \"face-crop\"\n                                                        }),\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"font-medium\",\n                                                                children: \"Smart Crop (Recommended)\"\n                                                            }, void 0, false, {\n                                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                                lineNumber: 504,\n                                                                columnNumber: 21\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-sm text-gray-500 mt-1\",\n                                                                children: \"Focus on face region with perfect eye alignment\"\n                                                            }, void 0, false, {\n                                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                                lineNumber: 505,\n                                                                columnNumber: 21\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                        lineNumber: 492,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                        onClick: ()=>setExportSettings((prev)=>({\n                                                                    ...prev,\n                                                                    alignmentMode: \"full\"\n                                                                })),\n                                                        disabled: !servicesReady || processingStatus.isProcessing,\n                                                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_11__.cn)(\"p-4 border-2 rounded-lg text-left transition-all\", \"hover:border-blue-300 disabled:opacity-50\", {\n                                                            \"border-blue-500 bg-blue-50\": exportSettings.alignmentMode === \"full\",\n                                                            \"border-gray-200\": exportSettings.alignmentMode !== \"full\"\n                                                        }),\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"font-medium\",\n                                                                children: \"Full Image\"\n                                                            }, void 0, false, {\n                                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                                lineNumber: 522,\n                                                                columnNumber: 21\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-sm text-gray-500 mt-1\",\n                                                                children: \"Show entire photo with eye alignment\"\n                                                            }, void 0, false, {\n                                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                                lineNumber: 523,\n                                                                columnNumber: 21\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                        lineNumber: 510,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                lineNumber: 491,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 487,\n                                        columnNumber: 15\n                                    }, this),\n                                    images.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"card p-6\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ImageGrid__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                            images: images,\n                                            onRemoveImage: handleRemoveImage,\n                                            onReorderImages: handleReorderImages,\n                                            onRetryAlignment: handleRetryAlignment,\n                                            disabled: !servicesReady || processingStatus.isProcessing\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                            lineNumber: 534,\n                                            columnNumber: 17\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 533,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 473,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"space-y-8\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"card p-6\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                className: \"text-lg font-semibold text-gray-900 mb-4\",\n                                                children: \"Preview\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                lineNumber: 549,\n                                                columnNumber: 15\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AnimationPreview__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                                frames: previewFrames,\n                                                frameDuration: exportSettings.frameDuration,\n                                                isPlaying: isPlaying,\n                                                onPlayPause: ()=>setIsPlaying(!isPlaying),\n                                                onFrameChange: setCurrentFrame,\n                                                disabled: processingStatus.isProcessing\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                                lineNumber: 552,\n                                                columnNumber: 15\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 548,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ExportOptions__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                        settings: exportSettings,\n                                        onSettingsChange: setExportSettings,\n                                        onExport: handleExport,\n                                        isExporting: isExporting,\n                                        exportProgress: exportProgress,\n                                        disabled: !servicesReady || previewFrames.length === 0\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 563,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 546,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                        lineNumber: 471,\n                        columnNumber: 9\n                    }, this),\n                    images.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mt-12 grid grid-cols-1 md:grid-cols-3 gap-6\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"card p-6 text-center\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-3xl font-bold text-blue-600 mb-2\",\n                                        children: images.length\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 578,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-gray-600\",\n                                        children: \"Images Uploaded\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 581,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 577,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"card p-6 text-center\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-3xl font-bold text-green-600 mb-2\",\n                                        children: images.filter((img)=>img.aligned).length\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 585,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-gray-600\",\n                                        children: \"Successfully Aligned\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 588,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 584,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"card p-6 text-center\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-3xl font-bold text-purple-600 mb-2\",\n                                        children: [\n                                            previewFrames.length > 0 ? (previewFrames.length * exportSettings.frameDuration).toFixed(1) : \"0\",\n                                            \"s\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 592,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-gray-600\",\n                                        children: \"Animation Duration\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                        lineNumber: 595,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 591,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                        lineNumber: 576,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                lineNumber: 446,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"footer\", {\n                className: \"bg-gray-50 border-t mt-16\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-center text-gray-600\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"mb-2\",\n                                children: \"Built with MediaPipe, FFmpeg.wasm, and React\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 605,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"text-sm\",\n                                children: \"All processing happens in your browser - your images never leave your device\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                                lineNumber: 608,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                        lineNumber: 604,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                    lineNumber: 603,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n                lineNumber: 602,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\app\\\\page.tsx\",\n        lineNumber: 414,\n        columnNumber: 5\n    }, this);\n}\n_s(Home, \"KTfgl2lDQ09kLuWyiH9MHJeIFQQ=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/AnimationPreview.tsx":
/*!*****************************************!*\
  !*** ./components/AnimationPreview.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ AnimationPreview; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_Pause_Play_RotateCcw_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=Pause,Play,RotateCcw!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/play.js\");\n/* harmony import */ var _barrel_optimize_names_Pause_Play_RotateCcw_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Pause,Play,RotateCcw!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/rotate-ccw.js\");\n/* harmony import */ var _barrel_optimize_names_Pause_Play_RotateCcw_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=Pause,Play,RotateCcw!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/pause.js\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\nfunction AnimationPreview(param) {\n    let { frames, frameDuration, isPlaying, onPlayPause, onFrameChange, className, disabled = false } = param;\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const [currentFrame, setCurrentFrame] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const lastFrameTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const drawFrame = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((frameIndex)=>{\n        const canvas = canvasRef.current;\n        if (!canvas || frames.length === 0) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        const frame = frames[frameIndex];\n        if (!frame) return;\n        // Clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        // Draw frame\n        ctx.drawImage(frame.canvas, 0, 0, canvas.width, canvas.height);\n        // Draw frame indicator\n        ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n        ctx.fillRect(10, 10, 60, 25);\n        ctx.fillStyle = \"white\";\n        ctx.font = \"12px sans-serif\";\n        ctx.fillText(\"\".concat(frameIndex + 1, \"/\").concat(frames.length), 15, 27);\n    }, [\n        frames\n    ]);\n    // Start/stop animation\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isPlaying && frames.length > 0) {\n            lastFrameTimeRef.current = performance.now();\n            const animateFrame = (timestamp)=>{\n                if (!isPlaying || frames.length === 0) {\n                    animationRef.current = undefined;\n                    return;\n                }\n                if (timestamp - lastFrameTimeRef.current >= frameDuration * 1000) {\n                    setCurrentFrame((prev)=>{\n                        const nextFrame = (prev + 1) % frames.length;\n                        onFrameChange === null || onFrameChange === void 0 ? void 0 : onFrameChange(nextFrame);\n                        return nextFrame;\n                    });\n                    lastFrameTimeRef.current = timestamp;\n                }\n                animationRef.current = requestAnimationFrame(animateFrame);\n            };\n            animationRef.current = requestAnimationFrame(animateFrame);\n        } else {\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n                animationRef.current = undefined;\n            }\n        }\n        return ()=>{\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n                animationRef.current = undefined;\n            }\n        };\n    }, [\n        isPlaying,\n        frames.length,\n        frameDuration,\n        onFrameChange\n    ]);\n    // Draw current frame\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        drawFrame(currentFrame);\n    }, [\n        currentFrame,\n        drawFrame\n    ]);\n    // Initialize canvas size\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const canvas = canvasRef.current;\n        if (!canvas || frames.length === 0) return;\n        const firstFrame = frames[0];\n        if (firstFrame) {\n            canvas.width = firstFrame.canvas.width;\n            canvas.height = firstFrame.canvas.height;\n            drawFrame(0);\n        }\n    }, [\n        frames,\n        drawFrame\n    ]);\n    const handleFrameSeek = (frameIndex)=>{\n        if (disabled) return;\n        setCurrentFrame(frameIndex);\n        onFrameChange === null || onFrameChange === void 0 ? void 0 : onFrameChange(frameIndex);\n    };\n    const handleRestart = ()=>{\n        if (disabled) return;\n        setCurrentFrame(0);\n        onFrameChange === null || onFrameChange === void 0 ? void 0 : onFrameChange(0);\n    };\n    if (frames.length === 0) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"bg-gray-100 rounded-lg flex items-center justify-center\", className),\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center p-8\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"w-16 h-16 mx-auto mb-4 bg-gray-300 rounded-lg flex items-center justify-center\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Pause_Play_RotateCcw_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                            className: \"w-8 h-8 text-gray-500\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                            lineNumber: 128,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                        lineNumber: 127,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-gray-600\",\n                        children: \"No frames to preview\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                        lineNumber: 130,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-sm text-gray-500 mt-1\",\n                        children: \"Upload and align images to see preview\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                        lineNumber: 131,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                lineNumber: 126,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n            lineNumber: 125,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"bg-white rounded-lg border shadow-sm\", className),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"relative bg-gray-900 rounded-t-lg overflow-hidden\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                        ref: canvasRef,\n                        className: \"w-full h-auto max-h-96 object-contain\",\n                        style: {\n                            maxWidth: \"100%\",\n                            height: \"auto\",\n                            display: \"block\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                        lineNumber: 143,\n                        columnNumber: 9\n                    }, this),\n                    disabled && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"text-white text-center\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-2\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                    lineNumber: 157,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    children: \"Processing frames...\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                    lineNumber: 158,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                            lineNumber: 156,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                        lineNumber: 155,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                lineNumber: 142,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"p-4 space-y-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center justify-center space-x-4\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: handleRestart,\n                                disabled: disabled,\n                                className: \"p-2 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors disabled:opacity-50\",\n                                title: \"Restart\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Pause_Play_RotateCcw_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                    className: \"w-5 h-5\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                    lineNumber: 174,\n                                    columnNumber: 13\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                lineNumber: 168,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: onPlayPause,\n                                disabled: disabled,\n                                className: \"p-3 rounded-full bg-blue-600 hover:bg-blue-700 text-white transition-colors disabled:opacity-50\",\n                                title: isPlaying ? \"Pause\" : \"Play\",\n                                children: isPlaying ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Pause_Play_RotateCcw_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                    className: \"w-6 h-6\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                    lineNumber: 184,\n                                    columnNumber: 15\n                                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Pause_Play_RotateCcw_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                    className: \"w-6 h-6 ml-1\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                    lineNumber: 186,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                lineNumber: 177,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-sm text-gray-600\",\n                                children: [\n                                    frameDuration,\n                                    \"s per frame\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                lineNumber: 190,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                        lineNumber: 167,\n                        columnNumber: 9\n                    }, this),\n                    frames.length > 1 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center justify-between text-sm text-gray-600\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: [\n                                            \"Frame \",\n                                            currentFrame + 1\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                        lineNumber: 199,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: [\n                                            frames.length,\n                                            \" total\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                        lineNumber: 200,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                lineNumber: 198,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"relative\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        type: \"range\",\n                                        min: \"0\",\n                                        max: frames.length - 1,\n                                        value: currentFrame,\n                                        onChange: (e)=>handleFrameSeek(parseInt(e.target.value)),\n                                        disabled: disabled,\n                                        className: \"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer disabled:opacity-50\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                        lineNumber: 204,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex justify-between mt-1\",\n                                        children: frames.map((_, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                onClick: ()=>handleFrameSeek(index),\n                                                disabled: disabled,\n                                                className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"w-2 h-2 rounded-full transition-colors\", {\n                                                    \"bg-blue-600\": index === currentFrame,\n                                                    \"bg-gray-300 hover:bg-gray-400\": index !== currentFrame,\n                                                    \"opacity-50\": disabled\n                                                }),\n                                                title: \"Frame \".concat(index + 1)\n                                            }, index, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                                lineNumber: 217,\n                                                columnNumber: 19\n                                            }, this))\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                        lineNumber: 215,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                lineNumber: 203,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                        lineNumber: 197,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-xs text-gray-500 text-center space-y-1\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    \"Duration: \",\n                                    (frames.length * frameDuration).toFixed(1),\n                                    \"s total\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                lineNumber: 239,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    frames.length,\n                                    \" frames at \",\n                                    (1 / frameDuration).toFixed(1),\n                                    \" fps\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                                lineNumber: 242,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                        lineNumber: 238,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n                lineNumber: 165,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\AnimationPreview.tsx\",\n        lineNumber: 140,\n        columnNumber: 5\n    }, this);\n}\n_s(AnimationPreview, \"2ZCqnQ1Ca/qPpP+6/iYI8DO/9cU=\");\n_c = AnimationPreview;\nvar _c;\n$RefreshReg$(_c, \"AnimationPreview\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/AnimationPreview.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ExportOptions.tsx":
/*!**************************************!*\
  !*** ./components/ExportOptions.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ExportOptions; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_Download_Settings_Volume2_VolumeX_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=Download,Settings,Volume2,VolumeX!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/settings.js\");\n/* harmony import */ var _barrel_optimize_names_Download_Settings_Volume2_VolumeX_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Download,Settings,Volume2,VolumeX!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/volume-2.js\");\n/* harmony import */ var _barrel_optimize_names_Download_Settings_Volume2_VolumeX_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=Download,Settings,Volume2,VolumeX!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/volume-x.js\");\n/* harmony import */ var _barrel_optimize_names_Download_Settings_Volume2_VolumeX_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=Download,Settings,Volume2,VolumeX!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/download.js\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\nfunction ExportOptions(param) {\n    let { settings, onSettingsChange, onExport, isExporting, exportProgress, disabled = false, className } = param;\n    _s();\n    const [showAdvanced, setShowAdvanced] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handleSettingChange = (key, value)=>{\n        onSettingsChange({\n            ...settings,\n            [key]: value\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"bg-white rounded-lg border shadow-sm\", className),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"p-4 border-b\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-between\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"text-lg font-semibold text-gray-900\",\n                            children: \"Export Options\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                            lineNumber: 41,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>setShowAdvanced(!showAdvanced),\n                            className: \"p-2 text-gray-500 hover:text-gray-700 rounded-full hover:bg-gray-100\",\n                            title: \"Advanced Settings\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Download_Settings_Volume2_VolumeX_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                className: \"w-5 h-5\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 47,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                            lineNumber: 42,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                    lineNumber: 40,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                lineNumber: 39,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"p-4 space-y-6\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-3\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                className: \"block text-sm font-medium text-gray-700\",\n                                children: \"Output Format\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 55,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"grid grid-cols-2 gap-3\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        onClick: ()=>handleSettingChange(\"format\", \"gif\"),\n                                        disabled: disabled,\n                                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"p-3 border-2 rounded-lg text-left transition-all\", \"hover:border-blue-300 disabled:opacity-50\", {\n                                            \"border-blue-500 bg-blue-50\": settings.format === \"gif\",\n                                            \"border-gray-200\": settings.format !== \"gif\"\n                                        }),\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"font-medium\",\n                                                children: \"GIF\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                                lineNumber: 71,\n                                                columnNumber: 15\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"text-sm text-gray-500\",\n                                                children: \"Widely compatible, smaller file size\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                                lineNumber: 72,\n                                                columnNumber: 15\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                        lineNumber: 59,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        onClick: ()=>handleSettingChange(\"format\", \"mp4\"),\n                                        disabled: disabled,\n                                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"p-3 border-2 rounded-lg text-left transition-all\", \"hover:border-blue-300 disabled:opacity-50\", {\n                                            \"border-blue-500 bg-blue-50\": settings.format === \"mp4\",\n                                            \"border-gray-200\": settings.format !== \"mp4\"\n                                        }),\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"font-medium\",\n                                                children: \"MP4\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                                lineNumber: 89,\n                                                columnNumber: 15\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"text-sm text-gray-500\",\n                                                children: \"Higher quality, better compression\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                                lineNumber: 90,\n                                                columnNumber: 15\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                        lineNumber: 77,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 58,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                        lineNumber: 54,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-3\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                className: \"block text-sm font-medium text-gray-700\",\n                                children: \"Resolution\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 99,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"grid grid-cols-3 gap-2\",\n                                children: [\n                                    \"480p\",\n                                    \"720p\",\n                                    \"1080p\"\n                                ].map((resolution)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        onClick: ()=>handleSettingChange(\"resolution\", resolution),\n                                        disabled: disabled,\n                                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"px-3 py-2 border rounded-lg text-sm font-medium transition-all\", \"hover:border-blue-300 disabled:opacity-50\", {\n                                            \"border-blue-500 bg-blue-50 text-blue-700\": settings.resolution === resolution,\n                                            \"border-gray-200 text-gray-700\": settings.resolution !== resolution\n                                        }),\n                                        children: resolution\n                                    }, resolution, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                        lineNumber: 104,\n                                        columnNumber: 15\n                                    }, this))\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 102,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                        lineNumber: 98,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-3\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                className: \"block text-sm font-medium text-gray-700\",\n                                children: [\n                                    \"Frame Duration: \",\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-blue-600 font-semibold\",\n                                        children: [\n                                            settings.frameDuration,\n                                            \"s\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                        lineNumber: 126,\n                                        columnNumber: 29\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 125,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                type: \"range\",\n                                min: \"0.1\",\n                                max: \"3\",\n                                step: \"0.1\",\n                                value: settings.frameDuration,\n                                onChange: (e)=>handleSettingChange(\"frameDuration\", parseFloat(e.target.value)),\n                                disabled: disabled,\n                                className: \"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer disabled:opacity-50 slider-blue\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 128,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex justify-between text-xs text-gray-500\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: \"0.1s (Fast)\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                        lineNumber: 139,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: \"3s (Slow)\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                        lineNumber: 140,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 138,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                        lineNumber: 124,\n                        columnNumber: 9\n                    }, this),\n                    showAdvanced && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-4 pt-4 border-t\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                className: \"font-medium text-gray-900\",\n                                children: \"Advanced Options\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 147,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center justify-between\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                    className: \"flex items-center space-x-2\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                            type: \"checkbox\",\n                                            checked: settings.loop,\n                                            onChange: (e)=>handleSettingChange(\"loop\", e.target.checked),\n                                            disabled: disabled,\n                                            className: \"rounded border-gray-300 text-blue-600 disabled:opacity-50\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                            lineNumber: 152,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            className: \"text-sm font-medium text-gray-700\",\n                                            children: \"Loop Animation\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                            lineNumber: 159,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                    lineNumber: 151,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 150,\n                                columnNumber: 13\n                            }, this),\n                            settings.format === \"mp4\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center justify-between\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        className: \"flex items-center space-x-2\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                type: \"checkbox\",\n                                                checked: settings.addSound,\n                                                onChange: (e)=>handleSettingChange(\"addSound\", e.target.checked),\n                                                disabled: disabled,\n                                                className: \"rounded border-gray-300 text-blue-600 disabled:opacity-50\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                                lineNumber: 169,\n                                                columnNumber: 19\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"text-sm font-medium text-gray-700\",\n                                                children: \"Add Click Sound\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                                lineNumber: 176,\n                                                columnNumber: 19\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                        lineNumber: 168,\n                                        columnNumber: 17\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-gray-400\",\n                                        children: settings.addSound ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Download_Settings_Volume2_VolumeX_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                            className: \"w-4 h-4\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                            lineNumber: 183,\n                                            columnNumber: 21\n                                        }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Download_Settings_Volume2_VolumeX_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                            className: \"w-4 h-4\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                            lineNumber: 185,\n                                            columnNumber: 21\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                        lineNumber: 181,\n                                        columnNumber: 17\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 167,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                        lineNumber: 146,\n                        columnNumber: 11\n                    }, this),\n                    isExporting && exportProgress && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-3 p-4 bg-blue-50 rounded-lg\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center justify-between\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-sm font-medium text-blue-900\",\n                                        children: [\n                                            exportProgress.phase === \"preparing\" && \"Preparing frames...\",\n                                            exportProgress.phase === \"encoding\" && \"Encoding video...\",\n                                            exportProgress.phase === \"finalizing\" && \"Finalizing export...\",\n                                            exportProgress.phase === \"complete\" && \"Export complete!\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                        lineNumber: 197,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-sm text-blue-700\",\n                                        children: [\n                                            Math.round(exportProgress.progress * 100),\n                                            \"%\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                        lineNumber: 203,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 196,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-full bg-blue-200 rounded-full h-2\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"bg-blue-600 h-2 rounded-full transition-all duration-300\",\n                                    style: {\n                                        width: \"\".concat(exportProgress.progress * 100, \"%\")\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                    lineNumber: 209,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 208,\n                                columnNumber: 13\n                            }, this),\n                            exportProgress.frameCount && exportProgress.currentFrame && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-xs text-blue-700 text-center\",\n                                children: [\n                                    \"Frame \",\n                                    exportProgress.currentFrame,\n                                    \" of \",\n                                    exportProgress.frameCount\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 216,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                        lineNumber: 195,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: onExport,\n                        disabled: disabled || isExporting,\n                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"w-full flex items-center justify-center space-x-2 px-4 py-3\", \"bg-blue-600 text-white rounded-lg font-medium transition-all\", \"hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"),\n                        children: isExporting ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                    lineNumber: 235,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    children: \"Exporting...\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                    lineNumber: 236,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Download_Settings_Volume2_VolumeX_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                    className: \"w-5 h-5\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                    lineNumber: 240,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    children: [\n                                        \"Export \",\n                                        settings.format.toUpperCase()\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                    lineNumber: 241,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                        lineNumber: 224,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-xs text-gray-500 text-center space-y-1\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    \"Format: \",\n                                    settings.format.toUpperCase(),\n                                    \" • Resolution: \",\n                                    settings.resolution\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 248,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    \"Frame Duration: \",\n                                    settings.frameDuration,\n                                    \"s • Loop: \",\n                                    settings.loop ? \"Yes\" : \"No\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 251,\n                                columnNumber: 11\n                            }, this),\n                            settings.format === \"mp4\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    \"Audio: \",\n                                    settings.addSound ? \"Click sounds\" : \"Silent\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                                lineNumber: 255,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                        lineNumber: 247,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n                lineNumber: 52,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ExportOptions.tsx\",\n        lineNumber: 38,\n        columnNumber: 5\n    }, this);\n}\n_s(ExportOptions, \"diUupyFUPsicRVzBk/LhsrBq6XI=\");\n_c = ExportOptions;\nvar _c;\n$RefreshReg$(_c, \"ExportOptions\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ExportOptions.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ImageGrid.tsx":
/*!**********************************!*\
  !*** ./components/ImageGrid.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ImageGrid; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowDown,ArrowUp,Eye,RotateCcw,X!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/eye.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowDown,ArrowUp,Eye,RotateCcw,X!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/rotate-ccw.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowDown,ArrowUp,Eye,RotateCcw,X!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-up.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowDown,ArrowUp,Eye,RotateCcw,X!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-down.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowDown,ArrowUp,Eye,RotateCcw,X!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/x.js\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\nfunction ImageGrid(param) {\n    let { images, onRemoveImage, onReorderImages, onRetryAlignment, disabled = false, className } = param;\n    _s();\n    const [selectedImage, setSelectedImage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [draggedIndex, setDraggedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [dragOverIndex, setDragOverIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const handleMoveUp = (index)=>{\n        if (index > 0) {\n            onReorderImages(index, index - 1);\n        }\n    };\n    const handleMoveDown = (index)=>{\n        if (index < images.length - 1) {\n            onReorderImages(index, index + 1);\n        }\n    };\n    const handleDragStart = (e, index)=>{\n        if (disabled) return;\n        setDraggedIndex(index);\n        e.dataTransfer.effectAllowed = \"move\";\n        e.dataTransfer.setData(\"text/html\", e.currentTarget.outerHTML);\n    };\n    const handleDragOver = (e, index)=>{\n        if (disabled || draggedIndex === null) return;\n        e.preventDefault();\n        e.dataTransfer.dropEffect = \"move\";\n        setDragOverIndex(index);\n    };\n    const handleDragLeave = ()=>{\n        setDragOverIndex(null);\n    };\n    const handleDrop = (e, dropIndex)=>{\n        e.preventDefault();\n        if (disabled || draggedIndex === null || draggedIndex === dropIndex) {\n            setDraggedIndex(null);\n            setDragOverIndex(null);\n            return;\n        }\n        onReorderImages(draggedIndex, dropIndex);\n        setDraggedIndex(null);\n        setDragOverIndex(null);\n    };\n    const handleDragEnd = ()=>{\n        setDraggedIndex(null);\n        setDragOverIndex(null);\n    };\n    if (images.length === 0) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"text-center py-8\", className),\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                className: \"text-gray-500\",\n                children: \"No images uploaded yet\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                lineNumber: 78,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n            lineNumber: 77,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"space-y-4\", className),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex items-center justify-between\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: \"text-lg font-semibold text-gray-900\",\n                        children: [\n                            \"Uploaded Images (\",\n                            images.length,\n                            \")\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                        lineNumber: 86,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"text-right\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-sm text-gray-500\",\n                                children: [\n                                    images.filter((img)=>img.aligned).length,\n                                    \" aligned, \",\n                                    \" \",\n                                    images.filter((img)=>!img.aligned).length,\n                                    \" pending\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                lineNumber: 91,\n                                columnNumber: 11\n                            }, this),\n                            images.length > 1 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-xs text-gray-400 mt-1\",\n                                children: \"Drag to reorder • Use arrows to adjust\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                lineNumber: 96,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                        lineNumber: 90,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                lineNumber: 85,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4\",\n                children: images.map((image, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        draggable: !disabled,\n                        onDragStart: (e)=>handleDragStart(e, index),\n                        onDragOver: (e)=>handleDragOver(e, index),\n                        onDragLeave: handleDragLeave,\n                        onDrop: (e)=>handleDrop(e, index),\n                        onDragEnd: handleDragEnd,\n                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"relative group bg-white rounded-lg shadow-sm border-2 transition-all duration-200\", \"hover:shadow-md hover:scale-105\", {\n                            \"border-green-300 bg-green-50\": image.aligned,\n                            \"border-orange-300 bg-orange-50\": !image.aligned,\n                            \"opacity-50\": disabled,\n                            \"opacity-60 transform scale-95\": draggedIndex === index,\n                            \"border-blue-400 border-dashed bg-blue-50\": dragOverIndex === index && draggedIndex !== index,\n                            \"cursor-move\": !disabled,\n                            \"cursor-not-allowed\": disabled\n                        }),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"aspect-square relative overflow-hidden rounded-t-lg\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                        src: image.processedUrl || image.url,\n                                        alt: \"Upload \".concat(index + 1),\n                                        className: \"w-full h-full object-cover\",\n                                        onClick: ()=>setSelectedImage(image)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                        lineNumber: 129,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"absolute top-2 left-2 w-3 h-3 rounded-full\", {\n                                            \"bg-green-500\": image.aligned,\n                                            \"bg-orange-500 animate-pulse\": !image.aligned\n                                        })\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                        lineNumber: 137,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-200 flex items-center justify-center\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex space-x-2\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                    onClick: ()=>setSelectedImage(image),\n                                                    className: \"p-2 bg-white rounded-full hover:bg-gray-100 transition-colors\",\n                                                    title: \"Preview\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        className: \"w-4 h-4\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                                        lineNumber: 153,\n                                                        columnNumber: 21\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                                    lineNumber: 148,\n                                                    columnNumber: 19\n                                                }, this),\n                                                !image.aligned && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                    onClick: ()=>onRetryAlignment(image.id),\n                                                    disabled: disabled,\n                                                    className: \"p-2 bg-white rounded-full hover:bg-gray-100 transition-colors disabled:opacity-50\",\n                                                    title: \"Retry Alignment\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                                        className: \"w-4 h-4\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                                        lineNumber: 163,\n                                                        columnNumber: 23\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                                    lineNumber: 157,\n                                                    columnNumber: 21\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                            lineNumber: 147,\n                                            columnNumber: 17\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                        lineNumber: 146,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                lineNumber: 128,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"p-3 space-y-2\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-xs text-gray-600 truncate\",\n                                        children: image.file.name\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                        lineNumber: 172,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-xs text-gray-500\",\n                                        children: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.formatFileSize)(image.file.size)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                        lineNumber: 176,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex items-center justify-between\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"text-xs font-medium\", {\n                                                    \"text-green-600\": image.aligned,\n                                                    \"text-orange-600\": !image.aligned\n                                                }),\n                                                children: image.aligned ? \"Aligned\" : \"Processing...\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                                lineNumber: 181,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"flex space-x-1\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                        onClick: ()=>handleMoveUp(index),\n                                                        disabled: disabled || index === 0,\n                                                        className: \"p-1 text-gray-400 hover:text-gray-600 disabled:opacity-50\",\n                                                        title: \"Move Up\",\n                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                                            className: \"w-3 h-3\"\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                                            lineNumber: 198,\n                                                            columnNumber: 21\n                                                        }, this)\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                                        lineNumber: 192,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                        onClick: ()=>handleMoveDown(index),\n                                                        disabled: disabled || index === images.length - 1,\n                                                        className: \"p-1 text-gray-400 hover:text-gray-600 disabled:opacity-50\",\n                                                        title: \"Move Down\",\n                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                                            className: \"w-3 h-3\"\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                                            lineNumber: 207,\n                                                            columnNumber: 21\n                                                        }, this)\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                                        lineNumber: 201,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                                lineNumber: 191,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                        lineNumber: 180,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                lineNumber: 171,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>onRemoveImage(image.id),\n                                disabled: disabled,\n                                className: \"absolute -top-2 -right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors disabled:opacity-50\",\n                                title: \"Remove Image\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                    className: \"w-3 h-3\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                    lineNumber: 220,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                lineNumber: 214,\n                                columnNumber: 13\n                            }, this),\n                            !image.aligned && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                    lineNumber: 226,\n                                    columnNumber: 17\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                lineNumber: 225,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, image.id, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                        lineNumber: 105,\n                        columnNumber: 11\n                    }, this))\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                lineNumber: 103,\n                columnNumber: 7\n            }, this),\n            selectedImage && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-white rounded-lg max-w-2xl max-h-full overflow-auto\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"p-4 border-b flex items-center justify-between\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                    className: \"text-lg font-semibold\",\n                                    children: selectedImage.file.name\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                    lineNumber: 238,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: ()=>setSelectedImage(null),\n                                    className: \"p-2 hover:bg-gray-100 rounded-full\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowDown_ArrowUp_Eye_RotateCcw_X_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                        className: \"w-5 h-5\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                        lineNumber: 245,\n                                        columnNumber: 17\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                    lineNumber: 241,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                            lineNumber: 237,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"p-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                    src: selectedImage.processedUrl || selectedImage.url,\n                                    alt: \"Preview\",\n                                    className: \"w-full h-auto max-h-96 object-contain\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                    lineNumber: 250,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"mt-4 space-y-2 text-sm text-gray-600\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                \"Size: \",\n                                                (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.formatFileSize)(selectedImage.file.size)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                            lineNumber: 257,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                \"Status: \",\n                                                selectedImage.aligned ? \"Aligned\" : \"Processing\"\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                            lineNumber: 258,\n                                            columnNumber: 17\n                                        }, this),\n                                        selectedImage.eyePoints && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                \"Eye Points: Left(\",\n                                                selectedImage.eyePoints.left[0].toFixed(0),\n                                                \", \",\n                                                selectedImage.eyePoints.left[1].toFixed(0),\n                                                \"), Right(\",\n                                                selectedImage.eyePoints.right[0].toFixed(0),\n                                                \", \",\n                                                selectedImage.eyePoints.right[1].toFixed(0),\n                                                \")\"\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                            lineNumber: 260,\n                                            columnNumber: 19\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                                    lineNumber: 256,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                            lineNumber: 249,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                    lineNumber: 236,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n                lineNumber: 235,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageGrid.tsx\",\n        lineNumber: 84,\n        columnNumber: 5\n    }, this);\n}\n_s(ImageGrid, \"Hj4ZUTedqNAypK4dNbFyCwMbvDs=\");\n_c = ImageGrid;\nvar _c;\n$RefreshReg$(_c, \"ImageGrid\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ImageGrid.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ImageUpload.tsx":
/*!************************************!*\
  !*** ./components/ImageUpload.tsx ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ImageUpload; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_Image_Upload_X_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=Image,Upload,X!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/x.js\");\n/* harmony import */ var _barrel_optimize_names_Image_Upload_X_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Image,Upload,X!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/upload.js\");\n/* harmony import */ var _barrel_optimize_names_Image_Upload_X_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=Image,Upload,X!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/image.js\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\nfunction ImageUpload(param) {\n    let { onImagesUpload, maxFiles = 50, disabled = false, className } = param;\n    _s();\n    const [isDragActive, setIsDragActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isDragReject, setIsDragReject] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const validateFiles = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((files)=>{\n        const validFiles = [];\n        const invalidFiles = [];\n        Array.from(files).forEach((file)=>{\n            if (file.type.startsWith(\"image/\")) {\n                if (file.size <= 10 * 1024 * 1024) {\n                    validFiles.push(file);\n                } else {\n                    invalidFiles.push(\"\".concat(file.name, \" (too large)\"));\n                }\n            } else {\n                invalidFiles.push(\"\".concat(file.name, \" (not an image)\"));\n            }\n        });\n        if (validFiles.length > maxFiles) {\n            invalidFiles.push(\"Only first \".concat(maxFiles, \" files will be processed\"));\n            return validFiles.slice(0, maxFiles);\n        }\n        if (invalidFiles.length > 0) {\n            console.warn(\"Some files were rejected:\", invalidFiles);\n        }\n        return validFiles;\n    }, [\n        maxFiles\n    ]);\n    const handleDrop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e)=>{\n        e.preventDefault();\n        setIsDragActive(false);\n        setIsDragReject(false);\n        if (disabled) return;\n        const files = validateFiles(e.dataTransfer.files);\n        if (files.length > 0) {\n            onImagesUpload(files);\n        }\n    }, [\n        disabled,\n        onImagesUpload,\n        validateFiles\n    ]);\n    const handleDragOver = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e)=>{\n        e.preventDefault();\n        if (disabled) return;\n        const hasImages = Array.from(e.dataTransfer.items).some((item)=>item.type.startsWith(\"image/\"));\n        setIsDragActive(hasImages);\n        setIsDragReject(!hasImages);\n    }, [\n        disabled\n    ]);\n    const handleDragLeave = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e)=>{\n        e.preventDefault();\n        setIsDragActive(false);\n        setIsDragReject(false);\n    }, []);\n    const handleFileInput = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e)=>{\n        if (!e.target.files || disabled) return;\n        const files = validateFiles(e.target.files);\n        if (files.length > 0) {\n            onImagesUpload(files);\n        }\n        // Reset input\n        e.target.value = \"\";\n    }, [\n        disabled,\n        onImagesUpload,\n        validateFiles\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"w-full\", className),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                onDrop: handleDrop,\n                onDragOver: handleDragOver,\n                onDragLeave: handleDragLeave,\n                className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"relative border-2 border-dashed rounded-lg p-8 text-center transition-colors duration-200\", \"hover:border-blue-400 hover:bg-blue-50/50\", {\n                    \"border-gray-300 bg-gray-50\": !isDragActive && !isDragReject,\n                    \"border-blue-500 bg-blue-50\": isDragActive,\n                    \"border-red-500 bg-red-50\": isDragReject,\n                    \"opacity-50 cursor-not-allowed\": disabled,\n                    \"cursor-pointer\": !disabled\n                }),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                        type: \"file\",\n                        multiple: true,\n                        accept: \"image/*\",\n                        onChange: handleFileInput,\n                        disabled: disabled,\n                        className: \"absolute inset-0 w-full h-full opacity-0 cursor-pointer disabled:cursor-not-allowed\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                        lineNumber: 110,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex flex-col items-center space-y-4\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_2__.cn)(\"mx-auto w-12 h-12 rounded-full flex items-center justify-center\", \"bg-blue-100 text-blue-600\", {\n                                    \"bg-red-100 text-red-600\": isDragReject\n                                }),\n                                children: isDragReject ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Image_Upload_X_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                    className: \"w-6 h-6\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                                    lineNumber: 126,\n                                    columnNumber: 15\n                                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Image_Upload_X_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                    className: \"w-6 h-6\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                                    lineNumber: 128,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                                lineNumber: 120,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"space-y-2\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-lg font-medium text-gray-900\",\n                                        children: [\n                                            isDragActive && \"Drop images here\",\n                                            isDragReject && \"Only image files are allowed\",\n                                            !isDragActive && !isDragReject && \"Upload Images\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                                        lineNumber: 133,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-sm text-gray-500\",\n                                        children: \"Drag & drop or click to select images\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                                        lineNumber: 139,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-xs text-gray-400\",\n                                        children: [\n                                            \"Supports JPG, PNG, GIF up to 10MB each (max \",\n                                            maxFiles,\n                                            \" files)\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                                        lineNumber: 143,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                                lineNumber: 132,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                        lineNumber: 119,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                lineNumber: 94,\n                columnNumber: 7\n            }, this),\n            !disabled && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mt-4 text-center\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                    className: \"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer transition-colors\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Image_Upload_X_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                            className: \"w-4 h-4 mr-2\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                            lineNumber: 153,\n                            columnNumber: 13\n                        }, this),\n                        \"Choose Files\",\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                            type: \"file\",\n                            multiple: true,\n                            accept: \"image/*\",\n                            onChange: handleFileInput,\n                            className: \"hidden\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                            lineNumber: 155,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                    lineNumber: 152,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n                lineNumber: 151,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ImageUpload.tsx\",\n        lineNumber: 93,\n        columnNumber: 5\n    }, this);\n}\n_s(ImageUpload, \"BB4IAboSzTazX07iIyVQfYixOtw=\");\n_c = ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ImageUpload.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ProcessingIndicator.tsx":
/*!********************************************!*\
  !*** ./components/ProcessingIndicator.tsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ProcessingIndicator; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n\n\nfunction ProcessingIndicator(param) {\n    let { status, className } = param;\n    if (!status.isProcessing && !status.error) {\n        return null;\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_1__.cn)(\"bg-white rounded-lg border shadow-sm p-4\", className),\n        children: status.error ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex items-center space-x-3 text-red-600\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"w-5 h-5 rounded-full bg-red-100 flex items-center justify-center\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                        className: \"w-3 h-3\",\n                        fill: \"currentColor\",\n                        viewBox: \"0 0 20 20\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                            fillRule: \"evenodd\",\n                            d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\",\n                            clipRule: \"evenodd\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                            lineNumber: 20,\n                            columnNumber: 15\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                        lineNumber: 19,\n                        columnNumber: 13\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                    lineNumber: 18,\n                    columnNumber: 11\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"font-medium\",\n                            children: \"Processing Error\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                            lineNumber: 24,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"text-sm text-red-500\",\n                            children: status.error\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                            lineNumber: 25,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                    lineNumber: 23,\n                    columnNumber: 11\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n            lineNumber: 17,\n            columnNumber: 9\n        }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"space-y-3\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center space-x-3\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                            lineNumber: 31,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"font-medium text-gray-900\",\n                                    children: status.currentStep\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                                    lineNumber: 33,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"text-sm text-gray-500\",\n                                    children: [\n                                        Math.round(status.progress * 100),\n                                        \"% complete\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                                    lineNumber: 34,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                            lineNumber: 32,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                    lineNumber: 30,\n                    columnNumber: 11\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"w-full bg-gray-200 rounded-full h-2\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"bg-blue-600 h-2 rounded-full transition-all duration-300\",\n                        style: {\n                            width: \"\".concat(status.progress * 100, \"%\")\n                        }\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                        lineNumber: 41,\n                        columnNumber: 13\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n                    lineNumber: 40,\n                    columnNumber: 11\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n            lineNumber: 29,\n            columnNumber: 9\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\sanjo\\\\Documents\\\\match cut\\\\components\\\\ProcessingIndicator.tsx\",\n        lineNumber: 15,\n        columnNumber: 5\n    }, this);\n}\n_c = ProcessingIndicator;\nvar _c;\n$RefreshReg$(_c, \"ProcessingIndicator\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvUHJvY2Vzc2luZ0luZGljYXRvci50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQVFsQixTQUFTQyxvQkFBb0IsS0FBK0M7UUFBL0MsRUFBRUMsTUFBTSxFQUFFQyxTQUFTLEVBQTRCLEdBQS9DO0lBQzFDLElBQUksQ0FBQ0QsT0FBT0UsWUFBWSxJQUFJLENBQUNGLE9BQU9HLEtBQUssRUFBRTtRQUN6QyxPQUFPO0lBQ1Q7SUFFQSxxQkFDRSw4REFBQ0M7UUFBSUgsV0FBV0gsOENBQUVBLENBQUMsNENBQTRDRztrQkFDNURELE9BQU9HLEtBQUssaUJBQ1gsOERBQUNDO1lBQUlILFdBQVU7OzhCQUNiLDhEQUFDRztvQkFBSUgsV0FBVTs4QkFDYiw0RUFBQ0k7d0JBQUlKLFdBQVU7d0JBQVVLLE1BQUs7d0JBQWVDLFNBQVE7a0NBQ25ELDRFQUFDQzs0QkFBS0MsVUFBUzs0QkFBVUMsR0FBRTs0QkFBb0hDLFVBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBRzVKLDhEQUFDUDs7c0NBQ0MsOERBQUNBOzRCQUFJSCxXQUFVO3NDQUFjOzs7Ozs7c0NBQzdCLDhEQUFDRzs0QkFBSUgsV0FBVTtzQ0FBd0JELE9BQU9HLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQUl2RCw4REFBQ0M7WUFBSUgsV0FBVTs7OEJBQ2IsOERBQUNHO29CQUFJSCxXQUFVOztzQ0FDYiw4REFBQ0c7NEJBQUlILFdBQVU7Ozs7OztzQ0FDZiw4REFBQ0c7OzhDQUNDLDhEQUFDQTtvQ0FBSUgsV0FBVTs4Q0FBNkJELE9BQU9ZLFdBQVc7Ozs7Ozs4Q0FDOUQsOERBQUNSO29DQUFJSCxXQUFVOzt3Q0FDWlksS0FBS0MsS0FBSyxDQUFDZCxPQUFPZSxRQUFRLEdBQUc7d0NBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJBS3pDLDhEQUFDWDtvQkFBSUgsV0FBVTs4QkFDYiw0RUFBQ0c7d0JBQ0NILFdBQVU7d0JBQ1ZlLE9BQU87NEJBQUVDLE9BQU8sR0FBeUIsT0FBdEJqQixPQUFPZSxRQUFRLEdBQUcsS0FBSTt3QkFBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU8xRDtLQXpDd0JoQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb21wb25lbnRzL1Byb2Nlc3NpbmdJbmRpY2F0b3IudHN4P2E2ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscyc7XHJcbmltcG9ydCB7IFByb2Nlc3NpbmdTdGF0dXMgfSBmcm9tICdAL2xpYi90eXBlcyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvY2Vzc2luZ0luZGljYXRvclByb3BzIHtcclxuICBzdGF0dXM6IFByb2Nlc3NpbmdTdGF0dXM7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcm9jZXNzaW5nSW5kaWNhdG9yKHsgc3RhdHVzLCBjbGFzc05hbWUgfTogUHJvY2Vzc2luZ0luZGljYXRvclByb3BzKSB7XHJcbiAgaWYgKCFzdGF0dXMuaXNQcm9jZXNzaW5nICYmICFzdGF0dXMuZXJyb3IpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcImJnLXdoaXRlIHJvdW5kZWQtbGcgYm9yZGVyIHNoYWRvdy1zbSBwLTRcIiwgY2xhc3NOYW1lKX0+XHJcbiAgICAgIHtzdGF0dXMuZXJyb3IgPyAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTMgdGV4dC1yZWQtNjAwXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctNSBoLTUgcm91bmRlZC1mdWxsIGJnLXJlZC0xMDAgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIj5cclxuICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJ3LTMgaC0zXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIj5cclxuICAgICAgICAgICAgICA8cGF0aCBmaWxsUnVsZT1cImV2ZW5vZGRcIiBkPVwiTTE4IDEwYTggOCAwIDExLTE2IDAgOCA4IDAgMDExNiAwem0tNyA0YTEgMSAwIDExLTIgMCAxIDEgMCAwMTIgMHptLTEtOWExIDEgMCAwMC0xIDF2NGExIDEgMCAxMDIgMFY2YTEgMSAwIDAwLTEtMXpcIiBjbGlwUnVsZT1cImV2ZW5vZGRcIiAvPlxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb250LW1lZGl1bVwiPlByb2Nlc3NpbmcgRXJyb3I8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtcmVkLTUwMFwiPntzdGF0dXMuZXJyb3J9PC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKSA6IChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktM1wiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTNcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXNwaW4gcm91bmRlZC1mdWxsIGgtNSB3LTUgYm9yZGVyLWItMiBib3JkZXItYmx1ZS02MDBcIj48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvbnQtbWVkaXVtIHRleHQtZ3JheS05MDBcIj57c3RhdHVzLmN1cnJlbnRTdGVwfTwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNTAwXCI+XHJcbiAgICAgICAgICAgICAgICB7TWF0aC5yb3VuZChzdGF0dXMucHJvZ3Jlc3MgKiAxMDApfSUgY29tcGxldGVcclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgYmctZ3JheS0yMDAgcm91bmRlZC1mdWxsIGgtMlwiPlxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmctYmx1ZS02MDAgaC0yIHJvdW5kZWQtZnVsbCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDBcIlxyXG4gICAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiBgJHtzdGF0dXMucHJvZ3Jlc3MgKiAxMDB9JWAgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufSJdLCJuYW1lcyI6WyJjbiIsIlByb2Nlc3NpbmdJbmRpY2F0b3IiLCJzdGF0dXMiLCJjbGFzc05hbWUiLCJpc1Byb2Nlc3NpbmciLCJlcnJvciIsImRpdiIsInN2ZyIsImZpbGwiLCJ2aWV3Qm94IiwicGF0aCIsImZpbGxSdWxlIiwiZCIsImNsaXBSdWxlIiwiY3VycmVudFN0ZXAiLCJNYXRoIiwicm91bmQiLCJwcm9ncmVzcyIsInN0eWxlIiwid2lkdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ProcessingIndicator.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/faceDetection.ts":
/*!******************************!*\
  !*** ./lib/faceDetection.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FaceDetector: function() { return /* binding */ FaceDetector; }\n/* harmony export */ });\n/* harmony import */ var _mediapipe_tasks_vision__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mediapipe/tasks-vision */ \"(app-pages-browser)/./node_modules/@mediapipe/tasks-vision/vision_bundle.mjs\");\n\nclass FaceDetector {\n    async initialize() {\n        try {\n            const vision = await _mediapipe_tasks_vision__WEBPACK_IMPORTED_MODULE_0__.FilesetResolver.forVisionTasks(\"https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.8/wasm\");\n            this.faceLandmarker = await _mediapipe_tasks_vision__WEBPACK_IMPORTED_MODULE_0__.FaceLandmarker.createFromOptions(vision, {\n                baseOptions: {\n                    modelAssetPath: \"https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task\",\n                    delegate: \"GPU\"\n                },\n                outputFaceBlendshapes: false,\n                outputFacialTransformationMatrixes: false,\n                runningMode: \"IMAGE\",\n                numFaces: 1\n            });\n            this.isInitialized = true;\n            console.log(\"MediaPipe Face Landmarker initialized successfully\");\n        } catch (error) {\n            console.error(\"Failed to initialize MediaPipe Face Landmarker:\", error);\n            throw new Error(\"Failed to initialize face detection service\");\n        }\n    }\n    async detectFace(imageElement) {\n        if (!this.isInitialized || !this.faceLandmarker) {\n            throw new Error(\"Face detector not initialized\");\n        }\n        try {\n            console.log(\"Detecting face in image \".concat(imageElement.width, \"x\").concat(imageElement.height));\n            const results = this.faceLandmarker.detect(imageElement);\n            if (!results.faceLandmarks || results.faceLandmarks.length === 0) {\n                console.log(\"No face landmarks detected\");\n                return null;\n            }\n            console.log(\"Found \".concat(results.faceLandmarks.length, \" face(s)\"));\n            const landmarks = results.faceLandmarks[0];\n            const eyePoints = this.extractEyePoints(landmarks, imageElement.width, imageElement.height);\n            if (!eyePoints) {\n                console.log(\"Failed to extract eye points from landmarks\");\n                return null;\n            }\n            console.log(\"Face detection successful\", {\n                leftEye: eyePoints.left,\n                rightEye: eyePoints.right\n            });\n            return {\n                landmarks: landmarks.map((landmark)=>({\n                        x: landmark.x,\n                        y: landmark.y,\n                        z: landmark.z\n                    })),\n                eyePoints,\n                confidence: 0.9,\n                faceBounds: this.calculateFaceBounds(landmarks, imageElement.width, imageElement.height)\n            };\n        } catch (error) {\n            console.error(\"Face detection failed:\", error);\n            return null;\n        }\n    }\n    extractEyePoints(landmarks, imageWidth, imageHeight) {\n        try {\n            // MediaPipe face landmark indices for more accurate eye detection\n            // Left eye landmarks: 33, 7, 163, 144, 145, 153, 154, 155, 133, 173, 157, 158, 159, 160, 161, 246\n            // Right eye landmarks: 362, 382, 381, 380, 374, 373, 390, 249, 263, 466, 388, 387, 386, 385, 384, 398\n            // Use multiple points for more stable eye center calculation\n            const leftEyePoints = [\n                landmarks[33],\n                landmarks[133],\n                landmarks[159],\n                landmarks[145]\n            ];\n            const rightEyePoints = [\n                landmarks[362],\n                landmarks[263],\n                landmarks[386],\n                landmarks[374]\n            ];\n            // Validate all required landmarks exist\n            if (leftEyePoints.some((point)=>!point) || rightEyePoints.some((point)=>!point)) {\n                console.log(\"Missing eye landmarks:\", {\n                    leftMissing: leftEyePoints.filter((p)=>!p).length,\n                    rightMissing: rightEyePoints.filter((p)=>!p).length\n                });\n                // Fallback to just main eye corners if detailed landmarks are missing\n                const leftEyeOuter = landmarks[33];\n                const leftEyeInner = landmarks[133];\n                const rightEyeInner = landmarks[362];\n                const rightEyeOuter = landmarks[263];\n                if (!leftEyeOuter || !leftEyeInner || !rightEyeInner || !rightEyeOuter) {\n                    console.log(\"Even basic eye landmarks are missing\");\n                    return null;\n                }\n                console.log(\"Using fallback eye detection with basic landmarks\");\n                const leftEyeCenter = [\n                    (leftEyeOuter.x + leftEyeInner.x) / 2 * imageWidth,\n                    (leftEyeOuter.y + leftEyeInner.y) / 2 * imageHeight\n                ];\n                const rightEyeCenter = [\n                    (rightEyeInner.x + rightEyeOuter.x) / 2 * imageWidth,\n                    (rightEyeInner.y + rightEyeOuter.y) / 2 * imageHeight\n                ];\n                return {\n                    left: leftEyeCenter,\n                    right: rightEyeCenter\n                };\n            }\n            // Calculate more accurate eye centers using multiple landmarks\n            const leftEyeCenter = [\n                leftEyePoints.reduce((sum, point)=>sum + point.x, 0) / leftEyePoints.length * imageWidth,\n                leftEyePoints.reduce((sum, point)=>sum + point.y, 0) / leftEyePoints.length * imageHeight\n            ];\n            const rightEyeCenter = [\n                rightEyePoints.reduce((sum, point)=>sum + point.x, 0) / rightEyePoints.length * imageWidth,\n                rightEyePoints.reduce((sum, point)=>sum + point.y, 0) / rightEyePoints.length * imageHeight\n            ];\n            return {\n                left: leftEyeCenter,\n                right: rightEyeCenter\n            };\n        } catch (error) {\n            console.error(\"Failed to extract eye points:\", error);\n            return null;\n        }\n    }\n    calculateFaceBounds(landmarks, imageWidth, imageHeight) {\n        // Key face boundary landmarks in MediaPipe\n        const faceBoundaryIndices = [\n            10,\n            152,\n            234,\n            454,\n            109,\n            10,\n            151,\n            175,\n            199,\n            208,\n            127,\n            162,\n            21,\n            54,\n            356,\n            389,\n            251,\n            284 // Additional right points\n        ];\n        const validLandmarks = faceBoundaryIndices.map((index)=>landmarks[index]).filter((landmark)=>landmark);\n        if (validLandmarks.length === 0) {\n            // Fallback to full image if no landmarks\n            return {\n                left: 0,\n                right: imageWidth,\n                top: 0,\n                bottom: imageHeight,\n                width: imageWidth,\n                height: imageHeight,\n                centerX: imageWidth / 2,\n                centerY: imageHeight / 2\n            };\n        }\n        // Find face boundaries\n        const left = Math.min(...validLandmarks.map((p)=>p.x)) * imageWidth;\n        const right = Math.max(...validLandmarks.map((p)=>p.x)) * imageWidth;\n        const top = Math.min(...validLandmarks.map((p)=>p.y)) * imageHeight;\n        const bottom = Math.max(...validLandmarks.map((p)=>p.y)) * imageHeight;\n        return {\n            left,\n            right,\n            top,\n            bottom,\n            width: right - left,\n            height: bottom - top,\n            centerX: (left + right) / 2,\n            centerY: (top + bottom) / 2\n        };\n    }\n    cleanup() {\n        if (this.faceLandmarker) {\n            this.faceLandmarker.close();\n            this.faceLandmarker = null;\n        }\n        this.isInitialized = false;\n    }\n    isReady() {\n        return this.isInitialized && this.faceLandmarker !== null;\n    }\n    constructor(){\n        this.faceLandmarker = null;\n        this.isInitialized = false;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/faceDetection.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/imageAlignment.ts":
/*!*******************************!*\
  !*** ./lib/imageAlignment.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageAligner: function() { return /* binding */ ImageAligner; }\n/* harmony export */ });\nclass ImageAligner {\n    alignImage(sourceImage, eyePoints, targetResolution) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = targetResolution.width;\n        canvas.height = targetResolution.height;\n        const ctx = canvas.getContext(\"2d\");\n        // Calculate alignment transform\n        const transform = this.calculateAlignmentTransform(eyePoints, targetResolution);\n        // Apply transformation and draw image\n        ctx.save();\n        ctx.setTransform(transform.matrix[0][0], transform.matrix[0][1], transform.matrix[1][0], transform.matrix[1][1], transform.matrix[0][2], transform.matrix[1][2]);\n        ctx.drawImage(sourceImage, 0, 0);\n        ctx.restore();\n        return canvas;\n    }\n    calculateAlignmentTransform(eyePoints, targetResolution) {\n        const { left, right } = eyePoints;\n        const { width, height } = targetResolution;\n        // Calculate current eye properties\n        const eyeCenterX = (left[0] + right[0]) / 2;\n        const eyeCenterY = (left[1] + right[1]) / 2;\n        const currentEyeDistance = Math.sqrt(Math.pow(right[0] - left[0], 2) + Math.pow(right[1] - left[1], 2));\n        const eyeAngle = Math.atan2(right[1] - left[1], right[0] - left[0]);\n        // Calculate target eye properties\n        const targetEyeDistancePixels = width * this.targetEyeDistance;\n        const targetEyeCenterX = width / 2;\n        const targetEyeCenterY = height * this.targetEyeY;\n        // Calculate transformations\n        const scale = targetEyeDistancePixels / currentEyeDistance;\n        const rotation = -eyeAngle; // Negative to counter-rotate\n        // Create transformation matrix\n        const cos = Math.cos(rotation);\n        const sin = Math.sin(rotation);\n        // Translation to center eyes at origin\n        const tx1 = -eyeCenterX;\n        const ty1 = -eyeCenterY;\n        // Scale and rotate\n        const scaleRotateMatrix = [\n            [\n                scale * cos,\n                -scale * sin\n            ],\n            [\n                scale * sin,\n                scale * cos\n            ]\n        ];\n        // Translation to target position\n        const tx2 = targetEyeCenterX;\n        const ty2 = targetEyeCenterY;\n        // Combine transformations: translate -> scale/rotate -> translate\n        const matrix = [\n            [\n                scaleRotateMatrix[0][0],\n                scaleRotateMatrix[0][1],\n                scaleRotateMatrix[0][0] * tx1 + scaleRotateMatrix[0][1] * ty1 + tx2\n            ],\n            [\n                scaleRotateMatrix[1][0],\n                scaleRotateMatrix[1][1],\n                scaleRotateMatrix[1][0] * tx1 + scaleRotateMatrix[1][1] * ty1 + ty2\n            ]\n        ];\n        return {\n            rotation: rotation * (180 / Math.PI),\n            scale,\n            translation: [\n                tx2 - eyeCenterX * scale,\n                ty2 - eyeCenterY * scale\n            ],\n            matrix\n        };\n    }\n    // Full image alignment method that preserves entire image on canvas\n    alignImageFull(sourceImage, eyePoints, targetResolution) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = targetResolution.width;\n        canvas.height = targetResolution.height;\n        const ctx = canvas.getContext(\"2d\");\n        const { left, right } = eyePoints;\n        const { width: canvasWidth, height: canvasHeight } = targetResolution;\n        // Calculate eye properties in source image\n        const eyeCenterX = (left[0] + right[0]) / 2;\n        const eyeCenterY = (left[1] + right[1]) / 2;\n        const eyeAngle = Math.atan2(right[1] - left[1], right[0] - left[0]);\n        const currentEyeDistance = Math.sqrt(Math.pow(right[0] - left[0], 2) + Math.pow(right[1] - left[1], 2));\n        // Target eye properties on canvas\n        const targetEyeDistance = canvasWidth * this.targetEyeDistance;\n        const targetEyeCenterX = canvasWidth / 2;\n        const targetEyeCenterY = canvasHeight * this.targetEyeY;\n        // Calculate scale based on eye distance\n        const eyeScale = targetEyeDistance / currentEyeDistance;\n        // Calculate the scaled image dimensions\n        const scaledImageWidth = sourceImage.width * eyeScale;\n        const scaledImageHeight = sourceImage.height * eyeScale;\n        // Calculate final scale to fit entire image on canvas if needed\n        const canvasFitScaleX = canvasWidth / scaledImageWidth;\n        const canvasFitScaleY = canvasHeight / scaledImageHeight;\n        const canvasFitScale = Math.min(canvasFitScaleX, canvasFitScaleY, 1); // Don't upscale beyond eye scale\n        // Final scale combines eye alignment and canvas fitting\n        const finalScale = eyeScale * canvasFitScale;\n        // Calculate where the image should be positioned to keep eyes at target position\n        const scaledEyeCenterX = eyeCenterX * finalScale;\n        const scaledEyeCenterY = eyeCenterY * finalScale;\n        // Calculate image position (top-left corner) to place eyes at target position\n        const cos = Math.cos(-eyeAngle);\n        const sin = Math.sin(-eyeAngle);\n        // Apply transformations\n        ctx.save();\n        // Clear canvas with transparent background\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n        console.log(\"alignImageFull debug:\", {\n            sourceImageSize: {\n                width: sourceImage.width,\n                height: sourceImage.height\n            },\n            canvasSize: {\n                width: canvasWidth,\n                height: canvasHeight\n            },\n            eyeScale,\n            canvasFitScale,\n            finalScale,\n            eyeCenterX,\n            eyeCenterY,\n            targetEyeCenterX,\n            targetEyeCenterY,\n            eyeAngle: eyeAngle * (180 / Math.PI) + \" degrees\",\n            imageComplete: sourceImage.complete,\n            imageSrc: sourceImage.src.substring(0, 50) + \"...\"\n        });\n        // Verify source image has content by drawing to a test canvas\n        const testCanvas = document.createElement(\"canvas\");\n        testCanvas.width = sourceImage.width;\n        testCanvas.height = sourceImage.height;\n        const testCtx = testCanvas.getContext(\"2d\");\n        testCtx.drawImage(sourceImage, 0, 0);\n        const testImageData = testCtx.getImageData(0, 0, sourceImage.width, sourceImage.height);\n        const sourceHasContent = testImageData.data.some((value, index)=>{\n            return index % 4 === 3 && value > 0; // Check alpha channel\n        });\n        console.log(\"Source image has content:\", sourceHasContent);\n        // Move to target eye center\n        ctx.translate(targetEyeCenterX, targetEyeCenterY);\n        // Rotate to align eyes horizontally\n        ctx.rotate(-eyeAngle);\n        // Scale to match target eye distance and fit canvas\n        ctx.scale(finalScale, finalScale);\n        // Draw image centered on eye center in the scaled/rotated coordinate system\n        ctx.drawImage(sourceImage, -eyeCenterX, -eyeCenterY, sourceImage.width, sourceImage.height);\n        console.log(\"DrawImage parameters:\", {\n            dx: -eyeCenterX,\n            dy: -eyeCenterY,\n            dWidth: sourceImage.width,\n            dHeight: sourceImage.height,\n            currentTransform: ctx.getTransform()\n        });\n        // Check immediately if drawing worked within the transform\n        const immediateCheck = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n        const drewSomething = immediateCheck.data.some((value, index)=>{\n            return index % 4 === 3 && value > 0;\n        });\n        console.log(\"Content exists immediately after drawImage (within transform):\", drewSomething);\n        ctx.restore();\n        // Debug: Check if canvas has content\n        const imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n        const hasContent = imageData.data.some((value, index)=>{\n            return index % 4 === 3 && value > 0; // Check alpha channel for non-transparent pixels\n        });\n        console.log(\"Canvas has content after drawing:\", hasContent);\n        if (!hasContent) {\n            console.warn(\"WARNING: Canvas appears to be empty after alignment\");\n            // Debug: Try a simple red rectangle to verify canvas is working\n            ctx.fillStyle = \"red\";\n            ctx.fillRect(10, 10, 50, 50);\n            console.log(\"Added debug red rectangle to empty canvas\");\n        }\n        return canvas;\n    }\n    // Smart face cropping alignment - focuses on face region while maintaining eye alignment\n    alignImageFaceCrop(sourceImage, faceResult, targetResolution) {\n        let padding = arguments.length > 3 && arguments[3] !== void 0 // 30% padding around face\n         ? arguments[3] : 0.3;\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = targetResolution.width;\n        canvas.height = targetResolution.height;\n        const ctx = canvas.getContext(\"2d\");\n        const { eyePoints, faceBounds } = faceResult;\n        const { width: canvasWidth, height: canvasHeight } = targetResolution;\n        if (!faceBounds) {\n            // Fallback to full alignment if no face bounds\n            return this.alignImageFull(sourceImage, eyePoints, targetResolution);\n        }\n        // Calculate padded face region\n        const faceWidth = faceBounds.width;\n        const faceHeight = faceBounds.height;\n        const paddingX = faceWidth * padding;\n        const paddingY = faceHeight * padding;\n        const cropLeft = Math.max(0, faceBounds.left - paddingX);\n        const cropTop = Math.max(0, faceBounds.top - paddingY);\n        const cropRight = Math.min(sourceImage.width, faceBounds.right + paddingX);\n        const cropBottom = Math.min(sourceImage.height, faceBounds.bottom + paddingY);\n        const cropWidth = cropRight - cropLeft;\n        const cropHeight = cropBottom - cropTop;\n        // Adjust eye points relative to crop region\n        const adjustedEyePoints = {\n            left: [\n                eyePoints.left[0] - cropLeft,\n                eyePoints.left[1] - cropTop\n            ],\n            right: [\n                eyePoints.right[0] - cropLeft,\n                eyePoints.right[1] - cropTop\n            ]\n        };\n        // Calculate eye properties in cropped region\n        const eyeCenterX = (adjustedEyePoints.left[0] + adjustedEyePoints.right[0]) / 2;\n        const eyeCenterY = (adjustedEyePoints.left[1] + adjustedEyePoints.right[1]) / 2;\n        const eyeAngle = Math.atan2(adjustedEyePoints.right[1] - adjustedEyePoints.left[1], adjustedEyePoints.right[0] - adjustedEyePoints.left[0]);\n        const currentEyeDistance = Math.sqrt(Math.pow(adjustedEyePoints.right[0] - adjustedEyePoints.left[0], 2) + Math.pow(adjustedEyePoints.right[1] - adjustedEyePoints.left[1], 2));\n        // Target eye properties\n        const targetEyeDistance = canvasWidth * this.targetEyeDistance;\n        const targetEyeCenterX = canvasWidth / 2;\n        const targetEyeCenterY = canvasHeight * this.targetEyeY;\n        // Calculate scale to fit cropped region to canvas\n        const eyeScale = targetEyeDistance / currentEyeDistance;\n        const scaleToFitX = canvasWidth / cropWidth;\n        const scaleToFitY = canvasHeight / cropHeight;\n        const fitScale = Math.min(scaleToFitX, scaleToFitY);\n        // Use the more appropriate scale\n        const finalScale = Math.min(eyeScale, fitScale * 1.2); // Allow slight overflow for better framing\n        // Apply transformations\n        ctx.save();\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n        console.log(\"alignImageFaceCrop debug:\", {\n            cropRegion: {\n                left: cropLeft,\n                top: cropTop,\n                width: cropWidth,\n                height: cropHeight\n            },\n            canvasSize: {\n                width: canvasWidth,\n                height: canvasHeight\n            },\n            eyeScale,\n            fitScale,\n            finalScale,\n            eyeCenterX,\n            eyeCenterY,\n            targetEyeCenterX,\n            targetEyeCenterY,\n            eyeAngle: eyeAngle * (180 / Math.PI) + \" degrees\"\n        });\n        // Move to target eye center\n        ctx.translate(targetEyeCenterX, targetEyeCenterY);\n        // Rotate to align eyes horizontally\n        ctx.rotate(-eyeAngle);\n        // Scale the cropped region\n        ctx.scale(finalScale, finalScale);\n        // Draw the cropped region centered on eye center\n        ctx.drawImage(sourceImage, cropLeft, cropTop, cropWidth, cropHeight, -eyeCenterX, -eyeCenterY, cropWidth, cropHeight // Destination\n        );\n        ctx.restore();\n        // Debug: Check if canvas has content\n        const imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n        const hasContent = imageData.data.some((value, index)=>{\n            return index % 4 === 3 && value > 0; // Check alpha channel for non-transparent pixels\n        });\n        console.log(\"Canvas has content after face crop drawing:\", hasContent);\n        if (!hasContent) {\n            console.warn(\"WARNING: Face crop canvas appears to be empty after alignment\");\n            // Debug: Try a simple blue rectangle to verify canvas is working\n            ctx.fillStyle = \"blue\";\n            ctx.fillRect(10, 10, 50, 50);\n            console.log(\"Added debug blue rectangle to empty face crop canvas\");\n        }\n        return canvas;\n    }\n    // Alternative simpler alignment method using canvas transforms\n    alignImageSimple(sourceImage, eyePoints, targetResolution) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = targetResolution.width;\n        canvas.height = targetResolution.height;\n        const ctx = canvas.getContext(\"2d\");\n        const { left, right } = eyePoints;\n        const { width, height } = targetResolution;\n        // Calculate eye center and angle\n        const eyeCenterX = (left[0] + right[0]) / 2;\n        const eyeCenterY = (left[1] + right[1]) / 2;\n        const eyeAngle = Math.atan2(right[1] - left[1], right[0] - left[0]);\n        const currentEyeDistance = Math.sqrt(Math.pow(right[0] - left[0], 2) + Math.pow(right[1] - left[1], 2));\n        // Target properties\n        const targetEyeDistance = width * this.targetEyeDistance;\n        const targetCenterX = width / 2;\n        const targetCenterY = height * this.targetEyeY;\n        const scale = targetEyeDistance / currentEyeDistance;\n        // Apply transformations\n        ctx.save();\n        // Move to target center\n        ctx.translate(targetCenterX, targetCenterY);\n        // Rotate to align eyes horizontally\n        ctx.rotate(-eyeAngle);\n        // Scale to match target eye distance\n        ctx.scale(scale, scale);\n        // Draw image centered on eye center\n        ctx.drawImage(sourceImage, -eyeCenterX, -eyeCenterY);\n        ctx.restore();\n        return canvas;\n    }\n    // Method to check if eye points are valid for alignment\n    validateEyePoints(eyePoints, imageWidth, imageHeight) {\n        const { left, right } = eyePoints;\n        // Check if points are within image bounds\n        if (left[0] < 0 || left[0] > imageWidth || left[1] < 0 || left[1] > imageHeight) {\n            return false;\n        }\n        if (right[0] < 0 || right[0] > imageWidth || right[1] < 0 || right[1] > imageHeight) {\n            return false;\n        }\n        // Check if eyes are reasonably far apart\n        const eyeDistance = Math.sqrt(Math.pow(right[0] - left[0], 2) + Math.pow(right[1] - left[1], 2));\n        const minEyeDistance = Math.min(imageWidth, imageHeight) * 0.05; // 5% of smaller dimension\n        const maxEyeDistance = Math.max(imageWidth, imageHeight) * 0.8; // 80% of larger dimension\n        return eyeDistance >= minEyeDistance && eyeDistance <= maxEyeDistance;\n    }\n    // Get preview of alignment transformation\n    getAlignmentPreview(sourceImage, eyePoints, targetResolution) {\n        let previewSize = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 200;\n        // Create smaller preview\n        const previewResolution = {\n            width: previewSize,\n            height: previewSize * targetResolution.height / targetResolution.width\n        };\n        return this.alignImageFull(sourceImage, eyePoints, previewResolution);\n    }\n    constructor(targetEyeDistance = 0.35, targetEyeY = 0.4){\n        this.targetEyeDistance = 0.35 // Target eye distance as proportion of canvas width\n        ;\n        this.targetEyeY = 0.4 // Target eye Y position as proportion of canvas height\n        ;\n        this.targetEyeDistance = targetEyeDistance;\n        this.targetEyeY = targetEyeY;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9pbWFnZUFsaWdubWVudC50cyIsIm1hcHBpbmdzIjoiOzs7O0FBSU8sTUFBTUE7SUFTWEMsV0FDRUMsV0FBNkIsRUFDN0JDLFNBQW9CLEVBQ3BCQyxnQkFBa0MsRUFDZjtRQUNuQixNQUFNQyxTQUFTQyxTQUFTQyxhQUFhLENBQUM7UUFDdENGLE9BQU9HLEtBQUssR0FBR0osaUJBQWlCSSxLQUFLO1FBQ3JDSCxPQUFPSSxNQUFNLEdBQUdMLGlCQUFpQkssTUFBTTtRQUN2QyxNQUFNQyxNQUFNTCxPQUFPTSxVQUFVLENBQUM7UUFFOUIsZ0NBQWdDO1FBQ2hDLE1BQU1DLFlBQVksSUFBSSxDQUFDQywyQkFBMkIsQ0FDaERWLFdBQ0FDO1FBR0Ysc0NBQXNDO1FBQ3RDTSxJQUFJSSxJQUFJO1FBQ1JKLElBQUlLLFlBQVksQ0FDZEgsVUFBVUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVKLFVBQVVJLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUM5Q0osVUFBVUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVKLFVBQVVJLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUM5Q0osVUFBVUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVKLFVBQVVJLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUdoRE4sSUFBSU8sU0FBUyxDQUFDZixhQUFhLEdBQUc7UUFDOUJRLElBQUlRLE9BQU87UUFFWCxPQUFPYjtJQUNUO0lBRVFRLDRCQUNOVixTQUFvQixFQUNwQkMsZ0JBQWtDLEVBQ2Q7UUFDcEIsTUFBTSxFQUFFZSxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHakI7UUFDeEIsTUFBTSxFQUFFSyxLQUFLLEVBQUVDLE1BQU0sRUFBRSxHQUFHTDtRQUUxQixtQ0FBbUM7UUFDbkMsTUFBTWlCLGFBQWEsQ0FBQ0YsSUFBSSxDQUFDLEVBQUUsR0FBR0MsS0FBSyxDQUFDLEVBQUUsSUFBSTtRQUMxQyxNQUFNRSxhQUFhLENBQUNILElBQUksQ0FBQyxFQUFFLEdBQUdDLEtBQUssQ0FBQyxFQUFFLElBQUk7UUFDMUMsTUFBTUcscUJBQXFCQyxLQUFLQyxJQUFJLENBQ2xDRCxLQUFLRSxHQUFHLENBQUNOLEtBQUssQ0FBQyxFQUFFLEdBQUdELElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBS0ssS0FBS0UsR0FBRyxDQUFDTixLQUFLLENBQUMsRUFBRSxHQUFHRCxJQUFJLENBQUMsRUFBRSxFQUFFO1FBRWpFLE1BQU1RLFdBQVdILEtBQUtJLEtBQUssQ0FBQ1IsS0FBSyxDQUFDLEVBQUUsR0FBR0QsSUFBSSxDQUFDLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEVBQUUsR0FBR0QsSUFBSSxDQUFDLEVBQUU7UUFFbEUsa0NBQWtDO1FBQ2xDLE1BQU1VLDBCQUEwQnJCLFFBQVEsSUFBSSxDQUFDc0IsaUJBQWlCO1FBQzlELE1BQU1DLG1CQUFtQnZCLFFBQVE7UUFDakMsTUFBTXdCLG1CQUFtQnZCLFNBQVMsSUFBSSxDQUFDd0IsVUFBVTtRQUVqRCw0QkFBNEI7UUFDNUIsTUFBTUMsUUFBUUwsMEJBQTBCTjtRQUN4QyxNQUFNWSxXQUFXLENBQUNSLFVBQVUsNkJBQTZCO1FBRXpELCtCQUErQjtRQUMvQixNQUFNUyxNQUFNWixLQUFLWSxHQUFHLENBQUNEO1FBQ3JCLE1BQU1FLE1BQU1iLEtBQUthLEdBQUcsQ0FBQ0Y7UUFFckIsdUNBQXVDO1FBQ3ZDLE1BQU1HLE1BQU0sQ0FBQ2pCO1FBQ2IsTUFBTWtCLE1BQU0sQ0FBQ2pCO1FBRWIsbUJBQW1CO1FBQ25CLE1BQU1rQixvQkFBb0I7WUFDeEI7Z0JBQUNOLFFBQVFFO2dCQUFLLENBQUNGLFFBQVFHO2FBQUk7WUFDM0I7Z0JBQUNILFFBQVFHO2dCQUFLSCxRQUFRRTthQUFJO1NBQzNCO1FBRUQsaUNBQWlDO1FBQ2pDLE1BQU1LLE1BQU1WO1FBQ1osTUFBTVcsTUFBTVY7UUFFWixrRUFBa0U7UUFDbEUsTUFBTWhCLFNBQVM7WUFDYjtnQkFBQ3dCLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUFFQSxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDaERBLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUdGLE1BQU1FLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUdELE1BQU1FO2FBQUk7WUFDckU7Z0JBQUNELGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUFFQSxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDaERBLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUdGLE1BQU1FLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUdELE1BQU1HO2FBQUk7U0FDdEU7UUFFRCxPQUFPO1lBQ0xQLFVBQVVBLFdBQVksT0FBTVgsS0FBS21CLEVBQUU7WUFDbkNUO1lBQ0FVLGFBQWE7Z0JBQUNILE1BQU1wQixhQUFhYTtnQkFBT1EsTUFBTXBCLGFBQWFZO2FBQU07WUFDakVsQjtRQUNGO0lBQ0Y7SUFFQSxvRUFBb0U7SUFDcEU2QixlQUNFM0MsV0FBNkIsRUFDN0JDLFNBQW9CLEVBQ3BCQyxnQkFBa0MsRUFDZjtRQUNuQixNQUFNQyxTQUFTQyxTQUFTQyxhQUFhLENBQUM7UUFDdENGLE9BQU9HLEtBQUssR0FBR0osaUJBQWlCSSxLQUFLO1FBQ3JDSCxPQUFPSSxNQUFNLEdBQUdMLGlCQUFpQkssTUFBTTtRQUN2QyxNQUFNQyxNQUFNTCxPQUFPTSxVQUFVLENBQUM7UUFFOUIsTUFBTSxFQUFFUSxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHakI7UUFDeEIsTUFBTSxFQUFFSyxPQUFPc0MsV0FBVyxFQUFFckMsUUFBUXNDLFlBQVksRUFBRSxHQUFHM0M7UUFFckQsMkNBQTJDO1FBQzNDLE1BQU1pQixhQUFhLENBQUNGLElBQUksQ0FBQyxFQUFFLEdBQUdDLEtBQUssQ0FBQyxFQUFFLElBQUk7UUFDMUMsTUFBTUUsYUFBYSxDQUFDSCxJQUFJLENBQUMsRUFBRSxHQUFHQyxLQUFLLENBQUMsRUFBRSxJQUFJO1FBQzFDLE1BQU1PLFdBQVdILEtBQUtJLEtBQUssQ0FBQ1IsS0FBSyxDQUFDLEVBQUUsR0FBR0QsSUFBSSxDQUFDLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEVBQUUsR0FBR0QsSUFBSSxDQUFDLEVBQUU7UUFDbEUsTUFBTUkscUJBQXFCQyxLQUFLQyxJQUFJLENBQ2xDRCxLQUFLRSxHQUFHLENBQUNOLEtBQUssQ0FBQyxFQUFFLEdBQUdELElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBS0ssS0FBS0UsR0FBRyxDQUFDTixLQUFLLENBQUMsRUFBRSxHQUFHRCxJQUFJLENBQUMsRUFBRSxFQUFFO1FBR2pFLGtDQUFrQztRQUNsQyxNQUFNVyxvQkFBb0JnQixjQUFjLElBQUksQ0FBQ2hCLGlCQUFpQjtRQUM5RCxNQUFNQyxtQkFBbUJlLGNBQWM7UUFDdkMsTUFBTWQsbUJBQW1CZSxlQUFlLElBQUksQ0FBQ2QsVUFBVTtRQUV2RCx3Q0FBd0M7UUFDeEMsTUFBTWUsV0FBV2xCLG9CQUFvQlA7UUFFckMsd0NBQXdDO1FBQ3hDLE1BQU0wQixtQkFBbUIvQyxZQUFZTSxLQUFLLEdBQUd3QztRQUM3QyxNQUFNRSxvQkFBb0JoRCxZQUFZTyxNQUFNLEdBQUd1QztRQUUvQyxnRUFBZ0U7UUFDaEUsTUFBTUcsa0JBQWtCTCxjQUFjRztRQUN0QyxNQUFNRyxrQkFBa0JMLGVBQWVHO1FBQ3ZDLE1BQU1HLGlCQUFpQjdCLEtBQUs4QixHQUFHLENBQUNILGlCQUFpQkMsaUJBQWlCLElBQUksaUNBQWlDO1FBRXZHLHdEQUF3RDtRQUN4RCxNQUFNRyxhQUFhUCxXQUFXSztRQUU5QixpRkFBaUY7UUFDakYsTUFBTUcsbUJBQW1CbkMsYUFBYWtDO1FBQ3RDLE1BQU1FLG1CQUFtQm5DLGFBQWFpQztRQUV0Qyw4RUFBOEU7UUFDOUUsTUFBTW5CLE1BQU1aLEtBQUtZLEdBQUcsQ0FBQyxDQUFDVDtRQUN0QixNQUFNVSxNQUFNYixLQUFLYSxHQUFHLENBQUMsQ0FBQ1Y7UUFFdEIsd0JBQXdCO1FBQ3hCakIsSUFBSUksSUFBSTtRQUVSLDJDQUEyQztRQUMzQ0osSUFBSWdELFNBQVMsQ0FBQyxHQUFHLEdBQUdaLGFBQWFDO1FBRWpDWSxRQUFRQyxHQUFHLENBQUMseUJBQXlCO1lBQ25DQyxpQkFBaUI7Z0JBQUVyRCxPQUFPTixZQUFZTSxLQUFLO2dCQUFFQyxRQUFRUCxZQUFZTyxNQUFNO1lBQUM7WUFDeEVxRCxZQUFZO2dCQUFFdEQsT0FBT3NDO2dCQUFhckMsUUFBUXNDO1lBQWE7WUFDdkRDO1lBQ0FLO1lBQ0FFO1lBQ0FsQztZQUNBQztZQUNBUztZQUNBQztZQUNBTCxVQUFVQSxXQUFZLE9BQU1ILEtBQUttQixFQUFFLElBQUk7WUFDdkNvQixlQUFlN0QsWUFBWThELFFBQVE7WUFDbkNDLFVBQVUvRCxZQUFZZ0UsR0FBRyxDQUFDQyxTQUFTLENBQUMsR0FBRyxNQUFNO1FBQy9DO1FBRUEsOERBQThEO1FBQzlELE1BQU1DLGFBQWE5RCxTQUFTQyxhQUFhLENBQUM7UUFDMUM2RCxXQUFXNUQsS0FBSyxHQUFHTixZQUFZTSxLQUFLO1FBQ3BDNEQsV0FBVzNELE1BQU0sR0FBR1AsWUFBWU8sTUFBTTtRQUN0QyxNQUFNNEQsVUFBVUQsV0FBV3pELFVBQVUsQ0FBQztRQUN0QzBELFFBQVFwRCxTQUFTLENBQUNmLGFBQWEsR0FBRztRQUNsQyxNQUFNb0UsZ0JBQWdCRCxRQUFRRSxZQUFZLENBQUMsR0FBRyxHQUFHckUsWUFBWU0sS0FBSyxFQUFFTixZQUFZTyxNQUFNO1FBQ3RGLE1BQU0rRCxtQkFBbUJGLGNBQWNHLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLE9BQU9DO1lBQ3ZELE9BQU9BLFFBQVEsTUFBTSxLQUFLRCxRQUFRLEdBQUcsc0JBQXNCO1FBQzdEO1FBQ0FoQixRQUFRQyxHQUFHLENBQUMsNkJBQTZCWTtRQUV6Qyw0QkFBNEI7UUFDNUI5RCxJQUFJbUUsU0FBUyxDQUFDOUMsa0JBQWtCQztRQUVoQyxvQ0FBb0M7UUFDcEN0QixJQUFJb0UsTUFBTSxDQUFDLENBQUNuRDtRQUVaLG9EQUFvRDtRQUNwRGpCLElBQUl3QixLQUFLLENBQUNxQixZQUFZQTtRQUV0Qiw0RUFBNEU7UUFDNUU3QyxJQUFJTyxTQUFTLENBQ1hmLGFBQ0EsQ0FBQ21CLFlBQ0QsQ0FBQ0MsWUFDRHBCLFlBQVlNLEtBQUssRUFDakJOLFlBQVlPLE1BQU07UUFHcEJrRCxRQUFRQyxHQUFHLENBQUMseUJBQXlCO1lBQ25DbUIsSUFBSSxDQUFDMUQ7WUFDTDJELElBQUksQ0FBQzFEO1lBQ0wyRCxRQUFRL0UsWUFBWU0sS0FBSztZQUN6QjBFLFNBQVNoRixZQUFZTyxNQUFNO1lBQzNCMEUsa0JBQWtCekUsSUFBSTBFLFlBQVk7UUFDcEM7UUFFQSwyREFBMkQ7UUFDM0QsTUFBTUMsaUJBQWlCM0UsSUFBSTZELFlBQVksQ0FBQyxHQUFHLEdBQUd6QixhQUFhQztRQUMzRCxNQUFNdUMsZ0JBQWdCRCxlQUFlWixJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDQyxPQUFPQztZQUNyRCxPQUFPQSxRQUFRLE1BQU0sS0FBS0QsUUFBUTtRQUNwQztRQUNBaEIsUUFBUUMsR0FBRyxDQUFDLGtFQUFrRTBCO1FBRTlFNUUsSUFBSVEsT0FBTztRQUVYLHFDQUFxQztRQUNyQyxNQUFNcUUsWUFBWTdFLElBQUk2RCxZQUFZLENBQUMsR0FBRyxHQUFHekIsYUFBYUM7UUFDdEQsTUFBTXlDLGFBQWFELFVBQVVkLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLE9BQU9DO1lBQzdDLE9BQU9BLFFBQVEsTUFBTSxLQUFLRCxRQUFRLEdBQUcsaURBQWlEO1FBQ3hGO1FBQ0FoQixRQUFRQyxHQUFHLENBQUMscUNBQXFDNEI7UUFFakQsSUFBSSxDQUFDQSxZQUFZO1lBQ2Y3QixRQUFROEIsSUFBSSxDQUFDO1lBQ2IsZ0VBQWdFO1lBQ2hFL0UsSUFBSWdGLFNBQVMsR0FBRztZQUNoQmhGLElBQUlpRixRQUFRLENBQUMsSUFBSSxJQUFJLElBQUk7WUFDekJoQyxRQUFRQyxHQUFHLENBQUM7UUFDZDtRQUVBLE9BQU92RDtJQUNUO0lBRUEseUZBQXlGO0lBQ3pGdUYsbUJBQ0UxRixXQUE2QixFQUM3QjJGLFVBQStCLEVBQy9CekYsZ0JBQWtDLEVBRWY7WUFEbkIwRixVQUFBQSxnREFBc0IsMEJBQTBCOzBCQUE5QjtRQUVsQixNQUFNekYsU0FBU0MsU0FBU0MsYUFBYSxDQUFDO1FBQ3RDRixPQUFPRyxLQUFLLEdBQUdKLGlCQUFpQkksS0FBSztRQUNyQ0gsT0FBT0ksTUFBTSxHQUFHTCxpQkFBaUJLLE1BQU07UUFDdkMsTUFBTUMsTUFBTUwsT0FBT00sVUFBVSxDQUFDO1FBRTlCLE1BQU0sRUFBRVIsU0FBUyxFQUFFNEYsVUFBVSxFQUFFLEdBQUdGO1FBQ2xDLE1BQU0sRUFBRXJGLE9BQU9zQyxXQUFXLEVBQUVyQyxRQUFRc0MsWUFBWSxFQUFFLEdBQUczQztRQUVyRCxJQUFJLENBQUMyRixZQUFZO1lBQ2YsK0NBQStDO1lBQy9DLE9BQU8sSUFBSSxDQUFDbEQsY0FBYyxDQUFDM0MsYUFBYUMsV0FBV0M7UUFDckQ7UUFFQSwrQkFBK0I7UUFDL0IsTUFBTTRGLFlBQVlELFdBQVd2RixLQUFLO1FBQ2xDLE1BQU15RixhQUFhRixXQUFXdEYsTUFBTTtRQUNwQyxNQUFNeUYsV0FBV0YsWUFBWUY7UUFDN0IsTUFBTUssV0FBV0YsYUFBYUg7UUFFOUIsTUFBTU0sV0FBVzVFLEtBQUs2RSxHQUFHLENBQUMsR0FBR04sV0FBVzVFLElBQUksR0FBRytFO1FBQy9DLE1BQU1JLFVBQVU5RSxLQUFLNkUsR0FBRyxDQUFDLEdBQUdOLFdBQVdRLEdBQUcsR0FBR0o7UUFDN0MsTUFBTUssWUFBWWhGLEtBQUs4QixHQUFHLENBQUNwRCxZQUFZTSxLQUFLLEVBQUV1RixXQUFXM0UsS0FBSyxHQUFHOEU7UUFDakUsTUFBTU8sYUFBYWpGLEtBQUs4QixHQUFHLENBQUNwRCxZQUFZTyxNQUFNLEVBQUVzRixXQUFXVyxNQUFNLEdBQUdQO1FBRXBFLE1BQU1RLFlBQVlILFlBQVlKO1FBQzlCLE1BQU1RLGFBQWFILGFBQWFIO1FBRWhDLDRDQUE0QztRQUM1QyxNQUFNTyxvQkFBK0I7WUFDbkMxRixNQUFNO2dCQUFDaEIsVUFBVWdCLElBQUksQ0FBQyxFQUFFLEdBQUdpRjtnQkFBVWpHLFVBQVVnQixJQUFJLENBQUMsRUFBRSxHQUFHbUY7YUFBUTtZQUNqRWxGLE9BQU87Z0JBQUNqQixVQUFVaUIsS0FBSyxDQUFDLEVBQUUsR0FBR2dGO2dCQUFVakcsVUFBVWlCLEtBQUssQ0FBQyxFQUFFLEdBQUdrRjthQUFRO1FBQ3RFO1FBRUEsNkNBQTZDO1FBQzdDLE1BQU1qRixhQUFhLENBQUN3RixrQkFBa0IxRixJQUFJLENBQUMsRUFBRSxHQUFHMEYsa0JBQWtCekYsS0FBSyxDQUFDLEVBQUUsSUFBSTtRQUM5RSxNQUFNRSxhQUFhLENBQUN1RixrQkFBa0IxRixJQUFJLENBQUMsRUFBRSxHQUFHMEYsa0JBQWtCekYsS0FBSyxDQUFDLEVBQUUsSUFBSTtRQUM5RSxNQUFNTyxXQUFXSCxLQUFLSSxLQUFLLENBQ3pCaUYsa0JBQWtCekYsS0FBSyxDQUFDLEVBQUUsR0FBR3lGLGtCQUFrQjFGLElBQUksQ0FBQyxFQUFFLEVBQ3REMEYsa0JBQWtCekYsS0FBSyxDQUFDLEVBQUUsR0FBR3lGLGtCQUFrQjFGLElBQUksQ0FBQyxFQUFFO1FBRXhELE1BQU1JLHFCQUFxQkMsS0FBS0MsSUFBSSxDQUNsQ0QsS0FBS0UsR0FBRyxDQUFDbUYsa0JBQWtCekYsS0FBSyxDQUFDLEVBQUUsR0FBR3lGLGtCQUFrQjFGLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FDakVLLEtBQUtFLEdBQUcsQ0FBQ21GLGtCQUFrQnpGLEtBQUssQ0FBQyxFQUFFLEdBQUd5RixrQkFBa0IxRixJQUFJLENBQUMsRUFBRSxFQUFFO1FBR25FLHdCQUF3QjtRQUN4QixNQUFNVyxvQkFBb0JnQixjQUFjLElBQUksQ0FBQ2hCLGlCQUFpQjtRQUM5RCxNQUFNQyxtQkFBbUJlLGNBQWM7UUFDdkMsTUFBTWQsbUJBQW1CZSxlQUFlLElBQUksQ0FBQ2QsVUFBVTtRQUV2RCxrREFBa0Q7UUFDbEQsTUFBTWUsV0FBV2xCLG9CQUFvQlA7UUFDckMsTUFBTXVGLGNBQWNoRSxjQUFjNkQ7UUFDbEMsTUFBTUksY0FBY2hFLGVBQWU2RDtRQUNuQyxNQUFNSSxXQUFXeEYsS0FBSzhCLEdBQUcsQ0FBQ3dELGFBQWFDO1FBRXZDLGlDQUFpQztRQUNqQyxNQUFNeEQsYUFBYS9CLEtBQUs4QixHQUFHLENBQUNOLFVBQVVnRSxXQUFXLE1BQU0sMkNBQTJDO1FBRWxHLHdCQUF3QjtRQUN4QnRHLElBQUlJLElBQUk7UUFDUkosSUFBSWdELFNBQVMsQ0FBQyxHQUFHLEdBQUdaLGFBQWFDO1FBRWpDWSxRQUFRQyxHQUFHLENBQUMsNkJBQTZCO1lBQ3ZDcUQsWUFBWTtnQkFBRTlGLE1BQU1pRjtnQkFBVUcsS0FBS0Q7Z0JBQVM5RixPQUFPbUc7Z0JBQVdsRyxRQUFRbUc7WUFBVztZQUNqRjlDLFlBQVk7Z0JBQUV0RCxPQUFPc0M7Z0JBQWFyQyxRQUFRc0M7WUFBYTtZQUN2REM7WUFDQWdFO1lBQ0F6RDtZQUNBbEM7WUFDQUM7WUFDQVM7WUFDQUM7WUFDQUwsVUFBVUEsV0FBWSxPQUFNSCxLQUFLbUIsRUFBRSxJQUFJO1FBQ3pDO1FBRUEsNEJBQTRCO1FBQzVCakMsSUFBSW1FLFNBQVMsQ0FBQzlDLGtCQUFrQkM7UUFFaEMsb0NBQW9DO1FBQ3BDdEIsSUFBSW9FLE1BQU0sQ0FBQyxDQUFDbkQ7UUFFWiwyQkFBMkI7UUFDM0JqQixJQUFJd0IsS0FBSyxDQUFDcUIsWUFBWUE7UUFFdEIsaURBQWlEO1FBQ2pEN0MsSUFBSU8sU0FBUyxDQUNYZixhQUNBa0csVUFBVUUsU0FBU0ssV0FBV0MsWUFDOUIsQ0FBQ3ZGLFlBQVksQ0FBQ0MsWUFBWXFGLFdBQVdDLFdBQVcsY0FBYzs7UUFHaEVsRyxJQUFJUSxPQUFPO1FBRVgscUNBQXFDO1FBQ3JDLE1BQU1xRSxZQUFZN0UsSUFBSTZELFlBQVksQ0FBQyxHQUFHLEdBQUd6QixhQUFhQztRQUN0RCxNQUFNeUMsYUFBYUQsVUFBVWQsSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQ0MsT0FBT0M7WUFDN0MsT0FBT0EsUUFBUSxNQUFNLEtBQUtELFFBQVEsR0FBRyxpREFBaUQ7UUFDeEY7UUFDQWhCLFFBQVFDLEdBQUcsQ0FBQywrQ0FBK0M0QjtRQUUzRCxJQUFJLENBQUNBLFlBQVk7WUFDZjdCLFFBQVE4QixJQUFJLENBQUM7WUFDYixpRUFBaUU7WUFDakUvRSxJQUFJZ0YsU0FBUyxHQUFHO1lBQ2hCaEYsSUFBSWlGLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSTtZQUN6QmhDLFFBQVFDLEdBQUcsQ0FBQztRQUNkO1FBRUEsT0FBT3ZEO0lBQ1Q7SUFFQSwrREFBK0Q7SUFDL0Q2RyxpQkFDRWhILFdBQTZCLEVBQzdCQyxTQUFvQixFQUNwQkMsZ0JBQWtDLEVBQ2Y7UUFDbkIsTUFBTUMsU0FBU0MsU0FBU0MsYUFBYSxDQUFDO1FBQ3RDRixPQUFPRyxLQUFLLEdBQUdKLGlCQUFpQkksS0FBSztRQUNyQ0gsT0FBT0ksTUFBTSxHQUFHTCxpQkFBaUJLLE1BQU07UUFDdkMsTUFBTUMsTUFBTUwsT0FBT00sVUFBVSxDQUFDO1FBRTlCLE1BQU0sRUFBRVEsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBR2pCO1FBQ3hCLE1BQU0sRUFBRUssS0FBSyxFQUFFQyxNQUFNLEVBQUUsR0FBR0w7UUFFMUIsaUNBQWlDO1FBQ2pDLE1BQU1pQixhQUFhLENBQUNGLElBQUksQ0FBQyxFQUFFLEdBQUdDLEtBQUssQ0FBQyxFQUFFLElBQUk7UUFDMUMsTUFBTUUsYUFBYSxDQUFDSCxJQUFJLENBQUMsRUFBRSxHQUFHQyxLQUFLLENBQUMsRUFBRSxJQUFJO1FBQzFDLE1BQU1PLFdBQVdILEtBQUtJLEtBQUssQ0FBQ1IsS0FBSyxDQUFDLEVBQUUsR0FBR0QsSUFBSSxDQUFDLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEVBQUUsR0FBR0QsSUFBSSxDQUFDLEVBQUU7UUFDbEUsTUFBTUkscUJBQXFCQyxLQUFLQyxJQUFJLENBQ2xDRCxLQUFLRSxHQUFHLENBQUNOLEtBQUssQ0FBQyxFQUFFLEdBQUdELElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBS0ssS0FBS0UsR0FBRyxDQUFDTixLQUFLLENBQUMsRUFBRSxHQUFHRCxJQUFJLENBQUMsRUFBRSxFQUFFO1FBR2pFLG9CQUFvQjtRQUNwQixNQUFNVyxvQkFBb0J0QixRQUFRLElBQUksQ0FBQ3NCLGlCQUFpQjtRQUN4RCxNQUFNcUYsZ0JBQWdCM0csUUFBUTtRQUM5QixNQUFNNEcsZ0JBQWdCM0csU0FBUyxJQUFJLENBQUN3QixVQUFVO1FBQzlDLE1BQU1DLFFBQVFKLG9CQUFvQlA7UUFFbEMsd0JBQXdCO1FBQ3hCYixJQUFJSSxJQUFJO1FBRVIsd0JBQXdCO1FBQ3hCSixJQUFJbUUsU0FBUyxDQUFDc0MsZUFBZUM7UUFFN0Isb0NBQW9DO1FBQ3BDMUcsSUFBSW9FLE1BQU0sQ0FBQyxDQUFDbkQ7UUFFWixxQ0FBcUM7UUFDckNqQixJQUFJd0IsS0FBSyxDQUFDQSxPQUFPQTtRQUVqQixvQ0FBb0M7UUFDcEN4QixJQUFJTyxTQUFTLENBQ1hmLGFBQ0EsQ0FBQ21CLFlBQ0QsQ0FBQ0M7UUFHSFosSUFBSVEsT0FBTztRQUVYLE9BQU9iO0lBQ1Q7SUFFQSx3REFBd0Q7SUFDeERnSCxrQkFBa0JsSCxTQUFvQixFQUFFbUgsVUFBa0IsRUFBRUMsV0FBbUIsRUFBVztRQUN4RixNQUFNLEVBQUVwRyxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHakI7UUFFeEIsMENBQTBDO1FBQzFDLElBQUlnQixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUtBLElBQUksQ0FBQyxFQUFFLEdBQUdtRyxjQUFjbkcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLQSxJQUFJLENBQUMsRUFBRSxHQUFHb0csYUFBYTtZQUMvRSxPQUFPO1FBQ1Q7UUFDQSxJQUFJbkcsS0FBSyxDQUFDLEVBQUUsR0FBRyxLQUFLQSxLQUFLLENBQUMsRUFBRSxHQUFHa0csY0FBY2xHLEtBQUssQ0FBQyxFQUFFLEdBQUcsS0FBS0EsS0FBSyxDQUFDLEVBQUUsR0FBR21HLGFBQWE7WUFDbkYsT0FBTztRQUNUO1FBRUEseUNBQXlDO1FBQ3pDLE1BQU1DLGNBQWNoRyxLQUFLQyxJQUFJLENBQzNCRCxLQUFLRSxHQUFHLENBQUNOLEtBQUssQ0FBQyxFQUFFLEdBQUdELElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBS0ssS0FBS0UsR0FBRyxDQUFDTixLQUFLLENBQUMsRUFBRSxHQUFHRCxJQUFJLENBQUMsRUFBRSxFQUFFO1FBRWpFLE1BQU1zRyxpQkFBaUJqRyxLQUFLOEIsR0FBRyxDQUFDZ0UsWUFBWUMsZUFBZSxNQUFNLDBCQUEwQjtRQUMzRixNQUFNRyxpQkFBaUJsRyxLQUFLNkUsR0FBRyxDQUFDaUIsWUFBWUMsZUFBZSxLQUFNLDBCQUEwQjtRQUUzRixPQUFPQyxlQUFlQyxrQkFBa0JELGVBQWVFO0lBQ3pEO0lBRUEsMENBQTBDO0lBQzFDQyxvQkFDRXpILFdBQTZCLEVBQzdCQyxTQUFvQixFQUNwQkMsZ0JBQWtDLEVBRWY7WUFEbkJ3SCxjQUFBQSxpRUFBYztRQUVkLHlCQUF5QjtRQUN6QixNQUFNQyxvQkFBb0I7WUFDeEJySCxPQUFPb0g7WUFDUG5ILFFBQVEsY0FBZUwsaUJBQWlCSyxNQUFNLEdBQUlMLGlCQUFpQkksS0FBSztRQUMxRTtRQUVBLE9BQU8sSUFBSSxDQUFDcUMsY0FBYyxDQUFDM0MsYUFBYUMsV0FBVzBIO0lBQ3JEO0lBcGJBQyxZQUFZaEcsb0JBQW9CLElBQUksRUFBRUcsYUFBYSxHQUFHLENBQUU7YUFIaERILG9CQUFvQixLQUFNLG9EQUFvRDs7YUFDOUVHLGFBQWEsSUFBSyx1REFBdUQ7O1FBRy9FLElBQUksQ0FBQ0gsaUJBQWlCLEdBQUdBO1FBQ3pCLElBQUksQ0FBQ0csVUFBVSxHQUFHQTtJQUNwQjtBQWtiRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvaW1hZ2VBbGlnbm1lbnQudHM/MWQ0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeWVQb2ludHMsIEFsaWdubWVudFRyYW5zZm9ybSwgUmVzb2x1dGlvbkNvbmZpZywgRmFjZURldGVjdGlvblJlc3VsdCB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuZXhwb3J0IHR5cGUgQWxpZ25tZW50TW9kZSA9ICdmdWxsJyB8ICdmYWNlLWNyb3AnIHwgJ3NtYXJ0LWZyYW1lJztcclxuXHJcbmV4cG9ydCBjbGFzcyBJbWFnZUFsaWduZXIge1xyXG4gIHByaXZhdGUgdGFyZ2V0RXllRGlzdGFuY2UgPSAwLjM1OyAvLyBUYXJnZXQgZXllIGRpc3RhbmNlIGFzIHByb3BvcnRpb24gb2YgY2FudmFzIHdpZHRoXHJcbiAgcHJpdmF0ZSB0YXJnZXRFeWVZID0gMC40OyAvLyBUYXJnZXQgZXllIFkgcG9zaXRpb24gYXMgcHJvcG9ydGlvbiBvZiBjYW52YXMgaGVpZ2h0XHJcblxyXG4gIGNvbnN0cnVjdG9yKHRhcmdldEV5ZURpc3RhbmNlID0gMC4zNSwgdGFyZ2V0RXllWSA9IDAuNCkge1xyXG4gICAgdGhpcy50YXJnZXRFeWVEaXN0YW5jZSA9IHRhcmdldEV5ZURpc3RhbmNlO1xyXG4gICAgdGhpcy50YXJnZXRFeWVZID0gdGFyZ2V0RXllWTtcclxuICB9XHJcblxyXG4gIGFsaWduSW1hZ2UoXHJcbiAgICBzb3VyY2VJbWFnZTogSFRNTEltYWdlRWxlbWVudCxcclxuICAgIGV5ZVBvaW50czogRXllUG9pbnRzLFxyXG4gICAgdGFyZ2V0UmVzb2x1dGlvbjogUmVzb2x1dGlvbkNvbmZpZ1xyXG4gICk6IEhUTUxDYW52YXNFbGVtZW50IHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgY2FudmFzLndpZHRoID0gdGFyZ2V0UmVzb2x1dGlvbi53aWR0aDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSB0YXJnZXRSZXNvbHV0aW9uLmhlaWdodDtcclxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpITtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgYWxpZ25tZW50IHRyYW5zZm9ybVxyXG4gICAgY29uc3QgdHJhbnNmb3JtID0gdGhpcy5jYWxjdWxhdGVBbGlnbm1lbnRUcmFuc2Zvcm0oXHJcbiAgICAgIGV5ZVBvaW50cyxcclxuICAgICAgdGFyZ2V0UmVzb2x1dGlvblxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBBcHBseSB0cmFuc2Zvcm1hdGlvbiBhbmQgZHJhdyBpbWFnZVxyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIGN0eC5zZXRUcmFuc2Zvcm0oXHJcbiAgICAgIHRyYW5zZm9ybS5tYXRyaXhbMF1bMF0sIHRyYW5zZm9ybS5tYXRyaXhbMF1bMV0sXHJcbiAgICAgIHRyYW5zZm9ybS5tYXRyaXhbMV1bMF0sIHRyYW5zZm9ybS5tYXRyaXhbMV1bMV0sXHJcbiAgICAgIHRyYW5zZm9ybS5tYXRyaXhbMF1bMl0sIHRyYW5zZm9ybS5tYXRyaXhbMV1bMl1cclxuICAgICk7XHJcblxyXG4gICAgY3R4LmRyYXdJbWFnZShzb3VyY2VJbWFnZSwgMCwgMCk7XHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG5cclxuICAgIHJldHVybiBjYW52YXM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNhbGN1bGF0ZUFsaWdubWVudFRyYW5zZm9ybShcclxuICAgIGV5ZVBvaW50czogRXllUG9pbnRzLFxyXG4gICAgdGFyZ2V0UmVzb2x1dGlvbjogUmVzb2x1dGlvbkNvbmZpZ1xyXG4gICk6IEFsaWdubWVudFRyYW5zZm9ybSB7XHJcbiAgICBjb25zdCB7IGxlZnQsIHJpZ2h0IH0gPSBleWVQb2ludHM7XHJcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRhcmdldFJlc29sdXRpb247XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIGN1cnJlbnQgZXllIHByb3BlcnRpZXNcclxuICAgIGNvbnN0IGV5ZUNlbnRlclggPSAobGVmdFswXSArIHJpZ2h0WzBdKSAvIDI7XHJcbiAgICBjb25zdCBleWVDZW50ZXJZID0gKGxlZnRbMV0gKyByaWdodFsxXSkgLyAyO1xyXG4gICAgY29uc3QgY3VycmVudEV5ZURpc3RhbmNlID0gTWF0aC5zcXJ0KFxyXG4gICAgICBNYXRoLnBvdyhyaWdodFswXSAtIGxlZnRbMF0sIDIpICsgTWF0aC5wb3cocmlnaHRbMV0gLSBsZWZ0WzFdLCAyKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IGV5ZUFuZ2xlID0gTWF0aC5hdGFuMihyaWdodFsxXSAtIGxlZnRbMV0sIHJpZ2h0WzBdIC0gbGVmdFswXSk7XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHRhcmdldCBleWUgcHJvcGVydGllc1xyXG4gICAgY29uc3QgdGFyZ2V0RXllRGlzdGFuY2VQaXhlbHMgPSB3aWR0aCAqIHRoaXMudGFyZ2V0RXllRGlzdGFuY2U7XHJcbiAgICBjb25zdCB0YXJnZXRFeWVDZW50ZXJYID0gd2lkdGggLyAyO1xyXG4gICAgY29uc3QgdGFyZ2V0RXllQ2VudGVyWSA9IGhlaWdodCAqIHRoaXMudGFyZ2V0RXllWTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgdHJhbnNmb3JtYXRpb25zXHJcbiAgICBjb25zdCBzY2FsZSA9IHRhcmdldEV5ZURpc3RhbmNlUGl4ZWxzIC8gY3VycmVudEV5ZURpc3RhbmNlO1xyXG4gICAgY29uc3Qgcm90YXRpb24gPSAtZXllQW5nbGU7IC8vIE5lZ2F0aXZlIHRvIGNvdW50ZXItcm90YXRlXHJcblxyXG4gICAgLy8gQ3JlYXRlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxyXG4gICAgY29uc3QgY29zID0gTWF0aC5jb3Mocm90YXRpb24pO1xyXG4gICAgY29uc3Qgc2luID0gTWF0aC5zaW4ocm90YXRpb24pO1xyXG5cclxuICAgIC8vIFRyYW5zbGF0aW9uIHRvIGNlbnRlciBleWVzIGF0IG9yaWdpblxyXG4gICAgY29uc3QgdHgxID0gLWV5ZUNlbnRlclg7XHJcbiAgICBjb25zdCB0eTEgPSAtZXllQ2VudGVyWTtcclxuXHJcbiAgICAvLyBTY2FsZSBhbmQgcm90YXRlXHJcbiAgICBjb25zdCBzY2FsZVJvdGF0ZU1hdHJpeCA9IFtcclxuICAgICAgW3NjYWxlICogY29zLCAtc2NhbGUgKiBzaW5dLFxyXG4gICAgICBbc2NhbGUgKiBzaW4sIHNjYWxlICogY29zXVxyXG4gICAgXTtcclxuXHJcbiAgICAvLyBUcmFuc2xhdGlvbiB0byB0YXJnZXQgcG9zaXRpb25cclxuICAgIGNvbnN0IHR4MiA9IHRhcmdldEV5ZUNlbnRlclg7XHJcbiAgICBjb25zdCB0eTIgPSB0YXJnZXRFeWVDZW50ZXJZO1xyXG5cclxuICAgIC8vIENvbWJpbmUgdHJhbnNmb3JtYXRpb25zOiB0cmFuc2xhdGUgLT4gc2NhbGUvcm90YXRlIC0+IHRyYW5zbGF0ZVxyXG4gICAgY29uc3QgbWF0cml4ID0gW1xyXG4gICAgICBbc2NhbGVSb3RhdGVNYXRyaXhbMF1bMF0sIHNjYWxlUm90YXRlTWF0cml4WzBdWzFdLCBcclxuICAgICAgIHNjYWxlUm90YXRlTWF0cml4WzBdWzBdICogdHgxICsgc2NhbGVSb3RhdGVNYXRyaXhbMF1bMV0gKiB0eTEgKyB0eDJdLFxyXG4gICAgICBbc2NhbGVSb3RhdGVNYXRyaXhbMV1bMF0sIHNjYWxlUm90YXRlTWF0cml4WzFdWzFdLCBcclxuICAgICAgIHNjYWxlUm90YXRlTWF0cml4WzFdWzBdICogdHgxICsgc2NhbGVSb3RhdGVNYXRyaXhbMV1bMV0gKiB0eTEgKyB0eTJdXHJcbiAgICBdO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJvdGF0aW9uOiByb3RhdGlvbiAqICgxODAgLyBNYXRoLlBJKSwgLy8gQ29udmVydCB0byBkZWdyZWVzXHJcbiAgICAgIHNjYWxlLFxyXG4gICAgICB0cmFuc2xhdGlvbjogW3R4MiAtIGV5ZUNlbnRlclggKiBzY2FsZSwgdHkyIC0gZXllQ2VudGVyWSAqIHNjYWxlXSxcclxuICAgICAgbWF0cml4XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gRnVsbCBpbWFnZSBhbGlnbm1lbnQgbWV0aG9kIHRoYXQgcHJlc2VydmVzIGVudGlyZSBpbWFnZSBvbiBjYW52YXNcclxuICBhbGlnbkltYWdlRnVsbChcclxuICAgIHNvdXJjZUltYWdlOiBIVE1MSW1hZ2VFbGVtZW50LFxyXG4gICAgZXllUG9pbnRzOiBFeWVQb2ludHMsXHJcbiAgICB0YXJnZXRSZXNvbHV0aW9uOiBSZXNvbHV0aW9uQ29uZmlnXHJcbiAgKTogSFRNTENhbnZhc0VsZW1lbnQge1xyXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICBjYW52YXMud2lkdGggPSB0YXJnZXRSZXNvbHV0aW9uLndpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHRhcmdldFJlc29sdXRpb24uaGVpZ2h0O1xyXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykhO1xyXG5cclxuICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQgfSA9IGV5ZVBvaW50cztcclxuICAgIGNvbnN0IHsgd2lkdGg6IGNhbnZhc1dpZHRoLCBoZWlnaHQ6IGNhbnZhc0hlaWdodCB9ID0gdGFyZ2V0UmVzb2x1dGlvbjtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgZXllIHByb3BlcnRpZXMgaW4gc291cmNlIGltYWdlXHJcbiAgICBjb25zdCBleWVDZW50ZXJYID0gKGxlZnRbMF0gKyByaWdodFswXSkgLyAyO1xyXG4gICAgY29uc3QgZXllQ2VudGVyWSA9IChsZWZ0WzFdICsgcmlnaHRbMV0pIC8gMjtcclxuICAgIGNvbnN0IGV5ZUFuZ2xlID0gTWF0aC5hdGFuMihyaWdodFsxXSAtIGxlZnRbMV0sIHJpZ2h0WzBdIC0gbGVmdFswXSk7XHJcbiAgICBjb25zdCBjdXJyZW50RXllRGlzdGFuY2UgPSBNYXRoLnNxcnQoXHJcbiAgICAgIE1hdGgucG93KHJpZ2h0WzBdIC0gbGVmdFswXSwgMikgKyBNYXRoLnBvdyhyaWdodFsxXSAtIGxlZnRbMV0sIDIpXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFRhcmdldCBleWUgcHJvcGVydGllcyBvbiBjYW52YXNcclxuICAgIGNvbnN0IHRhcmdldEV5ZURpc3RhbmNlID0gY2FudmFzV2lkdGggKiB0aGlzLnRhcmdldEV5ZURpc3RhbmNlO1xyXG4gICAgY29uc3QgdGFyZ2V0RXllQ2VudGVyWCA9IGNhbnZhc1dpZHRoIC8gMjtcclxuICAgIGNvbnN0IHRhcmdldEV5ZUNlbnRlclkgPSBjYW52YXNIZWlnaHQgKiB0aGlzLnRhcmdldEV5ZVk7XHJcbiAgICBcclxuICAgIC8vIENhbGN1bGF0ZSBzY2FsZSBiYXNlZCBvbiBleWUgZGlzdGFuY2VcclxuICAgIGNvbnN0IGV5ZVNjYWxlID0gdGFyZ2V0RXllRGlzdGFuY2UgLyBjdXJyZW50RXllRGlzdGFuY2U7XHJcbiAgICBcclxuICAgIC8vIENhbGN1bGF0ZSB0aGUgc2NhbGVkIGltYWdlIGRpbWVuc2lvbnNcclxuICAgIGNvbnN0IHNjYWxlZEltYWdlV2lkdGggPSBzb3VyY2VJbWFnZS53aWR0aCAqIGV5ZVNjYWxlO1xyXG4gICAgY29uc3Qgc2NhbGVkSW1hZ2VIZWlnaHQgPSBzb3VyY2VJbWFnZS5oZWlnaHQgKiBleWVTY2FsZTtcclxuICAgIFxyXG4gICAgLy8gQ2FsY3VsYXRlIGZpbmFsIHNjYWxlIHRvIGZpdCBlbnRpcmUgaW1hZ2Ugb24gY2FudmFzIGlmIG5lZWRlZFxyXG4gICAgY29uc3QgY2FudmFzRml0U2NhbGVYID0gY2FudmFzV2lkdGggLyBzY2FsZWRJbWFnZVdpZHRoO1xyXG4gICAgY29uc3QgY2FudmFzRml0U2NhbGVZID0gY2FudmFzSGVpZ2h0IC8gc2NhbGVkSW1hZ2VIZWlnaHQ7XHJcbiAgICBjb25zdCBjYW52YXNGaXRTY2FsZSA9IE1hdGgubWluKGNhbnZhc0ZpdFNjYWxlWCwgY2FudmFzRml0U2NhbGVZLCAxKTsgLy8gRG9uJ3QgdXBzY2FsZSBiZXlvbmQgZXllIHNjYWxlXHJcbiAgICBcclxuICAgIC8vIEZpbmFsIHNjYWxlIGNvbWJpbmVzIGV5ZSBhbGlnbm1lbnQgYW5kIGNhbnZhcyBmaXR0aW5nXHJcbiAgICBjb25zdCBmaW5hbFNjYWxlID0gZXllU2NhbGUgKiBjYW52YXNGaXRTY2FsZTtcclxuICAgIFxyXG4gICAgLy8gQ2FsY3VsYXRlIHdoZXJlIHRoZSBpbWFnZSBzaG91bGQgYmUgcG9zaXRpb25lZCB0byBrZWVwIGV5ZXMgYXQgdGFyZ2V0IHBvc2l0aW9uXHJcbiAgICBjb25zdCBzY2FsZWRFeWVDZW50ZXJYID0gZXllQ2VudGVyWCAqIGZpbmFsU2NhbGU7XHJcbiAgICBjb25zdCBzY2FsZWRFeWVDZW50ZXJZID0gZXllQ2VudGVyWSAqIGZpbmFsU2NhbGU7XHJcbiAgICBcclxuICAgIC8vIENhbGN1bGF0ZSBpbWFnZSBwb3NpdGlvbiAodG9wLWxlZnQgY29ybmVyKSB0byBwbGFjZSBleWVzIGF0IHRhcmdldCBwb3NpdGlvblxyXG4gICAgY29uc3QgY29zID0gTWF0aC5jb3MoLWV5ZUFuZ2xlKTtcclxuICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKC1leWVBbmdsZSk7XHJcbiAgICBcclxuICAgIC8vIEFwcGx5IHRyYW5zZm9ybWF0aW9uc1xyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIFxyXG4gICAgLy8gQ2xlYXIgY2FudmFzIHdpdGggdHJhbnNwYXJlbnQgYmFja2dyb3VuZFxyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ2FsaWduSW1hZ2VGdWxsIGRlYnVnOicsIHtcclxuICAgICAgc291cmNlSW1hZ2VTaXplOiB7IHdpZHRoOiBzb3VyY2VJbWFnZS53aWR0aCwgaGVpZ2h0OiBzb3VyY2VJbWFnZS5oZWlnaHQgfSxcclxuICAgICAgY2FudmFzU2l6ZTogeyB3aWR0aDogY2FudmFzV2lkdGgsIGhlaWdodDogY2FudmFzSGVpZ2h0IH0sXHJcbiAgICAgIGV5ZVNjYWxlLFxyXG4gICAgICBjYW52YXNGaXRTY2FsZSxcclxuICAgICAgZmluYWxTY2FsZSxcclxuICAgICAgZXllQ2VudGVyWCxcclxuICAgICAgZXllQ2VudGVyWSxcclxuICAgICAgdGFyZ2V0RXllQ2VudGVyWCxcclxuICAgICAgdGFyZ2V0RXllQ2VudGVyWSxcclxuICAgICAgZXllQW5nbGU6IGV5ZUFuZ2xlICogKDE4MCAvIE1hdGguUEkpICsgJyBkZWdyZWVzJyxcclxuICAgICAgaW1hZ2VDb21wbGV0ZTogc291cmNlSW1hZ2UuY29tcGxldGUsXHJcbiAgICAgIGltYWdlU3JjOiBzb3VyY2VJbWFnZS5zcmMuc3Vic3RyaW5nKDAsIDUwKSArICcuLi4nXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gVmVyaWZ5IHNvdXJjZSBpbWFnZSBoYXMgY29udGVudCBieSBkcmF3aW5nIHRvIGEgdGVzdCBjYW52YXNcclxuICAgIGNvbnN0IHRlc3RDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgIHRlc3RDYW52YXMud2lkdGggPSBzb3VyY2VJbWFnZS53aWR0aDtcclxuICAgIHRlc3RDYW52YXMuaGVpZ2h0ID0gc291cmNlSW1hZ2UuaGVpZ2h0O1xyXG4gICAgY29uc3QgdGVzdEN0eCA9IHRlc3RDYW52YXMuZ2V0Q29udGV4dCgnMmQnKSE7XHJcbiAgICB0ZXN0Q3R4LmRyYXdJbWFnZShzb3VyY2VJbWFnZSwgMCwgMCk7XHJcbiAgICBjb25zdCB0ZXN0SW1hZ2VEYXRhID0gdGVzdEN0eC5nZXRJbWFnZURhdGEoMCwgMCwgc291cmNlSW1hZ2Uud2lkdGgsIHNvdXJjZUltYWdlLmhlaWdodCk7XHJcbiAgICBjb25zdCBzb3VyY2VIYXNDb250ZW50ID0gdGVzdEltYWdlRGF0YS5kYXRhLnNvbWUoKHZhbHVlLCBpbmRleCkgPT4ge1xyXG4gICAgICByZXR1cm4gaW5kZXggJSA0ID09PSAzICYmIHZhbHVlID4gMDsgLy8gQ2hlY2sgYWxwaGEgY2hhbm5lbFxyXG4gICAgfSk7XHJcbiAgICBjb25zb2xlLmxvZygnU291cmNlIGltYWdlIGhhcyBjb250ZW50OicsIHNvdXJjZUhhc0NvbnRlbnQpO1xyXG4gICAgXHJcbiAgICAvLyBNb3ZlIHRvIHRhcmdldCBleWUgY2VudGVyXHJcbiAgICBjdHgudHJhbnNsYXRlKHRhcmdldEV5ZUNlbnRlclgsIHRhcmdldEV5ZUNlbnRlclkpO1xyXG4gICAgXHJcbiAgICAvLyBSb3RhdGUgdG8gYWxpZ24gZXllcyBob3Jpem9udGFsbHlcclxuICAgIGN0eC5yb3RhdGUoLWV5ZUFuZ2xlKTtcclxuICAgIFxyXG4gICAgLy8gU2NhbGUgdG8gbWF0Y2ggdGFyZ2V0IGV5ZSBkaXN0YW5jZSBhbmQgZml0IGNhbnZhc1xyXG4gICAgY3R4LnNjYWxlKGZpbmFsU2NhbGUsIGZpbmFsU2NhbGUpO1xyXG4gICAgXHJcbiAgICAvLyBEcmF3IGltYWdlIGNlbnRlcmVkIG9uIGV5ZSBjZW50ZXIgaW4gdGhlIHNjYWxlZC9yb3RhdGVkIGNvb3JkaW5hdGUgc3lzdGVtXHJcbiAgICBjdHguZHJhd0ltYWdlKFxyXG4gICAgICBzb3VyY2VJbWFnZSxcclxuICAgICAgLWV5ZUNlbnRlclgsXHJcbiAgICAgIC1leWVDZW50ZXJZLFxyXG4gICAgICBzb3VyY2VJbWFnZS53aWR0aCxcclxuICAgICAgc291cmNlSW1hZ2UuaGVpZ2h0XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnRHJhd0ltYWdlIHBhcmFtZXRlcnM6Jywge1xyXG4gICAgICBkeDogLWV5ZUNlbnRlclgsXHJcbiAgICAgIGR5OiAtZXllQ2VudGVyWSwgXHJcbiAgICAgIGRXaWR0aDogc291cmNlSW1hZ2Uud2lkdGgsXHJcbiAgICAgIGRIZWlnaHQ6IHNvdXJjZUltYWdlLmhlaWdodCxcclxuICAgICAgY3VycmVudFRyYW5zZm9ybTogY3R4LmdldFRyYW5zZm9ybSgpXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgaW1tZWRpYXRlbHkgaWYgZHJhd2luZyB3b3JrZWQgd2l0aGluIHRoZSB0cmFuc2Zvcm1cclxuICAgIGNvbnN0IGltbWVkaWF0ZUNoZWNrID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcclxuICAgIGNvbnN0IGRyZXdTb21ldGhpbmcgPSBpbW1lZGlhdGVDaGVjay5kYXRhLnNvbWUoKHZhbHVlLCBpbmRleCkgPT4ge1xyXG4gICAgICByZXR1cm4gaW5kZXggJSA0ID09PSAzICYmIHZhbHVlID4gMDtcclxuICAgIH0pO1xyXG4gICAgY29uc29sZS5sb2coJ0NvbnRlbnQgZXhpc3RzIGltbWVkaWF0ZWx5IGFmdGVyIGRyYXdJbWFnZSAod2l0aGluIHRyYW5zZm9ybSk6JywgZHJld1NvbWV0aGluZyk7XHJcbiAgICBcclxuICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICBcclxuICAgIC8vIERlYnVnOiBDaGVjayBpZiBjYW52YXMgaGFzIGNvbnRlbnRcclxuICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XHJcbiAgICBjb25zdCBoYXNDb250ZW50ID0gaW1hZ2VEYXRhLmRhdGEuc29tZSgodmFsdWUsIGluZGV4KSA9PiB7XHJcbiAgICAgIHJldHVybiBpbmRleCAlIDQgPT09IDMgJiYgdmFsdWUgPiAwOyAvLyBDaGVjayBhbHBoYSBjaGFubmVsIGZvciBub24tdHJhbnNwYXJlbnQgcGl4ZWxzXHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKCdDYW52YXMgaGFzIGNvbnRlbnQgYWZ0ZXIgZHJhd2luZzonLCBoYXNDb250ZW50KTtcclxuICAgIFxyXG4gICAgaWYgKCFoYXNDb250ZW50KSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogQ2FudmFzIGFwcGVhcnMgdG8gYmUgZW1wdHkgYWZ0ZXIgYWxpZ25tZW50Jyk7XHJcbiAgICAgIC8vIERlYnVnOiBUcnkgYSBzaW1wbGUgcmVkIHJlY3RhbmdsZSB0byB2ZXJpZnkgY2FudmFzIGlzIHdvcmtpbmdcclxuICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZWQnO1xyXG4gICAgICBjdHguZmlsbFJlY3QoMTAsIDEwLCA1MCwgNTApO1xyXG4gICAgICBjb25zb2xlLmxvZygnQWRkZWQgZGVidWcgcmVkIHJlY3RhbmdsZSB0byBlbXB0eSBjYW52YXMnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2FudmFzO1xyXG4gIH1cclxuXHJcbiAgLy8gU21hcnQgZmFjZSBjcm9wcGluZyBhbGlnbm1lbnQgLSBmb2N1c2VzIG9uIGZhY2UgcmVnaW9uIHdoaWxlIG1haW50YWluaW5nIGV5ZSBhbGlnbm1lbnRcclxuICBhbGlnbkltYWdlRmFjZUNyb3AoXHJcbiAgICBzb3VyY2VJbWFnZTogSFRNTEltYWdlRWxlbWVudCxcclxuICAgIGZhY2VSZXN1bHQ6IEZhY2VEZXRlY3Rpb25SZXN1bHQsXHJcbiAgICB0YXJnZXRSZXNvbHV0aW9uOiBSZXNvbHV0aW9uQ29uZmlnLFxyXG4gICAgcGFkZGluZzogbnVtYmVyID0gMC4zIC8vIDMwJSBwYWRkaW5nIGFyb3VuZCBmYWNlXHJcbiAgKTogSFRNTENhbnZhc0VsZW1lbnQge1xyXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICBjYW52YXMud2lkdGggPSB0YXJnZXRSZXNvbHV0aW9uLndpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHRhcmdldFJlc29sdXRpb24uaGVpZ2h0O1xyXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykhO1xyXG5cclxuICAgIGNvbnN0IHsgZXllUG9pbnRzLCBmYWNlQm91bmRzIH0gPSBmYWNlUmVzdWx0O1xyXG4gICAgY29uc3QgeyB3aWR0aDogY2FudmFzV2lkdGgsIGhlaWdodDogY2FudmFzSGVpZ2h0IH0gPSB0YXJnZXRSZXNvbHV0aW9uO1xyXG5cclxuICAgIGlmICghZmFjZUJvdW5kcykge1xyXG4gICAgICAvLyBGYWxsYmFjayB0byBmdWxsIGFsaWdubWVudCBpZiBubyBmYWNlIGJvdW5kc1xyXG4gICAgICByZXR1cm4gdGhpcy5hbGlnbkltYWdlRnVsbChzb3VyY2VJbWFnZSwgZXllUG9pbnRzLCB0YXJnZXRSZXNvbHV0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgcGFkZGVkIGZhY2UgcmVnaW9uXHJcbiAgICBjb25zdCBmYWNlV2lkdGggPSBmYWNlQm91bmRzLndpZHRoO1xyXG4gICAgY29uc3QgZmFjZUhlaWdodCA9IGZhY2VCb3VuZHMuaGVpZ2h0O1xyXG4gICAgY29uc3QgcGFkZGluZ1ggPSBmYWNlV2lkdGggKiBwYWRkaW5nO1xyXG4gICAgY29uc3QgcGFkZGluZ1kgPSBmYWNlSGVpZ2h0ICogcGFkZGluZztcclxuXHJcbiAgICBjb25zdCBjcm9wTGVmdCA9IE1hdGgubWF4KDAsIGZhY2VCb3VuZHMubGVmdCAtIHBhZGRpbmdYKTtcclxuICAgIGNvbnN0IGNyb3BUb3AgPSBNYXRoLm1heCgwLCBmYWNlQm91bmRzLnRvcCAtIHBhZGRpbmdZKTtcclxuICAgIGNvbnN0IGNyb3BSaWdodCA9IE1hdGgubWluKHNvdXJjZUltYWdlLndpZHRoLCBmYWNlQm91bmRzLnJpZ2h0ICsgcGFkZGluZ1gpO1xyXG4gICAgY29uc3QgY3JvcEJvdHRvbSA9IE1hdGgubWluKHNvdXJjZUltYWdlLmhlaWdodCwgZmFjZUJvdW5kcy5ib3R0b20gKyBwYWRkaW5nWSk7XHJcblxyXG4gICAgY29uc3QgY3JvcFdpZHRoID0gY3JvcFJpZ2h0IC0gY3JvcExlZnQ7XHJcbiAgICBjb25zdCBjcm9wSGVpZ2h0ID0gY3JvcEJvdHRvbSAtIGNyb3BUb3A7XHJcblxyXG4gICAgLy8gQWRqdXN0IGV5ZSBwb2ludHMgcmVsYXRpdmUgdG8gY3JvcCByZWdpb25cclxuICAgIGNvbnN0IGFkanVzdGVkRXllUG9pbnRzOiBFeWVQb2ludHMgPSB7XHJcbiAgICAgIGxlZnQ6IFtleWVQb2ludHMubGVmdFswXSAtIGNyb3BMZWZ0LCBleWVQb2ludHMubGVmdFsxXSAtIGNyb3BUb3BdLFxyXG4gICAgICByaWdodDogW2V5ZVBvaW50cy5yaWdodFswXSAtIGNyb3BMZWZ0LCBleWVQb2ludHMucmlnaHRbMV0gLSBjcm9wVG9wXVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgZXllIHByb3BlcnRpZXMgaW4gY3JvcHBlZCByZWdpb25cclxuICAgIGNvbnN0IGV5ZUNlbnRlclggPSAoYWRqdXN0ZWRFeWVQb2ludHMubGVmdFswXSArIGFkanVzdGVkRXllUG9pbnRzLnJpZ2h0WzBdKSAvIDI7XHJcbiAgICBjb25zdCBleWVDZW50ZXJZID0gKGFkanVzdGVkRXllUG9pbnRzLmxlZnRbMV0gKyBhZGp1c3RlZEV5ZVBvaW50cy5yaWdodFsxXSkgLyAyO1xyXG4gICAgY29uc3QgZXllQW5nbGUgPSBNYXRoLmF0YW4yKFxyXG4gICAgICBhZGp1c3RlZEV5ZVBvaW50cy5yaWdodFsxXSAtIGFkanVzdGVkRXllUG9pbnRzLmxlZnRbMV0sXHJcbiAgICAgIGFkanVzdGVkRXllUG9pbnRzLnJpZ2h0WzBdIC0gYWRqdXN0ZWRFeWVQb2ludHMubGVmdFswXVxyXG4gICAgKTtcclxuICAgIGNvbnN0IGN1cnJlbnRFeWVEaXN0YW5jZSA9IE1hdGguc3FydChcclxuICAgICAgTWF0aC5wb3coYWRqdXN0ZWRFeWVQb2ludHMucmlnaHRbMF0gLSBhZGp1c3RlZEV5ZVBvaW50cy5sZWZ0WzBdLCAyKSArXHJcbiAgICAgIE1hdGgucG93KGFkanVzdGVkRXllUG9pbnRzLnJpZ2h0WzFdIC0gYWRqdXN0ZWRFeWVQb2ludHMubGVmdFsxXSwgMilcclxuICAgICk7XHJcblxyXG4gICAgLy8gVGFyZ2V0IGV5ZSBwcm9wZXJ0aWVzXHJcbiAgICBjb25zdCB0YXJnZXRFeWVEaXN0YW5jZSA9IGNhbnZhc1dpZHRoICogdGhpcy50YXJnZXRFeWVEaXN0YW5jZTtcclxuICAgIGNvbnN0IHRhcmdldEV5ZUNlbnRlclggPSBjYW52YXNXaWR0aCAvIDI7XHJcbiAgICBjb25zdCB0YXJnZXRFeWVDZW50ZXJZID0gY2FudmFzSGVpZ2h0ICogdGhpcy50YXJnZXRFeWVZO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBzY2FsZSB0byBmaXQgY3JvcHBlZCByZWdpb24gdG8gY2FudmFzXHJcbiAgICBjb25zdCBleWVTY2FsZSA9IHRhcmdldEV5ZURpc3RhbmNlIC8gY3VycmVudEV5ZURpc3RhbmNlO1xyXG4gICAgY29uc3Qgc2NhbGVUb0ZpdFggPSBjYW52YXNXaWR0aCAvIGNyb3BXaWR0aDtcclxuICAgIGNvbnN0IHNjYWxlVG9GaXRZID0gY2FudmFzSGVpZ2h0IC8gY3JvcEhlaWdodDtcclxuICAgIGNvbnN0IGZpdFNjYWxlID0gTWF0aC5taW4oc2NhbGVUb0ZpdFgsIHNjYWxlVG9GaXRZKTtcclxuICAgIFxyXG4gICAgLy8gVXNlIHRoZSBtb3JlIGFwcHJvcHJpYXRlIHNjYWxlXHJcbiAgICBjb25zdCBmaW5hbFNjYWxlID0gTWF0aC5taW4oZXllU2NhbGUsIGZpdFNjYWxlICogMS4yKTsgLy8gQWxsb3cgc2xpZ2h0IG92ZXJmbG93IGZvciBiZXR0ZXIgZnJhbWluZ1xyXG5cclxuICAgIC8vIEFwcGx5IHRyYW5zZm9ybWF0aW9uc1xyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCdhbGlnbkltYWdlRmFjZUNyb3AgZGVidWc6Jywge1xyXG4gICAgICBjcm9wUmVnaW9uOiB7IGxlZnQ6IGNyb3BMZWZ0LCB0b3A6IGNyb3BUb3AsIHdpZHRoOiBjcm9wV2lkdGgsIGhlaWdodDogY3JvcEhlaWdodCB9LFxyXG4gICAgICBjYW52YXNTaXplOiB7IHdpZHRoOiBjYW52YXNXaWR0aCwgaGVpZ2h0OiBjYW52YXNIZWlnaHQgfSxcclxuICAgICAgZXllU2NhbGUsXHJcbiAgICAgIGZpdFNjYWxlLFxyXG4gICAgICBmaW5hbFNjYWxlLFxyXG4gICAgICBleWVDZW50ZXJYLFxyXG4gICAgICBleWVDZW50ZXJZLFxyXG4gICAgICB0YXJnZXRFeWVDZW50ZXJYLFxyXG4gICAgICB0YXJnZXRFeWVDZW50ZXJZLFxyXG4gICAgICBleWVBbmdsZTogZXllQW5nbGUgKiAoMTgwIC8gTWF0aC5QSSkgKyAnIGRlZ3JlZXMnXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBNb3ZlIHRvIHRhcmdldCBleWUgY2VudGVyXHJcbiAgICBjdHgudHJhbnNsYXRlKHRhcmdldEV5ZUNlbnRlclgsIHRhcmdldEV5ZUNlbnRlclkpO1xyXG5cclxuICAgIC8vIFJvdGF0ZSB0byBhbGlnbiBleWVzIGhvcml6b250YWxseVxyXG4gICAgY3R4LnJvdGF0ZSgtZXllQW5nbGUpO1xyXG5cclxuICAgIC8vIFNjYWxlIHRoZSBjcm9wcGVkIHJlZ2lvblxyXG4gICAgY3R4LnNjYWxlKGZpbmFsU2NhbGUsIGZpbmFsU2NhbGUpO1xyXG5cclxuICAgIC8vIERyYXcgdGhlIGNyb3BwZWQgcmVnaW9uIGNlbnRlcmVkIG9uIGV5ZSBjZW50ZXJcclxuICAgIGN0eC5kcmF3SW1hZ2UoXHJcbiAgICAgIHNvdXJjZUltYWdlLFxyXG4gICAgICBjcm9wTGVmdCwgY3JvcFRvcCwgY3JvcFdpZHRoLCBjcm9wSGVpZ2h0LCAvLyBTb3VyY2UgY3JvcFxyXG4gICAgICAtZXllQ2VudGVyWCwgLWV5ZUNlbnRlclksIGNyb3BXaWR0aCwgY3JvcEhlaWdodCAvLyBEZXN0aW5hdGlvblxyXG4gICAgKTtcclxuXHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgXHJcbiAgICAvLyBEZWJ1ZzogQ2hlY2sgaWYgY2FudmFzIGhhcyBjb250ZW50XHJcbiAgICBjb25zdCBpbWFnZURhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xyXG4gICAgY29uc3QgaGFzQ29udGVudCA9IGltYWdlRGF0YS5kYXRhLnNvbWUoKHZhbHVlLCBpbmRleCkgPT4ge1xyXG4gICAgICByZXR1cm4gaW5kZXggJSA0ID09PSAzICYmIHZhbHVlID4gMDsgLy8gQ2hlY2sgYWxwaGEgY2hhbm5lbCBmb3Igbm9uLXRyYW5zcGFyZW50IHBpeGVsc1xyXG4gICAgfSk7XHJcbiAgICBjb25zb2xlLmxvZygnQ2FudmFzIGhhcyBjb250ZW50IGFmdGVyIGZhY2UgY3JvcCBkcmF3aW5nOicsIGhhc0NvbnRlbnQpO1xyXG4gICAgXHJcbiAgICBpZiAoIWhhc0NvbnRlbnQpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBGYWNlIGNyb3AgY2FudmFzIGFwcGVhcnMgdG8gYmUgZW1wdHkgYWZ0ZXIgYWxpZ25tZW50Jyk7XHJcbiAgICAgIC8vIERlYnVnOiBUcnkgYSBzaW1wbGUgYmx1ZSByZWN0YW5nbGUgdG8gdmVyaWZ5IGNhbnZhcyBpcyB3b3JraW5nXHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnYmx1ZSc7XHJcbiAgICAgIGN0eC5maWxsUmVjdCgxMCwgMTAsIDUwLCA1MCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdBZGRlZCBkZWJ1ZyBibHVlIHJlY3RhbmdsZSB0byBlbXB0eSBmYWNlIGNyb3AgY2FudmFzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNhbnZhcztcclxuICB9XHJcblxyXG4gIC8vIEFsdGVybmF0aXZlIHNpbXBsZXIgYWxpZ25tZW50IG1ldGhvZCB1c2luZyBjYW52YXMgdHJhbnNmb3Jtc1xyXG4gIGFsaWduSW1hZ2VTaW1wbGUoXHJcbiAgICBzb3VyY2VJbWFnZTogSFRNTEltYWdlRWxlbWVudCxcclxuICAgIGV5ZVBvaW50czogRXllUG9pbnRzLFxyXG4gICAgdGFyZ2V0UmVzb2x1dGlvbjogUmVzb2x1dGlvbkNvbmZpZ1xyXG4gICk6IEhUTUxDYW52YXNFbGVtZW50IHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgY2FudmFzLndpZHRoID0gdGFyZ2V0UmVzb2x1dGlvbi53aWR0aDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSB0YXJnZXRSZXNvbHV0aW9uLmhlaWdodDtcclxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpITtcclxuXHJcbiAgICBjb25zdCB7IGxlZnQsIHJpZ2h0IH0gPSBleWVQb2ludHM7XHJcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRhcmdldFJlc29sdXRpb247XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIGV5ZSBjZW50ZXIgYW5kIGFuZ2xlXHJcbiAgICBjb25zdCBleWVDZW50ZXJYID0gKGxlZnRbMF0gKyByaWdodFswXSkgLyAyO1xyXG4gICAgY29uc3QgZXllQ2VudGVyWSA9IChsZWZ0WzFdICsgcmlnaHRbMV0pIC8gMjtcclxuICAgIGNvbnN0IGV5ZUFuZ2xlID0gTWF0aC5hdGFuMihyaWdodFsxXSAtIGxlZnRbMV0sIHJpZ2h0WzBdIC0gbGVmdFswXSk7XHJcbiAgICBjb25zdCBjdXJyZW50RXllRGlzdGFuY2UgPSBNYXRoLnNxcnQoXHJcbiAgICAgIE1hdGgucG93KHJpZ2h0WzBdIC0gbGVmdFswXSwgMikgKyBNYXRoLnBvdyhyaWdodFsxXSAtIGxlZnRbMV0sIDIpXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFRhcmdldCBwcm9wZXJ0aWVzXHJcbiAgICBjb25zdCB0YXJnZXRFeWVEaXN0YW5jZSA9IHdpZHRoICogdGhpcy50YXJnZXRFeWVEaXN0YW5jZTtcclxuICAgIGNvbnN0IHRhcmdldENlbnRlclggPSB3aWR0aCAvIDI7XHJcbiAgICBjb25zdCB0YXJnZXRDZW50ZXJZID0gaGVpZ2h0ICogdGhpcy50YXJnZXRFeWVZO1xyXG4gICAgY29uc3Qgc2NhbGUgPSB0YXJnZXRFeWVEaXN0YW5jZSAvIGN1cnJlbnRFeWVEaXN0YW5jZTtcclxuXHJcbiAgICAvLyBBcHBseSB0cmFuc2Zvcm1hdGlvbnNcclxuICAgIGN0eC5zYXZlKCk7XHJcbiAgICBcclxuICAgIC8vIE1vdmUgdG8gdGFyZ2V0IGNlbnRlclxyXG4gICAgY3R4LnRyYW5zbGF0ZSh0YXJnZXRDZW50ZXJYLCB0YXJnZXRDZW50ZXJZKTtcclxuICAgIFxyXG4gICAgLy8gUm90YXRlIHRvIGFsaWduIGV5ZXMgaG9yaXpvbnRhbGx5XHJcbiAgICBjdHgucm90YXRlKC1leWVBbmdsZSk7XHJcbiAgICBcclxuICAgIC8vIFNjYWxlIHRvIG1hdGNoIHRhcmdldCBleWUgZGlzdGFuY2VcclxuICAgIGN0eC5zY2FsZShzY2FsZSwgc2NhbGUpO1xyXG4gICAgXHJcbiAgICAvLyBEcmF3IGltYWdlIGNlbnRlcmVkIG9uIGV5ZSBjZW50ZXJcclxuICAgIGN0eC5kcmF3SW1hZ2UoXHJcbiAgICAgIHNvdXJjZUltYWdlLFxyXG4gICAgICAtZXllQ2VudGVyWCxcclxuICAgICAgLWV5ZUNlbnRlcllcclxuICAgICk7XHJcbiAgICBcclxuICAgIGN0eC5yZXN0b3JlKCk7XHJcblxyXG4gICAgcmV0dXJuIGNhbnZhcztcclxuICB9XHJcblxyXG4gIC8vIE1ldGhvZCB0byBjaGVjayBpZiBleWUgcG9pbnRzIGFyZSB2YWxpZCBmb3IgYWxpZ25tZW50XHJcbiAgdmFsaWRhdGVFeWVQb2ludHMoZXllUG9pbnRzOiBFeWVQb2ludHMsIGltYWdlV2lkdGg6IG51bWJlciwgaW1hZ2VIZWlnaHQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgeyBsZWZ0LCByaWdodCB9ID0gZXllUG9pbnRzO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHBvaW50cyBhcmUgd2l0aGluIGltYWdlIGJvdW5kc1xyXG4gICAgaWYgKGxlZnRbMF0gPCAwIHx8IGxlZnRbMF0gPiBpbWFnZVdpZHRoIHx8IGxlZnRbMV0gPCAwIHx8IGxlZnRbMV0gPiBpbWFnZUhlaWdodCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAocmlnaHRbMF0gPCAwIHx8IHJpZ2h0WzBdID4gaW1hZ2VXaWR0aCB8fCByaWdodFsxXSA8IDAgfHwgcmlnaHRbMV0gPiBpbWFnZUhlaWdodCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgZXllcyBhcmUgcmVhc29uYWJseSBmYXIgYXBhcnRcclxuICAgIGNvbnN0IGV5ZURpc3RhbmNlID0gTWF0aC5zcXJ0KFxyXG4gICAgICBNYXRoLnBvdyhyaWdodFswXSAtIGxlZnRbMF0sIDIpICsgTWF0aC5wb3cocmlnaHRbMV0gLSBsZWZ0WzFdLCAyKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IG1pbkV5ZURpc3RhbmNlID0gTWF0aC5taW4oaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQpICogMC4wNTsgLy8gNSUgb2Ygc21hbGxlciBkaW1lbnNpb25cclxuICAgIGNvbnN0IG1heEV5ZURpc3RhbmNlID0gTWF0aC5tYXgoaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQpICogMC44OyAgLy8gODAlIG9mIGxhcmdlciBkaW1lbnNpb25cclxuXHJcbiAgICByZXR1cm4gZXllRGlzdGFuY2UgPj0gbWluRXllRGlzdGFuY2UgJiYgZXllRGlzdGFuY2UgPD0gbWF4RXllRGlzdGFuY2U7XHJcbiAgfVxyXG5cclxuICAvLyBHZXQgcHJldmlldyBvZiBhbGlnbm1lbnQgdHJhbnNmb3JtYXRpb25cclxuICBnZXRBbGlnbm1lbnRQcmV2aWV3KFxyXG4gICAgc291cmNlSW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsXHJcbiAgICBleWVQb2ludHM6IEV5ZVBvaW50cyxcclxuICAgIHRhcmdldFJlc29sdXRpb246IFJlc29sdXRpb25Db25maWcsXHJcbiAgICBwcmV2aWV3U2l6ZSA9IDIwMFxyXG4gICk6IEhUTUxDYW52YXNFbGVtZW50IHtcclxuICAgIC8vIENyZWF0ZSBzbWFsbGVyIHByZXZpZXdcclxuICAgIGNvbnN0IHByZXZpZXdSZXNvbHV0aW9uID0ge1xyXG4gICAgICB3aWR0aDogcHJldmlld1NpemUsXHJcbiAgICAgIGhlaWdodDogKHByZXZpZXdTaXplICogdGFyZ2V0UmVzb2x1dGlvbi5oZWlnaHQpIC8gdGFyZ2V0UmVzb2x1dGlvbi53aWR0aFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5hbGlnbkltYWdlRnVsbChzb3VyY2VJbWFnZSwgZXllUG9pbnRzLCBwcmV2aWV3UmVzb2x1dGlvbik7XHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbIkltYWdlQWxpZ25lciIsImFsaWduSW1hZ2UiLCJzb3VyY2VJbWFnZSIsImV5ZVBvaW50cyIsInRhcmdldFJlc29sdXRpb24iLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ3aWR0aCIsImhlaWdodCIsImN0eCIsImdldENvbnRleHQiLCJ0cmFuc2Zvcm0iLCJjYWxjdWxhdGVBbGlnbm1lbnRUcmFuc2Zvcm0iLCJzYXZlIiwic2V0VHJhbnNmb3JtIiwibWF0cml4IiwiZHJhd0ltYWdlIiwicmVzdG9yZSIsImxlZnQiLCJyaWdodCIsImV5ZUNlbnRlclgiLCJleWVDZW50ZXJZIiwiY3VycmVudEV5ZURpc3RhbmNlIiwiTWF0aCIsInNxcnQiLCJwb3ciLCJleWVBbmdsZSIsImF0YW4yIiwidGFyZ2V0RXllRGlzdGFuY2VQaXhlbHMiLCJ0YXJnZXRFeWVEaXN0YW5jZSIsInRhcmdldEV5ZUNlbnRlclgiLCJ0YXJnZXRFeWVDZW50ZXJZIiwidGFyZ2V0RXllWSIsInNjYWxlIiwicm90YXRpb24iLCJjb3MiLCJzaW4iLCJ0eDEiLCJ0eTEiLCJzY2FsZVJvdGF0ZU1hdHJpeCIsInR4MiIsInR5MiIsIlBJIiwidHJhbnNsYXRpb24iLCJhbGlnbkltYWdlRnVsbCIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiZXllU2NhbGUiLCJzY2FsZWRJbWFnZVdpZHRoIiwic2NhbGVkSW1hZ2VIZWlnaHQiLCJjYW52YXNGaXRTY2FsZVgiLCJjYW52YXNGaXRTY2FsZVkiLCJjYW52YXNGaXRTY2FsZSIsIm1pbiIsImZpbmFsU2NhbGUiLCJzY2FsZWRFeWVDZW50ZXJYIiwic2NhbGVkRXllQ2VudGVyWSIsImNsZWFyUmVjdCIsImNvbnNvbGUiLCJsb2ciLCJzb3VyY2VJbWFnZVNpemUiLCJjYW52YXNTaXplIiwiaW1hZ2VDb21wbGV0ZSIsImNvbXBsZXRlIiwiaW1hZ2VTcmMiLCJzcmMiLCJzdWJzdHJpbmciLCJ0ZXN0Q2FudmFzIiwidGVzdEN0eCIsInRlc3RJbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJzb3VyY2VIYXNDb250ZW50IiwiZGF0YSIsInNvbWUiLCJ2YWx1ZSIsImluZGV4IiwidHJhbnNsYXRlIiwicm90YXRlIiwiZHgiLCJkeSIsImRXaWR0aCIsImRIZWlnaHQiLCJjdXJyZW50VHJhbnNmb3JtIiwiZ2V0VHJhbnNmb3JtIiwiaW1tZWRpYXRlQ2hlY2siLCJkcmV3U29tZXRoaW5nIiwiaW1hZ2VEYXRhIiwiaGFzQ29udGVudCIsIndhcm4iLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImFsaWduSW1hZ2VGYWNlQ3JvcCIsImZhY2VSZXN1bHQiLCJwYWRkaW5nIiwiZmFjZUJvdW5kcyIsImZhY2VXaWR0aCIsImZhY2VIZWlnaHQiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiY3JvcExlZnQiLCJtYXgiLCJjcm9wVG9wIiwidG9wIiwiY3JvcFJpZ2h0IiwiY3JvcEJvdHRvbSIsImJvdHRvbSIsImNyb3BXaWR0aCIsImNyb3BIZWlnaHQiLCJhZGp1c3RlZEV5ZVBvaW50cyIsInNjYWxlVG9GaXRYIiwic2NhbGVUb0ZpdFkiLCJmaXRTY2FsZSIsImNyb3BSZWdpb24iLCJhbGlnbkltYWdlU2ltcGxlIiwidGFyZ2V0Q2VudGVyWCIsInRhcmdldENlbnRlclkiLCJ2YWxpZGF0ZUV5ZVBvaW50cyIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsImV5ZURpc3RhbmNlIiwibWluRXllRGlzdGFuY2UiLCJtYXhFeWVEaXN0YW5jZSIsImdldEFsaWdubWVudFByZXZpZXciLCJwcmV2aWV3U2l6ZSIsInByZXZpZXdSZXNvbHV0aW9uIiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/imageAlignment.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/types.ts":
/*!**********************!*\
  !*** ./lib/types.ts ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RESOLUTION_CONFIGS: function() { return /* binding */ RESOLUTION_CONFIGS; }\n/* harmony export */ });\nconst RESOLUTION_CONFIGS = {\n    \"480p\": {\n        width: 640,\n        height: 480\n    },\n    \"720p\": {\n        width: 1280,\n        height: 720\n    },\n    \"1080p\": {\n        width: 1920,\n        height: 1080\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi90eXBlcy50cyIsIm1hcHBpbmdzIjoiOzs7O0FBcUNPLE1BQU1BLHFCQUF1RDtJQUNsRSxRQUFRO1FBQUVDLE9BQU87UUFBS0MsUUFBUTtJQUFJO0lBQ2xDLFFBQVE7UUFBRUQsT0FBTztRQUFNQyxRQUFRO0lBQUk7SUFDbkMsU0FBUztRQUFFRCxPQUFPO1FBQU1DLFFBQVE7SUFBSztBQUN2QyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi90eXBlcy50cz8yYTU1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgRXllUG9pbnRzIHtcclxuICBsZWZ0OiBbbnVtYmVyLCBudW1iZXJdO1xyXG4gIHJpZ2h0OiBbbnVtYmVyLCBudW1iZXJdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlRGF0YSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBmaWxlOiBGaWxlO1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIGFsaWduZWQ6IGJvb2xlYW47XHJcbiAgZXllUG9pbnRzPzogRXllUG9pbnRzO1xyXG4gIGZhY2VSZXN1bHQ/OiBGYWNlRGV0ZWN0aW9uUmVzdWx0O1xyXG4gIGFsaWduZWRDYW52YXM/OiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICBwcm9jZXNzZWRVcmw/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJvY2Vzc2luZ1N0YXR1cyB7XHJcbiAgaXNQcm9jZXNzaW5nOiBib29sZWFuO1xyXG4gIGN1cnJlbnRTdGVwOiBzdHJpbmc7XHJcbiAgcHJvZ3Jlc3M6IG51bWJlcjtcclxuICBlcnJvcj86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFeHBvcnRTZXR0aW5ncyB7XHJcbiAgZm9ybWF0OiAnZ2lmJyB8ICdtcDQnO1xyXG4gIHJlc29sdXRpb246ICc0ODBwJyB8ICc3MjBwJyB8ICcxMDgwcCc7XHJcbiAgZnJhbWVEdXJhdGlvbjogbnVtYmVyO1xyXG4gIGFkZFNvdW5kOiBib29sZWFuO1xyXG4gIGxvb3A6IGJvb2xlYW47XHJcbiAgYWxpZ25tZW50TW9kZTogJ2Z1bGwnIHwgJ2ZhY2UtY3JvcCcgfCAnc21hcnQtZnJhbWUnO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlc29sdXRpb25Db25maWcge1xyXG4gIHdpZHRoOiBudW1iZXI7XHJcbiAgaGVpZ2h0OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBSRVNPTFVUSU9OX0NPTkZJR1M6IFJlY29yZDxzdHJpbmcsIFJlc29sdXRpb25Db25maWc+ID0ge1xyXG4gICc0ODBwJzogeyB3aWR0aDogNjQwLCBoZWlnaHQ6IDQ4MCB9LFxyXG4gICc3MjBwJzogeyB3aWR0aDogMTI4MCwgaGVpZ2h0OiA3MjAgfSxcclxuICAnMTA4MHAnOiB7IHdpZHRoOiAxOTIwLCBoZWlnaHQ6IDEwODAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmFjZUxhbmRtYXJrIHtcclxuICB4OiBudW1iZXI7XHJcbiAgeTogbnVtYmVyO1xyXG4gIHo/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmFjZURldGVjdGlvblJlc3VsdCB7XHJcbiAgbGFuZG1hcmtzOiBGYWNlTGFuZG1hcmtbXTtcclxuICBleWVQb2ludHM6IEV5ZVBvaW50cztcclxuICBjb25maWRlbmNlOiBudW1iZXI7XHJcbiAgZmFjZUJvdW5kcz86IHtcclxuICAgIGxlZnQ6IG51bWJlcjtcclxuICAgIHJpZ2h0OiBudW1iZXI7XHJcbiAgICB0b3A6IG51bWJlcjtcclxuICAgIGJvdHRvbTogbnVtYmVyO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgY2VudGVyWDogbnVtYmVyO1xyXG4gICAgY2VudGVyWTogbnVtYmVyO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWxpZ25tZW50VHJhbnNmb3JtIHtcclxuICByb3RhdGlvbjogbnVtYmVyO1xyXG4gIHNjYWxlOiBudW1iZXI7XHJcbiAgdHJhbnNsYXRpb246IFtudW1iZXIsIG51bWJlcl07XHJcbiAgbWF0cml4OiBudW1iZXJbXVtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFuaW1hdGlvbkZyYW1lIHtcclxuICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gIGR1cmF0aW9uOiBudW1iZXI7XHJcbiAgaW1hZ2VJZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFZpZGVvRXhwb3J0UHJvZ3Jlc3Mge1xyXG4gIHBoYXNlOiAncHJlcGFyaW5nJyB8ICdlbmNvZGluZycgfCAnZmluYWxpemluZycgfCAnY29tcGxldGUnO1xyXG4gIHByb2dyZXNzOiBudW1iZXI7XHJcbiAgZnJhbWVDb3VudD86IG51bWJlcjtcclxuICBjdXJyZW50RnJhbWU/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFByb2Nlc3NpbmdTdGVwID0gXHJcbiAgfCAnaWRsZScgXHJcbiAgfCAnZGV0ZWN0aW5nX2ZhY2VzJyBcclxuICB8ICdhbGlnbmluZ19pbWFnZXMnIFxyXG4gIHwgJ2dlbmVyYXRpbmdfcHJldmlldycgXHJcbiAgfCAnZXhwb3J0aW5nX3ZpZGVvJyBcclxuICB8ICdjb21wbGV0ZScgXHJcbiAgfCAnZXJyb3InO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcHBTdGF0ZSB7XHJcbiAgaW1hZ2VzOiBJbWFnZURhdGFbXTtcclxuICBwcm9jZXNzaW5nU3RhdHVzOiBQcm9jZXNzaW5nU3RhdHVzO1xyXG4gIGV4cG9ydFNldHRpbmdzOiBFeHBvcnRTZXR0aW5ncztcclxuICBwcmV2aWV3RnJhbWVzOiBBbmltYXRpb25GcmFtZVtdO1xyXG4gIGlzUGxheWluZzogYm9vbGVhbjtcclxuICBjdXJyZW50RnJhbWU6IG51bWJlcjtcclxufSJdLCJuYW1lcyI6WyJSRVNPTFVUSU9OX0NPTkZJR1MiLCJ3aWR0aCIsImhlaWdodCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/types.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clamp: function() { return /* binding */ clamp; },\n/* harmony export */   cn: function() { return /* binding */ cn; },\n/* harmony export */   createCanvasFromImage: function() { return /* binding */ createCanvasFromImage; },\n/* harmony export */   downloadFile: function() { return /* binding */ downloadFile; },\n/* harmony export */   formatFileSize: function() { return /* binding */ formatFileSize; },\n/* harmony export */   generateId: function() { return /* binding */ generateId; },\n/* harmony export */   lerp: function() { return /* binding */ lerp; },\n/* harmony export */   loadImageFromFile: function() { return /* binding */ loadImageFromFile; },\n/* harmony export */   sleep: function() { return /* binding */ sleep; }\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ \"(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n\n\nfunction cn() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\nfunction generateId() {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\n        \"Bytes\",\n        \"KB\",\n        \"MB\",\n        \"GB\"\n    ];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n}\nfunction downloadFile(blob, filename) {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n}\nfunction createCanvasFromImage(image, width, height) {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, 0, 0, width, height);\n    return canvas;\n}\nfunction loadImageFromFile(file) {\n    return new Promise((resolve, reject)=>{\n        const img = new Image();\n        img.onload = ()=>resolve(img);\n        img.onerror = reject;\n        img.src = URL.createObjectURL(file);\n    });\n}\nfunction sleep(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\nfunction clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\nfunction lerp(a, b, t) {\n    return a + (b - a) * t;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi91dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUE2QztBQUNKO0FBRWxDLFNBQVNFO0lBQUc7UUFBR0MsT0FBSCx1QkFBdUI7O0lBQ3hDLE9BQU9GLHVEQUFPQSxDQUFDRCwwQ0FBSUEsQ0FBQ0c7QUFDdEI7QUFFTyxTQUFTQztJQUNkLE9BQU9DLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLFNBQVMsQ0FBQyxHQUFHLE1BQ3hDSCxLQUFLQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQyxJQUFJQyxTQUFTLENBQUMsR0FBRztBQUNqRDtBQUVPLFNBQVNDLGVBQWVDLEtBQWE7SUFDMUMsSUFBSUEsVUFBVSxHQUFHLE9BQU87SUFDeEIsTUFBTUMsSUFBSTtJQUNWLE1BQU1DLFFBQVE7UUFBQztRQUFTO1FBQU07UUFBTTtLQUFLO0lBQ3pDLE1BQU1DLElBQUlSLEtBQUtTLEtBQUssQ0FBQ1QsS0FBS1UsR0FBRyxDQUFDTCxTQUFTTCxLQUFLVSxHQUFHLENBQUNKO0lBQ2hELE9BQU9LLFdBQVcsQ0FBQ04sUUFBUUwsS0FBS1ksR0FBRyxDQUFDTixHQUFHRSxFQUFDLEVBQUdLLE9BQU8sQ0FBQyxNQUFNLE1BQU1OLEtBQUssQ0FBQ0MsRUFBRTtBQUN6RTtBQUVPLFNBQVNNLGFBQWFDLElBQVUsRUFBRUMsUUFBZ0I7SUFDdkQsTUFBTUMsTUFBTUMsSUFBSUMsZUFBZSxDQUFDSjtJQUNoQyxNQUFNSyxJQUFJQyxTQUFTQyxhQUFhLENBQUM7SUFDakNGLEVBQUVHLElBQUksR0FBR047SUFDVEcsRUFBRUksUUFBUSxHQUFHUjtJQUNiSyxTQUFTSSxJQUFJLENBQUNDLFdBQVcsQ0FBQ047SUFDMUJBLEVBQUVPLEtBQUs7SUFDUE4sU0FBU0ksSUFBSSxDQUFDRyxXQUFXLENBQUNSO0lBQzFCRixJQUFJVyxlQUFlLENBQUNaO0FBQ3RCO0FBRU8sU0FBU2Esc0JBQ2RDLEtBQXVCLEVBQ3ZCQyxLQUFhLEVBQ2JDLE1BQWM7SUFFZCxNQUFNQyxTQUFTYixTQUFTQyxhQUFhLENBQUM7SUFDdENZLE9BQU9GLEtBQUssR0FBR0E7SUFDZkUsT0FBT0QsTUFBTSxHQUFHQTtJQUNoQixNQUFNRSxNQUFNRCxPQUFPRSxVQUFVLENBQUM7SUFDOUJELElBQUlFLFNBQVMsQ0FBQ04sT0FBTyxHQUFHLEdBQUdDLE9BQU9DO0lBQ2xDLE9BQU9DO0FBQ1Q7QUFFTyxTQUFTSSxrQkFBa0JDLElBQVU7SUFDMUMsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1FBQzNCLE1BQU1DLE1BQU0sSUFBSUM7UUFDaEJELElBQUlFLE1BQU0sR0FBRyxJQUFNSixRQUFRRTtRQUMzQkEsSUFBSUcsT0FBTyxHQUFHSjtRQUNkQyxJQUFJSSxHQUFHLEdBQUc3QixJQUFJQyxlQUFlLENBQUNvQjtJQUNoQztBQUNGO0FBRU8sU0FBU1MsTUFBTUMsRUFBVTtJQUM5QixPQUFPLElBQUlULFFBQVFDLENBQUFBLFVBQVdTLFdBQVdULFNBQVNRO0FBQ3BEO0FBRU8sU0FBU0UsTUFBTUMsS0FBYSxFQUFFQyxHQUFXLEVBQUVDLEdBQVc7SUFDM0QsT0FBT3RELEtBQUtxRCxHQUFHLENBQUNyRCxLQUFLc0QsR0FBRyxDQUFDRixPQUFPQyxNQUFNQztBQUN4QztBQUVPLFNBQVNDLEtBQUtuQyxDQUFTLEVBQUVvQyxDQUFTLEVBQUVDLENBQVM7SUFDbEQsT0FBT3JDLElBQUksQ0FBQ29DLElBQUlwQyxDQUFBQSxJQUFLcUM7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL3V0aWxzLnRzP2Y3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHlwZSBDbGFzc1ZhbHVlLCBjbHN4IH0gZnJvbSBcImNsc3hcIjtcclxuaW1wb3J0IHsgdHdNZXJnZSB9IGZyb20gXCJ0YWlsd2luZC1tZXJnZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNuKC4uLmlucHV0czogQ2xhc3NWYWx1ZVtdKSB7XHJcbiAgcmV0dXJuIHR3TWVyZ2UoY2xzeChpbnB1dHMpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlSWQoKTogc3RyaW5nIHtcclxuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDE1KSArIFxyXG4gICAgICAgICBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RmlsZVNpemUoYnl0ZXM6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgaWYgKGJ5dGVzID09PSAwKSByZXR1cm4gJzAgQnl0ZXMnO1xyXG4gIGNvbnN0IGsgPSAxMDI0O1xyXG4gIGNvbnN0IHNpemVzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQiddO1xyXG4gIGNvbnN0IGkgPSBNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKGspKTtcclxuICByZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBNYXRoLnBvdyhrLCBpKSkudG9GaXhlZCgyKSkgKyAnICcgKyBzaXplc1tpXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkRmlsZShibG9iOiBCbG9iLCBmaWxlbmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gIGEuaHJlZiA9IHVybDtcclxuICBhLmRvd25sb2FkID0gZmlsZW5hbWU7XHJcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTtcclxuICBhLmNsaWNrKCk7XHJcbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTtcclxuICBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDYW52YXNGcm9tSW1hZ2UoXHJcbiAgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsIFxyXG4gIHdpZHRoOiBudW1iZXIsIFxyXG4gIGhlaWdodDogbnVtYmVyXHJcbik6IEhUTUxDYW52YXNFbGVtZW50IHtcclxuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICBjYW52YXMud2lkdGggPSB3aWR0aDtcclxuICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpITtcclxuICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICByZXR1cm4gY2FudmFzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZEltYWdlRnJvbUZpbGUoZmlsZTogRmlsZSk6IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIGltZy5vbmxvYWQgPSAoKSA9PiByZXNvbHZlKGltZyk7XHJcbiAgICBpbWcub25lcnJvciA9IHJlamVjdDtcclxuICAgIGltZy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2xlZXAobXM6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKHZhbHVlOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCBtaW4pLCBtYXgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGVycChhOiBudW1iZXIsIGI6IG51bWJlciwgdDogbnVtYmVyKTogbnVtYmVyIHtcclxuICByZXR1cm4gYSArIChiIC0gYSkgKiB0O1xyXG59Il0sIm5hbWVzIjpbImNsc3giLCJ0d01lcmdlIiwiY24iLCJpbnB1dHMiLCJnZW5lcmF0ZUlkIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiZm9ybWF0RmlsZVNpemUiLCJieXRlcyIsImsiLCJzaXplcyIsImkiLCJmbG9vciIsImxvZyIsInBhcnNlRmxvYXQiLCJwb3ciLCJ0b0ZpeGVkIiwiZG93bmxvYWRGaWxlIiwiYmxvYiIsImZpbGVuYW1lIiwidXJsIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiYSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJkb3dubG9hZCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNsaWNrIiwicmVtb3ZlQ2hpbGQiLCJyZXZva2VPYmplY3RVUkwiLCJjcmVhdGVDYW52YXNGcm9tSW1hZ2UiLCJpbWFnZSIsIndpZHRoIiwiaGVpZ2h0IiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsImxvYWRJbWFnZUZyb21GaWxlIiwiZmlsZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaW1nIiwiSW1hZ2UiLCJvbmxvYWQiLCJvbmVycm9yIiwic3JjIiwic2xlZXAiLCJtcyIsInNldFRpbWVvdXQiLCJjbGFtcCIsInZhbHVlIiwibWluIiwibWF4IiwibGVycCIsImIiLCJ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/videoExport.ts":
/*!****************************!*\
  !*** ./lib/videoExport.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VideoExporter: function() { return /* binding */ VideoExporter; }\n/* harmony export */ });\n/* harmony import */ var _ffmpeg_ffmpeg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ffmpeg/ffmpeg */ \"(app-pages-browser)/./node_modules/@ffmpeg/ffmpeg/dist/esm/index.js\");\n/* harmony import */ var _ffmpeg_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ffmpeg/util */ \"(app-pages-browser)/./node_modules/@ffmpeg/util/dist/esm/index.js\");\n/* harmony import */ var mediabunny__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mediabunny */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/output.js\");\n/* harmony import */ var mediabunny__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mediabunny */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/output-format.js\");\n/* harmony import */ var mediabunny__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! mediabunny */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/target.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./lib/utils.ts\");\n\n\n\n\nclass VideoExporter {\n    checkWebCodecsSupport() {\n        this.supportsWebCodecs = \"VideoEncoder\" in window && \"VideoDecoder\" in window && \"VideoFrame\" in window;\n    }\n    async checkWebCodecsCapabilities() {\n        if (!this.supportsWebCodecs) {\n            return {\n                supported: false,\n                supportedCodecs: []\n            };\n        }\n        const testCodecs = [\n            \"avc1.42E01E\",\n            \"avc1.42001E\",\n            \"avc1.640028\",\n            \"vp8\",\n            \"vp09.00.10.08\" // VP9\n        ];\n        const supportedCodecs = [];\n        for (const codec of testCodecs){\n            try {\n                const config = {\n                    codec,\n                    width: 640,\n                    height: 480,\n                    bitrate: 1000000,\n                    framerate: 30\n                };\n                const support = await VideoEncoder.isConfigSupported(config);\n                if (support.supported) {\n                    supportedCodecs.push(codec);\n                }\n            } catch (error) {\n                console.log(\"Error testing codec \".concat(codec, \":\"), error);\n            }\n        }\n        return {\n            supported: supportedCodecs.length > 0,\n            supportedCodecs\n        };\n    }\n    async initialize() {\n        try {\n            console.log(\"Initializing video exporter...\");\n            console.log(\"WebCodecs support:\", this.supportsWebCodecs);\n            // Test WebCodecs capabilities\n            if (this.supportsWebCodecs) {\n                const capabilities = await this.checkWebCodecsCapabilities();\n                console.log(\"WebCodecs capabilities:\", capabilities);\n                this.supportsWebCodecs = capabilities.supported;\n            }\n            // Check network connectivity first\n            if (!navigator.onLine) {\n                console.warn(\"No internet connection - FFmpeg loading may fail\");\n            }\n            // Initialize FFmpeg\n            this.ffmpeg = new _ffmpeg_ffmpeg__WEBPACK_IMPORTED_MODULE_0__.FFmpeg();\n            const baseURL = \"https://unpkg.com/@ffmpeg/core@0.12.6/dist/umd\";\n            console.log(\"Loading FFmpeg from:\", baseURL);\n            await this.ffmpeg.load({\n                coreURL: await (0,_ffmpeg_util__WEBPACK_IMPORTED_MODULE_1__.toBlobURL)(\"\".concat(baseURL, \"/ffmpeg-core.js\"), \"text/javascript\"),\n                wasmURL: await (0,_ffmpeg_util__WEBPACK_IMPORTED_MODULE_1__.toBlobURL)(\"\".concat(baseURL, \"/ffmpeg-core.wasm\"), \"application/wasm\")\n            });\n            this.isFFmpegLoaded = true;\n            console.log(\"FFmpeg loaded successfully\");\n            console.log(\"Available export formats:\", this.getSupportedFormats());\n        } catch (error) {\n            console.error(\"Failed to initialize FFmpeg:\", error);\n            if (error instanceof Error && error.message.includes(\"fetch\")) {\n                console.error(\"Network error loading FFmpeg - check your internet connection\");\n            }\n            console.log(\"Continuing without FFmpeg - MP4 support may be limited to WebCodecs\");\n        // Continue without FFmpeg - we can still use WebCodecs for MP4\n        }\n    }\n    async exportAnimation(frames, settings, resolution, onProgress) {\n        if (frames.length === 0) {\n            throw new Error(\"No frames to export\");\n        }\n        console.log(\"Exporting \".concat(frames.length, \" frames as \").concat(settings.format));\n        console.log(\"Export settings:\", settings);\n        console.log(\"Resolution:\", resolution);\n        console.log(\"FFmpeg loaded:\", this.isFFmpegLoaded);\n        console.log(\"WebCodecs supported:\", this.supportsWebCodecs);\n        if (settings.format === \"gif\") {\n            if (!this.isFFmpegLoaded) {\n                throw new Error(\"GIF export requires FFmpeg, but it is not available. Please try MP4 format instead.\");\n            }\n            return this.exportGIF(frames, settings, resolution, onProgress);\n        } else if (settings.format === \"mp4\") {\n            // For now, use FFmpeg for MP4 to ensure proper container format\n            // WebCodecs produces raw chunks that need complex muxing\n            if (this.isFFmpegLoaded) {\n                console.log(\"Using FFmpeg for MP4 export (reliable container format)\");\n                return this.exportMP4FFmpeg(frames, settings, resolution, onProgress);\n            } else {\n                // Try WebCodecs as fallback, but it may produce unplayable files\n                if (this.supportsWebCodecs) {\n                    console.log(\"Attempting WebCodecs for MP4 export (may need proper muxing)\");\n                    try {\n                        return await this.exportMP4WebCodecs(frames, settings, resolution, onProgress);\n                    } catch (error) {\n                        console.warn(\"WebCodecs failed:\", error);\n                        throw new Error(\"MP4 export requires FFmpeg for proper container format. Please check your internet connection and try refreshing the page.\");\n                    }\n                } else {\n                    throw new Error(\"MP4 export requires either FFmpeg or WebCodecs support. Please try a different browser or check your internet connection.\");\n                }\n            }\n        } else {\n            throw new Error(\"Unsupported format: \".concat(settings.format));\n        }\n    }\n    async exportGIF(frames, settings, resolution, onProgress) {\n        if (!this.isFFmpegLoaded || !this.ffmpeg) {\n            throw new Error(\"FFmpeg not available for GIF export\");\n        }\n        onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n            phase: \"preparing\",\n            progress: 0\n        });\n        try {\n            // Write frames to FFmpeg\n            for(let i = 0; i < frames.length; i++){\n                const canvas = frames[i].canvas;\n                const blob = await new Promise((resolve, reject)=>{\n                    canvas.toBlob((blob)=>{\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject(new Error(\"Failed to create blob from canvas\"));\n                        }\n                    }, \"image/png\");\n                });\n                await this.ffmpeg.writeFile(\"frame\".concat(i.toString().padStart(3, \"0\"), \".png\"), await (0,_ffmpeg_util__WEBPACK_IMPORTED_MODULE_1__.fetchFile)(blob));\n                onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                    phase: \"preparing\",\n                    progress: (i + 1) / frames.length * 0.3,\n                    frameCount: frames.length,\n                    currentFrame: i + 1\n                });\n            }\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                phase: \"encoding\",\n                progress: 0.3\n            });\n            // Create GIF with FFmpeg\n            const framerate = 1 / settings.frameDuration;\n            const loop = settings.loop ? \"0\" : \"-1\";\n            await this.ffmpeg.exec([\n                \"-framerate\",\n                framerate.toString(),\n                \"-i\",\n                \"frame%03d.png\",\n                \"-vf\",\n                \"fps=\".concat(framerate, \",scale=\").concat(resolution.width, \":\").concat(resolution.height, \":flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse\"),\n                \"-loop\",\n                loop,\n                \"output.gif\"\n            ]);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                phase: \"finalizing\",\n                progress: 0.9\n            });\n            // Read the output\n            const data = await this.ffmpeg.readFile(\"output.gif\");\n            const uint8Array = new Uint8Array(data);\n            const blob = new Blob([\n                uint8Array\n            ], {\n                type: \"image/gif\"\n            });\n            // Cleanup\n            for(let i = 0; i < frames.length; i++){\n                await this.ffmpeg.deleteFile(\"frame\".concat(i.toString().padStart(3, \"0\"), \".png\"));\n            }\n            await this.ffmpeg.deleteFile(\"output.gif\");\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                phase: \"complete\",\n                progress: 1\n            });\n            return blob;\n        } catch (error) {\n            console.error(\"GIF export failed:\", error);\n            throw new Error(\"Failed to export GIF\");\n        }\n    }\n    async exportMP4WebCodecs(frames, settings, resolution, onProgress) {\n        onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n            phase: \"preparing\",\n            progress: 0\n        });\n        try {\n            console.log(\"Creating MP4 output with Mediabunny...\");\n            // Create the output\n            const output = new mediabunny__WEBPACK_IMPORTED_MODULE_3__.Output({\n                format: new mediabunny__WEBPACK_IMPORTED_MODULE_4__.Mp4OutputFormat(),\n                target: new mediabunny__WEBPACK_IMPORTED_MODULE_5__.BufferTarget()\n            });\n            // Create a canvas source for the video track\n            // We'll use a temporary canvas to render frames\n            const tempCanvas = document.createElement(\"canvas\");\n            tempCanvas.width = resolution.width;\n            tempCanvas.height = resolution.height;\n            const tempCtx = tempCanvas.getContext(\"2d\");\n            // For Mediabunny, we need to create our own manual encoding approach\n            // Since we have pre-rendered frames, let's fall back to raw chunk collection\n            // and manual muxing approach\n            console.log(\"Falling back to manual MP4 creation...\");\n            return new Promise(async (resolve, reject)=>{\n                const chunks = [];\n                let frameCount = 0;\n                let encoderClosed = false;\n                let encoder = null;\n                try {\n                    encoder = new VideoEncoder({\n                        output: (chunk, metadata)=>{\n                            console.log(\"Received encoded chunk:\", {\n                                byteLength: chunk.byteLength,\n                                type: chunk.type,\n                                timestamp: chunk.timestamp,\n                                duration: chunk.duration\n                            });\n                            // Convert EncodedVideoChunk to Uint8Array\n                            const buffer = new ArrayBuffer(chunk.byteLength);\n                            chunk.copyTo(buffer);\n                            chunks.push(new Uint8Array(buffer));\n                        },\n                        error: (error)=>{\n                            console.error(\"VideoEncoder error:\", error);\n                            if (!encoderClosed) {\n                                encoderClosed = true;\n                                encoder.close();\n                            }\n                            reject(new Error(\"Video encoding failed: \" + error.message));\n                        }\n                    });\n                    // Try codec configurations in order of preference  \n                    const codecConfigs = [\n                        {\n                            codec: \"avc1.42001f\",\n                            width: resolution.width,\n                            height: resolution.height,\n                            bitrate: 2000000,\n                            framerate: 1 / settings.frameDuration\n                        },\n                        {\n                            codec: \"avc1.42E01E\",\n                            width: resolution.width,\n                            height: resolution.height,\n                            bitrate: 2000000,\n                            framerate: 1 / settings.frameDuration\n                        },\n                        {\n                            codec: \"avc1.640028\",\n                            width: resolution.width,\n                            height: resolution.height,\n                            bitrate: 2000000,\n                            framerate: 1 / settings.frameDuration\n                        }\n                    ];\n                    let config = null;\n                    for (const testConfig of codecConfigs){\n                        console.log(\"Testing codec support: \".concat(testConfig.codec));\n                        const support = await VideoEncoder.isConfigSupported(testConfig);\n                        if (support.supported) {\n                            config = testConfig;\n                            console.log(\"Using supported codec: \".concat(testConfig.codec));\n                            break;\n                        } else {\n                            console.log(\"Codec not supported: \".concat(testConfig.codec));\n                        }\n                    }\n                    if (!config) {\n                        throw new Error(\"No supported video codec found for WebCodecs\");\n                    }\n                    encoder.configure(config);\n                    onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                        phase: \"encoding\",\n                        progress: 0.1\n                    });\n                    console.log(\"VideoEncoder configured with codec:\", config.codec);\n                    // Encode frames\n                    for(let i = 0; i < frames.length; i++){\n                        if (encoderClosed || encoder.state === \"closed\") {\n                            throw new Error(\"Encoder was closed during processing\");\n                        }\n                        const canvas = frames[i].canvas;\n                        // Debug: Check if canvas has content before encoding\n                        const ctx = canvas.getContext(\"2d\");\n                        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                        const hasContent = imageData.data.some((value, index)=>{\n                            return index % 4 === 3 && value > 0; // Check alpha channel for non-transparent pixels\n                        });\n                        console.log(\"Encoding frame \".concat(i + 1, \":\"), {\n                            canvasSize: {\n                                width: canvas.width,\n                                height: canvas.height\n                            },\n                            hasContent,\n                            imageId: frames[i].imageId,\n                            frameIndex: i\n                        });\n                        if (!hasContent) {\n                            console.warn(\"WARNING: Frame \".concat(i + 1, \" being encoded appears to be empty!\"));\n                            console.warn(\"Frame details:\", frames[i]);\n                        }\n                        // Create VideoFrame with proper timestamp\n                        const timestamp = i * settings.frameDuration * 1000000; // microseconds\n                        const videoFrame = new VideoFrame(canvas, {\n                            timestamp,\n                            duration: settings.frameDuration * 1000000\n                        });\n                        console.log(\"Encoding frame \".concat(i + 1, \" with timestamp: \").concat(timestamp));\n                        encoder.encode(videoFrame, {\n                            keyFrame: i === 0\n                        });\n                        videoFrame.close();\n                        frameCount++;\n                        onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                            phase: \"encoding\",\n                            progress: 0.1 + (i + 1) / frames.length * 0.8,\n                            frameCount: frames.length,\n                            currentFrame: i + 1\n                        });\n                    }\n                    console.log(\"Flushing encoder...\");\n                    // Finish encoding\n                    if (!encoderClosed && encoder.state !== \"closed\") {\n                        await encoder.flush();\n                    }\n                    if (!encoderClosed) {\n                        encoderClosed = true;\n                        encoder.close();\n                    }\n                    onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                        phase: \"finalizing\",\n                        progress: 0.95\n                    });\n                    console.log(\"Creating MP4 from chunks...\");\n                    // For now, let's create a basic MP4 structure\n                    // This is a simplified approach - in reality we'd need proper MP4 muxing\n                    if (chunks.length === 0) {\n                        throw new Error(\"No video chunks were generated\");\n                    }\n                    console.log(\"Generated \".concat(chunks.length, \" video chunks\"));\n                    // Combine chunks into a single blob\n                    // Note: This won't create a proper MP4 file, but let's see what we get\n                    const totalLength = chunks.reduce((sum, chunk)=>sum + chunk.length, 0);\n                    const combined = new Uint8Array(totalLength);\n                    let offset = 0;\n                    for (const chunk of chunks){\n                        combined.set(chunk, offset);\n                        offset += chunk.length;\n                    }\n                    // Try creating with MP4 MIME type\n                    const blob = new Blob([\n                        combined\n                    ], {\n                        type: \"video/mp4\"\n                    });\n                    onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                        phase: \"complete\",\n                        progress: 1\n                    });\n                    console.log(\"Raw chunks MP4 export completed, blob size:\", blob.size);\n                    // Since raw chunks won't work, let's actually fall back to FFmpeg\n                    console.warn(\"Raw chunks approach will not work - falling back to FFmpeg\");\n                    throw new Error(\"WebCodecs chunks need proper muxing - falling back to FFmpeg\");\n                } catch (error) {\n                    console.error(\"WebCodecs MP4 export failed:\", error);\n                    if (!encoderClosed && encoder) {\n                        encoderClosed = true;\n                        encoder.close();\n                    }\n                    throw error; // Re-throw to trigger FFmpeg fallback\n                }\n            });\n        } catch (error) {\n            console.error(\"WebCodecs MP4 export failed:\", error);\n            throw new Error(\"Failed to export MP4 with WebCodecs: \" + error.message);\n        }\n    }\n    async exportMP4FFmpeg(frames, settings, resolution, onProgress) {\n        if (!this.isFFmpegLoaded || !this.ffmpeg) {\n            throw new Error(\"FFmpeg not available for MP4 export\");\n        }\n        onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n            phase: \"preparing\",\n            progress: 0\n        });\n        try {\n            // Write frames to FFmpeg\n            for(let i = 0; i < frames.length; i++){\n                const canvas = frames[i].canvas;\n                const blob = await new Promise((resolve, reject)=>{\n                    canvas.toBlob((blob)=>{\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject(new Error(\"Failed to create blob from canvas\"));\n                        }\n                    }, \"image/png\");\n                });\n                await this.ffmpeg.writeFile(\"frame\".concat(i.toString().padStart(3, \"0\"), \".png\"), await (0,_ffmpeg_util__WEBPACK_IMPORTED_MODULE_1__.fetchFile)(blob));\n                onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                    phase: \"preparing\",\n                    progress: (i + 1) / frames.length * 0.3,\n                    frameCount: frames.length,\n                    currentFrame: i + 1\n                });\n            }\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                phase: \"encoding\",\n                progress: 0.3\n            });\n            // Create MP4 with FFmpeg\n            const framerate = 1 / settings.frameDuration;\n            const ffmpegArgs = [\n                \"-framerate\",\n                framerate.toString(),\n                \"-i\",\n                \"frame%03d.png\",\n                \"-c:v\",\n                \"libx264\",\n                \"-pix_fmt\",\n                \"yuv420p\",\n                \"-crf\",\n                \"23\",\n                \"-preset\",\n                \"medium\"\n            ];\n            if (settings.addSound) {\n            // Add click sound logic here\n            // For now, just create silent MP4\n            }\n            ffmpegArgs.push(\"output.mp4\");\n            await this.ffmpeg.exec(ffmpegArgs);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                phase: \"finalizing\",\n                progress: 0.9\n            });\n            // Read the output\n            const data = await this.ffmpeg.readFile(\"output.mp4\");\n            const uint8Array = new Uint8Array(data);\n            const blob = new Blob([\n                uint8Array\n            ], {\n                type: \"video/mp4\"\n            });\n            // Cleanup\n            for(let i = 0; i < frames.length; i++){\n                await this.ffmpeg.deleteFile(\"frame\".concat(i.toString().padStart(3, \"0\"), \".png\"));\n            }\n            await this.ffmpeg.deleteFile(\"output.mp4\");\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n                phase: \"complete\",\n                progress: 1\n            });\n            return blob;\n        } catch (error) {\n            console.error(\"FFmpeg MP4 export failed:\", error);\n            throw new Error(\"Failed to export MP4\");\n        }\n    }\n    // Add sound to MP4 (placeholder for future implementation)\n    async addSoundToMP4(videoBlob, soundFile, frameCount, frameDuration) {\n        // This would use Web Audio API to generate click sounds\n        // and then mux with the video using FFmpeg\n        // For now, return the original video\n        return videoBlob;\n    }\n    async exportAndDownload(frames, settings, resolution, filename, onProgress) {\n        try {\n            const blob = await this.exportAnimation(frames, settings, resolution, onProgress);\n            const extension = settings.format === \"gif\" ? \"gif\" : \"mp4\";\n            const fullFilename = filename.includes(\".\") ? filename : \"\".concat(filename, \".\").concat(extension);\n            (0,_utils__WEBPACK_IMPORTED_MODULE_2__.downloadFile)(blob, fullFilename);\n        } catch (error) {\n            console.error(\"Export and download failed:\", error);\n            throw error;\n        }\n    }\n    cleanup() {\n        // Cleanup resources if needed\n        this.ffmpeg = null;\n        this.isFFmpegLoaded = false;\n    }\n    isReady() {\n        return this.isFFmpegLoaded || this.supportsWebCodecs;\n    }\n    getSupportedFormats() {\n        const formats = [];\n        if (this.isFFmpegLoaded) {\n            formats.push(\"gif\", \"mp4\");\n        } else if (this.supportsWebCodecs) {\n            formats.push(\"mp4\");\n        }\n        return formats;\n    }\n    constructor(){\n        this.ffmpeg = null;\n        this.isFFmpegLoaded = false;\n        this.supportsWebCodecs = false;\n        this.checkWebCodecsSupport();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/videoExport.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsSUFBSSxJQUFxQztBQUN6QztBQUNBOztBQUVBLFlBQVksbUJBQU8sQ0FBQyxzR0FBMEI7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlHQUFpRyxlQUFlO0FBQ2hIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQSxLQUFLLEdBQUc7O0FBRVIsa0RBQWtEO0FBQ2xEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLDRCQUE0QjtBQUM1QjtBQUNBLHFDQUFxQzs7QUFFckMsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBOztBQUVBLHFFQUFxRTs7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHOztBQUVsRztBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7OztBQUdKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQ0FBaUM7O0FBRWpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsU0FBUztBQUNULHVCQUF1QjtBQUN2QjtBQUNBLFNBQVM7QUFDVCx1QkFBdUI7QUFDdkI7QUFDQSxTQUFTO0FBQ1Qsd0JBQXdCO0FBQ3hCO0FBQ0EsU0FBUztBQUNULHdCQUF3QjtBQUN4QjtBQUNBLFNBQVM7QUFDVCxpQ0FBaUM7QUFDakM7QUFDQSxTQUFTO0FBQ1QsMkJBQTJCO0FBQzNCO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkRBQTJEOztBQUUzRDtBQUNBOztBQUVBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOzs7QUFHYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYzs7O0FBR2Q7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7OztBQUdBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsZ0hBQWdIOztBQUVoSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxrQkFBa0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0EsZ0ZBQWdGO0FBQ2hGO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsSUFBSTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7OztBQUdsQjtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLEdBQUc7QUFDZCxXQUFXLEdBQUc7QUFDZCxXQUFXLGVBQWU7QUFDMUIsV0FBVyxHQUFHO0FBQ2QsV0FBVyxHQUFHO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxHQUFHOztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFCQUFxQjtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE1BQU07OztBQUdOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLDhDQUE4QyxnREFBZ0QsTUFBTSxhQUFhOztBQUVqSDtBQUNBLCtDQUErQyxrQ0FBa0MsT0FBTzs7QUFFeEYsdUdBQXVHLGNBQWMsVUFBVSxnR0FBZ0csa0JBQWtCLFVBQVUsVUFBVTs7QUFFclE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiwyREFBMkQsVUFBVTtBQUNyRSx5QkFBeUIsVUFBVTtBQUNuQztBQUNBLGFBQWEsVUFBVTtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNOzs7QUFHTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7O0FBR047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxHQUFHO0FBQ2Q7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0RBQW9EO0FBQ3BELHNCQUFzQixpQkFBaUI7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFlBQVksU0FBUztBQUNyQjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsV0FBVyxHQUFHO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw2REFBNkQ7QUFDN0Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixpQkFBaUI7QUFDckM7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGdCQUFnQjtBQUNoQixjQUFjO0FBQ2QsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcz80NDk5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9yZWFjdFwiKTtcblxuLy8gQVRURU5USU9OXG4vLyBXaGVuIGFkZGluZyBuZXcgc3ltYm9scyB0byB0aGlzIGZpbGUsXG4vLyBQbGVhc2UgY29uc2lkZXIgYWxzbyBhZGRpbmcgdG8gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9SZWFjdFN5bWJvbHMnXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50Jyk7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wb3J0YWwnKTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZnJhZ21lbnQnKTtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKTtcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucHJvZmlsZXInKTtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucHJvdmlkZXInKTsgLy8gVE9ETzogRGVsZXRlIHdpdGggZW5hYmxlUmVuZGVyYWJsZUNvbnRleHRcblxudmFyIFJFQUNUX0NPTlNVTUVSX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5jb25zdW1lcicpO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKTtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0Jyk7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcigncmVhY3QubWVtbycpO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKTtcbnZhciBSRUFDVF9PRkZTQ1JFRU5fVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0Lm9mZnNjcmVlbicpO1xudmFyIFJFQUNUX0NBQ0hFX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5jYWNoZScpO1xudmFyIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCB0eXBlb2YgbWF5YmVJdGVyYWJsZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtYXliZUl0ZXJhdG9yID0gTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXTtcblxuICBpZiAodHlwZW9mIG1heWJlSXRlcmF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvcjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSBSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcblxuZnVuY3Rpb24gZXJyb3IoZm9ybWF0KSB7XG4gIHtcbiAgICB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBwcmludFdhcm5pbmcoJ2Vycm9yJywgZm9ybWF0LCBhcmdzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGxldmVsLCBmb3JtYXQsIGFyZ3MpIHtcbiAgLy8gV2hlbiBjaGFuZ2luZyB0aGlzIGxvZ2ljLCB5b3UgbWlnaHQgd2FudCB0byBhbHNvXG4gIC8vIHVwZGF0ZSBjb25zb2xlV2l0aFN0YWNrRGV2Lnd3dy5qcyBhcyB3ZWxsLlxuICB7XG4gICAgdmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuICAgIHZhciBzdGFjayA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpO1xuXG4gICAgaWYgKHN0YWNrICE9PSAnJykge1xuICAgICAgZm9ybWF0ICs9ICclcyc7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoW3N0YWNrXSk7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cblxuXG4gICAgdmFyIGFyZ3NXaXRoRm9ybWF0ID0gYXJncy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBTdHJpbmcoaXRlbSk7XG4gICAgfSk7IC8vIENhcmVmdWw6IFJOIGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoaXMgcHJlZml4XG5cbiAgICBhcmdzV2l0aEZvcm1hdC51bnNoaWZ0KCdXYXJuaW5nOiAnICsgZm9ybWF0KTsgLy8gV2UgaW50ZW50aW9uYWxseSBkb24ndCB1c2Ugc3ByZWFkIChvciAuYXBwbHkpIGRpcmVjdGx5IGJlY2F1c2UgaXRcbiAgICAvLyBicmVha3MgSUU5OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzNjEwXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZ1xuXG4gICAgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZVtsZXZlbF0sIGNvbnNvbGUsIGFyZ3NXaXRoRm9ybWF0KTtcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgZW5hYmxlU2NvcGVBUEkgPSBmYWxzZTsgLy8gRXhwZXJpbWVudGFsIENyZWF0ZSBFdmVudCBIYW5kbGUgQVBJLlxudmFyIGVuYWJsZUNhY2hlRWxlbWVudCA9IGZhbHNlO1xudmFyIGVuYWJsZVRyYW5zaXRpb25UcmFjaW5nID0gZmFsc2U7IC8vIE5vIGtub3duIGJ1Z3MsIGJ1dCBuZWVkcyBwZXJmb3JtYW5jZSB0ZXN0aW5nXG5cbnZhciBlbmFibGVMZWdhY3lIaWRkZW4gPSBmYWxzZTsgLy8gRW5hYmxlcyB1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayBmZWF0dXJlIGluIEZpYmVyXG52YXIgZW5hYmxlUmVuZGVyYWJsZUNvbnRleHQgPSBmYWxzZTtcbi8vIHN0dWZmLiBJbnRlbmRlZCB0byBlbmFibGUgUmVhY3QgY29yZSBtZW1iZXJzIHRvIG1vcmUgZWFzaWx5IGRlYnVnIHNjaGVkdWxpbmdcbi8vIGlzc3VlcyBpbiBERVYgYnVpbGRzLlxuXG52YXIgZW5hYmxlRGVidWdUcmFjaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGdldFdyYXBwZWROYW1lKG91dGVyVHlwZSwgaW5uZXJUeXBlLCB3cmFwcGVyTmFtZSkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBvdXRlclR5cGUuZGlzcGxheU5hbWU7XG5cbiAgaWYgKGRpc3BsYXlOYW1lKSB7XG4gICAgcmV0dXJuIGRpc3BsYXlOYW1lO1xuICB9XG5cbiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGlubmVyVHlwZS5kaXNwbGF5TmFtZSB8fCBpbm5lclR5cGUubmFtZSB8fCAnJztcbiAgcmV0dXJuIGZ1bmN0aW9uTmFtZSAhPT0gJycgPyB3cmFwcGVyTmFtZSArIFwiKFwiICsgZnVuY3Rpb25OYW1lICsgXCIpXCIgOiB3cmFwcGVyTmFtZTtcbn0gLy8gS2VlcCBpbiBzeW5jIHdpdGggcmVhY3QtcmVjb25jaWxlci9nZXRDb21wb25lbnROYW1lRnJvbUZpYmVyXG5cblxuZnVuY3Rpb24gZ2V0Q29udGV4dE5hbWUodHlwZSkge1xuICByZXR1cm4gdHlwZS5kaXNwbGF5TmFtZSB8fCAnQ29udGV4dCc7XG59XG5cbnZhciBSRUFDVF9DTElFTlRfUkVGRVJFTkNFJDIgPSBTeW1ib2wuZm9yKCdyZWFjdC5jbGllbnQucmVmZXJlbmNlJyk7IC8vIE5vdGUgdGhhdCB0aGUgcmVjb25jaWxlciBwYWNrYWdlIHNob3VsZCBnZW5lcmFsbHkgcHJlZmVyIHRvIHVzZSBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKCkgaW5zdGVhZC5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpIHtcbiAgaWYgKHR5cGUgPT0gbnVsbCkge1xuICAgIC8vIEhvc3Qgcm9vdCwgdGV4dCBub2RlIG9yIGp1c3QgaW52YWxpZCB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UkMikge1xuICAgICAgLy8gVE9ETzogQ3JlYXRlIGEgY29udmVudGlvbiBmb3IgbmFtaW5nIGNsaWVudCByZWZlcmVuY2VzIHdpdGggZGVidWcgaW5mby5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgcmV0dXJuICdGcmFnbWVudCc7XG5cbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuICdQb3J0YWwnO1xuXG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuICdQcm9maWxlcic7XG5cbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gJ1N0cmljdE1vZGUnO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuICdTdXNwZW5zZSc7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiAnU3VzcGVuc2VMaXN0JztcblxuICAgIGNhc2UgUkVBQ1RfQ0FDSEVfVFlQRTpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICdDYWNoZSc7XG4gICAgICB9XG5cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB7XG4gICAgICBpZiAodHlwZW9mIHR5cGUudGFnID09PSAnbnVtYmVyJykge1xuICAgICAgICBlcnJvcignUmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBvYmplY3QgaW4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKCkuICcgKyAnVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVyID0gdHlwZTtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29udGV4dE5hbWUocHJvdmlkZXIuX2NvbnRleHQpICsgJy5Qcm92aWRlcic7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgIHZhciBjb250ZXh0ID0gdHlwZTtcblxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIGdldENvbnRleHROYW1lKGNvbnRleHQpICsgJy5Db25zdW1lcic7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9DT05TVU1FUl9UWVBFOlxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUodHlwZSwgdHlwZS5yZW5kZXIsICdGb3J3YXJkUmVmJyk7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICB2YXIgb3V0ZXJOYW1lID0gdHlwZS5kaXNwbGF5TmFtZSB8fCBudWxsO1xuXG4gICAgICAgIGlmIChvdXRlck5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gb3V0ZXJOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8ICdNZW1vJztcblxuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHR5cGU7XG4gICAgICAgICAgdmFyIHBheWxvYWQgPSBsYXp5Q29tcG9uZW50Ll9wYXlsb2FkO1xuICAgICAgICAgIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKGluaXQocGF5bG9hZCkpO1xuICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLypcbiAqIFRoZSBgJycgKyB2YWx1ZWAgcGF0dGVybiAodXNlZCBpbiBwZXJmLXNlbnNpdGl2ZSBjb2RlKSB0aHJvd3MgZm9yIFN5bWJvbFxuICogYW5kIFRlbXBvcmFsLiogdHlwZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yMjA2NC5cbiAqXG4gKiBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlIHdpbGwgdGhyb3cgYW4gZWFzaWVyLXRvLXVuZGVyc3RhbmQsXG4gKiBlYXNpZXItdG8tZGVidWcgZXhjZXB0aW9uIHdpdGggYSBjbGVhciBlcnJvcnMgbWVzc2FnZSBtZXNzYWdlIGV4cGxhaW5pbmcgdGhlXG4gKiBwcm9ibGVtLiAoSW5zdGVhZCBvZiBhIGNvbmZ1c2luZyBleGNlcHRpb24gdGhyb3duIGluc2lkZSB0aGUgaW1wbGVtZW50YXRpb25cbiAqIG9mIHRoZSBgdmFsdWVgIG9iamVjdCkuXG4gKi9cbi8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl0gb25seSBjYWxsZWQgaW4gREVWLCBzbyB2b2lkIHJldHVybiBpcyBub3QgcG9zc2libGUuXG5mdW5jdGlvbiB0eXBlTmFtZSh2YWx1ZSkge1xuICB7XG4gICAgLy8gdG9TdHJpbmdUYWcgaXMgbmVlZGVkIGZvciBuYW1lc3BhY2VkIHR5cGVzIGxpa2UgVGVtcG9yYWwuSW5zdGFudFxuICAgIHZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLnRvU3RyaW5nVGFnO1xuICAgIHZhciB0eXBlID0gaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSB8fCB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnOyAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxufSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dIG9ubHkgY2FsbGVkIGluIERFViwgc28gdm9pZCByZXR1cm4gaXMgbm90IHBvc3NpYmxlLlxuXG5cbmZ1bmN0aW9uIHdpbGxDb2VyY2lvblRocm93KHZhbHVlKSB7XG4gIHtcbiAgICB0cnkge1xuICAgICAgdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIC8vIElmIHlvdSBlbmRlZCB1cCBoZXJlIGJ5IGZvbGxvd2luZyBhbiBleGNlcHRpb24gY2FsbCBzdGFjaywgaGVyZSdzIHdoYXQnc1xuICAvLyBoYXBwZW5lZDogeW91IHN1cHBsaWVkIGFuIG9iamVjdCBvciBzeW1ib2wgdmFsdWUgdG8gUmVhY3QgKGFzIGEgcHJvcCwga2V5LFxuICAvLyBET00gYXR0cmlidXRlLCBDU1MgcHJvcGVydHksIHN0cmluZyByZWYsIGV0Yy4pIGFuZCB3aGVuIFJlYWN0IHRyaWVkIHRvXG4gIC8vIGNvZXJjZSBpdCB0byBhIHN0cmluZyB1c2luZyBgJycgKyB2YWx1ZWAsIGFuIGV4Y2VwdGlvbiB3YXMgdGhyb3duLlxuICAvL1xuICAvLyBUaGUgbW9zdCBjb21tb24gdHlwZXMgdGhhdCB3aWxsIGNhdXNlIHRoaXMgZXhjZXB0aW9uIGFyZSBgU3ltYm9sYCBpbnN0YW5jZXNcbiAgLy8gYW5kIFRlbXBvcmFsIG9iamVjdHMgbGlrZSBgVGVtcG9yYWwuSW5zdGFudGAuIEJ1dCBhbnkgb2JqZWN0IHRoYXQgaGFzIGFcbiAgLy8gYHZhbHVlT2ZgIG9yIGBbU3ltYm9sLnRvUHJpbWl0aXZlXWAgbWV0aG9kIHRoYXQgdGhyb3dzIHdpbGwgYWxzbyBjYXVzZSB0aGlzXG4gIC8vIGV4Y2VwdGlvbi4gKExpYnJhcnkgYXV0aG9ycyBkbyB0aGlzIHRvIHByZXZlbnQgdXNlcnMgZnJvbSB1c2luZyBidWlsdC1pblxuICAvLyBudW1lcmljIG9wZXJhdG9ycyBsaWtlIGArYCBvciBjb21wYXJpc29uIG9wZXJhdG9ycyBsaWtlIGA+PWAgYmVjYXVzZSBjdXN0b21cbiAgLy8gbWV0aG9kcyBhcmUgbmVlZGVkIHRvIHBlcmZvcm0gYWNjdXJhdGUgYXJpdGhtZXRpYyBvciBjb21wYXJpc29uLilcbiAgLy9cbiAgLy8gVG8gZml4IHRoZSBwcm9ibGVtLCBjb2VyY2UgdGhpcyBvYmplY3Qgb3Igc3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nIGJlZm9yZVxuICAvLyBwYXNzaW5nIGl0IHRvIFJlYWN0LiBUaGUgbW9zdCByZWxpYWJsZSB3YXkgaXMgdXN1YWxseSBgU3RyaW5nKHZhbHVlKWAuXG4gIC8vXG4gIC8vIFRvIGZpbmQgd2hpY2ggdmFsdWUgaXMgdGhyb3dpbmcsIGNoZWNrIHRoZSBicm93c2VyIG9yIGRlYnVnZ2VyIGNvbnNvbGUuXG4gIC8vIEJlZm9yZSB0aGlzIGV4Y2VwdGlvbiB3YXMgdGhyb3duLCB0aGVyZSBzaG91bGQgYmUgYGNvbnNvbGUuZXJyb3JgIG91dHB1dFxuICAvLyB0aGF0IHNob3dzIHRoZSB0eXBlIChTeW1ib2wsIFRlbXBvcmFsLlBsYWluRGF0ZSwgZXRjLikgdGhhdCBjYXVzZWQgdGhlXG4gIC8vIHByb2JsZW0gYW5kIGhvdyB0aGF0IHR5cGUgd2FzIHVzZWQ6IGtleSwgYXRycmlidXRlLCBpbnB1dCB2YWx1ZSBwcm9wLCBldGMuXG4gIC8vIEluIG1vc3QgY2FzZXMsIHRoaXMgY29uc29sZSBvdXRwdXQgYWxzbyBzaG93cyB0aGUgY29tcG9uZW50IGFuZCBpdHNcbiAgLy8gYW5jZXN0b3IgY29tcG9uZW50cyB3aGVyZSB0aGUgZXhjZXB0aW9uIGhhcHBlbmVkLlxuICAvL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cbiAgcmV0dXJuICcnICsgdmFsdWU7XG59XG5mdW5jdGlvbiBjaGVja0tleVN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIHtcbiAgICBpZiAod2lsbENvZXJjaW9uVGhyb3codmFsdWUpKSB7XG4gICAgICBlcnJvcignVGhlIHByb3ZpZGVkIGtleSBpcyBhbiB1bnN1cHBvcnRlZCB0eXBlICVzLicgKyAnIFRoaXMgdmFsdWUgbXVzdCBiZSBjb2VyY2VkIHRvIGEgc3RyaW5nIGJlZm9yZSB1c2luZyBpdCBoZXJlLicsIHR5cGVOYW1lKHZhbHVlKSk7XG5cbiAgICAgIHJldHVybiB0ZXN0U3RyaW5nQ29lcmNpb24odmFsdWUpOyAvLyB0aHJvdyAodG8gaGVscCBjYWxsZXJzIGZpbmQgdHJvdWJsZXNob290aW5nIGNvbW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG52YXIgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSQxID0gU3ltYm9sLmZvcigncmVhY3QuY2xpZW50LnJlZmVyZW5jZScpO1xuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIE5vdGU6IHR5cGVvZiBtaWdodCBiZSBvdGhlciB0aGFuICdzeW1ib2wnIG9yICdudW1iZXInIChlLmcuIGlmIGl0J3MgYSBwb2x5ZmlsbCkuXG5cblxuICBpZiAodHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8IGVuYWJsZURlYnVnVHJhY2luZyAgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCBlbmFibGVMZWdhY3lIaWRkZW4gIHx8IHR5cGUgPT09IFJFQUNUX09GRlNDUkVFTl9UWVBFIHx8IGVuYWJsZVNjb3BlQVBJICB8fCBlbmFibGVDYWNoZUVsZW1lbnQgIHx8IGVuYWJsZVRyYW5zaXRpb25UcmFjaW5nICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsKSB7XG4gICAgaWYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUgfHwgZW5hYmxlUmVuZGVyYWJsZUNvbnRleHQgIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgLy8gVGhpcyBuZWVkcyB0byBpbmNsdWRlIGFsbCBwb3NzaWJsZSBtb2R1bGUgcmVmZXJlbmNlIG9iamVjdFxuICAgIC8vIHR5cGVzIHN1cHBvcnRlZCBieSBhbnkgRmxpZ2h0IGNvbmZpZ3VyYXRpb24gYW55d2hlcmUgc2luY2VcbiAgICAvLyB3ZSBkb24ndCBrbm93IHdoaWNoIEZsaWdodCBidWlsZCB0aGlzIHdpbGwgZW5kIHVwIGJlaW5nIHVzZWRcbiAgICAvLyB3aXRoLlxuICAgIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UkMSB8fCB0eXBlLmdldE1vZHVsZUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIGlzQXJyYXlJbXBsID0gQXJyYXkuaXNBcnJheTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuXG5mdW5jdGlvbiBpc0FycmF5KGEpIHtcbiAgcmV0dXJuIGlzQXJyYXlJbXBsKGEpO1xufVxuXG4vLyBIZWxwZXJzIHRvIHBhdGNoIGNvbnNvbGUubG9ncyB0byBhdm9pZCBsb2dnaW5nIGR1cmluZyBzaWRlLWVmZmVjdCBmcmVlXG4vLyByZXBsYXlpbmcgb24gcmVuZGVyIGZ1bmN0aW9uLiBUaGlzIGN1cnJlbnRseSBvbmx5IHBhdGNoZXMgdGhlIG9iamVjdFxuLy8gbGF6aWx5IHdoaWNoIHdvbid0IGNvdmVyIGlmIHRoZSBsb2cgZnVuY3Rpb24gd2FzIGV4dHJhY3RlZCBlYWdlcmx5LlxuLy8gV2UgY291bGQgYWxzbyBlYWdlcmx5IHBhdGNoIHRoZSBtZXRob2QuXG52YXIgZGlzYWJsZWREZXB0aCA9IDA7XG52YXIgcHJldkxvZztcbnZhciBwcmV2SW5mbztcbnZhciBwcmV2V2FybjtcbnZhciBwcmV2RXJyb3I7XG52YXIgcHJldkdyb3VwO1xudmFyIHByZXZHcm91cENvbGxhcHNlZDtcbnZhciBwcmV2R3JvdXBFbmQ7XG5cbmZ1bmN0aW9uIGRpc2FibGVkTG9nKCkge31cblxuZGlzYWJsZWRMb2cuX19yZWFjdERpc2FibGVkTG9nID0gdHJ1ZTtcbmZ1bmN0aW9uIGRpc2FibGVMb2dzKCkge1xuICB7XG4gICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgICAgcHJldkxvZyA9IGNvbnNvbGUubG9nO1xuICAgICAgcHJldkluZm8gPSBjb25zb2xlLmluZm87XG4gICAgICBwcmV2V2FybiA9IGNvbnNvbGUud2FybjtcbiAgICAgIHByZXZFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG4gICAgICBwcmV2R3JvdXAgPSBjb25zb2xlLmdyb3VwO1xuICAgICAgcHJldkdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZDtcbiAgICAgIHByZXZHcm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQ7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTkwOTlcblxuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBkaXNhYmxlZExvZyxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH07IC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXSBGbG93IHRoaW5rcyBjb25zb2xlIGlzIGltbXV0YWJsZS5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY29uc29sZSwge1xuICAgICAgICBpbmZvOiBwcm9wcyxcbiAgICAgICAgbG9nOiBwcm9wcyxcbiAgICAgICAgd2FybjogcHJvcHMsXG4gICAgICAgIGVycm9yOiBwcm9wcyxcbiAgICAgICAgZ3JvdXA6IHByb3BzLFxuICAgICAgICBncm91cENvbGxhcHNlZDogcHJvcHMsXG4gICAgICAgIGdyb3VwRW5kOiBwcm9wc1xuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgIH1cblxuICAgIGRpc2FibGVkRGVwdGgrKztcbiAgfVxufVxuZnVuY3Rpb24gcmVlbmFibGVMb2dzKCkge1xuICB7XG4gICAgZGlzYWJsZWREZXB0aC0tO1xuXG4gICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9OyAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV0gRmxvdyB0aGlua3MgY29uc29sZSBpcyBpbW11dGFibGUuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHtcbiAgICAgICAgbG9nOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZMb2dcbiAgICAgICAgfSksXG4gICAgICAgIGluZm86IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkluZm9cbiAgICAgICAgfSksXG4gICAgICAgIHdhcm46IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldldhcm5cbiAgICAgICAgfSksXG4gICAgICAgIGVycm9yOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZFcnJvclxuICAgICAgICB9KSxcbiAgICAgICAgZ3JvdXA6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cENvbGxhcHNlZDogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2R3JvdXBDb2xsYXBzZWRcbiAgICAgICAgfSksXG4gICAgICAgIGdyb3VwRW5kOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZHcm91cEVuZFxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgIH1cblxuICAgIGlmIChkaXNhYmxlZERlcHRoIDwgMCkge1xuICAgICAgZXJyb3IoJ2Rpc2FibGVkRGVwdGggZmVsbCBiZWxvdyB6ZXJvLiAnICsgJ1RoaXMgaXMgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudERpc3BhdGNoZXI7XG52YXIgcHJlZml4O1xuZnVuY3Rpb24gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUobmFtZSwgb3duZXJGbikge1xuICB7XG4gICAgaWYgKHByZWZpeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBFeHRyYWN0IHRoZSBWTSBzcGVjaWZpYyBwcmVmaXggdXNlZCBieSBlYWNoIGxpbmUuXG4gICAgICB0cnkge1xuICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSB4LnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO1xuICAgICAgICBwcmVmaXggPSBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbiAgICAgIH1cbiAgICB9IC8vIFdlIHVzZSB0aGUgcHJlZml4IHRvIGVuc3VyZSBvdXIgc3RhY2tzIGxpbmUgdXAgd2l0aCBuYXRpdmUgc3RhY2sgZnJhbWVzLlxuXG5cbiAgICByZXR1cm4gJ1xcbicgKyBwcmVmaXggKyBuYW1lO1xuICB9XG59XG52YXIgcmVlbnRyeSA9IGZhbHNlO1xudmFyIGNvbXBvbmVudEZyYW1lQ2FjaGU7XG5cbntcbiAgdmFyIFBvc3NpYmx5V2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nID8gV2Vha01hcCA6IE1hcDtcbiAgY29tcG9uZW50RnJhbWVDYWNoZSA9IG5ldyBQb3NzaWJseVdlYWtNYXAoKTtcbn1cbi8qKlxuICogTGV2ZXJhZ2VzIG5hdGl2ZSBicm93c2VyL1ZNIHN0YWNrIGZyYW1lcyB0byBnZXQgcHJvcGVyIGRldGFpbHMgKGUuZy5cbiAqIGZpbGVuYW1lLCBsaW5lICsgY29sIG51bWJlcikgZm9yIGEgc2luZ2xlIGNvbXBvbmVudCBpbiBhIGNvbXBvbmVudCBzdGFjay4gV2VcbiAqIGRvIHRoaXMgYnk6XG4gKiAgICgxKSB0aHJvd2luZyBhbmQgY2F0Y2hpbmcgYW4gZXJyb3IgaW4gdGhlIGZ1bmN0aW9uIC0gdGhpcyB3aWxsIGJlIG91clxuICogICAgICAgY29udHJvbCBlcnJvci5cbiAqICAgKDIpIGNhbGxpbmcgdGhlIGNvbXBvbmVudCB3aGljaCB3aWxsIGV2ZW50dWFsbHkgdGhyb3cgYW4gZXJyb3IgdGhhdCB3ZSdsbFxuICogICAgICAgY2F0Y2ggLSB0aGlzIHdpbGwgYmUgb3VyIHNhbXBsZSBlcnJvci5cbiAqICAgKDMpIGRpZmZpbmcgdGhlIGNvbnRyb2wgYW5kIHNhbXBsZSBlcnJvciBzdGFja3MgdG8gZmluZCB0aGUgc3RhY2sgZnJhbWVcbiAqICAgICAgIHdoaWNoIHJlcHJlc2VudHMgb3VyIGNvbXBvbmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGNvbnN0cnVjdCkge1xuICAvLyBJZiBzb21ldGhpbmcgYXNrZWQgZm9yIGEgc3RhY2sgaW5zaWRlIGEgZmFrZSByZW5kZXIsIGl0IHNob3VsZCBnZXQgaWdub3JlZC5cbiAgaWYgKCFmbiB8fCByZWVudHJ5KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAge1xuICAgIHZhciBmcmFtZSA9IGNvbXBvbmVudEZyYW1lQ2FjaGUuZ2V0KGZuKTtcblxuICAgIGlmIChmcmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZnJhbWU7XG4gICAgfVxuICB9XG5cbiAgcmVlbnRyeSA9IHRydWU7XG4gIHZhciBwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlID0gRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdIEl0IGRvZXMgYWNjZXB0IHVuZGVmaW5lZC5cblxuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHVuZGVmaW5lZDtcbiAgdmFyIHByZXZpb3VzRGlzcGF0Y2hlcjtcblxuICB7XG4gICAgcHJldmlvdXNEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50OyAvLyBTZXQgdGhlIGRpc3BhdGNoZXIgaW4gREVWIGJlY2F1c2UgdGhpcyBtaWdodCBiZSBjYWxsIGluIHRoZSByZW5kZXIgZnVuY3Rpb25cbiAgICAvLyBmb3Igd2FybmluZ3MuXG5cbiAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQgPSBudWxsO1xuICAgIGRpc2FibGVMb2dzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEZpbmRpbmcgYSBjb21tb24gc3RhY2sgZnJhbWUgYmV0d2VlbiBzYW1wbGUgYW5kIGNvbnRyb2wgZXJyb3JzIGNhbiBiZVxuICAgKiB0cmlja3kgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcyBhbmQgbGV2ZWxzIG9mIHN0YWNrIHRyYWNlIHRydW5jYXRpb24gZnJvbVxuICAgKiBkaWZmZXJlbnQgSlMgVk1zLiBTbyBpbnN0ZWFkIHdlJ2xsIGF0dGVtcHQgdG8gY29udHJvbCB3aGF0IHRoYXQgY29tbW9uXG4gICAqIGZyYW1lIHNob3VsZCBiZSB0aHJvdWdoIHRoaXMgb2JqZWN0IG1ldGhvZDpcbiAgICogSGF2aW5nIGJvdGggdGhlIHNhbXBsZSBhbmQgY29udHJvbCBlcnJvcnMgYmUgaW4gdGhlIGZ1bmN0aW9uIHVuZGVyIHRoZVxuICAgKiBgRGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZVJvb3RgIHByb3BlcnR5LCArIHNldHRpbmcgdGhlIGBuYW1lYCBhbmRcbiAgICogYGRpc3BsYXlOYW1lYCBwcm9wZXJ0aWVzIG9mIHRoZSBmdW5jdGlvbiBlbnN1cmVzIHRoYXQgYSBzdGFja1xuICAgKiBmcmFtZSBleGlzdHMgdGhhdCBoYXMgdGhlIG1ldGhvZCBuYW1lIGBEZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lUm9vdGAgaW5cbiAgICogaXQgZm9yIGJvdGggY29udHJvbCBhbmQgc2FtcGxlIHN0YWNrcy5cbiAgICovXG5cblxuICB2YXIgUnVuSW5Sb290RnJhbWUgPSB7XG4gICAgRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udHJvbDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBzaG91bGQgdGhyb3cuXG4gICAgICAgIGlmIChjb25zdHJ1Y3QpIHtcbiAgICAgICAgICAvLyBTb21ldGhpbmcgc2hvdWxkIGJlIHNldHRpbmcgdGhlIHByb3BzIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICB2YXIgRmFrZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgICAgfTsgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYWtlLnByb3RvdHlwZSwgJ3Byb3BzJywge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIC8vIFdlIHVzZSBhIHRocm93aW5nIHNldHRlciBpbnN0ZWFkIG9mIGZyb3plbiBvciBub24td3JpdGFibGUgcHJvcHNcbiAgICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGF0IHdvbid0IHRocm93IGluIGEgbm9uLXN0cmljdCBtb2RlIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyAmJiBSZWZsZWN0LmNvbnN0cnVjdCkge1xuICAgICAgICAgICAgLy8gV2UgY29uc3RydWN0IGEgZGlmZmVyZW50IGNvbnRyb2wgZm9yIHRoaXMgY2FzZSB0byBpbmNsdWRlIGFueSBleHRyYVxuICAgICAgICAgICAgLy8gZnJhbWVzIGFkZGVkIGJ5IHRoZSBjb25zdHJ1Y3QgY2FsbC5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KGZuLCBbXSwgRmFrZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIEZha2UuY2FsbCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgICBjb250cm9sID0geDtcbiAgICAgICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIGZvdW5kIHdoZW4gdXBncmFkaW5nIEZsb3dcblxuXG4gICAgICAgICAgICBmbi5jYWxsKEZha2UucHJvdG90eXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICAgICAgfSAvLyBUT0RPKGx1bmEpOiBUaGlzIHdpbGwgY3VycmVudGx5IG9ubHkgdGhyb3cgaWYgdGhlIGZ1bmN0aW9uIGNvbXBvbmVudFxuICAgICAgICAgIC8vIHRyaWVzIHRvIGFjY2VzcyBSZWFjdC9SZWFjdERPTS9wcm9wcy4gV2Ugc2hvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyB0aHJvd1xuICAgICAgICAgIC8vIGluIHNpbXBsZSBjb21wb25lbnRzIHRvb1xuXG5cbiAgICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gZm4oKTsgLy8gSWYgdGhlIGZ1bmN0aW9uIGNvbXBvbmVudCByZXR1cm5zIGEgcHJvbWlzZSwgaXQncyBsaWtlbHkgYW4gYXN5bmNcbiAgICAgICAgICAvLyBjb21wb25lbnQsIHdoaWNoIHdlIGRvbid0IHlldCBzdXBwb3J0LiBBdHRhY2ggYSBub29wIGNhdGNoIGhhbmRsZXIgdG9cbiAgICAgICAgICAvLyBzaWxlbmNlIHRoZSBlcnJvci5cbiAgICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgY29tcG9uZW50IHN0YWNrcyBmb3IgYXN5bmMgY2xpZW50IGNvbXBvbmVudHM/XG5cbiAgICAgICAgICBpZiAobWF5YmVQcm9taXNlICYmIHR5cGVvZiBtYXliZVByb21pc2UuY2F0Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG1heWJlUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChzYW1wbGUpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBpbmxpbmVkIG1hbnVhbGx5IGJlY2F1c2UgY2xvc3VyZSBkb2Vzbid0IGRvIGl0IGZvciB1cy5cbiAgICAgICAgaWYgKHNhbXBsZSAmJiBjb250cm9sICYmIHR5cGVvZiBzYW1wbGUuc3RhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIFtzYW1wbGUuc3RhY2ssIGNvbnRyb2wuc3RhY2tdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbbnVsbCwgbnVsbF07XG4gICAgfVxuICB9OyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QuZGlzcGxheU5hbWUgPSAnRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290JztcbiAgdmFyIG5hbWVQcm9wRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LCAnbmFtZScpOyAvLyBCZWZvcmUgRVM2LCB0aGUgYG5hbWVgIHByb3BlcnR5IHdhcyBub3QgY29uZmlndXJhYmxlLlxuXG4gIGlmIChuYW1lUHJvcERlc2NyaXB0b3IgJiYgbmFtZVByb3BEZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuICAgIC8vIFY4IHV0aWxpemVzIGEgZnVuY3Rpb24ncyBgbmFtZWAgcHJvcGVydHkgd2hlbiBnZW5lcmF0aW5nIGEgc3RhY2sgdHJhY2UuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCwgLy8gQ29uZmlndXJhYmxlIHByb3BlcnRpZXMgY2FuIGJlIHVwZGF0ZWQgZXZlbiBpZiBpdHMgd3JpdGFibGUgZGVzY3JpcHRvclxuICAgIC8vIGlzIHNldCB0byBgZmFsc2VgLlxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuICAgICduYW1lJywge1xuICAgICAgdmFsdWU6ICdEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QnXG4gICAgfSk7XG4gIH1cblxuICB0cnkge1xuICAgIHZhciBfUnVuSW5Sb290RnJhbWUkRGV0ZXIgPSBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QoKSxcbiAgICAgICAgc2FtcGxlU3RhY2sgPSBfUnVuSW5Sb290RnJhbWUkRGV0ZXJbMF0sXG4gICAgICAgIGNvbnRyb2xTdGFjayA9IF9SdW5JblJvb3RGcmFtZSREZXRlclsxXTtcblxuICAgIGlmIChzYW1wbGVTdGFjayAmJiBjb250cm9sU3RhY2spIHtcbiAgICAgIC8vIFRoaXMgZXh0cmFjdHMgdGhlIGZpcnN0IGZyYW1lIGZyb20gdGhlIHNhbXBsZSB0aGF0IGlzbid0IGFsc28gaW4gdGhlIGNvbnRyb2wuXG4gICAgICAvLyBTa2lwcGluZyBvbmUgZnJhbWUgdGhhdCB3ZSBhc3N1bWUgaXMgdGhlIGZyYW1lIHRoYXQgY2FsbHMgdGhlIHR3by5cbiAgICAgIHZhciBzYW1wbGVMaW5lcyA9IHNhbXBsZVN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHZhciBjb250cm9sTGluZXMgPSBjb250cm9sU3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgdmFyIHMgPSAwO1xuICAgICAgdmFyIGMgPSAwO1xuXG4gICAgICB3aGlsZSAocyA8IHNhbXBsZUxpbmVzLmxlbmd0aCAmJiAhc2FtcGxlTGluZXNbc10uaW5jbHVkZXMoJ0RldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCcpKSB7XG4gICAgICAgIHMrKztcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKGMgPCBjb250cm9sTGluZXMubGVuZ3RoICYmICFjb250cm9sTGluZXNbY10uaW5jbHVkZXMoJ0RldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCcpKSB7XG4gICAgICAgIGMrKztcbiAgICAgIH0gLy8gV2UgY291bGRuJ3QgZmluZCBvdXIgaW50ZW50aW9uYWxseSBpbmplY3RlZCBjb21tb24gcm9vdCBmcmFtZSwgYXR0ZW1wdFxuICAgICAgLy8gdG8gZmluZCBhbm90aGVyIGNvbW1vbiByb290IGZyYW1lIGJ5IHNlYXJjaCBmcm9tIHRoZSBib3R0b20gb2YgdGhlXG4gICAgICAvLyBjb250cm9sIHN0YWNrLi4uXG5cblxuICAgICAgaWYgKHMgPT09IHNhbXBsZUxpbmVzLmxlbmd0aCB8fCBjID09PSBjb250cm9sTGluZXMubGVuZ3RoKSB7XG4gICAgICAgIHMgPSBzYW1wbGVMaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICBjID0gY29udHJvbExpbmVzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgd2hpbGUgKHMgPj0gMSAmJiBjID49IDAgJiYgc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAgIC8vIFdlIGV4cGVjdCBhdCBsZWFzdCBvbmUgc3RhY2sgZnJhbWUgdG8gYmUgc2hhcmVkLlxuICAgICAgICAgIC8vIFR5cGljYWxseSB0aGlzIHdpbGwgYmUgdGhlIHJvb3QgbW9zdCBvbmUuIEhvd2V2ZXIsIHN0YWNrIGZyYW1lcyBtYXkgYmVcbiAgICAgICAgICAvLyBjdXQgb2ZmIGR1ZSB0byBtYXhpbXVtIHN0YWNrIGxpbWl0cy4gSW4gdGhpcyBjYXNlLCBvbmUgbWF5YmUgY3V0IG9mZlxuICAgICAgICAgIC8vIGVhcmxpZXIgdGhhbiB0aGUgb3RoZXIuIFdlIGFzc3VtZSB0aGF0IHRoZSBzYW1wbGUgaXMgbG9uZ2VyIG9yIHRoZSBzYW1lXG4gICAgICAgICAgLy8gYW5kIHRoZXJlIGZvciBjdXQgb2ZmIGVhcmxpZXIuIFNvIHdlIHNob3VsZCBmaW5kIHRoZSByb290IG1vc3QgZnJhbWUgaW5cbiAgICAgICAgICAvLyB0aGUgc2FtcGxlIHNvbWV3aGVyZSBpbiB0aGUgY29udHJvbC5cbiAgICAgICAgICBjLS07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICg7IHMgPj0gMSAmJiBjID49IDA7IHMtLSwgYy0tKSB7XG4gICAgICAgIC8vIE5leHQgd2UgZmluZCB0aGUgZmlyc3Qgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgd2hpY2ggc2hvdWxkIGJlIHRoZVxuICAgICAgICAvLyBmcmFtZSB0aGF0IGNhbGxlZCBvdXIgc2FtcGxlIGZ1bmN0aW9uIGFuZCB0aGUgY29udHJvbC5cbiAgICAgICAgaWYgKHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgICAvLyBJbiBWOCwgdGhlIGZpcnN0IGxpbmUgaXMgZGVzY3JpYmluZyB0aGUgbWVzc2FnZSBidXQgb3RoZXIgVk1zIGRvbid0LlxuICAgICAgICAgIC8vIElmIHdlJ3JlIGFib3V0IHRvIHJldHVybiB0aGUgZmlyc3QgbGluZSwgYW5kIHRoZSBjb250cm9sIGlzIGFsc28gb24gdGhlIHNhbWVcbiAgICAgICAgICAvLyBsaW5lLCB0aGF0J3MgYSBwcmV0dHkgZ29vZCBpbmRpY2F0b3IgdGhhdCBvdXIgc2FtcGxlIHRocmV3IGF0IHNhbWUgbGluZSBhc1xuICAgICAgICAgIC8vIHRoZSBjb250cm9sLiBJLmUuIGJlZm9yZSB3ZSBlbnRlcmVkIHRoZSBzYW1wbGUgZnJhbWUuIFNvIHdlIGlnbm9yZSB0aGlzIHJlc3VsdC5cbiAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IHBhc3NlZCBhIGNsYXNzIHRvIGZ1bmN0aW9uIGNvbXBvbmVudCwgb3Igbm9uLWZ1bmN0aW9uLlxuICAgICAgICAgIGlmIChzICE9PSAxIHx8IGMgIT09IDEpIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgcy0tO1xuICAgICAgICAgICAgICBjLS07IC8vIFdlIG1heSBzdGlsbCBoYXZlIHNpbWlsYXIgaW50ZXJtZWRpYXRlIGZyYW1lcyBmcm9tIHRoZSBjb25zdHJ1Y3QgY2FsbC5cbiAgICAgICAgICAgICAgLy8gVGhlIG5leHQgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgc2hvdWxkIGJlIG91ciBtYXRjaCB0aG91Z2guXG5cbiAgICAgICAgICAgICAgaWYgKGMgPCAwIHx8IHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgICAgICAgICAvLyBWOCBhZGRzIGEgXCJuZXdcIiBwcmVmaXggZm9yIG5hdGl2ZSBjbGFzc2VzLiBMZXQncyByZW1vdmUgaXQgdG8gbWFrZSBpdCBwcmV0dGllci5cbiAgICAgICAgICAgICAgICB2YXIgX2ZyYW1lID0gJ1xcbicgKyBzYW1wbGVMaW5lc1tzXS5yZXBsYWNlKCcgYXQgbmV3ICcsICcgYXQgJyk7IC8vIElmIG91ciBjb21wb25lbnQgZnJhbWUgaXMgbGFiZWxlZCBcIjxhbm9ueW1vdXM+XCJcbiAgICAgICAgICAgICAgICAvLyBidXQgd2UgaGF2ZSBhIHVzZXItcHJvdmlkZWQgXCJkaXNwbGF5TmFtZVwiXG4gICAgICAgICAgICAgICAgLy8gc3BsaWNlIGl0IGluIHRvIG1ha2UgdGhlIHN0YWNrIG1vcmUgcmVhZGFibGUuXG5cblxuICAgICAgICAgICAgICAgIGlmIChmbi5kaXNwbGF5TmFtZSAmJiBfZnJhbWUuaW5jbHVkZXMoJzxhbm9ueW1vdXM+JykpIHtcbiAgICAgICAgICAgICAgICAgIF9mcmFtZSA9IF9mcmFtZS5yZXBsYWNlKCc8YW5vbnltb3VzPicsIGZuLmRpc3BsYXlOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRGcmFtZUNhY2hlLnNldChmbiwgX2ZyYW1lKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IC8vIFJldHVybiB0aGUgbGluZSB3ZSBmb3VuZC5cblxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9mcmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAocyA+PSAxICYmIGMgPj0gMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgcmVlbnRyeSA9IGZhbHNlO1xuXG4gICAge1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gcHJldmlvdXNEaXNwYXRjaGVyO1xuICAgICAgcmVlbmFibGVMb2dzKCk7XG4gICAgfVxuXG4gICAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlO1xuICB9IC8vIEZhbGxiYWNrIHRvIGp1c3QgdXNpbmcgdGhlIG5hbWUgaWYgd2UgY291bGRuJ3QgbWFrZSBpdCB0aHJvdy5cblxuXG4gIHZhciBuYW1lID0gZm4gPyBmbi5kaXNwbGF5TmFtZSB8fCBmbi5uYW1lIDogJyc7XG4gIHZhciBzeW50aGV0aWNGcmFtZSA9IG5hbWUgPyBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lKSA6ICcnO1xuXG4gIHtcbiAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb21wb25lbnRGcmFtZUNhY2hlLnNldChmbiwgc3ludGhldGljRnJhbWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzeW50aGV0aWNGcmFtZTtcbn1cbmZ1bmN0aW9uIGRlc2NyaWJlRnVuY3Rpb25Db21wb25lbnRGcmFtZShmbiwgb3duZXJGbikge1xuICB7XG4gICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISEocHJvdG90eXBlICYmIHByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKHR5cGUsIG93bmVyRm4pIHtcblxuICBpZiAodHlwZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAge1xuICAgICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUodHlwZSwgc2hvdWxkQ29uc3RydWN0KHR5cGUpKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKHR5cGUpO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKCdTdXNwZW5zZScpO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlTGlzdCcpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKHR5cGUucmVuZGVyKTtcblxuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIC8vIE1lbW8gbWF5IGNvbnRhaW4gYW55IGNvbXBvbmVudCB0eXBlIHNvIHdlIHJlY3Vyc2l2ZWx5IHJlc29sdmUgaXQuXG4gICAgICAgIHJldHVybiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYodHlwZS50eXBlLCBvd25lckZuKTtcblxuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHR5cGU7XG4gICAgICAgICAgdmFyIHBheWxvYWQgPSBsYXp5Q29tcG9uZW50Ll9wYXlsb2FkO1xuICAgICAgICAgIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBMYXp5IG1heSBjb250YWluIGFueSBjb21wb25lbnQgdHlwZSBzbyB3ZSByZWN1cnNpdmVseSByZXNvbHZlIGl0LlxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVihpbml0KHBheWxvYWQpLCBvd25lckZuKTtcbiAgICAgICAgICB9IGNhdGNoICh4KSB7fVxuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnRPd25lcjtcbnZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTtcbnZhciBSRUFDVF9DTElFTlRfUkVGRVJFTkNFID0gU3ltYm9sLmZvcigncmVhY3QuY2xpZW50LnJlZmVyZW5jZScpO1xudmFyIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duO1xudmFyIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duO1xudmFyIGRpZFdhcm5BYm91dFN0cmluZ1JlZnM7XG5cbntcbiAgZGlkV2FybkFib3V0U3RyaW5nUmVmcyA9IHt9O1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZFJlZihjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ3JlZicpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdyZWYnKS5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZEtleShjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ2tleScpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdrZXknKS5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlnLmtleSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnLCBzZWxmKSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5yZWYgPT09ICdzdHJpbmcnICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgc2VsZiAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnN0YXRlTm9kZSAhPT0gc2VsZikge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC50eXBlKTtcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRTdHJpbmdSZWZzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIGVycm9yKCdDb21wb25lbnQgXCIlc1wiIGNvbnRhaW5zIHRoZSBzdHJpbmcgcmVmIFwiJXNcIi4gJyArICdTdXBwb3J0IGZvciBzdHJpbmcgcmVmcyB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gJyArICdUaGlzIGNhc2UgY2Fubm90IGJlIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIGFuIGFycm93IGZ1bmN0aW9uLiAnICsgJ1dlIGFzayB5b3UgdG8gbWFudWFsbHkgZml4IHRoaXMgY2FzZSBieSB1c2luZyB1c2VSZWYoKSBvciBjcmVhdGVSZWYoKSBpbnN0ZWFkLiAnICsgJ0xlYXJuIG1vcmUgYWJvdXQgdXNpbmcgcmVmcyBzYWZlbHkgaGVyZTogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3RyaWN0LW1vZGUtc3RyaW5nLXJlZicsIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpLCBjb25maWcucmVmKTtcblxuICAgICAgICBkaWRXYXJuQWJvdXRTdHJpbmdSZWZzW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHtcbiAgICB2YXIgd2FybkFib3V0QWNjZXNzaW5nS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bikge1xuICAgICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJyVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ2tleScsIHtcbiAgICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nS2V5LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHtcbiAgICB7XG4gICAgICB2YXIgd2FybkFib3V0QWNjZXNzaW5nUmVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duKSB7XG4gICAgICAgICAgc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24gPSB0cnVlO1xuXG4gICAgICAgICAgZXJyb3IoJyVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAncmVmJywge1xuICAgICAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ1JlZixcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IFJlYWN0IGVsZW1lbnQuIFRoaXMgbm8gbG9uZ2VyIGFkaGVyZXMgdG9cbiAqIHRoZSBjbGFzcyBwYXR0ZXJuLCBzbyBkbyBub3QgdXNlIG5ldyB0byBjYWxsIGl0LiBBbHNvLCBpbnN0YW5jZW9mIGNoZWNrXG4gKiB3aWxsIG5vdCB3b3JrLiBJbnN0ZWFkIHRlc3QgJCR0eXBlb2YgZmllbGQgYWdhaW5zdCBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgdG8gY2hlY2tcbiAqIGlmIHNvbWV0aGluZyBpcyBhIFJlYWN0IEVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7Kn0gb3duZXJcbiAqIEBwYXJhbSB7Kn0gc2VsZiBBICp0ZW1wb3JhcnkqIGhlbHBlciB0byBkZXRlY3QgcGxhY2VzIHdoZXJlIGB0aGlzYCBpc1xuICogZGlmZmVyZW50IGZyb20gdGhlIGBvd25lcmAgd2hlbiBSZWFjdC5jcmVhdGVFbGVtZW50IGlzIGNhbGxlZCwgc28gdGhhdCB3ZVxuICogY2FuIHdhcm4uIFdlIHdhbnQgdG8gZ2V0IHJpZCBvZiBvd25lciBhbmQgcmVwbGFjZSBzdHJpbmcgYHJlZmBzIHdpdGggYXJyb3dcbiAqIGZ1bmN0aW9ucywgYW5kIGFzIGxvbmcgYXMgYHRoaXNgIGFuZCBvd25lciBhcmUgdGhlIHNhbWUsIHRoZXJlIHdpbGwgYmUgbm9cbiAqIGNoYW5nZSBpbiBiZWhhdmlvci5cbiAqIEBwYXJhbSB7Kn0gc291cmNlIEFuIGFubm90YXRpb24gb2JqZWN0IChhZGRlZCBieSBhIHRyYW5zcGlsZXIgb3Igb3RoZXJ3aXNlKVxuICogaW5kaWNhdGluZyBmaWxlbmFtZSwgbGluZSBudW1iZXIsIGFuZC9vciBvdGhlciBpbmZvcm1hdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5cblxuZnVuY3Rpb24gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgX3JlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIHJlZjtcblxuICB7XG4gICAgcmVmID0gX3JlZjtcbiAgfVxuXG4gIHZhciBlbGVtZW50O1xuXG4gIHtcbiAgICAvLyBJbiBwcm9kLCBgcmVmYCBpcyBhIHJlZ3VsYXIgcHJvcGVydHkuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiBhXG4gICAgLy8gZnV0dXJlIHJlbGVhc2UuXG4gICAgZWxlbWVudCA9IHtcbiAgICAgIC8vIFRoaXMgdGFnIGFsbG93cyB1cyB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzIGFzIGEgUmVhY3QgRWxlbWVudFxuICAgICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAgIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBrZXk6IGtleSxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgZWxlbWVudC5cbiAgICAgIF9vd25lcjogb3duZXJcbiAgICB9O1xuICB9XG5cbiAge1xuICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgaXMgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgaXQgb25cbiAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW5cbiAgICAvLyBjb21tb25seSB1c2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50cy5cbiAgICBlbGVtZW50Ll9zdG9yZSA9IHt9OyAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0pOyAvLyBkZWJ1Z0luZm8gY29udGFpbnMgU2VydmVyIENvbXBvbmVudCBkZWJ1ZyBpbmZvcm1hdGlvbi5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX2RlYnVnSW5mbycsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG51bGxcbiAgICB9KTtcblxuICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpO1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cbnZhciBkaWRXYXJuQWJvdXRLZXlTcHJlYWQgPSB7fTtcbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmZjcy9wdWxsLzEwN1xuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqL1xuXG5mdW5jdGlvbiBqc3hERVYkMSh0eXBlLCBjb25maWcsIG1heWJlS2V5LCBpc1N0YXRpY0NoaWxkcmVuLCBzb3VyY2UsIHNlbGYpIHtcbiAge1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpKSB7XG4gICAgICAvLyBUaGlzIGlzIGFuIGludmFsaWQgZWxlbWVudCB0eXBlLlxuICAgICAgLy9cbiAgICAgIC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvXG4gICAgICAvLyBzdWNjZWVkIGFuZCB0aGVyZSB3aWxsIGxpa2VseSBiZSBlcnJvcnMgaW4gcmVuZGVyLlxuICAgICAgdmFyIGluZm8gPSAnJztcblxuICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyh0eXBlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy5cIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHR5cGVTdHJpbmc7XG5cbiAgICAgIGlmICh0eXBlID09PSBudWxsKSB7XG4gICAgICAgIHR5cGVTdHJpbmcgPSAnbnVsbCc7XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXkodHlwZSkpIHtcbiAgICAgICAgdHlwZVN0cmluZyA9ICdhcnJheSc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICAgICAgdHlwZVN0cmluZyA9IFwiPFwiICsgKGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8ICdVbmtub3duJykgKyBcIiAvPlwiO1xuICAgICAgICBpbmZvID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBleHBvcnQgYSBKU1ggbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY29tcG9uZW50Pyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlU3RyaW5nID0gdHlwZW9mIHR5cGU7XG4gICAgICB9XG5cbiAgICAgIGVycm9yKCdSZWFjdC5qc3g6IHR5cGUgaXMgaW52YWxpZCAtLSBleHBlY3RlZCBhIHN0cmluZyAoZm9yICcgKyAnYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSAnICsgJ2NvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgdHlwZVN0cmluZywgaW5mbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgaXMgYSB2YWxpZCBlbGVtZW50IHR5cGUuXG4gICAgICAvLyBTa2lwIGtleSB3YXJuaW5nIGlmIHRoZSB0eXBlIGlzbid0IHZhbGlkIHNpbmNlIG91ciBrZXkgdmFsaWRhdGlvbiBsb2dpY1xuICAgICAgLy8gZG9lc24ndCBleHBlY3QgYSBub24tc3RyaW5nL2Z1bmN0aW9uIHR5cGUgYW5kIGNhbiB0aHJvdyBjb25mdXNpbmdcbiAgICAgIC8vIGVycm9ycy4gV2UgZG9uJ3Qgd2FudCBleGNlcHRpb24gYmVoYXZpb3IgdG8gZGlmZmVyIGJldHdlZW4gZGV2IGFuZFxuICAgICAgLy8gcHJvZC4gKFJlbmRlcmluZyB3aWxsIHRocm93IHdpdGggYSBoZWxwZnVsIG1lc3NhZ2UgYW5kIGFzIHNvb24gYXMgdGhlXG4gICAgICAvLyB0eXBlIGlzIGZpeGVkLCB0aGUga2V5IHdhcm5pbmdzIHdpbGwgYXBwZWFyLilcbiAgICAgIHZhciBjaGlsZHJlbiA9IGNvbmZpZy5jaGlsZHJlbjtcblxuICAgICAgaWYgKGNoaWxkcmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGlzU3RhdGljQ2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoY2hpbGRyZW5baV0sIHR5cGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyb3IoJ1JlYWN0LmpzeDogU3RhdGljIGNoaWxkcmVuIHNob3VsZCBhbHdheXMgYmUgYW4gYXJyYXkuICcgKyAnWW91IGFyZSBsaWtlbHkgZXhwbGljaXRseSBjYWxsaW5nIFJlYWN0LmpzeHMgb3IgUmVhY3QuanN4REVWLiAnICsgJ1VzZSB0aGUgQmFiZWwgdHJhbnNmb3JtIGluc3RlYWQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGNoaWxkcmVuLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gV2FybiBhYm91dCBrZXkgc3ByZWFkIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgdHlwZSBpcyB2YWxpZC5cblxuXG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCAna2V5JykpIHtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpO1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhjb25maWcpLmZpbHRlcihmdW5jdGlvbiAoaykge1xuICAgICAgICByZXR1cm4gayAhPT0gJ2tleSc7XG4gICAgICB9KTtcbiAgICAgIHZhciBiZWZvcmVFeGFtcGxlID0ga2V5cy5sZW5ndGggPiAwID8gJ3trZXk6IHNvbWVLZXksICcgKyBrZXlzLmpvaW4oJzogLi4uLCAnKSArICc6IC4uLn0nIDogJ3trZXk6IHNvbWVLZXl9JztcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRLZXlTcHJlYWRbY29tcG9uZW50TmFtZSArIGJlZm9yZUV4YW1wbGVdKSB7XG4gICAgICAgIHZhciBhZnRlckV4YW1wbGUgPSBrZXlzLmxlbmd0aCA+IDAgPyAneycgKyBrZXlzLmpvaW4oJzogLi4uLCAnKSArICc6IC4uLn0nIDogJ3t9JztcblxuICAgICAgICBlcnJvcignQSBwcm9wcyBvYmplY3QgY29udGFpbmluZyBhIFwia2V5XCIgcHJvcCBpcyBiZWluZyBzcHJlYWQgaW50byBKU1g6XFxuJyArICcgIGxldCBwcm9wcyA9ICVzO1xcbicgKyAnICA8JXMgey4uLnByb3BzfSAvPlxcbicgKyAnUmVhY3Qga2V5cyBtdXN0IGJlIHBhc3NlZCBkaXJlY3RseSB0byBKU1ggd2l0aG91dCB1c2luZyBzcHJlYWQ6XFxuJyArICcgIGxldCBwcm9wcyA9ICVzO1xcbicgKyAnICA8JXMga2V5PXtzb21lS2V5fSB7Li4ucHJvcHN9IC8+JywgYmVmb3JlRXhhbXBsZSwgY29tcG9uZW50TmFtZSwgYWZ0ZXJFeGFtcGxlLCBjb21wb25lbnROYW1lKTtcblxuICAgICAgICBkaWRXYXJuQWJvdXRLZXlTcHJlYWRbY29tcG9uZW50TmFtZSArIGJlZm9yZUV4YW1wbGVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvcE5hbWU7IC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcblxuICAgIHZhciBwcm9wcyA9IHt9O1xuICAgIHZhciBrZXkgPSBudWxsO1xuICAgIHZhciByZWYgPSBudWxsOyAvLyBDdXJyZW50bHksIGtleSBjYW4gYmUgc3ByZWFkIGluIGFzIGEgcHJvcC4gVGhpcyBjYXVzZXMgYSBwb3RlbnRpYWxcbiAgICAvLyBpc3N1ZSBpZiBrZXkgaXMgYWxzbyBleHBsaWNpdGx5IGRlY2xhcmVkIChpZS4gPGRpdiB7Li4ucHJvcHN9IGtleT1cIkhpXCIgLz5cbiAgICAvLyBvciA8ZGl2IGtleT1cIkhpXCIgey4uLnByb3BzfSAvPiApLiBXZSB3YW50IHRvIGRlcHJlY2F0ZSBrZXkgc3ByZWFkLFxuICAgIC8vIGJ1dCBhcyBhbiBpbnRlcm1lZGlhcnkgc3RlcCwgd2Ugd2lsbCB1c2UganN4REVWIGZvciBldmVyeXRoaW5nIGV4Y2VwdFxuICAgIC8vIDxkaXYgey4uLnByb3BzfSBrZXk9XCJIaVwiIC8+LCBiZWNhdXNlIHdlIGFyZW4ndCBjdXJyZW50bHkgYWJsZSB0byB0ZWxsIGlmXG4gICAgLy8ga2V5IGlzIGV4cGxpY2l0bHkgZGVjbGFyZWQgdG8gYmUgdW5kZWZpbmVkIG9yIG5vdC5cblxuICAgIGlmIChtYXliZUtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB7XG4gICAgICAgIGNoZWNrS2V5U3RyaW5nQ29lcmNpb24obWF5YmVLZXkpO1xuICAgICAgfVxuXG4gICAgICBrZXkgPSAnJyArIG1heWJlS2V5O1xuICAgIH1cblxuICAgIGlmIChoYXNWYWxpZEtleShjb25maWcpKSB7XG4gICAgICB7XG4gICAgICAgIGNoZWNrS2V5U3RyaW5nQ29lcmNpb24oY29uZmlnLmtleSk7XG4gICAgICB9XG5cbiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICB9XG5cbiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgICAge1xuICAgICAgICByZWYgPSBjb25maWcucmVmO1xuICAgICAgfVxuXG4gICAgICB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnLCBzZWxmKTtcbiAgICB9IC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcblxuXG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpICYmIC8vIFNraXAgb3ZlciByZXNlcnZlZCBwcm9wIG5hbWVzXG4gICAgICBwcm9wTmFtZSAhPT0gJ2tleScgJiYgKHByb3BOYW1lICE9PSAncmVmJykpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuXG5cbiAgICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuXG4gICAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSB8fCByZWYpIHtcbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nID8gdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgJ1Vua25vd24nIDogdHlwZTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCwgcHJvcHMpO1xuXG4gICAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICAgIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhlbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSB7XG4gIHtcbiAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC50eXBlKTtcblxuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdcXG5cXG5DaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBldmVyeSBlbGVtZW50IGVpdGhlciBpcyBwYXNzZWQgaW4gYSBzdGF0aWMgbG9jYXRpb24sIGluIGFuXG4gKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWxcbiAqIHdpdGggdmFsaWQga2V5IHByb3BlcnR5LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGUgU3RhdGljYWxseSBwYXNzZWQgY2hpbGQgb2YgYW55IHR5cGUuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgbm9kZSdzIHBhcmVudCdzIHR5cGUuXG4gKi9cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlLCBwYXJlbnRUeXBlKSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIG5vZGUgIT09ICdvYmplY3QnIHx8ICFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGUuJCR0eXBlb2YgPT09IFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UpIDsgZWxzZSBpZiAoaXNBcnJheShub2RlKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG5cbiAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgICAgLy8gVGhpcyBlbGVtZW50IHdhcyBwYXNzZWQgaW4gYSB2YWxpZCBsb2NhdGlvbi5cbiAgICAgIGlmIChub2RlLl9zdG9yZSkge1xuICAgICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obm9kZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBFbnRyeSBpdGVyYXRvcnMgdXNlZCB0byBwcm92aWRlIGltcGxpY2l0IGtleXMsXG4gICAgICAgIC8vIGJ1dCBub3cgd2UgcHJpbnQgYSBzZXBhcmF0ZSB3YXJuaW5nIGZvciB0aGVtIGxhdGVyLlxuICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuXG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKipcbiAqIFZlcmlmaWVzIHRoZSBvYmplY3QgaXMgYSBSZWFjdEVsZW1lbnQuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2lzdmFsaWRlbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIFJlYWN0RWxlbWVudC5cbiAqIEBmaW5hbFxuICovXG5cblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59XG52YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG4vKipcbiAqIFdhcm4gaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGtleSBhc3NpZ25lZCB0byBpdC5cbiAqIFRoaXMgZWxlbWVudCBpcyBpbiBhbiBhcnJheS4gVGhlIGFycmF5IGNvdWxkIGdyb3cgYW5kIHNocmluayBvciBiZVxuICogcmVvcmRlcmVkLiBBbGwgY2hpbGRyZW4gdGhhdCBoYXZlbid0IGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQgYXJlIHJlcXVpcmVkIHRvXG4gKiBoYXZlIGEgXCJrZXlcIiBwcm9wZXJ0eSBhc3NpZ25lZCB0byBpdC4gRXJyb3Igc3RhdHVzZXMgYXJlIGNhY2hlZCBzbyBhIHdhcm5pbmdcbiAqIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLlxuICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICB7XG4gICAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgdmFyIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8gPSBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpO1xuXG4gICAgaWYgKG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7IC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gICAgLy8gcHJvcGVydHksIGl0IG1heSBiZSB0aGUgY3JlYXRvciBvZiB0aGUgY2hpbGQgdGhhdCdzIHJlc3BvbnNpYmxlIGZvclxuICAgIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cblxuICAgIHZhciBjaGlsZE93bmVyID0gJyc7XG5cbiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgLy8gR2l2ZSB0aGUgY29tcG9uZW50IHRoYXQgb3JpZ2luYWxseSBjcmVhdGVkIHRoaXMgY2hpbGQuXG4gICAgICBjaGlsZE93bmVyID0gXCIgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gXCIgKyBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoZWxlbWVudC5fb3duZXIudHlwZSkgKyBcIi5cIjtcbiAgICB9XG5cbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KTtcblxuICAgIGVycm9yKCdFYWNoIGNoaWxkIGluIGEgbGlzdCBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyArICclcyVzIFNlZSBodHRwczovL3JlYWN0anMub3JnL2xpbmsvd2FybmluZy1rZXlzIGZvciBtb3JlIGluZm9ybWF0aW9uLicsIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8sIGNoaWxkT3duZXIpO1xuXG4gICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQobnVsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCkge1xuICB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuICAgICAgdmFyIHN0YWNrID0gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGVsZW1lbnQudHlwZSwgb3duZXIgPyBvd25lci50eXBlIDogbnVsbCk7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLnNldEV4dHJhU3RhY2tGcmFtZShzdGFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuc2V0RXh0cmFTdGFja0ZyYW1lKG51bGwpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpIHtcbiAge1xuICAgIHZhciBpbmZvID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG5cbiAgICBpZiAoIWluZm8pIHtcbiAgICAgIHZhciBwYXJlbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHBhcmVudFR5cGUpO1xuXG4gICAgICBpZiAocGFyZW50TmFtZSkge1xuICAgICAgICBpbmZvID0gXCJcXG5cXG5DaGVjayB0aGUgdG9wLWxldmVsIHJlbmRlciBjYWxsIHVzaW5nIDxcIiArIHBhcmVudE5hbWUgKyBcIj4uXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZm87XG4gIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBmcmFnbWVudCwgdmFsaWRhdGUgdGhhdCBpdCBjYW4gb25seSBiZSBwcm92aWRlZCB3aXRoIGZyYWdtZW50IHByb3BzXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZnJhZ21lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhmcmFnbWVudCkge1xuICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gcmVuZGVyIHBoYXNlIGluc3RlYWQgb2YgYXQgZWxlbWVudCBjcmVhdGlvbi5cbiAge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJhZ21lbnQucHJvcHMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKGtleSAhPT0gJ2NoaWxkcmVuJyAmJiBrZXkgIT09ICdrZXknKSB7XG4gICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGZyYWdtZW50KTtcblxuICAgICAgICBlcnJvcignSW52YWxpZCBwcm9wIGAlc2Agc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC4gJyArICdSZWFjdC5GcmFnbWVudCBjYW4gb25seSBoYXZlIGBrZXlgIGFuZCBgY2hpbGRyZW5gIHByb3BzLicsIGtleSk7XG5cbiAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQobnVsbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmcmFnbWVudC5yZWYgIT09IG51bGwpIHtcbiAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGZyYWdtZW50KTtcblxuICAgICAgZXJyb3IoJ0ludmFsaWQgYXR0cmlidXRlIGByZWZgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuJyk7XG5cbiAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpO1xuICAgIH1cbiAgfVxufVxuXG52YXIganN4REVWID0ganN4REVWJDEgO1xuXG5leHBvcnRzLkZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbmV4cG9ydHMuanN4REVWID0ganN4REVWO1xuICB9KSgpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/OWYwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ffmpeg/util/dist/esm/const.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ffmpeg/util/dist/esm/const.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeaderContentLength: function() { return /* binding */ HeaderContentLength; }\n/* harmony export */ });\nconst HeaderContentLength = \"Content-Length\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL3V0aWwvZGlzdC9lc20vY29uc3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL3V0aWwvZGlzdC9lc20vY29uc3QuanM/NmFkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSGVhZGVyQ29udGVudExlbmd0aCA9IFwiQ29udGVudC1MZW5ndGhcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ffmpeg/util/dist/esm/const.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ffmpeg/util/dist/esm/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/@ffmpeg/util/dist/esm/errors.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_INCOMPLETED_DOWNLOAD: function() { return /* binding */ ERROR_INCOMPLETED_DOWNLOAD; },\n/* harmony export */   ERROR_RESPONSE_BODY_READER: function() { return /* binding */ ERROR_RESPONSE_BODY_READER; }\n/* harmony export */ });\nconst ERROR_RESPONSE_BODY_READER = new Error(\"failed to get response body reader\");\nconst ERROR_INCOMPLETED_DOWNLOAD = new Error(\"failed to complete download\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL3V0aWwvZGlzdC9lc20vZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy91dGlsL2Rpc3QvZXNtL2Vycm9ycy5qcz8yNTYwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBFUlJPUl9SRVNQT05TRV9CT0RZX1JFQURFUiA9IG5ldyBFcnJvcihcImZhaWxlZCB0byBnZXQgcmVzcG9uc2UgYm9keSByZWFkZXJcIik7XG5leHBvcnQgY29uc3QgRVJST1JfSU5DT01QTEVURURfRE9XTkxPQUQgPSBuZXcgRXJyb3IoXCJmYWlsZWQgdG8gY29tcGxldGUgZG93bmxvYWRcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ffmpeg/util/dist/esm/errors.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ffmpeg/util/dist/esm/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ffmpeg/util/dist/esm/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadWithProgress: function() { return /* binding */ downloadWithProgress; },\n/* harmony export */   fetchFile: function() { return /* binding */ fetchFile; },\n/* harmony export */   importScript: function() { return /* binding */ importScript; },\n/* harmony export */   toBlobURL: function() { return /* binding */ toBlobURL; }\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/./node_modules/@ffmpeg/util/dist/esm/errors.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./const.js */ \"(app-pages-browser)/./node_modules/@ffmpeg/util/dist/esm/const.js\");\n\n\nconst readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n        const { result } = fileReader;\n        if (result instanceof ArrayBuffer) {\n            resolve(new Uint8Array(result));\n        }\n        else {\n            resolve(new Uint8Array());\n        }\n    };\n    fileReader.onerror = (event) => {\n        reject(Error(`File could not be read! Code=${event?.target?.error?.code || -1}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n});\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */\nconst fetchFile = async (file) => {\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */\n        if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1])\n                .split(\"\")\n                .map((c) => c.charCodeAt(0));\n            /* From remote server/URL */\n        }\n        else {\n            data = await (await fetch(file)).arrayBuffer();\n        }\n    }\n    else if (file instanceof URL) {\n        data = await (await fetch(file)).arrayBuffer();\n    }\n    else if (file instanceof File || file instanceof Blob) {\n        data = await readFromBlobOrFile(file);\n    }\n    else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n};\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */\nconst importScript = async (url) => new Promise((resolve) => {\n    const script = document.createElement(\"script\");\n    const eventHandler = () => {\n        script.removeEventListener(\"load\", eventHandler);\n        resolve();\n    };\n    script.src = url;\n    script.type = \"text/javascript\";\n    script.addEventListener(\"load\", eventHandler);\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n});\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */\nconst downloadWithProgress = async (url, cb) => {\n    const resp = await fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(_const_js__WEBPACK_IMPORTED_MODULE_1__.HeaderContentLength) || \"-1\");\n        const reader = resp.body?.getReader();\n        if (!reader)\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for (;;) {\n            const { done, value } = await reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received)\n                    throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({ url, total, received, delta, done });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({ url, total, received, delta, done });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    }\n    catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = await resp.arrayBuffer();\n        cb &&\n            cb({\n                url,\n                total: buf.byteLength,\n                received: buf.byteLength,\n                delta: 0,\n                done: true,\n            });\n    }\n    return buf;\n};\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */\nconst toBlobURL = async (url, mimeType, progress = false, cb) => {\n    const buf = progress\n        ? await downloadWithProgress(url, cb)\n        : await (await fetch(url)).arrayBuffer();\n    const blob = new Blob([buf], { type: mimeType });\n    return URL.createObjectURL(blob);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ffmpeg/util/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@mediapipe/tasks-vision/vision_bundle.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@mediapipe/tasks-vision/vision_bundle.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DrawingUtils: function() { return /* binding */ La; },\n/* harmony export */   FaceDetector: function() { return /* binding */ $a; },\n/* harmony export */   FaceLandmarker: function() { return /* binding */ ac; },\n/* harmony export */   FaceStylizer: function() { return /* binding */ cc; },\n/* harmony export */   FilesetResolver: function() { return /* binding */ Po; },\n/* harmony export */   GestureRecognizer: function() { return /* binding */ fc; },\n/* harmony export */   HandLandmarker: function() { return /* binding */ gc; },\n/* harmony export */   HolisticLandmarker: function() { return /* binding */ Ec; },\n/* harmony export */   ImageClassifier: function() { return /* binding */ wc; },\n/* harmony export */   ImageEmbedder: function() { return /* binding */ Tc; },\n/* harmony export */   ImageSegmenter: function() { return /* binding */ Sc; },\n/* harmony export */   ImageSegmenterResult: function() { return /* binding */ Ac; },\n/* harmony export */   InteractiveSegmenter: function() { return /* binding */ Bc; },\n/* harmony export */   InteractiveSegmenterResult: function() { return /* binding */ xc; },\n/* harmony export */   MPImage: function() { return /* binding */ Da; },\n/* harmony export */   MPMask: function() { return /* binding */ ya; },\n/* harmony export */   ObjectDetector: function() { return /* binding */ Gc; },\n/* harmony export */   PoseLandmarker: function() { return /* binding */ Hc; },\n/* harmony export */   VisionTaskRunner: function() { return /* binding */ Ya; }\n/* harmony export */ });\nvar t=\"undefined\"!=typeof self?self:{};function e(){throw Error(\"Invalid UTF8\")}function n(t,e){return e=String.fromCharCode.apply(null,e),null==t?e:t+e}let r,i;const s=\"undefined\"!=typeof TextDecoder;let o;const a=\"undefined\"!=typeof TextEncoder;function c(t){if(a)t=(o||=new TextEncoder).encode(t);else{let n=0;const r=new Uint8Array(3*t.length);for(let i=0;i<t.length;i++){var e=t.charCodeAt(i);if(e<128)r[n++]=e;else{if(e<2048)r[n++]=e>>6|192;else{if(e>=55296&&e<=57343){if(e<=56319&&i<t.length){const s=t.charCodeAt(++i);if(s>=56320&&s<=57343){e=1024*(e-55296)+s-56320+65536,r[n++]=e>>18|240,r[n++]=e>>12&63|128,r[n++]=e>>6&63|128,r[n++]=63&e|128;continue}i--}e=65533}r[n++]=e>>12|224,r[n++]=e>>6&63|128}r[n++]=63&e|128}}t=n===r.length?r:r.subarray(0,n)}return t}var h,u;t:{for(var l=[\"CLOSURE_FLAGS\"],d=t,f=0;f<l.length;f++)if(null==(d=d[l[f]])){u=null;break t}u=d}var p,g=u&&u[610401301];h=null!=g&&g;const m=t.navigator;function y(t){return!!h&&(!!p&&p.brands.some((({brand:e})=>e&&-1!=e.indexOf(t))))}function _(e){var n;return(n=t.navigator)&&(n=n.userAgent)||(n=\"\"),-1!=n.indexOf(e)}function v(){return!!h&&(!!p&&p.brands.length>0)}function E(){return v()?y(\"Chromium\"):(_(\"Chrome\")||_(\"CriOS\"))&&!(!v()&&_(\"Edge\"))||_(\"Silk\")}function w(t){return w[\" \"](t),t}p=m&&m.userAgentData||null,w[\" \"]=function(){};var T=!v()&&(_(\"Trident\")||_(\"MSIE\"));!_(\"Android\")||E(),E(),_(\"Safari\")&&(E()||!v()&&_(\"Coast\")||!v()&&_(\"Opera\")||!v()&&_(\"Edge\")||(v()?y(\"Microsoft Edge\"):_(\"Edg/\"))||v()&&y(\"Opera\"));var A={},b=null;function k(t){const e=t.length;let n=3*e/4;n%3?n=Math.floor(n):-1!=\"=.\".indexOf(t[e-1])&&(n=-1!=\"=.\".indexOf(t[e-2])?n-2:n-1);const r=new Uint8Array(n);let i=0;return function(t,e){function n(e){for(;r<t.length;){const e=t.charAt(r++),n=b[e];if(null!=n)return n;if(!/^[\\s\\xa0]*$/.test(e))throw Error(\"Unknown base64 encoding at char: \"+e)}return e}S();let r=0;for(;;){const t=n(-1),r=n(0),i=n(64),s=n(64);if(64===s&&-1===t)break;e(t<<2|r>>4),64!=i&&(e(r<<4&240|i>>2),64!=s&&e(i<<6&192|s))}}(t,(function(t){r[i++]=t})),i!==n?r.subarray(0,i):r}function S(){if(!b){b={};var t=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split(\"\"),e=[\"+/=\",\"+/\",\"-_=\",\"-_.\",\"-_\"];for(let n=0;n<5;n++){const r=t.concat(e[n].split(\"\"));A[n]=r;for(let t=0;t<r.length;t++){const e=r[t];void 0===b[e]&&(b[e]=t)}}}}var x=\"undefined\"!=typeof Uint8Array,L=!T&&\"function\"==typeof btoa;function R(t){if(!L){var e;void 0===e&&(e=0),S(),e=A[e];var n=Array(Math.floor(t.length/3)),r=e[64]||\"\";let c=0,h=0;for(;c<t.length-2;c+=3){var i=t[c],s=t[c+1],o=t[c+2],a=e[i>>2];i=e[(3&i)<<4|s>>4],s=e[(15&s)<<2|o>>6],o=e[63&o],n[h++]=a+i+s+o}switch(a=0,o=r,t.length-c){case 2:o=e[(15&(a=t[c+1]))<<2]||r;case 1:t=t[c],n[h]=e[t>>2]+e[(3&t)<<4|a>>4]+o+r}return n.join(\"\")}for(e=\"\",n=0,r=t.length-10240;n<r;)e+=String.fromCharCode.apply(null,t.subarray(n,n+=10240));return e+=String.fromCharCode.apply(null,n?t.subarray(n):t),btoa(e)}const F=/[-_.]/g,I={\"-\":\"+\",_:\"/\",\".\":\"=\"};function M(t){return I[t]||\"\"}function P(t){if(!L)return k(t);F.test(t)&&(t=t.replace(F,M)),t=atob(t);const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}function O(t){return x&&null!=t&&t instanceof Uint8Array}var C={};function U(){return B||=new N(null,C)}function D(t){j(C);var e=t.g;return null==(e=null==e||O(e)?e:\"string\"==typeof e?P(e):null)?e:t.g=e}var N=class{h(){return new Uint8Array(D(this)||0)}constructor(t,e){if(j(e),this.g=t,null!=t&&0===t.length)throw Error(\"ByteString should be constructed with non-empty values\")}};let B,G;function j(t){if(t!==C)throw Error(\"illegal external caller\")}function V(t,e){t.__closure__error__context__984382||(t.__closure__error__context__984382={}),t.__closure__error__context__984382.severity=e}function X(t){return V(t=Error(t),\"warning\"),t}var H=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol(),W=new Set;function z(t,e,n=!1,r=!1){return t=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol()?r&&Symbol.for&&t?Symbol.for(t):null!=t?Symbol(t):Symbol():e,n&&W.add(t),t}var K=z(\"jas\",void 0,!0,!0),Y=z(void 0,\"0di\"),$=z(void 0,\"2ex\"),q=z(void 0,\"1oa\",!0),J=z(void 0,Symbol(),!0);const Z=H?K:\"Ga\",Q={Ga:{value:0,configurable:!0,writable:!0,enumerable:!1}},tt=Object.defineProperties;function et(t,e){H||Z in t||tt(t,Q),t[Z]|=e}function nt(t,e){H||Z in t||tt(t,Q),t[Z]=e}function rt(t){return et(t,34),t}function it(t,e){nt(e,-30975&(0|t))}function st(t,e){nt(e,-30941&(34|t))}function ot(){return\"function\"==typeof BigInt}function at(t){return Array.prototype.slice.call(t)}var ct,ht={},ut={};function lt(t){return!(!t||\"object\"!=typeof t||t.Ia!==ut)}function dt(t){return null!==t&&\"object\"==typeof t&&!Array.isArray(t)&&t.constructor===Object}function ft(t,e){if(null!=t)if(\"string\"==typeof t)t=t?new N(t,C):U();else if(t.constructor!==N)if(O(t))t=t.length?new N(new Uint8Array(t),C):U();else{if(!e)throw Error();t=void 0}return t}function pt(t){return!(!Array.isArray(t)||t.length)&&!!(1&(0|t[Z]))}const gt=[];function mt(t){if(2&t)throw Error()}nt(gt,55),ct=Object.freeze(gt);class yt{constructor(t,e,n){this.l=0,this.g=t,this.h=e,this.m=n}next(){if(this.l<this.g.length){const t=this.g[this.l++];return{done:!1,value:this.h?this.h.call(this.m,t):t}}return{done:!0,value:void 0}}[Symbol.iterator](){return new yt(this.g,this.h,this.m)}}function _t(t){return J?t[J]:void 0}var vt=Object.freeze({});function Et(t){return t.Qa=!0,t}var wt=Et((t=>\"number\"==typeof t)),Tt=Et((t=>\"string\"==typeof t)),At=Et((t=>\"boolean\"==typeof t)),bt=\"function\"==typeof t.BigInt&&\"bigint\"==typeof t.BigInt(0),kt=Et((t=>bt?t>=xt&&t<=Rt:\"-\"===t[0]?Ft(t,St):Ft(t,Lt)));const St=Number.MIN_SAFE_INTEGER.toString(),xt=bt?BigInt(Number.MIN_SAFE_INTEGER):void 0,Lt=Number.MAX_SAFE_INTEGER.toString(),Rt=bt?BigInt(Number.MAX_SAFE_INTEGER):void 0;function Ft(t,e){if(t.length>e.length)return!1;if(t.length<e.length||t===e)return!0;for(let n=0;n<t.length;n++){const r=t[n],i=e[n];if(r>i)return!1;if(r<i)return!0}}const It=\"function\"==typeof Uint8Array.prototype.slice;let Mt,Pt=0,Ot=0;function Ct(t){const e=t>>>0;Pt=e,Ot=(t-e)/4294967296>>>0}function Ut(t){if(t<0){Ct(-t);const[e,n]=Xt(Pt,Ot);Pt=e>>>0,Ot=n>>>0}else Ct(t)}function Dt(t){const e=Mt||=new DataView(new ArrayBuffer(8));e.setFloat32(0,+t,!0),Ot=0,Pt=e.getUint32(0,!0)}function Nt(t,e){const n=4294967296*e+(t>>>0);return Number.isSafeInteger(n)?n:Gt(t,e)}function Bt(t,e){const n=2147483648&e;return n&&(e=~e>>>0,0==(t=1+~t>>>0)&&(e=e+1>>>0)),\"number\"==typeof(t=Nt(t,e))?n?-t:t:n?\"-\"+t:t}function Gt(t,e){if(t>>>=0,(e>>>=0)<=2097151)var n=\"\"+(4294967296*e+t);else ot()?n=\"\"+(BigInt(e)<<BigInt(32)|BigInt(t)):(t=(16777215&t)+6777216*(n=16777215&(t>>>24|e<<8))+6710656*(e=e>>16&65535),n+=8147497*e,e*=2,t>=1e7&&(n+=t/1e7>>>0,t%=1e7),n>=1e7&&(e+=n/1e7>>>0,n%=1e7),n=e+jt(n)+jt(t));return n}function jt(t){return t=String(t),\"0000000\".slice(t.length)+t}function Vt(t){if(t.length<16)Ut(Number(t));else if(ot())t=BigInt(t),Pt=Number(t&BigInt(4294967295))>>>0,Ot=Number(t>>BigInt(32)&BigInt(4294967295));else{const e=+(\"-\"===t[0]);Ot=Pt=0;const n=t.length;for(let r=e,i=(n-e)%6+e;i<=n;r=i,i+=6){const e=Number(t.slice(r,i));Ot*=1e6,Pt=1e6*Pt+e,Pt>=4294967296&&(Ot+=Math.trunc(Pt/4294967296),Ot>>>=0,Pt>>>=0)}if(e){const[t,e]=Xt(Pt,Ot);Pt=t,Ot=e}}}function Xt(t,e){return e=~e,t?t=1+~t:e+=1,[t,e]}const Ht=\"function\"==typeof BigInt?BigInt.asIntN:void 0,Wt=\"function\"==typeof BigInt?BigInt.asUintN:void 0,zt=Number.isSafeInteger,Kt=Number.isFinite,Yt=Math.trunc;function $t(t){return null==t||\"number\"==typeof t?t:\"NaN\"===t||\"Infinity\"===t||\"-Infinity\"===t?Number(t):void 0}function qt(t){return null==t||\"boolean\"==typeof t?t:\"number\"==typeof t?!!t:void 0}const Jt=/^-?([1-9][0-9]*|0)(\\.[0-9]+)?$/;function Zt(t){switch(typeof t){case\"bigint\":return!0;case\"number\":return Kt(t);case\"string\":return Jt.test(t);default:return!1}}function Qt(t){if(null==t)return t;if(\"string\"==typeof t&&t)t=+t;else if(\"number\"!=typeof t)return;return Kt(t)?0|t:void 0}function te(t){if(null==t)return t;if(\"string\"==typeof t&&t)t=+t;else if(\"number\"!=typeof t)return;return Kt(t)?t>>>0:void 0}function ee(t){if(\"-\"===t[0])return!1;const e=t.length;return e<20||20===e&&Number(t.substring(0,6))<184467}function ne(t){return t=Yt(t),zt(t)||(Ut(t),t=Bt(Pt,Ot)),t}function re(t){var e=Yt(Number(t));if(zt(e))return String(e);if(-1!==(e=t.indexOf(\".\"))&&(t=t.substring(0,e)),e=t.length,!(\"-\"===t[0]?e<20||20===e&&Number(t.substring(0,7))>-922337:e<19||19===e&&Number(t.substring(0,6))<922337))if(Vt(t),t=Pt,2147483648&(e=Ot))if(ot())t=\"\"+(BigInt(0|e)<<BigInt(32)|BigInt(t>>>0));else{const[n,r]=Xt(t,e);t=\"-\"+Gt(n,r)}else t=Gt(t,e);return t}function ie(t){return null==t?t:\"bigint\"==typeof t?(kt(t)?t=Number(t):(t=Ht(64,t),t=kt(t)?Number(t):String(t)),t):Zt(t)?\"number\"==typeof t?ne(t):re(t):void 0}function se(t){if(null==t)return t;var e=typeof t;if(\"bigint\"===e)return String(Wt(64,t));if(Zt(t)){if(\"string\"===e)return e=Yt(Number(t)),zt(e)&&e>=0?t=String(e):(-1!==(e=t.indexOf(\".\"))&&(t=t.substring(0,e)),ee(t)||(Vt(t),t=Gt(Pt,Ot))),t;if(\"number\"===e)return(t=Yt(t))>=0&&zt(t)?t:function(t){if(t<0){Ut(t);var e=Gt(Pt,Ot);return t=Number(e),zt(t)?t:e}return ee(e=String(t))?e:(Ut(t),Nt(Pt,Ot))}(t)}}function oe(t){if(\"string\"!=typeof t)throw Error();return t}function ae(t){if(null!=t&&\"string\"!=typeof t)throw Error();return t}function ce(t){return null==t||\"string\"==typeof t?t:void 0}function he(t,e,n,r){if(null!=t&&\"object\"==typeof t&&t.W===ht)return t;if(!Array.isArray(t))return n?2&r?((t=e[Y])||(rt((t=new e).u),t=e[Y]=t),e=t):e=new e:e=void 0,e;let i=n=0|t[Z];return 0===i&&(i|=32&r),i|=2&r,i!==n&&nt(t,i),new e(t)}function ue(t,e,n){if(e)t:{if(!Zt(e=t))throw X(\"int64\");switch(typeof e){case\"string\":e=re(e);break t;case\"bigint\":if(t=e=Ht(64,e),Tt(t)){if(!/^\\s*(?:-?[1-9]\\d*|0)?\\s*$/.test(t))throw Error(String(t))}else if(wt(t)&&!Number.isSafeInteger(t))throw Error(String(t));e=bt?BigInt(e):At(e)?e?\"1\":\"0\":Tt(e)?e.trim()||\"0\":String(e);break t;default:e=ne(e)}}else e=ie(t);return\"string\"==typeof(n=null==(t=e)?n?0:void 0:t)&&zt(e=+n)?e:n}const le={};let de=function(){try{return w(new class extends Map{constructor(){super()}}),!1}catch{return!0}}();class fe{constructor(){this.g=new Map}get(t){return this.g.get(t)}set(t,e){return this.g.set(t,e),this.size=this.g.size,this}delete(t){return t=this.g.delete(t),this.size=this.g.size,t}clear(){this.g.clear(),this.size=this.g.size}has(t){return this.g.has(t)}entries(){return this.g.entries()}keys(){return this.g.keys()}values(){return this.g.values()}forEach(t,e){return this.g.forEach(t,e)}[Symbol.iterator](){return this.entries()}}const pe=de?(Object.setPrototypeOf(fe.prototype,Map.prototype),Object.defineProperties(fe.prototype,{size:{value:0,configurable:!0,enumerable:!0,writable:!0}}),fe):class extends Map{constructor(){super()}};function ge(t){return t}function me(t){if(2&t.L)throw Error(\"Cannot mutate an immutable Map\")}var ye=class extends pe{constructor(t,e,n=ge,r=ge){super();let i=0|t[Z];i|=64,nt(t,i),this.L=i,this.S=e,this.R=n,this.Y=this.S?_e:r;for(let s=0;s<t.length;s++){const o=t[s],a=n(o[0],!1,!0);let c=o[1];e?void 0===c&&(c=null):c=r(o[1],!1,!0,void 0,void 0,i),super.set(a,c)}}na(t=ve){if(0!==this.size)return this.X(t)}X(t=ve){const e=[],n=super.entries();for(var r;!(r=n.next()).done;)(r=r.value)[0]=t(r[0]),r[1]=t(r[1]),e.push(r);return e}clear(){me(this),super.clear()}delete(t){return me(this),super.delete(this.R(t,!0,!1))}entries(){var t=this.ma();return new yt(t,Ee,this)}keys(){return this.Ha()}values(){var t=this.ma();return new yt(t,ye.prototype.get,this)}forEach(t,e){super.forEach(((n,r)=>{t.call(e,this.get(r),r,this)}))}set(t,e){return me(this),null==(t=this.R(t,!0,!1))?this:null==e?(super.delete(t),this):super.set(t,this.Y(e,!0,!0,this.S,!1,this.L))}Na(t){const e=this.R(t[0],!1,!0);t=t[1],t=this.S?void 0===t?null:t:this.Y(t,!1,!0,void 0,!1,this.L),super.set(e,t)}has(t){return super.has(this.R(t,!1,!1))}get(t){t=this.R(t,!1,!1);const e=super.get(t);if(void 0!==e){var n=this.S;return n?((n=this.Y(e,!1,!0,n,this.ra,this.L))!==e&&super.set(t,n),n):e}}ma(){return Array.from(super.keys())}Ha(){return super.keys()}[Symbol.iterator](){return this.entries()}};function _e(t,e,n,r,i,s){return t=he(t,r,n,s),i&&(t=Oe(t)),t}function ve(t){return t}function Ee(t){return[t,this.get(t)]}let we,Te,Ae;function be(){return we||=new ye(rt([]),void 0,void 0,void 0,le)}function ke(t,e,n,r,i){if(null!=t){if(Array.isArray(t))t=pt(t)?void 0:i&&2&(0|t[Z])?t:Se(t,e,n,void 0!==r,i);else if(dt(t)){const s={};for(let o in t)s[o]=ke(t[o],e,n,r,i);t=s}else t=e(t,r);return t}}function Se(t,e,n,r,i){const s=r||n?0|t[Z]:0,o=r?!!(32&s):void 0;r=at(t);for(let t=0;t<r.length;t++)r[t]=ke(r[t],e,n,o,i);return n&&((t=_t(t))&&(r[J]=at(t)),n(s,r)),r}function xe(t){return ke(t,Le,void 0,void 0,!1)}function Le(t){return t.W===ht?t.toJSON():t instanceof ye?t.na(xe):function(t){switch(typeof t){case\"number\":return isFinite(t)?t:String(t);case\"bigint\":return kt(t)?Number(t):String(t);case\"boolean\":return t?1:0;case\"object\":if(t)if(Array.isArray(t)){if(pt(t))return}else{if(O(t))return R(t);if(t instanceof N){const e=t.g;return null==e?\"\":\"string\"==typeof e?e:t.g=R(e)}if(t instanceof ye)return t.na()}}return t}(t)}function Re(t){return Se(t,Le,void 0,void 0,!1)}function Fe(t,e,n){return t=Ie(t,e[0],e[1],n?1:2),e!==Te&&n&&et(t,16384),t}function Ie(t,e,n,r){if(null==t){var i=96;n?(t=[n],i|=512):t=[],e&&(i=-33521665&i|(1023&e)<<15)}else{if(!Array.isArray(t))throw Error(\"narr\");if(2048&(i=0|t[Z]))throw Error(\"farr\");if(64&i)return t;if(1===r||2===r||(i|=64),n&&(i|=512,n!==t[0]))throw Error(\"mid\");t:{if(r=(n=t).length){const t=r-1;if(dt(n[t])){if((e=t-(512&(i|=256)?0:-1))>=1024)throw Error(\"pvtlmt\");i=-33521665&i|(1023&e)<<15;break t}}if(e){if((e=Math.max(e,r-(512&i?0:-1)))>1024)throw Error(\"spvt\");i=-33521665&i|(1023&e)<<15}}}return nt(t,i),t}function Me(t,e,n=st){if(null!=t){if(x&&t instanceof Uint8Array)return e?t:new Uint8Array(t);if(Array.isArray(t)){var r=0|t[Z];return 2&r?t:(e&&=0===r||!!(32&r)&&!(64&r||!(16&r)),e?(nt(t,-12293&(34|r)),t):Se(t,Me,4&r?st:n,!0,!0))}return t.W===ht?t=2&(r=0|(n=t.u)[Z])?t:new t.constructor(Pe(n,r,!0)):t instanceof ye&&!(2&t.L)&&(n=rt(t.X(Me)),t=new ye(n,t.S,t.R,t.Y)),t}}function Pe(t,e,n){const r=n||2&e?st:it,i=!!(32&e);return t=function(t,e,n){const r=at(t);var i=r.length;const s=256&e?r[i-1]:void 0;for(i+=s?-1:0,e=512&e?1:0;e<i;e++)r[e]=n(r[e]);if(s){e=r[e]={};for(const t in s)e[t]=n(s[t])}return(t=_t(t))&&(r[J]=at(t)),r}(t,e,(t=>Me(t,i,r))),et(t,32|(n?2:0)),t}function Oe(t){const e=t.u,n=0|e[Z];return 2&n?new t.constructor(Pe(e,n,!1)):t}function Ce(t,e){return Ue(t=t.u,0|t[Z],e)}function Ue(e,n,r,i){if(-1===r)return null;var s=r+(512&n?0:-1);const o=e.length-1;return s>=o&&256&n?e[o][r]:i&&256&n&&null!=(n=e[o][r])?(null!=e[s]&&null!=$&&((s=(e=G??={})[$]||0)>=4||(e[$]=s+1,V(e=Error(),\"incident\"),function(e){t.setTimeout((()=>{throw e}),0)}(e))),n):s<=o?e[s]:void 0}function De(t,e,n){const r=t.u;let i=0|r[Z];return mt(i),Ne(r,i,e,n),t}function Ne(t,e,n,r){const i=512&e?0:-1,s=n+i;var o=t.length-1;return s>=o&&256&e?(t[o][n]=r,e):s<=o?(t[s]=r,256&e&&(n in(t=t[o])&&delete t[n]),e):(void 0!==r&&(n>=(o=e>>15&1023||536870912)?null!=r&&(t[o+i]={[n]:r},nt(t,e|=256)):t[s]=r),e)}function Be(t,e){let n=0|(t=t.u)[Z];const r=Ue(t,n,e),i=$t(r);return null!=i&&i!==r&&Ne(t,n,e,i),i}function Ge(t){let e=0|(t=t.u)[Z];const n=Ue(t,e,1),r=ft(n,!0);return null!=r&&r!==n&&Ne(t,e,1,r),r}function je(){return void 0===vt?2:4}function Ve(t,e,n,r,i){const s=t.u,o=2&(t=0|s[Z])?1:r;i=!!i;let a=0|(r=Xe(s,t,e))[Z];if(!(4&a)){4&a&&(r=at(r),a=an(a,t),t=Ne(s,t,e,r));let i=0,o=0;for(;i<r.length;i++){const t=n(r[i]);null!=t&&(r[o++]=t)}o<i&&(r.length=o),a=He(a,t),n=-4097&(20|a),a=n&=-8193,nt(r,a),2&a&&Object.freeze(r)}return 1===o||4===o&&32&a?We(a)||(i=a,a|=2,a!==i&&nt(r,a),Object.freeze(r)):(2===o&&We(a)&&(r=at(r),a=an(a,t),a=cn(a,t,i),nt(r,a),t=Ne(s,t,e,r)),We(a)||(e=a,a=cn(a,t,i),a!==e&&nt(r,a))),r}function Xe(t,e,n,r){return t=Ue(t,e,n,r),Array.isArray(t)?t:ct}function He(t,e){return 0===t&&(t=an(t,e)),1|t}function We(t){return!!(2&t)&&!!(4&t)||!!(2048&t)}function ze(t){t=at(t);for(let e=0;e<t.length;e++){const n=t[e]=at(t[e]);Array.isArray(n[1])&&(n[1]=rt(n[1]))}return t}function Ke(t,e,n,r){let i=0|(t=t.u)[Z];mt(i),Ne(t,i,e,(\"0\"===r?0===Number(n):n===r)?void 0:n)}function Ye(t,e,n,r,i){mt(e);var s=!(!(64&e)&&16384&e);const o=(i=Xe(t,e,n,i))!==ct;if(s||!o){let a=s=o?0|i[Z]:0;(!o||2&a||We(a)||4&a&&!(32&a))&&(i=at(i),a=an(a,e),e=Ne(t,e,n,i)),a=-13&He(a,e),a=cn(r?-17&a:16|a,e,!0),a!==s&&nt(i,a)}return i}function $e(t,e){var n=vs;return Ze(qe(t=t.u),t,0|t[Z],n)===e?e:-1}function qe(t){if(H)return t[q]??(t[q]=new Map);if(q in t)return t[q];const e=new Map;return Object.defineProperty(t,q,{value:e}),e}function Je(t,e,n,r){const i=qe(t),s=Ze(i,t,e,n);return s!==r&&(s&&(e=Ne(t,e,s)),i.set(n,r)),e}function Ze(t,e,n,r){let i=t.get(r);if(null!=i)return i;i=0;for(let t=0;t<r.length;t++){const s=r[t];null!=Ue(e,n,s)&&(0!==i&&(n=Ne(e,n,i)),i=s)}return t.set(r,i),i}function Qe(t,e,n,r){let i,s=0|t[Z];if(null!=(r=Ue(t,s,n,r))&&r.W===ht)return(e=Oe(r))!==r&&Ne(t,s,n,e),e.u;if(Array.isArray(r)){const t=0|r[Z];i=2&t?Fe(Pe(r,t,!1),e,!0):64&t?r:Fe(i,e,!0)}else i=Fe(void 0,e,!0);return i!==r&&Ne(t,s,n,i),i}function tn(t,e,n,r){let i=0|(t=t.u)[Z];return(e=he(r=Ue(t,i,n,r),e,!1,i))!==r&&null!=e&&Ne(t,i,n,e),e}function en(t,e,n,r=!1){if(null==(e=tn(t,e,n,r)))return e;if(!(2&(r=0|(t=t.u)[Z]))){const i=Oe(e);i!==e&&Ne(t,r,n,e=i)}return e}function nn(t,e,n,r,i,s,o){t=t.u;var a=!!(2&e);const c=a?1:i;s=!!s,o&&=!a;var h=0|(i=Xe(t,e,r))[Z];if(!(a=!!(4&h))){var u=i,l=e;const t=!!(2&(h=He(h,e)));t&&(l|=2);let r=!t,s=!0,o=0,a=0;for(;o<u.length;o++){const e=he(u[o],n,!1,l);if(e instanceof n){if(!t){const t=!!(2&(0|e.u[Z]));r&&=!t,s&&=t}u[a++]=e}}a<o&&(u.length=a),h|=4,h=s?16|h:-17&h,nt(u,h=r?8|h:-9&h),t&&Object.freeze(u)}if(o&&!(8&h||!i.length&&(1===c||4===c&&32&h))){for(We(h)&&(i=at(i),h=an(h,e),e=Ne(t,e,r,i)),n=i,o=h,u=0;u<n.length;u++)(h=n[u])!==(l=Oe(h))&&(n[u]=l);o|=8,nt(n,o=n.length?-17&o:16|o),h=o}return 1===c||4===c&&32&h?We(h)||(e=h,(h|=!i.length||16&h&&(!a||32&h)?2:2048)!==e&&nt(i,h),Object.freeze(i)):(2===c&&We(h)&&(nt(i=at(i),h=cn(h=an(h,e),e,s)),e=Ne(t,e,r,i)),We(h)||(r=h,(h=cn(h,e,s))!==r&&nt(i,h))),i}function rn(t,e,n){const r=0|t.u[Z];return nn(t,r,e,n,je(),!1,!(2&r))}function sn(t,e,n,r){return null==r&&(r=void 0),De(t,n,r)}function on(t,e,n,r){null==r&&(r=void 0);t:{let i=0|(t=t.u)[Z];if(mt(i),null==r){const r=qe(t);if(Ze(r,t,i,n)!==e)break t;r.set(n,0)}else i=Je(t,i,n,e);Ne(t,i,e,r)}}function an(t,e){return-2049&(t=32|(2&e?2|t:-3&t))}function cn(t,e,n){return 32&e&&n||(t&=-33),t}function hn(t,e,n,r){const i=0|t.u[Z];mt(i),t=nn(t,i,n,e,2,!0),r=null!=r?r:new n,t.push(r),t[Z]=2&(0|r.u[Z])?-9&t[Z]:-17&t[Z]}function un(t,e){return Qt(Ce(t,e))}function ln(t,e){return ce(Ce(t,e))}function dn(t,e){return Be(t,e)??0}function fn(t,e,n){if(null!=n&&\"boolean\"!=typeof n)throw t=typeof n,Error(`Expected boolean but got ${\"object\"!=t?t:n?Array.isArray(n)?\"array\":t:\"null\"}: ${n}`);De(t,e,n)}function pn(t,e,n){if(null!=n){if(\"number\"!=typeof n)throw X(\"int32\");if(!Kt(n))throw X(\"int32\");n|=0}De(t,e,n)}function gn(t,e,n){if(null!=n&&\"number\"!=typeof n)throw Error(`Value of float/double field must be a number, found ${typeof n}: ${n}`);De(t,e,n)}function mn(t,e,n){{const o=t.u;let a=0|o[Z];if(mt(a),null==n)Ne(o,a,e);else{var r=t=0|n[Z],i=We(t),s=i||Object.isFrozen(n);for(i||(t=0),s||(n=at(n),r=0,t=cn(t=an(t,a),a,!0),s=!1),t|=21,i=0;i<n.length;i++){const e=n[i],o=oe(e);Object.is(e,o)||(s&&(n=at(n),r=0,t=cn(t=an(t,a),a,!0),s=!1),n[i]=o)}t!==r&&(s&&(n=at(n),t=cn(t=an(t,a),a,!0)),nt(n,t)),Ne(o,a,e,n)}}}function yn(t,e,n){mt(0|t.u[Z]),Ve(t,e,ce,2,!0).push(oe(n))}function _n(t,e){return Error(`Invalid wire type: ${t} (at position ${e})`)}function vn(){return Error(\"Failed to read varint, encoding is invalid.\")}function En(t,e){return Error(`Tried to read past the end of the data ${e} > ${t}`)}function wn(t){if(\"string\"==typeof t)return{buffer:P(t),N:!1};if(Array.isArray(t))return{buffer:new Uint8Array(t),N:!1};if(t.constructor===Uint8Array)return{buffer:t,N:!1};if(t.constructor===ArrayBuffer)return{buffer:new Uint8Array(t),N:!1};if(t.constructor===N)return{buffer:D(t)||new Uint8Array(0),N:!0};if(t instanceof Uint8Array)return{buffer:new Uint8Array(t.buffer,t.byteOffset,t.byteLength),N:!1};throw Error(\"Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, a ByteString or an Array of numbers\")}function Tn(t,e){let n,r=0,i=0,s=0;const o=t.h;let a=t.g;do{n=o[a++],r|=(127&n)<<s,s+=7}while(s<32&&128&n);for(s>32&&(i|=(127&n)>>4),s=3;s<32&&128&n;s+=7)n=o[a++],i|=(127&n)<<s;if(Fn(t,a),n<128)return e(r>>>0,i>>>0);throw vn()}function An(t){let e=0,n=t.g;const r=n+10,i=t.h;for(;n<r;){const r=i[n++];if(e|=r,0==(128&r))return Fn(t,n),!!(127&e)}throw vn()}function bn(t){const e=t.h;let n=t.g,r=e[n++],i=127&r;if(128&r&&(r=e[n++],i|=(127&r)<<7,128&r&&(r=e[n++],i|=(127&r)<<14,128&r&&(r=e[n++],i|=(127&r)<<21,128&r&&(r=e[n++],i|=r<<28,128&r&&128&e[n++]&&128&e[n++]&&128&e[n++]&&128&e[n++]&&128&e[n++])))))throw vn();return Fn(t,n),i}function kn(t){return bn(t)>>>0}function Sn(t){var e=t.h;const n=t.g,r=e[n],i=e[n+1],s=e[n+2];return e=e[n+3],Fn(t,t.g+4),(r<<0|i<<8|s<<16|e<<24)>>>0}function xn(t){var e=Sn(t);t=2*(e>>31)+1;const n=e>>>23&255;return e&=8388607,255==n?e?NaN:t*(1/0):0==n?1401298464324817e-60*t*e:t*Math.pow(2,n-150)*(e+8388608)}function Ln(t){return bn(t)}function Rn(t,e,{ba:n=!1}={}){t.ba=n,e&&(e=wn(e),t.h=e.buffer,t.m=e.N,t.j=0,t.l=t.h.length,t.g=t.j)}function Fn(t,e){if(t.g=e,e>t.l)throw En(t.l,e)}function In(t,e){if(e<0)throw Error(`Tried to read a negative byte length: ${e}`);const n=t.g,r=n+e;if(r>t.l)throw En(e,t.l-n);return t.g=r,n}function Mn(t,e){if(0==e)return U();var n=In(t,e);return t.ba&&t.m?n=t.h.subarray(n,n+e):(t=t.h,n=n===(e=n+e)?new Uint8Array(0):It?t.slice(n,e):new Uint8Array(t.subarray(n,e))),0==n.length?U():new N(n,C)}ye.prototype.toJSON=void 0,ye.prototype.Ia=ut;var Pn=[];function On(t){var e=t.g;if(e.g==e.l)return!1;t.l=t.g.g;var n=kn(t.g);if(e=n>>>3,!((n&=7)>=0&&n<=5))throw _n(n,t.l);if(e<1)throw Error(`Invalid field number: ${e} (at position ${t.l})`);return t.m=e,t.h=n,!0}function Cn(t){switch(t.h){case 0:0!=t.h?Cn(t):An(t.g);break;case 1:Fn(t=t.g,t.g+8);break;case 2:if(2!=t.h)Cn(t);else{var e=kn(t.g);Fn(t=t.g,t.g+e)}break;case 5:Fn(t=t.g,t.g+4);break;case 3:for(e=t.m;;){if(!On(t))throw Error(\"Unmatched start-group tag: stream EOF\");if(4==t.h){if(t.m!=e)throw Error(\"Unmatched end-group tag\");break}Cn(t)}break;default:throw _n(t.h,t.l)}}function Un(t,e,n){const r=t.g.l,i=kn(t.g),s=t.g.g+i;let o=s-r;if(o<=0&&(t.g.l=s,n(e,t,void 0,void 0,void 0),o=s-t.g.g),o)throw Error(`Message parsing ended unexpectedly. Expected to read ${i} bytes, instead read ${i-o} bytes, either the data ended unexpectedly or the message misreported its own length`);return t.g.g=s,t.g.l=r,e}function Dn(t){var o=kn(t.g),a=In(t=t.g,o);if(t=t.h,s){var c,h=t;(c=i)||(c=i=new TextDecoder(\"utf-8\",{fatal:!0})),o=a+o,h=0===a&&o===h.length?h:h.subarray(a,o);try{var u=c.decode(h)}catch(t){if(void 0===r){try{c.decode(new Uint8Array([128]))}catch(t){}try{c.decode(new Uint8Array([97])),r=!0}catch(t){r=!1}}throw!r&&(i=void 0),t}}else{o=(u=a)+o,a=[];let r,i=null;for(;u<o;){var l=t[u++];l<128?a.push(l):l<224?u>=o?e():(r=t[u++],l<194||128!=(192&r)?(u--,e()):a.push((31&l)<<6|63&r)):l<240?u>=o-1?e():(r=t[u++],128!=(192&r)||224===l&&r<160||237===l&&r>=160||128!=(192&(c=t[u++]))?(u--,e()):a.push((15&l)<<12|(63&r)<<6|63&c)):l<=244?u>=o-2?e():(r=t[u++],128!=(192&r)||r-144+(l<<28)>>30!=0||128!=(192&(c=t[u++]))||128!=(192&(h=t[u++]))?(u--,e()):(l=(7&l)<<18|(63&r)<<12|(63&c)<<6|63&h,l-=65536,a.push(55296+(l>>10&1023),56320+(1023&l)))):e(),a.length>=8192&&(i=n(i,a),a.length=0)}u=n(i,a)}return u}function Nn(t){const e=kn(t.g);return Mn(t.g,e)}function Bn(t,e,n){var r=kn(t.g);for(r=t.g.g+r;t.g.g<r;)n.push(e(t.g))}var Gn=[];function jn(t){return t}let Vn;function Xn(t,e,n){e.g?e.m(t,e.g,e.h,n):e.m(t,e.h,n)}var Hn=class{constructor(t,e){this.u=Ie(t,e)}toJSON(){const t=!Vn;try{return t&&(Vn=Re),Wn(this)}finally{t&&(Vn=void 0)}}l(){var t=go;return t.g?t.l(this,t.g,t.h,!0):t.l(this,t.h,t.defaultValue,!0)}clone(){const t=this.u;return new this.constructor(Pe(t,0|t[Z],!1))}N(){return!!(2&(0|this.u[Z]))}};function Wn(t){var e=t.u;{e=(t=Vn(e))!==e;let h=t.length;if(h){var n=t[h-1],r=dt(n);r?h--:n=void 0;var i=t;if(r){t:{var s,o=n,a=!1;if(o)for(let t in o)isNaN(+t)?(s??={})[t]=o[t]:(r=o[t],Array.isArray(r)&&(pt(r)||lt(r)&&0===r.size)&&(r=null),null==r&&(a=!0),null!=r&&((s??={})[t]=r));if(a||(s=o),s)for(let t in s){a=s;break t}a=null}o=null==a?null!=n:a!==n}for(;h>0&&(null==(s=i[h-1])||pt(s)||lt(s)&&0===s.size);h--)var c=!0;(i!==t||o||c)&&(e?(c||o||a)&&(i.length=h):i=Array.prototype.slice.call(i,0,h),a&&i.push(a)),c=i}else c=t}return c}function zn(t){return t?/^\\d+$/.test(t)?(Vt(t),new Kn(Pt,Ot)):null:Yn||=new Kn(0,0)}Hn.prototype.W=ht,Hn.prototype.toString=function(){try{return Vn=jn,Wn(this).toString()}finally{Vn=void 0}};var Kn=class{constructor(t,e){this.h=t>>>0,this.g=e>>>0}};let Yn;function $n(t){return t?/^-?\\d+$/.test(t)?(Vt(t),new qn(Pt,Ot)):null:Jn||=new qn(0,0)}var qn=class{constructor(t,e){this.h=t>>>0,this.g=e>>>0}};let Jn;function Zn(t,e,n){for(;n>0||e>127;)t.g.push(127&e|128),e=(e>>>7|n<<25)>>>0,n>>>=7;t.g.push(e)}function Qn(t,e){for(;e>127;)t.g.push(127&e|128),e>>>=7;t.g.push(e)}function tr(t,e){if(e>=0)Qn(t,e);else{for(let n=0;n<9;n++)t.g.push(127&e|128),e>>=7;t.g.push(1)}}function er(t,e){t.g.push(e>>>0&255),t.g.push(e>>>8&255),t.g.push(e>>>16&255),t.g.push(e>>>24&255)}function nr(t,e){0!==e.length&&(t.l.push(e),t.h+=e.length)}function rr(t,e,n){Qn(t.g,8*e+n)}function ir(t,e){return rr(t,e,2),e=t.g.end(),nr(t,e),e.push(t.h),e}function sr(t,e){var n=e.pop();for(n=t.h+t.g.length()-n;n>127;)e.push(127&n|128),n>>>=7,t.h++;e.push(n),t.h++}function or(t,e,n){rr(t,e,2),Qn(t.g,n.length),nr(t,t.g.end()),nr(t,n)}function ar(t,e,n,r){null!=n&&(e=ir(t,e),r(n,t),sr(t,e))}function cr(){const t=class{constructor(){throw Error()}};return Object.setPrototypeOf(t,t.prototype),t}var hr=cr(),ur=cr(),lr=cr(),dr=cr(),fr=cr(),pr=cr(),gr=cr(),mr=cr(),yr=cr(),_r=class{constructor(t,e,n){this.g=t,this.h=e,t=hr,this.l=!!t&&n===t||!1}};function vr(t,e){return new _r(t,e,hr)}function Er(t,e,n,r,i){ar(t,n,Ir(e,r),i)}const wr=vr((function(t,e,n,r,i){return 2===t.h&&(Un(t,Qe(e,r,n),i),!0)}),Er),Tr=vr((function(t,e,n,r,i){return 2===t.h&&(Un(t,Qe(e,r,n,!0),i),!0)}),Er);var Ar=Symbol(),br=Symbol(),kr=Symbol(),Sr=Symbol();let xr,Lr;function Rr(t,e,n,r){var i=r[t];if(i)return i;(i={}).Pa=r,i.V=function(t){switch(typeof t){case\"boolean\":return Te||=[0,void 0,!0];case\"number\":return t>0?void 0:0===t?Ae||=[0,void 0]:[-t,void 0];case\"string\":return[0,t];case\"object\":return t}}(r[0]);var s=r[1];let o=1;s&&s.constructor===Object&&(i.ga=s,\"function\"==typeof(s=r[++o])&&(i.la=!0,xr??=s,Lr??=r[o+1],s=r[o+=2]));const a={};for(;s&&Array.isArray(s)&&s.length&&\"number\"==typeof s[0]&&s[0]>0;){for(var c=0;c<s.length;c++)a[s[c]]=s;s=r[++o]}for(c=1;void 0!==s;){let t;\"number\"==typeof s&&(c+=s,s=r[++o]);var h=void 0;if(s instanceof _r?t=s:(t=wr,o--),t?.l){s=r[++o],h=r;var u=o;\"function\"==typeof s&&(s=s(),h[u]=s),h=s}for(u=c+1,\"number\"==typeof(s=r[++o])&&s<0&&(u-=s,s=r[++o]);c<u;c++){const r=a[c];h?n(i,c,t,h,r):e(i,c,t,r)}}return r[t]=i}function Fr(t){return Array.isArray(t)?t[0]instanceof _r?t:[Tr,t]:[t,void 0]}function Ir(t,e){return t instanceof Hn?t.u:Array.isArray(t)?Fe(t,e,!1):void 0}function Mr(t,e,n,r){const i=n.g;t[e]=r?(t,e,n)=>i(t,e,n,r):i}function Pr(t,e,n,r,i){const s=n.g;let o,a;t[e]=(t,e,n)=>s(t,e,n,a||=Rr(br,Mr,Pr,r).V,o||=Or(r),i)}function Or(t){let e=t[kr];if(null!=e)return e;const n=Rr(br,Mr,Pr,t);return e=n.la?(t,e)=>xr(t,e,n):(t,e)=>{const r=0|t[Z];for(;On(e)&&4!=e.h;){var i=e.m,s=n[i];if(null==s){var o=n.ga;o&&(o=o[i])&&(null!=(o=Cr(o))&&(s=n[i]=o))}null!=s&&s(e,t,i)||(i=(s=e).l,Cn(s),s.fa?s=void 0:(o=s.g.g-i,s.g.g=i,s=Mn(s.g,o)),i=t,s&&((o=i[J])?o.push(s):i[J]=[s]))}return 16384&r&&rt(t),!0},t[kr]=e}function Cr(t){const e=(t=Fr(t))[0].g;if(t=t[1]){const n=Or(t),r=Rr(br,Mr,Pr,t).V;return(t,i,s)=>e(t,i,s,r,n)}return e}function Ur(t,e,n){t[e]=n.h}function Dr(t,e,n,r){let i,s;const o=n.h;t[e]=(t,e,n)=>o(t,e,n,s||=Rr(Ar,Ur,Dr,r).V,i||=Nr(r))}function Nr(t){let e=t[Sr];if(!e){const n=Rr(Ar,Ur,Dr,t);e=(t,e)=>Br(t,e,n),t[Sr]=e}return e}function Br(t,e,n){for(var r=0|t[Z],i=512&r?0:-1,s=t.length,o=512&r?1:0,a=s+(256&r?-1:0);o<a;o++){const r=t[o];if(null==r)continue;const s=o-i,a=Gr(n,s);a&&a(e,r,s)}if(256&r){r=t[s-1];for(const t in r)i=+t,Number.isNaN(i)||null!=(s=r[i])&&(a=Gr(n,i))&&a(e,s,i)}if(t=_t(t))for(nr(e,e.g.end()),n=0;n<t.length;n++)nr(e,D(t[n])||new Uint8Array(0))}function Gr(t,e){var n=t[e];if(n)return n;if((n=t.ga)&&(n=n[e])){var r=(n=Fr(n))[0].h;if(n=n[1]){const e=Nr(n),i=Rr(Ar,Ur,Dr,n).V;n=t.la?Lr(i,e):(t,n,s)=>r(t,n,s,i,e)}else n=r;return t[e]=n}}function jr(t,e){if(Array.isArray(e)){var n=0|e[Z];if(4&n)return e;for(var r=0,i=0;r<e.length;r++){const n=t(e[r]);null!=n&&(e[i++]=n)}return i<r&&(e.length=i),nt(e,-12289&(5|n)),2&n&&Object.freeze(e),e}}function Vr(t,e,n){return new _r(t,e,n)}function Xr(t,e,n){return new _r(t,e,n)}function Hr(t,e,n){Ne(t,0|t[Z],e,n)}var Wr=vr((function(t,e,n,r,i){return 2===t.h&&(t=Un(t,Fe([void 0,void 0],r,!0),i),mt(r=0|e[Z]),(i=Ue(e,r,n))instanceof ye?0!=(2&i.L)?((i=i.X()).push(t),Ne(e,r,n,i)):i.Na(t):Array.isArray(i)?(2&(0|i[Z])&&Ne(e,r,n,i=ze(i)),i.push(t)):Ne(e,r,n,[t]),!0)}),(function(t,e,n,r,i){if(e instanceof ye)e.forEach(((e,s)=>{ar(t,n,Fe([s,e],r,!1),i)}));else if(Array.isArray(e))for(let s=0;s<e.length;s++){const o=e[s];Array.isArray(o)&&ar(t,n,Fe(o,r,!1),i)}}));function zr(t,e,n){if(e=function(t){if(null==t)return t;const e=typeof t;if(\"bigint\"===e)return String(Ht(64,t));if(Zt(t)){if(\"string\"===e)return re(t);if(\"number\"===e)return ne(t)}}(e),null!=e){if(\"string\"==typeof e)$n(e);if(null!=e)switch(rr(t,n,0),typeof e){case\"number\":t=t.g,Ut(e),Zn(t,Pt,Ot);break;case\"bigint\":n=BigInt.asUintN(64,e),n=new qn(Number(n&BigInt(4294967295)),Number(n>>BigInt(32))),Zn(t.g,n.h,n.g);break;default:n=$n(e),Zn(t.g,n.h,n.g)}}}function Kr(t,e,n){null!=(e=Qt(e))&&null!=e&&(rr(t,n,0),tr(t.g,e))}function Yr(t,e,n){null!=(e=qt(e))&&(rr(t,n,0),t.g.g.push(e?1:0))}function $r(t,e,n){null!=(e=ce(e))&&or(t,n,c(e))}function qr(t,e,n,r,i){ar(t,n,Ir(e,r),i)}function Jr(t,e,n){null!=(e=null==e||\"string\"==typeof e||O(e)||e instanceof N?e:void 0)&&or(t,n,wn(e).buffer)}function Zr(t,e,n){return(5===t.h||2===t.h)&&(e=Ye(e,0|e[Z],n,!1,!1),2==t.h?Bn(t,xn,e):e.push(xn(t.g)),!0)}var Qr=Vr((function(t,e,n){if(1!==t.h)return!1;var r=t.g;t=Sn(r);const i=Sn(r);r=2*(i>>31)+1;const s=i>>>20&2047;return t=4294967296*(1048575&i)+t,Hr(e,n,2047==s?t?NaN:r*(1/0):0==s?5e-324*r*t:r*Math.pow(2,s-1075)*(t+4503599627370496)),!0}),(function(t,e,n){null!=(e=$t(e))&&(rr(t,n,1),t=t.g,(n=Mt||=new DataView(new ArrayBuffer(8))).setFloat64(0,+e,!0),Pt=n.getUint32(0,!0),Ot=n.getUint32(4,!0),er(t,Pt),er(t,Ot))}),cr()),ti=Vr((function(t,e,n){return 5===t.h&&(Hr(e,n,xn(t.g)),!0)}),(function(t,e,n){null!=(e=$t(e))&&(rr(t,n,5),t=t.g,Dt(e),er(t,Pt))}),gr),ei=Xr(Zr,(function(t,e,n){if(null!=(e=jr($t,e)))for(let o=0;o<e.length;o++){var r=t,i=n,s=e[o];null!=s&&(rr(r,i,5),r=r.g,Dt(s),er(r,Pt))}}),gr),ni=Xr(Zr,(function(t,e,n){if(null!=(e=jr($t,e))&&e.length){rr(t,n,2),Qn(t.g,4*e.length);for(let r=0;r<e.length;r++)n=t.g,Dt(e[r]),er(n,Pt)}}),gr),ri=Vr((function(t,e,n){return 0===t.h&&(Hr(e,n,Tn(t.g,Bt)),!0)}),zr,pr),ii=Vr((function(t,e,n){return 0===t.h&&(Hr(e,n,0===(t=Tn(t.g,Bt))?void 0:t),!0)}),zr,pr),si=Vr((function(t,e,n){return 0===t.h&&(Hr(e,n,Tn(t.g,Nt)),!0)}),(function(t,e,n){if(null!=(e=se(e))){if(\"string\"==typeof e)zn(e);if(null!=e)switch(rr(t,n,0),typeof e){case\"number\":t=t.g,Ut(e),Zn(t,Pt,Ot);break;case\"bigint\":n=BigInt.asUintN(64,e),n=new Kn(Number(n&BigInt(4294967295)),Number(n>>BigInt(32))),Zn(t.g,n.h,n.g);break;default:n=zn(e),Zn(t.g,n.h,n.g)}}}),cr()),oi=Vr((function(t,e,n){return 0===t.h&&(Hr(e,n,bn(t.g)),!0)}),Kr,dr),ai=Xr((function(t,e,n){return(0===t.h||2===t.h)&&(e=Ye(e,0|e[Z],n,!1,!1),2==t.h?Bn(t,bn,e):e.push(bn(t.g)),!0)}),(function(t,e,n){if(null!=(e=jr(Qt,e))&&e.length){n=ir(t,n);for(let n=0;n<e.length;n++)tr(t.g,e[n]);sr(t,n)}}),dr),ci=Vr((function(t,e,n){return 0===t.h&&(Hr(e,n,0===(t=bn(t.g))?void 0:t),!0)}),Kr,dr),hi=Vr((function(t,e,n){return 0===t.h&&(Hr(e,n,An(t.g)),!0)}),Yr,ur),ui=Vr((function(t,e,n){return 0===t.h&&(Hr(e,n,!1===(t=An(t.g))?void 0:t),!0)}),Yr,ur),li=Xr((function(t,e,n){return 2===t.h&&(t=Dn(t),Ye(e,0|e[Z],n,!1).push(t),!0)}),(function(t,e,n){if(null!=(e=jr(ce,e)))for(let o=0;o<e.length;o++){var r=t,i=n,s=e[o];null!=s&&or(r,i,c(s))}}),lr),di=Vr((function(t,e,n){return 2===t.h&&(Hr(e,n,\"\"===(t=Dn(t))?void 0:t),!0)}),$r,lr),fi=Vr((function(t,e,n){return 2===t.h&&(Hr(e,n,Dn(t)),!0)}),$r,lr),pi=function(t,e,n=hr){return new _r(t,e,n)}((function(t,e,n,r,i){return 2===t.h&&(r=Fe(void 0,r,!0),Ye(e,0|e[Z],n,!0).push(r),Un(t,r,i),!0)}),(function(t,e,n,r,i){if(Array.isArray(e))for(let s=0;s<e.length;s++)qr(t,e[s],n,r,i)})),gi=vr((function(t,e,n,r,i,s){return 2===t.h&&(Je(e,0|e[Z],s,n),Un(t,e=Qe(e,r,n),i),!0)}),qr),mi=Vr((function(t,e,n){return 2===t.h&&(Hr(e,n,Nn(t)),!0)}),Jr,mr),yi=Xr((function(t,e,n){return(0===t.h||2===t.h)&&(e=Ye(e,0|e[Z],n,!1,!1),2==t.h?Bn(t,kn,e):e.push(kn(t.g)),!0)}),(function(t,e,n){if(null!=(e=jr(te,e)))for(let o=0;o<e.length;o++){var r=t,i=n,s=e[o];null!=s&&(rr(r,i,0),Qn(r.g,s))}}),fr),_i=Vr((function(t,e,n){return 0===t.h&&(Hr(e,n,0===(t=kn(t.g))?void 0:t),!0)}),(function(t,e,n){null!=(e=te(e))&&null!=e&&(rr(t,n,0),Qn(t.g,e))}),fr),vi=Vr((function(t,e,n){return 0===t.h&&(Hr(e,n,bn(t.g)),!0)}),(function(t,e,n){null!=(e=Qt(e))&&(e=parseInt(e,10),rr(t,n,0),tr(t.g,e))}),yr);class Ei{constructor(t,e){this.h=t,this.g=e,this.l=en,this.m=sn,this.defaultValue=void 0}}function wi(t,e){return new Ei(t,e)}function Ti(t,e){return(n,r)=>{if(Gn.length){const t=Gn.pop();t.o(r),Rn(t.g,n,r),n=t}else n=new class{constructor(t,e){if(Pn.length){const n=Pn.pop();Rn(n,t,e),t=n}else t=new class{constructor(t,e){this.h=null,this.m=!1,this.g=this.l=this.j=0,Rn(this,t,e)}clear(){this.h=null,this.m=!1,this.g=this.l=this.j=0,this.ba=!1}}(t,e);this.g=t,this.l=this.g.g,this.h=this.m=-1,this.o(e)}o({fa:t=!1}={}){this.fa=t}}(n,r);try{const r=new t,s=r.u;Or(e)(s,n);var i=r}finally{n.g.clear(),n.m=-1,n.h=-1,Gn.length<100&&Gn.push(n)}return i}}function Ai(t){return function(){const e=new class{constructor(){this.l=[],this.h=0,this.g=new class{constructor(){this.g=[]}length(){return this.g.length}end(){const t=this.g;return this.g=[],t}}}};Br(this.u,e,Rr(Ar,Ur,Dr,t)),nr(e,e.g.end());const n=new Uint8Array(e.h),r=e.l,i=r.length;let s=0;for(let t=0;t<i;t++){const e=r[t];n.set(e,s),s+=e.length}return e.l=[n],n}}var bi=class extends Hn{constructor(t){super(t)}},ki=[0,di,Vr((function(t,e,n){return 2===t.h&&(Hr(e,n,(t=Nn(t))===U()?void 0:t),!0)}),(function(t,e,n){if(null!=e){if(e instanceof Hn){const r=e.Ra;return void(r&&(e=r(e),null!=e&&or(t,n,wn(e).buffer)))}if(Array.isArray(e))return}Jr(t,e,n)}),mr)];let Si,xi=globalThis.trustedTypes;function Li(t){void 0===Si&&(Si=function(){let t=null;if(!xi)return t;try{const e=t=>t;t=xi.createPolicy(\"goog#html\",{createHTML:e,createScript:e,createScriptURL:e})}catch(t){}return t}());var e=Si;return new class{constructor(t){this.g=t}toString(){return this.g+\"\"}}(e?e.createScriptURL(t):t)}function Ri(t,...e){if(0===e.length)return Li(t[0]);let n=t[0];for(let r=0;r<e.length;r++)n+=encodeURIComponent(e[r])+t[r+1];return Li(n)}var Fi=[0,oi,vi,hi,-1,ai,vi,-1],Ii=class extends Hn{constructor(t){super(t)}},Mi=[0,hi,fi,hi,vi,-1,Xr((function(t,e,n){return(0===t.h||2===t.h)&&(e=Ye(e,0|e[Z],n,!1,!1),2==t.h?Bn(t,Ln,e):e.push(bn(t.g)),!0)}),(function(t,e,n){if(null!=(e=jr(Qt,e))&&e.length){n=ir(t,n);for(let n=0;n<e.length;n++)tr(t.g,e[n]);sr(t,n)}}),yr),fi,-1,[0,hi,-1],vi,hi,-1],Pi=[0,fi,-2],Oi=class extends Hn{constructor(t){super(t)}},Ci=[0],Ui=[0,oi,hi,1,hi,-3],Di=class extends Hn{constructor(t){super(t,2)}},Ni={};Ni[336783863]=[0,fi,hi,-1,oi,[0,[1,2,3,4,5,6,7,8],gi,Ci,gi,Mi,gi,Pi,gi,Ui,gi,Fi,gi,[0,fi,-2],gi,[0,fi,vi],gi,[0,vi,fi]],[0,fi],hi,[0,[1,3],[2,4],gi,[0,ai],-1,gi,[0,li],-1,pi,[0,fi,-1]],fi];var Bi=[0,ii,-1,ui,-3,ii,ai,di,ci,ii,-1,ui,ci,ui,-2,di];function Gi(t,e){Ke(t,2,ae(e),\"\")}function ji(t,e){yn(t,3,e)}function Vi(t,e){yn(t,4,e)}var Xi=class extends Hn{constructor(t){super(t,500)}o(t){return sn(this,0,7,t)}},Hi=[-1,{}],Wi=[0,fi,1,Hi],zi=[0,fi,li,Hi];function Ki(t,e){hn(t,1,Xi,e)}function Yi(t,e){yn(t,10,e)}function $i(t,e){yn(t,15,e)}var qi=class extends Hn{constructor(t){super(t,500)}o(t){return sn(this,0,1001,t)}},Ji=[-500,pi,[-500,di,-1,li,-3,[-2,Ni,hi],pi,ki,ci,-1,Wi,zi,pi,[0,di,ui],di,Bi,ci,li,987,li],4,pi,[-500,fi,-1,[-1,{}],998,fi],pi,[-500,fi,li,-1,[-2,{},hi],997,li,-1],ci,pi,[-500,fi,li,Hi,998,li],li,ci,Wi,zi,pi,[0,di,-1,Hi],li,-2,Bi,di,-1,ui,[0,ui,_i],978,Hi,pi,ki];qi.prototype.g=Ai(Ji);var Zi=Ti(qi,Ji),Qi=class extends Hn{constructor(t){super(t)}},ts=class extends Hn{constructor(t){super(t)}g(){return rn(this,Qi,1)}},es=[0,pi,[0,oi,ti,fi,-1]],ns=Ti(ts,es),rs=class extends Hn{constructor(t){super(t)}},is=class extends Hn{constructor(t){super(t)}},ss=class extends Hn{constructor(t){super(t)}h(){return en(this,rs,2)}g(){return rn(this,is,5)}},os=Ti(class extends Hn{constructor(t){super(t)}},[0,li,ai,ni,[0,vi,[0,oi,-3],[0,ti,-3],[0,oi,-1,[0,pi,[0,oi,-2]]],pi,[0,ti,-1,fi,ti]],fi,-1,ri,pi,[0,oi,ti],li,ri]),as=class extends Hn{constructor(t){super(t)}},cs=Ti(class extends Hn{constructor(t){super(t)}},[0,pi,[0,ti,-4]]),hs=class extends Hn{constructor(t){super(t)}},us=Ti(class extends Hn{constructor(t){super(t)}},[0,pi,[0,ti,-4]]),ls=class extends Hn{constructor(t){super(t)}},ds=[0,oi,-1,ni,vi],fs=class extends Hn{constructor(t){super(t)}};fs.prototype.g=Ai([0,ti,-4,ri]);var ps=class extends Hn{constructor(t){super(t)}},gs=Ti(class extends Hn{constructor(t){super(t)}},[0,pi,[0,1,oi,fi,es],ri]),ms=class extends Hn{constructor(t){super(t)}},ys=class extends Hn{constructor(t){super(t)}oa(){const t=Ge(this);return null==t?U():t}},_s=class extends Hn{constructor(t){super(t)}},vs=[1,2],Es=Ti(class extends Hn{constructor(t){super(t)}},[0,pi,[0,vs,gi,[0,ni],gi,[0,mi],oi,fi],ri]),ws=class extends Hn{constructor(t){super(t)}},Ts=[0,fi,oi,ti,li,-1],As=class extends Hn{constructor(t){super(t)}},bs=[0,hi,-1],ks=class extends Hn{constructor(t){super(t)}},Ss=[1,2,3,4,5],xs=class extends Hn{constructor(t){super(t)}g(){return null!=Ge(this)}h(){return null!=ln(this,2)}},Ls=class extends Hn{constructor(t){super(t)}g(){return qt(Ce(this,2))??!1}},Rs=[0,mi,fi,[0,oi,ri,-1],[0,si,ri]],Fs=[0,Rs,hi,[0,Ss,gi,Ui,gi,Mi,gi,Fi,gi,Ci,gi,Pi],vi],Is=class extends Hn{constructor(t){super(t)}},Ms=[0,Fs,ti,-1,oi],Ps=wi(502141897,Is);Ni[502141897]=Ms;var Os=Ti(class extends Hn{constructor(t){super(t)}},[0,[0,vi,-1,ei,yi],ds]),Cs=class extends Hn{constructor(t){super(t)}},Us=class extends Hn{constructor(t){super(t)}},Ds=[0,Fs,ti,[0,Fs],hi],Ns=[0,Fs,Ms,Ds,ti,[0,[0,Rs]]],Bs=wi(508968150,Us);Ni[508968150]=Ns,Ni[508968149]=Ds;var Gs=class extends Hn{constructor(t){super(t)}},js=wi(513916220,Gs);Ni[513916220]=[0,Fs,Ns,oi];var Vs=class extends Hn{constructor(t){super(t)}h(){return en(this,ws,2)}g(){De(this,2)}},Xs=[0,Fs,Ts];Ni[478825465]=Xs;var Hs=class extends Hn{constructor(t){super(t)}},Ws=class extends Hn{constructor(t){super(t)}},zs=class extends Hn{constructor(t){super(t)}},Ks=class extends Hn{constructor(t){super(t)}},Ys=class extends Hn{constructor(t){super(t)}},$s=[0,Fs,[0,Fs],Xs,-1],qs=[0,Fs,ti,oi],Js=[0,Fs,ti],Zs=[0,Fs,qs,Js,ti],Qs=wi(479097054,Ys);Ni[479097054]=[0,Fs,Zs,$s],Ni[463370452]=$s,Ni[464864288]=qs;var to=wi(462713202,Ks);Ni[462713202]=Zs,Ni[474472470]=Js;var eo=class extends Hn{constructor(t){super(t)}},no=class extends Hn{constructor(t){super(t)}},ro=class extends Hn{constructor(t){super(t)}},io=class extends Hn{constructor(t){super(t)}},so=[0,Fs,ti,-1,oi],oo=[0,Fs,ti,hi];io.prototype.g=Ai([0,Fs,Js,[0,Fs],Ms,Ds,so,oo]);var ao=class extends Hn{constructor(t){super(t)}},co=wi(456383383,ao);Ni[456383383]=[0,Fs,Ts];var ho=class extends Hn{constructor(t){super(t)}},uo=wi(476348187,ho);Ni[476348187]=[0,Fs,bs];var lo=class extends Hn{constructor(t){super(t)}},fo=class extends Hn{constructor(t){super(t)}},po=[0,vi,-1],go=wi(458105876,class extends Hn{constructor(t){super(t)}g(){var t=this.u;const e=0|t[Z];const n=2&e;return t=function(t,e,n){var r=fo;const i=2&e;let s=!1;if(null==n){if(i)return be();n=[]}else if(n.constructor===ye){if(0==(2&n.L)||i)return n;n=n.X()}else Array.isArray(n)?s=!!(2&(0|n[Z])):n=[];if(i){if(!n.length)return be();s||(s=!0,rt(n))}else s&&(s=!1,n=ze(n));return s||(64&(0|n[Z])?n[Z]&=-33:32&e&&et(n,32)),Ne(t,e,2,r=new ye(n,r,ue,void 0)),r}(t,e,Ue(t,e,2)),!n&&fo&&(t.ra=!0),t}});Ni[458105876]=[0,po,Wr,[!0,ri,[0,fi,-1,li]]];var mo=class extends Hn{constructor(t){super(t)}},yo=wi(458105758,mo);Ni[458105758]=[0,Fs,fi,po];var _o=class extends Hn{constructor(t){super(t)}},vo=wi(443442058,_o);Ni[443442058]=[0,Fs,fi,oi,ti,li,-1,hi,ti],Ni[514774813]=so;var Eo=class extends Hn{constructor(t){super(t)}},wo=wi(516587230,Eo);function To(t,e){return e=e?e.clone():new ws,void 0!==t.displayNamesLocale?De(e,1,ae(t.displayNamesLocale)):void 0===t.displayNamesLocale&&De(e,1),void 0!==t.maxResults?pn(e,2,t.maxResults):\"maxResults\"in t&&De(e,2),void 0!==t.scoreThreshold?gn(e,3,t.scoreThreshold):\"scoreThreshold\"in t&&De(e,3),void 0!==t.categoryAllowlist?mn(e,4,t.categoryAllowlist):\"categoryAllowlist\"in t&&De(e,4),void 0!==t.categoryDenylist?mn(e,5,t.categoryDenylist):\"categoryDenylist\"in t&&De(e,5),e}function Ao(t,e=-1,n=\"\"){return{categories:t.map((t=>({index:un(t,1)??0??-1,score:dn(t,2)??0,categoryName:ln(t,3)??\"\"??\"\",displayName:ln(t,4)??\"\"??\"\"}))),headIndex:e,headName:n}}function bo(t){var e=Ve(t,3,$t,je()),n=Ve(t,2,Qt,je()),r=Ve(t,1,ce,je()),i=Ve(t,9,ce,je());const s={categories:[],keypoints:[]};for(let t=0;t<e.length;t++)s.categories.push({score:e[t],index:n[t]??-1,categoryName:r[t]??\"\",displayName:i[t]??\"\"});if((e=en(t,ss,4)?.h())&&(s.boundingBox={originX:un(e,1)??0,originY:un(e,2)??0,width:un(e,3)??0,height:un(e,4)??0,angle:0}),en(t,ss,4)?.g().length)for(const e of en(t,ss,4).g())s.keypoints.push({x:Be(e,1)??0,y:Be(e,2)??0,score:Be(e,4)??0,label:ln(e,3)??\"\"});return s}function ko(t){const e=[];for(const n of rn(t,hs,1))e.push({x:dn(n,1)??0,y:dn(n,2)??0,z:dn(n,3)??0,visibility:dn(n,4)??0});return e}function So(t){const e=[];for(const n of rn(t,as,1))e.push({x:dn(n,1)??0,y:dn(n,2)??0,z:dn(n,3)??0,visibility:dn(n,4)??0});return e}function xo(t){return Array.from(t,(t=>t>127?t-256:t))}function Lo(t,e){if(t.length!==e.length)throw Error(`Cannot compute cosine similarity between embeddings of different sizes (${t.length} vs. ${e.length}).`);let n=0,r=0,i=0;for(let s=0;s<t.length;s++)n+=t[s]*e[s],r+=t[s]*t[s],i+=e[s]*e[s];if(r<=0||i<=0)throw Error(\"Cannot compute cosine similarity on embedding with 0 norm.\");return n/Math.sqrt(r*i)}let Ro;Ni[516587230]=[0,Fs,so,oo,ti],Ni[518928384]=oo;const Fo=new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]);async function Io(){if(void 0===Ro)try{await WebAssembly.instantiate(Fo),Ro=!0}catch{Ro=!1}return Ro}async function Mo(t,e=Ri``){const n=await Io()?\"wasm_internal\":\"wasm_nosimd_internal\";return{wasmLoaderPath:`${e}/${t}_${n}.js`,wasmBinaryPath:`${e}/${t}_${n}.wasm`}}var Po=class{};function Oo(){var t=navigator;return\"undefined\"!=typeof OffscreenCanvas&&(!function(t=navigator){return(t=t.userAgent).includes(\"Safari\")&&!t.includes(\"Chrome\")}(t)||!!((t=t.userAgent.match(/Version\\/([\\d]+).*Safari/))&&t.length>=1&&Number(t[1])>=17))}async function Co(t){if(\"function\"!=typeof importScripts){const e=document.createElement(\"script\");return e.src=t.toString(),e.crossOrigin=\"anonymous\",new Promise(((t,n)=>{e.addEventListener(\"load\",(()=>{t()}),!1),e.addEventListener(\"error\",(t=>{n(t)}),!1),document.body.appendChild(e)}))}importScripts(t.toString())}function Uo(t){return void 0!==t.videoWidth?[t.videoWidth,t.videoHeight]:void 0!==t.naturalWidth?[t.naturalWidth,t.naturalHeight]:void 0!==t.displayWidth?[t.displayWidth,t.displayHeight]:[t.width,t.height]}function Do(t,e,n){t.m||console.error(\"No wasm multistream support detected: ensure dependency inclusion of :gl_graph_runner_internal_multi_input target\"),n(e=t.i.stringToNewUTF8(e)),t.i._free(e)}function No(t,e,n){if(!t.i.canvas)throw Error(\"No OpenGL canvas configured.\");if(n?t.i._bindTextureToStream(n):t.i._bindTextureToCanvas(),!(n=t.i.canvas.getContext(\"webgl2\")||t.i.canvas.getContext(\"webgl\")))throw Error(\"Failed to obtain WebGL context from the provided canvas. `getContext()` should only be invoked with `webgl` or `webgl2`.\");t.i.gpuOriginForWebTexturesIsBottomLeft&&n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!0),n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e),t.i.gpuOriginForWebTexturesIsBottomLeft&&n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,!1);const[r,i]=Uo(e);return!t.l||r===t.i.canvas.width&&i===t.i.canvas.height||(t.i.canvas.width=r,t.i.canvas.height=i),[r,i]}function Bo(t,e,n){t.m||console.error(\"No wasm multistream support detected: ensure dependency inclusion of :gl_graph_runner_internal_multi_input target\");const r=new Uint32Array(e.length);for(let n=0;n<e.length;n++)r[n]=t.i.stringToNewUTF8(e[n]);e=t.i._malloc(4*r.length),t.i.HEAPU32.set(r,e>>2),n(e);for(const e of r)t.i._free(e);t.i._free(e)}function Go(t,e,n){t.i.simpleListeners=t.i.simpleListeners||{},t.i.simpleListeners[e]=n}function jo(t,e,n){let r=[];t.i.simpleListeners=t.i.simpleListeners||{},t.i.simpleListeners[e]=(t,e,i)=>{e?(n(r,i),r=[]):r.push(t)}}Po.forVisionTasks=function(t){return Mo(\"vision\",t)},Po.forTextTasks=function(t){return Mo(\"text\",t)},Po.forGenAiExperimentalTasks=function(t){return Mo(\"genai_experimental\",t)},Po.forGenAiTasks=function(t){return Mo(\"genai\",t)},Po.forAudioTasks=function(t){return Mo(\"audio\",t)},Po.isSimdSupported=function(){return Io()};async function Vo(t,e,n,r){return t=await(async(t,e,n,r,i)=>{if(e&&await Co(e),!self.ModuleFactory)throw Error(\"ModuleFactory not set.\");if(n&&(await Co(n),!self.ModuleFactory))throw Error(\"ModuleFactory not set.\");return self.Module&&i&&((e=self.Module).locateFile=i.locateFile,i.mainScriptUrlOrBlob&&(e.mainScriptUrlOrBlob=i.mainScriptUrlOrBlob)),i=await self.ModuleFactory(self.Module||i),self.ModuleFactory=self.Module=void 0,new t(i,r)})(t,n.wasmLoaderPath,n.assetLoaderPath,e,{locateFile:t=>t.endsWith(\".wasm\")?n.wasmBinaryPath.toString():n.assetBinaryPath&&t.endsWith(\".data\")?n.assetBinaryPath.toString():t}),await t.o(r),t}function Xo(t,e){const n=en(t.baseOptions,xs,1)||new xs;\"string\"==typeof e?(De(n,2,ae(e)),De(n,1)):e instanceof Uint8Array&&(De(n,1,ft(e,!1)),De(n,2)),sn(t.baseOptions,0,1,n)}function Ho(t){try{const e=t.G.length;if(1===e)throw Error(t.G[0].message);if(e>1)throw Error(\"Encountered multiple errors: \"+t.G.map((t=>t.message)).join(\", \"))}finally{t.G=[]}}function Wo(t,e){t.B=Math.max(t.B,e)}function zo(t,e){t.A=new Xi,Gi(t.A,\"PassThroughCalculator\"),ji(t.A,\"free_memory\"),Vi(t.A,\"free_memory_unused_out\"),Yi(e,\"free_memory\"),Ki(e,t.A)}function Ko(t,e){ji(t.A,e),Vi(t.A,e+\"_unused_out\")}function Yo(t){t.g.addBoolToStream(!0,\"free_memory\",t.B)}var $o=class{constructor(t){this.g=t,this.G=[],this.B=0,this.g.setAutoRenderToScreen(!1)}l(t,e=!0){if(e){const e=t.baseOptions||{};if(t.baseOptions?.modelAssetBuffer&&t.baseOptions?.modelAssetPath)throw Error(\"Cannot set both baseOptions.modelAssetPath and baseOptions.modelAssetBuffer\");if(!(en(this.baseOptions,xs,1)?.g()||en(this.baseOptions,xs,1)?.h()||t.baseOptions?.modelAssetBuffer||t.baseOptions?.modelAssetPath))throw Error(\"Either baseOptions.modelAssetPath or baseOptions.modelAssetBuffer must be set\");if(function(t,e){let n=en(t.baseOptions,ks,3);if(!n){var r=n=new ks,i=new Oi;on(r,4,Ss,i)}\"delegate\"in e&&(\"GPU\"===e.delegate?(e=n,r=new Ii,on(e,2,Ss,r)):(e=n,r=new Oi,on(e,4,Ss,r))),sn(t.baseOptions,0,3,n)}(this,e),e.modelAssetPath)return fetch(e.modelAssetPath.toString()).then((t=>{if(t.ok)return t.arrayBuffer();throw Error(`Failed to fetch model: ${e.modelAssetPath} (${t.status})`)})).then((t=>{try{this.g.i.FS_unlink(\"/model.dat\")}catch{}this.g.i.FS_createDataFile(\"/\",\"model.dat\",new Uint8Array(t),!0,!1,!1),Xo(this,\"/model.dat\"),this.m(),this.I()}));if(e.modelAssetBuffer instanceof Uint8Array)Xo(this,e.modelAssetBuffer);else if(e.modelAssetBuffer)return async function(t){const e=[];for(var n=0;;){const{done:r,value:i}=await t.read();if(r)break;e.push(i),n+=i.length}if(0===e.length)return new Uint8Array(0);if(1===e.length)return e[0];t=new Uint8Array(n),n=0;for(const r of e)t.set(r,n),n+=r.length;return t}(e.modelAssetBuffer).then((t=>{Xo(this,t),this.m(),this.I()}))}return this.m(),this.I(),Promise.resolve()}I(){}da(){let t;if(this.g.da((e=>{t=Zi(e)})),!t)throw Error(\"Failed to retrieve CalculatorGraphConfig\");return t}setGraph(t,e){this.g.attachErrorListener(((t,e)=>{this.G.push(Error(e))})),this.g.La(),this.g.setGraph(t,e),this.A=void 0,Ho(this)}finishProcessing(){this.g.finishProcessing(),Ho(this)}close(){this.A=void 0,this.g.closeGraph()}};function qo(t,e){if(!t)throw Error(`Unable to obtain required WebGL resource: ${e}`);return t}$o.prototype.close=$o.prototype.close,function(e,n){e=e.split(\".\");var r,i=t;e[0]in i||void 0===i.execScript||i.execScript(\"var \"+e[0]);for(;e.length&&(r=e.shift());)e.length||void 0===n?i=i[r]&&i[r]!==Object.prototype[r]?i[r]:i[r]={}:i[r]=n}(\"TaskRunner\",$o);class Jo{constructor(t,e,n,r){this.g=t,this.h=e,this.m=n,this.l=r}bind(){this.g.bindVertexArray(this.h)}close(){this.g.deleteVertexArray(this.h),this.g.deleteBuffer(this.m),this.g.deleteBuffer(this.l)}}function Zo(t,e,n){const r=t.g;if(n=qo(r.createShader(n),\"Failed to create WebGL shader\"),r.shaderSource(n,e),r.compileShader(n),!r.getShaderParameter(n,r.COMPILE_STATUS))throw Error(`Could not compile WebGL shader: ${r.getShaderInfoLog(n)}`);return r.attachShader(t.h,n),n}function Qo(t,e){const n=t.g,r=qo(n.createVertexArray(),\"Failed to create vertex array\");n.bindVertexArray(r);const i=qo(n.createBuffer(),\"Failed to create buffer\");n.bindBuffer(n.ARRAY_BUFFER,i),n.enableVertexAttribArray(t.O),n.vertexAttribPointer(t.O,2,n.FLOAT,!1,0,0),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),n.STATIC_DRAW);const s=qo(n.createBuffer(),\"Failed to create buffer\");return n.bindBuffer(n.ARRAY_BUFFER,s),n.enableVertexAttribArray(t.I),n.vertexAttribPointer(t.I,2,n.FLOAT,!1,0,0),n.bufferData(n.ARRAY_BUFFER,new Float32Array(e?[0,1,0,0,1,0,1,1]:[0,0,0,1,1,1,1,0]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),n.bindVertexArray(null),new Jo(n,r,i,s)}function ta(t,e){if(t.g){if(e!==t.g)throw Error(\"Cannot change GL context once initialized\")}else t.g=e}function ea(t,e,n,r){return ta(t,e),t.h||(t.m(),t.C()),n?(t.s||(t.s=Qo(t,!0)),n=t.s):(t.v||(t.v=Qo(t,!1)),n=t.v),e.useProgram(t.h),n.bind(),t.l(),t=r(),n.g.bindVertexArray(null),t}function na(t,e,n){return ta(t,e),t=qo(e.createTexture(),\"Failed to create texture\"),e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,n??e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,n??e.LINEAR),e.bindTexture(e.TEXTURE_2D,null),t}function ra(t,e,n){ta(t,e),t.A||(t.A=qo(e.createFramebuffer(),\"Failed to create framebuffe.\")),e.bindFramebuffer(e.FRAMEBUFFER,t.A),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0)}function ia(t){t.g?.bindFramebuffer(t.g.FRAMEBUFFER,null)}var sa=class{G(){return\"\\n  precision mediump float;\\n  varying vec2 vTex;\\n  uniform sampler2D inputTexture;\\n  void main() {\\n    gl_FragColor = texture2D(inputTexture, vTex);\\n  }\\n \"}m(){const t=this.g;if(this.h=qo(t.createProgram(),\"Failed to create WebGL program\"),this.aa=Zo(this,\"\\n  attribute vec2 aVertex;\\n  attribute vec2 aTex;\\n  varying vec2 vTex;\\n  void main(void) {\\n    gl_Position = vec4(aVertex, 0.0, 1.0);\\n    vTex = aTex;\\n  }\",t.VERTEX_SHADER),this.Z=Zo(this,this.G(),t.FRAGMENT_SHADER),t.linkProgram(this.h),!t.getProgramParameter(this.h,t.LINK_STATUS))throw Error(`Error during program linking: ${t.getProgramInfoLog(this.h)}`);this.O=t.getAttribLocation(this.h,\"aVertex\"),this.I=t.getAttribLocation(this.h,\"aTex\")}C(){}l(){}close(){if(this.h){const t=this.g;t.deleteProgram(this.h),t.deleteShader(this.aa),t.deleteShader(this.Z)}this.A&&this.g.deleteFramebuffer(this.A),this.v&&this.v.close(),this.s&&this.s.close()}};var oa=class extends sa{G(){return\"\\n  precision mediump float;\\n  uniform sampler2D backgroundTexture;\\n  uniform sampler2D maskTexture;\\n  uniform sampler2D colorMappingTexture;\\n  varying vec2 vTex;\\n  void main() {\\n    vec4 backgroundColor = texture2D(backgroundTexture, vTex);\\n    float category = texture2D(maskTexture, vTex).r;\\n    vec4 categoryColor = texture2D(colorMappingTexture, vec2(category, 0.0));\\n    gl_FragColor = mix(backgroundColor, categoryColor, categoryColor.a);\\n  }\\n \"}C(){const t=this.g;t.activeTexture(t.TEXTURE1),this.B=na(this,t,t.LINEAR),t.activeTexture(t.TEXTURE2),this.j=na(this,t,t.NEAREST)}m(){super.m();const t=this.g;this.K=qo(t.getUniformLocation(this.h,\"backgroundTexture\"),\"Uniform location\"),this.T=qo(t.getUniformLocation(this.h,\"colorMappingTexture\"),\"Uniform location\"),this.J=qo(t.getUniformLocation(this.h,\"maskTexture\"),\"Uniform location\")}l(){super.l();const t=this.g;t.uniform1i(this.J,0),t.uniform1i(this.K,1),t.uniform1i(this.T,2)}close(){this.B&&this.g.deleteTexture(this.B),this.j&&this.g.deleteTexture(this.j),super.close()}},aa=class extends sa{G(){return\"\\n  precision mediump float;\\n  uniform sampler2D maskTexture;\\n  uniform sampler2D defaultTexture;\\n  uniform sampler2D overlayTexture;\\n  varying vec2 vTex;\\n  void main() {\\n    float confidence = texture2D(maskTexture, vTex).r;\\n    vec4 defaultColor = texture2D(defaultTexture, vTex);\\n    vec4 overlayColor = texture2D(overlayTexture, vTex);\\n    // Apply the alpha from the overlay and merge in the default color\\n    overlayColor = mix(defaultColor, overlayColor, overlayColor.a);\\n    gl_FragColor = mix(defaultColor, overlayColor, confidence);\\n  }\\n \"}C(){const t=this.g;t.activeTexture(t.TEXTURE1),this.j=na(this,t),t.activeTexture(t.TEXTURE2),this.B=na(this,t)}m(){super.m();const t=this.g;this.J=qo(t.getUniformLocation(this.h,\"defaultTexture\"),\"Uniform location\"),this.K=qo(t.getUniformLocation(this.h,\"overlayTexture\"),\"Uniform location\"),this.H=qo(t.getUniformLocation(this.h,\"maskTexture\"),\"Uniform location\")}l(){super.l();const t=this.g;t.uniform1i(this.H,0),t.uniform1i(this.J,1),t.uniform1i(this.K,2)}close(){this.j&&this.g.deleteTexture(this.j),this.B&&this.g.deleteTexture(this.B),super.close()}};function ca(t,e){switch(e){case 0:return t.g.find((t=>t instanceof Uint8Array));case 1:return t.g.find((t=>t instanceof Float32Array));case 2:return t.g.find((t=>\"undefined\"!=typeof WebGLTexture&&t instanceof WebGLTexture));default:throw Error(`Type is not supported: ${e}`)}}function ha(t){var e=ca(t,1);if(!e){if(e=ca(t,0))e=new Float32Array(e).map((t=>t/255));else{e=new Float32Array(t.width*t.height);const r=la(t);var n=fa(t);if(ra(n,r,ua(t)),\"iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod\".split(\";\").includes(navigator.platform)||navigator.userAgent.includes(\"Mac\")&&\"document\"in self&&\"ontouchend\"in self.document){n=new Float32Array(t.width*t.height*4),r.readPixels(0,0,t.width,t.height,r.RGBA,r.FLOAT,n);for(let t=0,r=0;t<e.length;++t,r+=4)e[t]=n[r]}else r.readPixels(0,0,t.width,t.height,r.RED,r.FLOAT,e)}t.g.push(e)}return e}function ua(t){let e=ca(t,2);if(!e){const n=la(t);e=pa(t);const r=ha(t),i=da(t);n.texImage2D(n.TEXTURE_2D,0,i,t.width,t.height,0,n.RED,n.FLOAT,r),ga(t)}return e}function la(t){if(!t.canvas)throw Error(\"Conversion to different image formats require that a canvas is passed when initializing the image.\");return t.h||(t.h=qo(t.canvas.getContext(\"webgl2\"),\"You cannot use a canvas that is already bound to a different type of rendering context.\")),t.h}function da(t){if(t=la(t),!ma)if(t.getExtension(\"EXT_color_buffer_float\")&&t.getExtension(\"OES_texture_float_linear\")&&t.getExtension(\"EXT_float_blend\"))ma=t.R32F;else{if(!t.getExtension(\"EXT_color_buffer_half_float\"))throw Error(\"GPU does not fully support 4-channel float32 or float16 formats\");ma=t.R16F}return ma}function fa(t){return t.l||(t.l=new sa),t.l}function pa(t){const e=la(t);e.viewport(0,0,t.width,t.height),e.activeTexture(e.TEXTURE0);let n=ca(t,2);return n||(n=na(fa(t),e,t.m?e.LINEAR:e.NEAREST),t.g.push(n),t.j=!0),e.bindTexture(e.TEXTURE_2D,n),n}function ga(t){t.h.bindTexture(t.h.TEXTURE_2D,null)}var ma,ya=class{constructor(t,e,n,r,i,s,o){this.g=t,this.m=e,this.j=n,this.canvas=r,this.l=i,this.width=s,this.height=o,this.j&&(0===--_a&&console.error(\"You seem to be creating MPMask instances without invoking .close(). This leaks resources.\"))}Fa(){return!!ca(this,0)}ja(){return!!ca(this,1)}P(){return!!ca(this,2)}ia(){return(e=ca(t=this,0))||(e=ha(t),e=new Uint8Array(e.map((t=>255*t))),t.g.push(e)),e;var t,e}ha(){return ha(this)}M(){return ua(this)}clone(){const t=[];for(const e of this.g){let n;if(e instanceof Uint8Array)n=new Uint8Array(e);else if(e instanceof Float32Array)n=new Float32Array(e);else{if(!(e instanceof WebGLTexture))throw Error(`Type is not supported: ${e}`);{const t=la(this),e=fa(this);t.activeTexture(t.TEXTURE1),n=na(e,t,this.m?t.LINEAR:t.NEAREST),t.bindTexture(t.TEXTURE_2D,n);const r=da(this);t.texImage2D(t.TEXTURE_2D,0,r,this.width,this.height,0,t.RED,t.FLOAT,null),t.bindTexture(t.TEXTURE_2D,null),ra(e,t,n),ea(e,t,!1,(()=>{pa(this),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT),t.drawArrays(t.TRIANGLE_FAN,0,4),ga(this)})),ia(e),ga(this)}}t.push(n)}return new ya(t,this.m,this.P(),this.canvas,this.l,this.width,this.height)}close(){this.j&&la(this).deleteTexture(ca(this,2)),_a=-1}};ya.prototype.close=ya.prototype.close,ya.prototype.clone=ya.prototype.clone,ya.prototype.getAsWebGLTexture=ya.prototype.M,ya.prototype.getAsFloat32Array=ya.prototype.ha,ya.prototype.getAsUint8Array=ya.prototype.ia,ya.prototype.hasWebGLTexture=ya.prototype.P,ya.prototype.hasFloat32Array=ya.prototype.ja,ya.prototype.hasUint8Array=ya.prototype.Fa;var _a=250;const va={color:\"white\",lineWidth:4,radius:6};function Ea(t){return{...va,fillColor:(t=t||{}).color,...t}}function wa(t,e){return t instanceof Function?t(e):t}function Ta(t,e,n){return Math.max(Math.min(e,n),Math.min(Math.max(e,n),t))}function Aa(t){if(!t.l)throw Error(\"CPU rendering requested but CanvasRenderingContext2D not provided.\");return t.l}function ba(t){if(!t.j)throw Error(\"GPU rendering requested but WebGL2RenderingContext not provided.\");return t.j}function ka(t,e,n){if(e.P())n(e.M());else{const r=e.ja()?e.ha():e.ia();t.m=t.m??new sa;const i=ba(t);n((t=new ya([r],e.m,!1,i.canvas,t.m,e.width,e.height)).M()),t.close()}}function Sa(t,e,n,r){const i=function(t){return t.g||(t.g=new oa),t.g}(t),s=ba(t),o=Array.isArray(n)?new ImageData(new Uint8ClampedArray(n),1,1):n;ea(i,s,!0,(()=>{!function(t,e,n,r){const i=t.g;if(i.activeTexture(i.TEXTURE0),i.bindTexture(i.TEXTURE_2D,e),i.activeTexture(i.TEXTURE1),i.bindTexture(i.TEXTURE_2D,t.B),i.texImage2D(i.TEXTURE_2D,0,i.RGBA,i.RGBA,i.UNSIGNED_BYTE,n),t.H&&function(t,e){if(t!==e)return!1;t=t.entries(),e=e.entries();for(const[r,i]of t){t=r;const s=i;var n=e.next();if(n.done)return!1;const[o,a]=n.value;if(n=a,t!==o||s[0]!==n[0]||s[1]!==n[1]||s[2]!==n[2]||s[3]!==n[3])return!1}return!!e.next().done}(t.H,r))i.activeTexture(i.TEXTURE2),i.bindTexture(i.TEXTURE_2D,t.j);else{t.H=r;const e=Array(1024).fill(0);r.forEach(((t,n)=>{if(4!==t.length)throw Error(`Color at index ${n} is not a four-channel value.`);e[4*n]=t[0],e[4*n+1]=t[1],e[4*n+2]=t[2],e[4*n+3]=t[3]})),i.activeTexture(i.TEXTURE2),i.bindTexture(i.TEXTURE_2D,t.j),i.texImage2D(i.TEXTURE_2D,0,i.RGBA,256,1,0,i.RGBA,i.UNSIGNED_BYTE,new Uint8Array(e))}}(i,e,o,r),s.clearColor(0,0,0,0),s.clear(s.COLOR_BUFFER_BIT),s.drawArrays(s.TRIANGLE_FAN,0,4);const t=i.g;t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,null),t.activeTexture(t.TEXTURE1),t.bindTexture(t.TEXTURE_2D,null),t.activeTexture(t.TEXTURE2),t.bindTexture(t.TEXTURE_2D,null)}))}function xa(t,e,n,r){const i=ba(t),s=function(t){return t.h||(t.h=new aa),t.h}(t),o=Array.isArray(n)?new ImageData(new Uint8ClampedArray(n),1,1):n,a=Array.isArray(r)?new ImageData(new Uint8ClampedArray(r),1,1):r;ea(s,i,!0,(()=>{var t=s.g;t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.activeTexture(t.TEXTURE1),t.bindTexture(t.TEXTURE_2D,s.j),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,o),t.activeTexture(t.TEXTURE2),t.bindTexture(t.TEXTURE_2D,s.B),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,a),i.clearColor(0,0,0,0),i.clear(i.COLOR_BUFFER_BIT),i.drawArrays(i.TRIANGLE_FAN,0,4),i.bindTexture(i.TEXTURE_2D,null),(t=s.g).activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,null),t.activeTexture(t.TEXTURE1),t.bindTexture(t.TEXTURE_2D,null),t.activeTexture(t.TEXTURE2),t.bindTexture(t.TEXTURE_2D,null)}))}var La=class{constructor(t,e){t instanceof CanvasRenderingContext2D||t instanceof OffscreenCanvasRenderingContext2D?(this.l=t,this.j=e):this.j=t}ya(t,e){if(t){var n=Aa(this);e=Ea(e),n.save();var r=n.canvas,i=0;for(const s of t)n.fillStyle=wa(e.fillColor,{index:i,from:s}),n.strokeStyle=wa(e.color,{index:i,from:s}),n.lineWidth=wa(e.lineWidth,{index:i,from:s}),(t=new Path2D).arc(s.x*r.width,s.y*r.height,wa(e.radius,{index:i,from:s}),0,2*Math.PI),n.fill(t),n.stroke(t),++i;n.restore()}}xa(t,e,n){if(t&&e){var r=Aa(this);n=Ea(n),r.save();var i=r.canvas,s=0;for(const o of e){r.beginPath(),e=t[o.start];const a=t[o.end];e&&a&&(r.strokeStyle=wa(n.color,{index:s,from:e,to:a}),r.lineWidth=wa(n.lineWidth,{index:s,from:e,to:a}),r.moveTo(e.x*i.width,e.y*i.height),r.lineTo(a.x*i.width,a.y*i.height)),++s,r.stroke()}r.restore()}}ua(t,e){const n=Aa(this);e=Ea(e),n.save(),n.beginPath(),n.lineWidth=wa(e.lineWidth,{}),n.strokeStyle=wa(e.color,{}),n.fillStyle=wa(e.fillColor,{}),n.moveTo(t.originX,t.originY),n.lineTo(t.originX+t.width,t.originY),n.lineTo(t.originX+t.width,t.originY+t.height),n.lineTo(t.originX,t.originY+t.height),n.lineTo(t.originX,t.originY),n.stroke(),n.fill(),n.restore()}va(t,e,n=[0,0,0,255]){this.l?function(t,e,n,r){const i=ba(t);ka(t,e,(e=>{Sa(t,e,n,r),(e=Aa(t)).drawImage(i.canvas,0,0,e.canvas.width,e.canvas.height)}))}(this,t,n,e):Sa(this,t.M(),n,e)}wa(t,e,n){this.l?function(t,e,n,r){const i=ba(t);ka(t,e,(e=>{xa(t,e,n,r),(e=Aa(t)).drawImage(i.canvas,0,0,e.canvas.width,e.canvas.height)}))}(this,t,e,n):xa(this,t.M(),e,n)}close(){this.g?.close(),this.g=void 0,this.h?.close(),this.h=void 0,this.m?.close(),this.m=void 0}};function Ra(t,e){switch(e){case 0:return t.g.find((t=>t instanceof ImageData));case 1:return t.g.find((t=>\"undefined\"!=typeof ImageBitmap&&t instanceof ImageBitmap));case 2:return t.g.find((t=>\"undefined\"!=typeof WebGLTexture&&t instanceof WebGLTexture));default:throw Error(`Type is not supported: ${e}`)}}function Fa(t){var e=Ra(t,0);if(!e){e=Ma(t);const n=Pa(t),r=new Uint8Array(t.width*t.height*4);ra(n,e,Ia(t)),e.readPixels(0,0,t.width,t.height,e.RGBA,e.UNSIGNED_BYTE,r),ia(n),e=new ImageData(new Uint8ClampedArray(r.buffer),t.width,t.height),t.g.push(e)}return e}function Ia(t){let e=Ra(t,2);if(!e){const n=Ma(t);e=Oa(t);const r=Ra(t,1)||Fa(t);n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,r),Ca(t)}return e}function Ma(t){if(!t.canvas)throw Error(\"Conversion to different image formats require that a canvas is passed when initializing the image.\");return t.h||(t.h=qo(t.canvas.getContext(\"webgl2\"),\"You cannot use a canvas that is already bound to a different type of rendering context.\")),t.h}function Pa(t){return t.l||(t.l=new sa),t.l}function Oa(t){const e=Ma(t);e.viewport(0,0,t.width,t.height),e.activeTexture(e.TEXTURE0);let n=Ra(t,2);return n||(n=na(Pa(t),e),t.g.push(n),t.m=!0),e.bindTexture(e.TEXTURE_2D,n),n}function Ca(t){t.h.bindTexture(t.h.TEXTURE_2D,null)}function Ua(t){const e=Ma(t);return ea(Pa(t),e,!0,(()=>function(t,e){const n=t.canvas;if(n.width===t.width&&n.height===t.height)return e();const r=n.width,i=n.height;return n.width=t.width,n.height=t.height,t=e(),n.width=r,n.height=i,t}(t,(()=>{if(e.bindFramebuffer(e.FRAMEBUFFER,null),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),e.drawArrays(e.TRIANGLE_FAN,0,4),!(t.canvas instanceof OffscreenCanvas))throw Error(\"Conversion to ImageBitmap requires that the MediaPipe Tasks is initialized with an OffscreenCanvas\");return t.canvas.transferToImageBitmap()}))))}La.prototype.close=La.prototype.close,La.prototype.drawConfidenceMask=La.prototype.wa,La.prototype.drawCategoryMask=La.prototype.va,La.prototype.drawBoundingBox=La.prototype.ua,La.prototype.drawConnectors=La.prototype.xa,La.prototype.drawLandmarks=La.prototype.ya,La.lerp=function(t,e,n,r,i){return Ta(r*(1-(t-e)/(n-e))+i*(1-(n-t)/(n-e)),r,i)},La.clamp=Ta;var Da=class{constructor(t,e,n,r,i,s,o){this.g=t,this.j=e,this.m=n,this.canvas=r,this.l=i,this.width=s,this.height=o,(this.j||this.m)&&(0===--Na&&console.error(\"You seem to be creating MPImage instances without invoking .close(). This leaks resources.\"))}Ea(){return!!Ra(this,0)}ka(){return!!Ra(this,1)}P(){return!!Ra(this,2)}Ca(){return Fa(this)}Ba(){var t=Ra(this,1);return t||(Ia(this),Oa(this),t=Ua(this),Ca(this),this.g.push(t),this.j=!0),t}M(){return Ia(this)}clone(){const t=[];for(const e of this.g){let n;if(e instanceof ImageData)n=new ImageData(e.data,this.width,this.height);else if(e instanceof WebGLTexture){const t=Ma(this),e=Pa(this);t.activeTexture(t.TEXTURE1),n=na(e,t),t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,this.width,this.height,0,t.RGBA,t.UNSIGNED_BYTE,null),t.bindTexture(t.TEXTURE_2D,null),ra(e,t,n),ea(e,t,!1,(()=>{Oa(this),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT),t.drawArrays(t.TRIANGLE_FAN,0,4),Ca(this)})),ia(e),Ca(this)}else{if(!(e instanceof ImageBitmap))throw Error(`Type is not supported: ${e}`);Ia(this),Oa(this),n=Ua(this),Ca(this)}t.push(n)}return new Da(t,this.ka(),this.P(),this.canvas,this.l,this.width,this.height)}close(){this.j&&Ra(this,1).close(),this.m&&Ma(this).deleteTexture(Ra(this,2)),Na=-1}};Da.prototype.close=Da.prototype.close,Da.prototype.clone=Da.prototype.clone,Da.prototype.getAsWebGLTexture=Da.prototype.M,Da.prototype.getAsImageBitmap=Da.prototype.Ba,Da.prototype.getAsImageData=Da.prototype.Ca,Da.prototype.hasWebGLTexture=Da.prototype.P,Da.prototype.hasImageBitmap=Da.prototype.ka,Da.prototype.hasImageData=Da.prototype.Ea;var Na=250;function Ba(...t){return t.map((([t,e])=>({start:t,end:e})))}const Ga=function(t){return class extends t{La(){this.i._registerModelResourcesGraphService()}}}((ja=class{constructor(t,e){this.l=!0,this.i=t,this.g=null,this.h=0,this.m=\"function\"==typeof this.i._addIntToInputStream,void 0!==e?this.i.canvas=e:Oo()?this.i.canvas=new OffscreenCanvas(1,1):(console.warn(\"OffscreenCanvas not supported and GraphRunner constructor glCanvas parameter is undefined. Creating backup canvas.\"),this.i.canvas=document.createElement(\"canvas\"))}async initializeGraph(t){const e=await(await fetch(t)).arrayBuffer();t=!(t.endsWith(\".pbtxt\")||t.endsWith(\".textproto\")),this.setGraph(new Uint8Array(e),t)}setGraphFromString(t){this.setGraph((new TextEncoder).encode(t),!1)}setGraph(t,e){const n=t.length,r=this.i._malloc(n);this.i.HEAPU8.set(t,r),e?this.i._changeBinaryGraph(n,r):this.i._changeTextGraph(n,r),this.i._free(r)}configureAudio(t,e,n,r,i){this.i._configureAudio||console.warn('Attempting to use configureAudio without support for input audio. Is build dep \":gl_graph_runner_audio\" missing?'),Do(this,r||\"input_audio\",(r=>{Do(this,i=i||\"audio_header\",(i=>{this.i._configureAudio(r,i,t,e??0,n)}))}))}setAutoResizeCanvas(t){this.l=t}setAutoRenderToScreen(t){this.i._setAutoRenderToScreen(t)}setGpuBufferVerticalFlip(t){this.i.gpuOriginForWebTexturesIsBottomLeft=t}da(t){Go(this,\"__graph_config__\",(e=>{t(e)})),Do(this,\"__graph_config__\",(t=>{this.i._getGraphConfig(t,void 0)})),delete this.i.simpleListeners.__graph_config__}attachErrorListener(t){this.i.errorListener=t}attachEmptyPacketListener(t,e){this.i.emptyPacketListeners=this.i.emptyPacketListeners||{},this.i.emptyPacketListeners[t]=e}addAudioToStream(t,e,n){this.addAudioToStreamWithShape(t,0,0,e,n)}addAudioToStreamWithShape(t,e,n,r,i){const s=4*t.length;this.h!==s&&(this.g&&this.i._free(this.g),this.g=this.i._malloc(s),this.h=s),this.i.HEAPF32.set(t,this.g/4),Do(this,r,(t=>{this.i._addAudioToInputStream(this.g,e,n,t,i)}))}addGpuBufferToStream(t,e,n){Do(this,e,(e=>{const[r,i]=No(this,t,e);this.i._addBoundTextureToStream(e,r,i,n)}))}addBoolToStream(t,e,n){Do(this,e,(e=>{this.i._addBoolToInputStream(t,e,n)}))}addDoubleToStream(t,e,n){Do(this,e,(e=>{this.i._addDoubleToInputStream(t,e,n)}))}addFloatToStream(t,e,n){Do(this,e,(e=>{this.i._addFloatToInputStream(t,e,n)}))}addIntToStream(t,e,n){Do(this,e,(e=>{this.i._addIntToInputStream(t,e,n)}))}addUintToStream(t,e,n){Do(this,e,(e=>{this.i._addUintToInputStream(t,e,n)}))}addStringToStream(t,e,n){Do(this,e,(e=>{Do(this,t,(t=>{this.i._addStringToInputStream(t,e,n)}))}))}addStringRecordToStream(t,e,n){Do(this,e,(e=>{Bo(this,Object.keys(t),(r=>{Bo(this,Object.values(t),(i=>{this.i._addFlatHashMapToInputStream(r,i,Object.keys(t).length,e,n)}))}))}))}addProtoToStream(t,e,n,r){Do(this,n,(n=>{Do(this,e,(e=>{const i=this.i._malloc(t.length);this.i.HEAPU8.set(t,i),this.i._addProtoToInputStream(i,t.length,e,n,r),this.i._free(i)}))}))}addEmptyPacketToStream(t,e){Do(this,t,(t=>{this.i._addEmptyPacketToInputStream(t,e)}))}addBoolVectorToStream(t,e,n){Do(this,e,(e=>{const r=this.i._allocateBoolVector(t.length);if(!r)throw Error(\"Unable to allocate new bool vector on heap.\");for(const e of t)this.i._addBoolVectorEntry(r,e);this.i._addBoolVectorToInputStream(r,e,n)}))}addDoubleVectorToStream(t,e,n){Do(this,e,(e=>{const r=this.i._allocateDoubleVector(t.length);if(!r)throw Error(\"Unable to allocate new double vector on heap.\");for(const e of t)this.i._addDoubleVectorEntry(r,e);this.i._addDoubleVectorToInputStream(r,e,n)}))}addFloatVectorToStream(t,e,n){Do(this,e,(e=>{const r=this.i._allocateFloatVector(t.length);if(!r)throw Error(\"Unable to allocate new float vector on heap.\");for(const e of t)this.i._addFloatVectorEntry(r,e);this.i._addFloatVectorToInputStream(r,e,n)}))}addIntVectorToStream(t,e,n){Do(this,e,(e=>{const r=this.i._allocateIntVector(t.length);if(!r)throw Error(\"Unable to allocate new int vector on heap.\");for(const e of t)this.i._addIntVectorEntry(r,e);this.i._addIntVectorToInputStream(r,e,n)}))}addUintVectorToStream(t,e,n){Do(this,e,(e=>{const r=this.i._allocateUintVector(t.length);if(!r)throw Error(\"Unable to allocate new unsigned int vector on heap.\");for(const e of t)this.i._addUintVectorEntry(r,e);this.i._addUintVectorToInputStream(r,e,n)}))}addStringVectorToStream(t,e,n){Do(this,e,(e=>{const r=this.i._allocateStringVector(t.length);if(!r)throw Error(\"Unable to allocate new string vector on heap.\");for(const e of t)Do(this,e,(t=>{this.i._addStringVectorEntry(r,t)}));this.i._addStringVectorToInputStream(r,e,n)}))}addBoolToInputSidePacket(t,e){Do(this,e,(e=>{this.i._addBoolToInputSidePacket(t,e)}))}addDoubleToInputSidePacket(t,e){Do(this,e,(e=>{this.i._addDoubleToInputSidePacket(t,e)}))}addFloatToInputSidePacket(t,e){Do(this,e,(e=>{this.i._addFloatToInputSidePacket(t,e)}))}addIntToInputSidePacket(t,e){Do(this,e,(e=>{this.i._addIntToInputSidePacket(t,e)}))}addUintToInputSidePacket(t,e){Do(this,e,(e=>{this.i._addUintToInputSidePacket(t,e)}))}addStringToInputSidePacket(t,e){Do(this,e,(e=>{Do(this,t,(t=>{this.i._addStringToInputSidePacket(t,e)}))}))}addProtoToInputSidePacket(t,e,n){Do(this,n,(n=>{Do(this,e,(e=>{const r=this.i._malloc(t.length);this.i.HEAPU8.set(t,r),this.i._addProtoToInputSidePacket(r,t.length,e,n),this.i._free(r)}))}))}addBoolVectorToInputSidePacket(t,e){Do(this,e,(e=>{const n=this.i._allocateBoolVector(t.length);if(!n)throw Error(\"Unable to allocate new bool vector on heap.\");for(const e of t)this.i._addBoolVectorEntry(n,e);this.i._addBoolVectorToInputSidePacket(n,e)}))}addDoubleVectorToInputSidePacket(t,e){Do(this,e,(e=>{const n=this.i._allocateDoubleVector(t.length);if(!n)throw Error(\"Unable to allocate new double vector on heap.\");for(const e of t)this.i._addDoubleVectorEntry(n,e);this.i._addDoubleVectorToInputSidePacket(n,e)}))}addFloatVectorToInputSidePacket(t,e){Do(this,e,(e=>{const n=this.i._allocateFloatVector(t.length);if(!n)throw Error(\"Unable to allocate new float vector on heap.\");for(const e of t)this.i._addFloatVectorEntry(n,e);this.i._addFloatVectorToInputSidePacket(n,e)}))}addIntVectorToInputSidePacket(t,e){Do(this,e,(e=>{const n=this.i._allocateIntVector(t.length);if(!n)throw Error(\"Unable to allocate new int vector on heap.\");for(const e of t)this.i._addIntVectorEntry(n,e);this.i._addIntVectorToInputSidePacket(n,e)}))}addUintVectorToInputSidePacket(t,e){Do(this,e,(e=>{const n=this.i._allocateUintVector(t.length);if(!n)throw Error(\"Unable to allocate new unsigned int vector on heap.\");for(const e of t)this.i._addUintVectorEntry(n,e);this.i._addUintVectorToInputSidePacket(n,e)}))}addStringVectorToInputSidePacket(t,e){Do(this,e,(e=>{const n=this.i._allocateStringVector(t.length);if(!n)throw Error(\"Unable to allocate new string vector on heap.\");for(const e of t)Do(this,e,(t=>{this.i._addStringVectorEntry(n,t)}));this.i._addStringVectorToInputSidePacket(n,e)}))}attachBoolListener(t,e){Go(this,t,e),Do(this,t,(t=>{this.i._attachBoolListener(t)}))}attachBoolVectorListener(t,e){jo(this,t,e),Do(this,t,(t=>{this.i._attachBoolVectorListener(t)}))}attachIntListener(t,e){Go(this,t,e),Do(this,t,(t=>{this.i._attachIntListener(t)}))}attachIntVectorListener(t,e){jo(this,t,e),Do(this,t,(t=>{this.i._attachIntVectorListener(t)}))}attachUintListener(t,e){Go(this,t,e),Do(this,t,(t=>{this.i._attachUintListener(t)}))}attachUintVectorListener(t,e){jo(this,t,e),Do(this,t,(t=>{this.i._attachUintVectorListener(t)}))}attachDoubleListener(t,e){Go(this,t,e),Do(this,t,(t=>{this.i._attachDoubleListener(t)}))}attachDoubleVectorListener(t,e){jo(this,t,e),Do(this,t,(t=>{this.i._attachDoubleVectorListener(t)}))}attachFloatListener(t,e){Go(this,t,e),Do(this,t,(t=>{this.i._attachFloatListener(t)}))}attachFloatVectorListener(t,e){jo(this,t,e),Do(this,t,(t=>{this.i._attachFloatVectorListener(t)}))}attachStringListener(t,e){Go(this,t,e),Do(this,t,(t=>{this.i._attachStringListener(t)}))}attachStringVectorListener(t,e){jo(this,t,e),Do(this,t,(t=>{this.i._attachStringVectorListener(t)}))}attachProtoListener(t,e,n){Go(this,t,e),Do(this,t,(t=>{this.i._attachProtoListener(t,n||!1)}))}attachProtoVectorListener(t,e,n){jo(this,t,e),Do(this,t,(t=>{this.i._attachProtoVectorListener(t,n||!1)}))}attachAudioListener(t,e,n){this.i._attachAudioListener||console.warn('Attempting to use attachAudioListener without support for output audio. Is build dep \":gl_graph_runner_audio_out\" missing?'),Go(this,t,((t,n)=>{t=new Float32Array(t.buffer,t.byteOffset,t.length/4),e(t,n)})),Do(this,t,(t=>{this.i._attachAudioListener(t,n||!1)}))}finishProcessing(){this.i._waitUntilIdle()}closeGraph(){this.i._closeGraph(),this.i.simpleListeners=void 0,this.i.emptyPacketListeners=void 0}},class extends ja{get ea(){return this.i}qa(t,e,n){Do(this,e,(e=>{const[r,i]=No(this,t,e);this.ea._addBoundTextureAsImageToStream(e,r,i,n)}))}U(t,e){Go(this,t,e),Do(this,t,(t=>{this.ea._attachImageListener(t)}))}ca(t,e){jo(this,t,e),Do(this,t,(t=>{this.ea._attachImageVectorListener(t)}))}}));var ja,Va=class extends Ga{};async function Xa(t,e,n){return async function(t,e,n,r){return Vo(t,e,n,r)}(t,n.canvas??(Oo()?void 0:document.createElement(\"canvas\")),e,n)}function Ha(t,e,n,r){if(t.T){const s=new fs;if(n?.regionOfInterest){if(!t.pa)throw Error(\"This task doesn't support region-of-interest.\");var i=n.regionOfInterest;if(i.left>=i.right||i.top>=i.bottom)throw Error(\"Expected RectF with left < right and top < bottom.\");if(i.left<0||i.top<0||i.right>1||i.bottom>1)throw Error(\"Expected RectF values to be in [0,1].\");gn(s,1,(i.left+i.right)/2),gn(s,2,(i.top+i.bottom)/2),gn(s,4,i.right-i.left),gn(s,3,i.bottom-i.top)}else gn(s,1,.5),gn(s,2,.5),gn(s,4,1),gn(s,3,1);if(n?.rotationDegrees){if(n?.rotationDegrees%90!=0)throw Error(\"Expected rotation to be a multiple of 90°.\");if(gn(s,5,-Math.PI*n.rotationDegrees/180),n?.rotationDegrees%180!=0){const[t,r]=Uo(e);n=dn(s,3)*r/t,i=dn(s,4)*t/r,gn(s,4,n),gn(s,3,i)}}t.g.addProtoToStream(s.g(),\"mediapipe.NormalizedRect\",t.T,r)}t.g.qa(e,t.aa,r??performance.now()),t.finishProcessing()}function Wa(t,e,n){if(t.baseOptions?.g())throw Error(\"Task is not initialized with image mode. 'runningMode' must be set to 'IMAGE'.\");Ha(t,e,n,t.B+1)}function za(t,e,n,r){if(!t.baseOptions?.g())throw Error(\"Task is not initialized with video mode. 'runningMode' must be set to 'VIDEO'.\");Ha(t,e,n,r)}function Ka(t,e,n,r){var i=e.data;const s=e.width,o=s*(e=e.height);if((i instanceof Uint8Array||i instanceof Float32Array)&&i.length!==o)throw Error(\"Unsupported channel count: \"+i.length/o);return t=new ya([i],n,!1,t.g.i.canvas,t.O,s,e),r?t.clone():t}var Ya=class extends $o{constructor(t,e,n,r){super(t),this.g=t,this.aa=e,this.T=n,this.pa=r,this.O=new sa}l(t,e=!0){if(\"runningMode\"in t&&fn(this.baseOptions,2,!!t.runningMode&&\"IMAGE\"!==t.runningMode),void 0!==t.canvas&&this.g.i.canvas!==t.canvas)throw Error(\"You must create a new task to reset the canvas.\");return super.l(t,e)}close(){this.O.close(),super.close()}};Ya.prototype.close=Ya.prototype.close;var $a=class extends Ya{constructor(t,e){super(new Va(t,e),\"image_in\",\"norm_rect_in\",!1),this.j={detections:[]},sn(t=this.h=new Is,0,1,e=new Ls),gn(this.h,2,.5),gn(this.h,3,.3)}get baseOptions(){return en(this.h,Ls,1)}set baseOptions(t){sn(this.h,0,1,t)}o(t){return\"minDetectionConfidence\"in t&&gn(this.h,2,t.minDetectionConfidence??.5),\"minSuppressionThreshold\"in t&&gn(this.h,3,t.minSuppressionThreshold??.3),this.l(t)}D(t,e){return this.j={detections:[]},Wa(this,t,e),this.j}F(t,e,n){return this.j={detections:[]},za(this,t,n,e),this.j}m(){var t=new qi;Yi(t,\"image_in\"),Yi(t,\"norm_rect_in\"),$i(t,\"detections\");const e=new Di;Xn(e,Ps,this.h);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.face_detector.FaceDetectorGraph\"),ji(n,\"IMAGE:image_in\"),ji(n,\"NORM_RECT:norm_rect_in\"),Vi(n,\"DETECTIONS:detections\"),n.o(e),Ki(t,n),this.g.attachProtoVectorListener(\"detections\",((t,e)=>{for(const e of t)t=os(e),this.j.detections.push(bo(t));Wo(this,e)})),this.g.attachEmptyPacketListener(\"detections\",(t=>{Wo(this,t)})),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};$a.prototype.detectForVideo=$a.prototype.F,$a.prototype.detect=$a.prototype.D,$a.prototype.setOptions=$a.prototype.o,$a.createFromModelPath=async function(t,e){return Xa($a,t,{baseOptions:{modelAssetPath:e}})},$a.createFromModelBuffer=function(t,e){return Xa($a,t,{baseOptions:{modelAssetBuffer:e}})},$a.createFromOptions=function(t,e){return Xa($a,t,e)};var qa=Ba([61,146],[146,91],[91,181],[181,84],[84,17],[17,314],[314,405],[405,321],[321,375],[375,291],[61,185],[185,40],[40,39],[39,37],[37,0],[0,267],[267,269],[269,270],[270,409],[409,291],[78,95],[95,88],[88,178],[178,87],[87,14],[14,317],[317,402],[402,318],[318,324],[324,308],[78,191],[191,80],[80,81],[81,82],[82,13],[13,312],[312,311],[311,310],[310,415],[415,308]),Ja=Ba([263,249],[249,390],[390,373],[373,374],[374,380],[380,381],[381,382],[382,362],[263,466],[466,388],[388,387],[387,386],[386,385],[385,384],[384,398],[398,362]),Za=Ba([276,283],[283,282],[282,295],[295,285],[300,293],[293,334],[334,296],[296,336]),Qa=Ba([474,475],[475,476],[476,477],[477,474]),tc=Ba([33,7],[7,163],[163,144],[144,145],[145,153],[153,154],[154,155],[155,133],[33,246],[246,161],[161,160],[160,159],[159,158],[158,157],[157,173],[173,133]),ec=Ba([46,53],[53,52],[52,65],[65,55],[70,63],[63,105],[105,66],[66,107]),nc=Ba([469,470],[470,471],[471,472],[472,469]),rc=Ba([10,338],[338,297],[297,332],[332,284],[284,251],[251,389],[389,356],[356,454],[454,323],[323,361],[361,288],[288,397],[397,365],[365,379],[379,378],[378,400],[400,377],[377,152],[152,148],[148,176],[176,149],[149,150],[150,136],[136,172],[172,58],[58,132],[132,93],[93,234],[234,127],[127,162],[162,21],[21,54],[54,103],[103,67],[67,109],[109,10]),ic=[...qa,...Ja,...Za,...tc,...ec,...rc],sc=Ba([127,34],[34,139],[139,127],[11,0],[0,37],[37,11],[232,231],[231,120],[120,232],[72,37],[37,39],[39,72],[128,121],[121,47],[47,128],[232,121],[121,128],[128,232],[104,69],[69,67],[67,104],[175,171],[171,148],[148,175],[118,50],[50,101],[101,118],[73,39],[39,40],[40,73],[9,151],[151,108],[108,9],[48,115],[115,131],[131,48],[194,204],[204,211],[211,194],[74,40],[40,185],[185,74],[80,42],[42,183],[183,80],[40,92],[92,186],[186,40],[230,229],[229,118],[118,230],[202,212],[212,214],[214,202],[83,18],[18,17],[17,83],[76,61],[61,146],[146,76],[160,29],[29,30],[30,160],[56,157],[157,173],[173,56],[106,204],[204,194],[194,106],[135,214],[214,192],[192,135],[203,165],[165,98],[98,203],[21,71],[71,68],[68,21],[51,45],[45,4],[4,51],[144,24],[24,23],[23,144],[77,146],[146,91],[91,77],[205,50],[50,187],[187,205],[201,200],[200,18],[18,201],[91,106],[106,182],[182,91],[90,91],[91,181],[181,90],[85,84],[84,17],[17,85],[206,203],[203,36],[36,206],[148,171],[171,140],[140,148],[92,40],[40,39],[39,92],[193,189],[189,244],[244,193],[159,158],[158,28],[28,159],[247,246],[246,161],[161,247],[236,3],[3,196],[196,236],[54,68],[68,104],[104,54],[193,168],[168,8],[8,193],[117,228],[228,31],[31,117],[189,193],[193,55],[55,189],[98,97],[97,99],[99,98],[126,47],[47,100],[100,126],[166,79],[79,218],[218,166],[155,154],[154,26],[26,155],[209,49],[49,131],[131,209],[135,136],[136,150],[150,135],[47,126],[126,217],[217,47],[223,52],[52,53],[53,223],[45,51],[51,134],[134,45],[211,170],[170,140],[140,211],[67,69],[69,108],[108,67],[43,106],[106,91],[91,43],[230,119],[119,120],[120,230],[226,130],[130,247],[247,226],[63,53],[53,52],[52,63],[238,20],[20,242],[242,238],[46,70],[70,156],[156,46],[78,62],[62,96],[96,78],[46,53],[53,63],[63,46],[143,34],[34,227],[227,143],[123,117],[117,111],[111,123],[44,125],[125,19],[19,44],[236,134],[134,51],[51,236],[216,206],[206,205],[205,216],[154,153],[153,22],[22,154],[39,37],[37,167],[167,39],[200,201],[201,208],[208,200],[36,142],[142,100],[100,36],[57,212],[212,202],[202,57],[20,60],[60,99],[99,20],[28,158],[158,157],[157,28],[35,226],[226,113],[113,35],[160,159],[159,27],[27,160],[204,202],[202,210],[210,204],[113,225],[225,46],[46,113],[43,202],[202,204],[204,43],[62,76],[76,77],[77,62],[137,123],[123,116],[116,137],[41,38],[38,72],[72,41],[203,129],[129,142],[142,203],[64,98],[98,240],[240,64],[49,102],[102,64],[64,49],[41,73],[73,74],[74,41],[212,216],[216,207],[207,212],[42,74],[74,184],[184,42],[169,170],[170,211],[211,169],[170,149],[149,176],[176,170],[105,66],[66,69],[69,105],[122,6],[6,168],[168,122],[123,147],[147,187],[187,123],[96,77],[77,90],[90,96],[65,55],[55,107],[107,65],[89,90],[90,180],[180,89],[101,100],[100,120],[120,101],[63,105],[105,104],[104,63],[93,137],[137,227],[227,93],[15,86],[86,85],[85,15],[129,102],[102,49],[49,129],[14,87],[87,86],[86,14],[55,8],[8,9],[9,55],[100,47],[47,121],[121,100],[145,23],[23,22],[22,145],[88,89],[89,179],[179,88],[6,122],[122,196],[196,6],[88,95],[95,96],[96,88],[138,172],[172,136],[136,138],[215,58],[58,172],[172,215],[115,48],[48,219],[219,115],[42,80],[80,81],[81,42],[195,3],[3,51],[51,195],[43,146],[146,61],[61,43],[171,175],[175,199],[199,171],[81,82],[82,38],[38,81],[53,46],[46,225],[225,53],[144,163],[163,110],[110,144],[52,65],[65,66],[66,52],[229,228],[228,117],[117,229],[34,127],[127,234],[234,34],[107,108],[108,69],[69,107],[109,108],[108,151],[151,109],[48,64],[64,235],[235,48],[62,78],[78,191],[191,62],[129,209],[209,126],[126,129],[111,35],[35,143],[143,111],[117,123],[123,50],[50,117],[222,65],[65,52],[52,222],[19,125],[125,141],[141,19],[221,55],[55,65],[65,221],[3,195],[195,197],[197,3],[25,7],[7,33],[33,25],[220,237],[237,44],[44,220],[70,71],[71,139],[139,70],[122,193],[193,245],[245,122],[247,130],[130,33],[33,247],[71,21],[21,162],[162,71],[170,169],[169,150],[150,170],[188,174],[174,196],[196,188],[216,186],[186,92],[92,216],[2,97],[97,167],[167,2],[141,125],[125,241],[241,141],[164,167],[167,37],[37,164],[72,38],[38,12],[12,72],[38,82],[82,13],[13,38],[63,68],[68,71],[71,63],[226,35],[35,111],[111,226],[101,50],[50,205],[205,101],[206,92],[92,165],[165,206],[209,198],[198,217],[217,209],[165,167],[167,97],[97,165],[220,115],[115,218],[218,220],[133,112],[112,243],[243,133],[239,238],[238,241],[241,239],[214,135],[135,169],[169,214],[190,173],[173,133],[133,190],[171,208],[208,32],[32,171],[125,44],[44,237],[237,125],[86,87],[87,178],[178,86],[85,86],[86,179],[179,85],[84,85],[85,180],[180,84],[83,84],[84,181],[181,83],[201,83],[83,182],[182,201],[137,93],[93,132],[132,137],[76,62],[62,183],[183,76],[61,76],[76,184],[184,61],[57,61],[61,185],[185,57],[212,57],[57,186],[186,212],[214,207],[207,187],[187,214],[34,143],[143,156],[156,34],[79,239],[239,237],[237,79],[123,137],[137,177],[177,123],[44,1],[1,4],[4,44],[201,194],[194,32],[32,201],[64,102],[102,129],[129,64],[213,215],[215,138],[138,213],[59,166],[166,219],[219,59],[242,99],[99,97],[97,242],[2,94],[94,141],[141,2],[75,59],[59,235],[235,75],[24,110],[110,228],[228,24],[25,130],[130,226],[226,25],[23,24],[24,229],[229,23],[22,23],[23,230],[230,22],[26,22],[22,231],[231,26],[112,26],[26,232],[232,112],[189,190],[190,243],[243,189],[221,56],[56,190],[190,221],[28,56],[56,221],[221,28],[27,28],[28,222],[222,27],[29,27],[27,223],[223,29],[30,29],[29,224],[224,30],[247,30],[30,225],[225,247],[238,79],[79,20],[20,238],[166,59],[59,75],[75,166],[60,75],[75,240],[240,60],[147,177],[177,215],[215,147],[20,79],[79,166],[166,20],[187,147],[147,213],[213,187],[112,233],[233,244],[244,112],[233,128],[128,245],[245,233],[128,114],[114,188],[188,128],[114,217],[217,174],[174,114],[131,115],[115,220],[220,131],[217,198],[198,236],[236,217],[198,131],[131,134],[134,198],[177,132],[132,58],[58,177],[143,35],[35,124],[124,143],[110,163],[163,7],[7,110],[228,110],[110,25],[25,228],[356,389],[389,368],[368,356],[11,302],[302,267],[267,11],[452,350],[350,349],[349,452],[302,303],[303,269],[269,302],[357,343],[343,277],[277,357],[452,453],[453,357],[357,452],[333,332],[332,297],[297,333],[175,152],[152,377],[377,175],[347,348],[348,330],[330,347],[303,304],[304,270],[270,303],[9,336],[336,337],[337,9],[278,279],[279,360],[360,278],[418,262],[262,431],[431,418],[304,408],[408,409],[409,304],[310,415],[415,407],[407,310],[270,409],[409,410],[410,270],[450,348],[348,347],[347,450],[422,430],[430,434],[434,422],[313,314],[314,17],[17,313],[306,307],[307,375],[375,306],[387,388],[388,260],[260,387],[286,414],[414,398],[398,286],[335,406],[406,418],[418,335],[364,367],[367,416],[416,364],[423,358],[358,327],[327,423],[251,284],[284,298],[298,251],[281,5],[5,4],[4,281],[373,374],[374,253],[253,373],[307,320],[320,321],[321,307],[425,427],[427,411],[411,425],[421,313],[313,18],[18,421],[321,405],[405,406],[406,321],[320,404],[404,405],[405,320],[315,16],[16,17],[17,315],[426,425],[425,266],[266,426],[377,400],[400,369],[369,377],[322,391],[391,269],[269,322],[417,465],[465,464],[464,417],[386,257],[257,258],[258,386],[466,260],[260,388],[388,466],[456,399],[399,419],[419,456],[284,332],[332,333],[333,284],[417,285],[285,8],[8,417],[346,340],[340,261],[261,346],[413,441],[441,285],[285,413],[327,460],[460,328],[328,327],[355,371],[371,329],[329,355],[392,439],[439,438],[438,392],[382,341],[341,256],[256,382],[429,420],[420,360],[360,429],[364,394],[394,379],[379,364],[277,343],[343,437],[437,277],[443,444],[444,283],[283,443],[275,440],[440,363],[363,275],[431,262],[262,369],[369,431],[297,338],[338,337],[337,297],[273,375],[375,321],[321,273],[450,451],[451,349],[349,450],[446,342],[342,467],[467,446],[293,334],[334,282],[282,293],[458,461],[461,462],[462,458],[276,353],[353,383],[383,276],[308,324],[324,325],[325,308],[276,300],[300,293],[293,276],[372,345],[345,447],[447,372],[352,345],[345,340],[340,352],[274,1],[1,19],[19,274],[456,248],[248,281],[281,456],[436,427],[427,425],[425,436],[381,256],[256,252],[252,381],[269,391],[391,393],[393,269],[200,199],[199,428],[428,200],[266,330],[330,329],[329,266],[287,273],[273,422],[422,287],[250,462],[462,328],[328,250],[258,286],[286,384],[384,258],[265,353],[353,342],[342,265],[387,259],[259,257],[257,387],[424,431],[431,430],[430,424],[342,353],[353,276],[276,342],[273,335],[335,424],[424,273],[292,325],[325,307],[307,292],[366,447],[447,345],[345,366],[271,303],[303,302],[302,271],[423,266],[266,371],[371,423],[294,455],[455,460],[460,294],[279,278],[278,294],[294,279],[271,272],[272,304],[304,271],[432,434],[434,427],[427,432],[272,407],[407,408],[408,272],[394,430],[430,431],[431,394],[395,369],[369,400],[400,395],[334,333],[333,299],[299,334],[351,417],[417,168],[168,351],[352,280],[280,411],[411,352],[325,319],[319,320],[320,325],[295,296],[296,336],[336,295],[319,403],[403,404],[404,319],[330,348],[348,349],[349,330],[293,298],[298,333],[333,293],[323,454],[454,447],[447,323],[15,16],[16,315],[315,15],[358,429],[429,279],[279,358],[14,15],[15,316],[316,14],[285,336],[336,9],[9,285],[329,349],[349,350],[350,329],[374,380],[380,252],[252,374],[318,402],[402,403],[403,318],[6,197],[197,419],[419,6],[318,319],[319,325],[325,318],[367,364],[364,365],[365,367],[435,367],[367,397],[397,435],[344,438],[438,439],[439,344],[272,271],[271,311],[311,272],[195,5],[5,281],[281,195],[273,287],[287,291],[291,273],[396,428],[428,199],[199,396],[311,271],[271,268],[268,311],[283,444],[444,445],[445,283],[373,254],[254,339],[339,373],[282,334],[334,296],[296,282],[449,347],[347,346],[346,449],[264,447],[447,454],[454,264],[336,296],[296,299],[299,336],[338,10],[10,151],[151,338],[278,439],[439,455],[455,278],[292,407],[407,415],[415,292],[358,371],[371,355],[355,358],[340,345],[345,372],[372,340],[346,347],[347,280],[280,346],[442,443],[443,282],[282,442],[19,94],[94,370],[370,19],[441,442],[442,295],[295,441],[248,419],[419,197],[197,248],[263,255],[255,359],[359,263],[440,275],[275,274],[274,440],[300,383],[383,368],[368,300],[351,412],[412,465],[465,351],[263,467],[467,466],[466,263],[301,368],[368,389],[389,301],[395,378],[378,379],[379,395],[412,351],[351,419],[419,412],[436,426],[426,322],[322,436],[2,164],[164,393],[393,2],[370,462],[462,461],[461,370],[164,0],[0,267],[267,164],[302,11],[11,12],[12,302],[268,12],[12,13],[13,268],[293,300],[300,301],[301,293],[446,261],[261,340],[340,446],[330,266],[266,425],[425,330],[426,423],[423,391],[391,426],[429,355],[355,437],[437,429],[391,327],[327,326],[326,391],[440,457],[457,438],[438,440],[341,382],[382,362],[362,341],[459,457],[457,461],[461,459],[434,430],[430,394],[394,434],[414,463],[463,362],[362,414],[396,369],[369,262],[262,396],[354,461],[461,457],[457,354],[316,403],[403,402],[402,316],[315,404],[404,403],[403,315],[314,405],[405,404],[404,314],[313,406],[406,405],[405,313],[421,418],[418,406],[406,421],[366,401],[401,361],[361,366],[306,408],[408,407],[407,306],[291,409],[409,408],[408,291],[287,410],[410,409],[409,287],[432,436],[436,410],[410,432],[434,416],[416,411],[411,434],[264,368],[368,383],[383,264],[309,438],[438,457],[457,309],[352,376],[376,401],[401,352],[274,275],[275,4],[4,274],[421,428],[428,262],[262,421],[294,327],[327,358],[358,294],[433,416],[416,367],[367,433],[289,455],[455,439],[439,289],[462,370],[370,326],[326,462],[2,326],[326,370],[370,2],[305,460],[460,455],[455,305],[254,449],[449,448],[448,254],[255,261],[261,446],[446,255],[253,450],[450,449],[449,253],[252,451],[451,450],[450,252],[256,452],[452,451],[451,256],[341,453],[453,452],[452,341],[413,464],[464,463],[463,413],[441,413],[413,414],[414,441],[258,442],[442,441],[441,258],[257,443],[443,442],[442,257],[259,444],[444,443],[443,259],[260,445],[445,444],[444,260],[467,342],[342,445],[445,467],[459,458],[458,250],[250,459],[289,392],[392,290],[290,289],[290,328],[328,460],[460,290],[376,433],[433,435],[435,376],[250,290],[290,392],[392,250],[411,416],[416,433],[433,411],[341,463],[463,464],[464,341],[453,464],[464,465],[465,453],[357,465],[465,412],[412,357],[343,412],[412,399],[399,343],[360,363],[363,440],[440,360],[437,399],[399,456],[456,437],[420,456],[456,363],[363,420],[401,435],[435,288],[288,401],[372,383],[383,353],[353,372],[339,255],[255,249],[249,339],[448,261],[261,255],[255,448],[133,243],[243,190],[190,133],[133,155],[155,112],[112,133],[33,246],[246,247],[247,33],[33,130],[130,25],[25,33],[398,384],[384,286],[286,398],[362,398],[398,414],[414,362],[362,463],[463,341],[341,362],[263,359],[359,467],[467,263],[263,249],[249,255],[255,263],[466,467],[467,260],[260,466],[75,60],[60,166],[166,75],[238,239],[239,79],[79,238],[162,127],[127,139],[139,162],[72,11],[11,37],[37,72],[121,232],[232,120],[120,121],[73,72],[72,39],[39,73],[114,128],[128,47],[47,114],[233,232],[232,128],[128,233],[103,104],[104,67],[67,103],[152,175],[175,148],[148,152],[119,118],[118,101],[101,119],[74,73],[73,40],[40,74],[107,9],[9,108],[108,107],[49,48],[48,131],[131,49],[32,194],[194,211],[211,32],[184,74],[74,185],[185,184],[191,80],[80,183],[183,191],[185,40],[40,186],[186,185],[119,230],[230,118],[118,119],[210,202],[202,214],[214,210],[84,83],[83,17],[17,84],[77,76],[76,146],[146,77],[161,160],[160,30],[30,161],[190,56],[56,173],[173,190],[182,106],[106,194],[194,182],[138,135],[135,192],[192,138],[129,203],[203,98],[98,129],[54,21],[21,68],[68,54],[5,51],[51,4],[4,5],[145,144],[144,23],[23,145],[90,77],[77,91],[91,90],[207,205],[205,187],[187,207],[83,201],[201,18],[18,83],[181,91],[91,182],[182,181],[180,90],[90,181],[181,180],[16,85],[85,17],[17,16],[205,206],[206,36],[36,205],[176,148],[148,140],[140,176],[165,92],[92,39],[39,165],[245,193],[193,244],[244,245],[27,159],[159,28],[28,27],[30,247],[247,161],[161,30],[174,236],[236,196],[196,174],[103,54],[54,104],[104,103],[55,193],[193,8],[8,55],[111,117],[117,31],[31,111],[221,189],[189,55],[55,221],[240,98],[98,99],[99,240],[142,126],[126,100],[100,142],[219,166],[166,218],[218,219],[112,155],[155,26],[26,112],[198,209],[209,131],[131,198],[169,135],[135,150],[150,169],[114,47],[47,217],[217,114],[224,223],[223,53],[53,224],[220,45],[45,134],[134,220],[32,211],[211,140],[140,32],[109,67],[67,108],[108,109],[146,43],[43,91],[91,146],[231,230],[230,120],[120,231],[113,226],[226,247],[247,113],[105,63],[63,52],[52,105],[241,238],[238,242],[242,241],[124,46],[46,156],[156,124],[95,78],[78,96],[96,95],[70,46],[46,63],[63,70],[116,143],[143,227],[227,116],[116,123],[123,111],[111,116],[1,44],[44,19],[19,1],[3,236],[236,51],[51,3],[207,216],[216,205],[205,207],[26,154],[154,22],[22,26],[165,39],[39,167],[167,165],[199,200],[200,208],[208,199],[101,36],[36,100],[100,101],[43,57],[57,202],[202,43],[242,20],[20,99],[99,242],[56,28],[28,157],[157,56],[124,35],[35,113],[113,124],[29,160],[160,27],[27,29],[211,204],[204,210],[210,211],[124,113],[113,46],[46,124],[106,43],[43,204],[204,106],[96,62],[62,77],[77,96],[227,137],[137,116],[116,227],[73,41],[41,72],[72,73],[36,203],[203,142],[142,36],[235,64],[64,240],[240,235],[48,49],[49,64],[64,48],[42,41],[41,74],[74,42],[214,212],[212,207],[207,214],[183,42],[42,184],[184,183],[210,169],[169,211],[211,210],[140,170],[170,176],[176,140],[104,105],[105,69],[69,104],[193,122],[122,168],[168,193],[50,123],[123,187],[187,50],[89,96],[96,90],[90,89],[66,65],[65,107],[107,66],[179,89],[89,180],[180,179],[119,101],[101,120],[120,119],[68,63],[63,104],[104,68],[234,93],[93,227],[227,234],[16,15],[15,85],[85,16],[209,129],[129,49],[49,209],[15,14],[14,86],[86,15],[107,55],[55,9],[9,107],[120,100],[100,121],[121,120],[153,145],[145,22],[22,153],[178,88],[88,179],[179,178],[197,6],[6,196],[196,197],[89,88],[88,96],[96,89],[135,138],[138,136],[136,135],[138,215],[215,172],[172,138],[218,115],[115,219],[219,218],[41,42],[42,81],[81,41],[5,195],[195,51],[51,5],[57,43],[43,61],[61,57],[208,171],[171,199],[199,208],[41,81],[81,38],[38,41],[224,53],[53,225],[225,224],[24,144],[144,110],[110,24],[105,52],[52,66],[66,105],[118,229],[229,117],[117,118],[227,34],[34,234],[234,227],[66,107],[107,69],[69,66],[10,109],[109,151],[151,10],[219,48],[48,235],[235,219],[183,62],[62,191],[191,183],[142,129],[129,126],[126,142],[116,111],[111,143],[143,116],[118,117],[117,50],[50,118],[223,222],[222,52],[52,223],[94,19],[19,141],[141,94],[222,221],[221,65],[65,222],[196,3],[3,197],[197,196],[45,220],[220,44],[44,45],[156,70],[70,139],[139,156],[188,122],[122,245],[245,188],[139,71],[71,162],[162,139],[149,170],[170,150],[150,149],[122,188],[188,196],[196,122],[206,216],[216,92],[92,206],[164,2],[2,167],[167,164],[242,141],[141,241],[241,242],[0,164],[164,37],[37,0],[11,72],[72,12],[12,11],[12,38],[38,13],[13,12],[70,63],[63,71],[71,70],[31,226],[226,111],[111,31],[36,101],[101,205],[205,36],[203,206],[206,165],[165,203],[126,209],[209,217],[217,126],[98,165],[165,97],[97,98],[237,220],[220,218],[218,237],[237,239],[239,241],[241,237],[210,214],[214,169],[169,210],[140,171],[171,32],[32,140],[241,125],[125,237],[237,241],[179,86],[86,178],[178,179],[180,85],[85,179],[179,180],[181,84],[84,180],[180,181],[182,83],[83,181],[181,182],[194,201],[201,182],[182,194],[177,137],[137,132],[132,177],[184,76],[76,183],[183,184],[185,61],[61,184],[184,185],[186,57],[57,185],[185,186],[216,212],[212,186],[186,216],[192,214],[214,187],[187,192],[139,34],[34,156],[156,139],[218,79],[79,237],[237,218],[147,123],[123,177],[177,147],[45,44],[44,4],[4,45],[208,201],[201,32],[32,208],[98,64],[64,129],[129,98],[192,213],[213,138],[138,192],[235,59],[59,219],[219,235],[141,242],[242,97],[97,141],[97,2],[2,141],[141,97],[240,75],[75,235],[235,240],[229,24],[24,228],[228,229],[31,25],[25,226],[226,31],[230,23],[23,229],[229,230],[231,22],[22,230],[230,231],[232,26],[26,231],[231,232],[233,112],[112,232],[232,233],[244,189],[189,243],[243,244],[189,221],[221,190],[190,189],[222,28],[28,221],[221,222],[223,27],[27,222],[222,223],[224,29],[29,223],[223,224],[225,30],[30,224],[224,225],[113,247],[247,225],[225,113],[99,60],[60,240],[240,99],[213,147],[147,215],[215,213],[60,20],[20,166],[166,60],[192,187],[187,213],[213,192],[243,112],[112,244],[244,243],[244,233],[233,245],[245,244],[245,128],[128,188],[188,245],[188,114],[114,174],[174,188],[134,131],[131,220],[220,134],[174,217],[217,236],[236,174],[236,198],[198,134],[134,236],[215,177],[177,58],[58,215],[156,143],[143,124],[124,156],[25,110],[110,7],[7,25],[31,228],[228,25],[25,31],[264,356],[356,368],[368,264],[0,11],[11,267],[267,0],[451,452],[452,349],[349,451],[267,302],[302,269],[269,267],[350,357],[357,277],[277,350],[350,452],[452,357],[357,350],[299,333],[333,297],[297,299],[396,175],[175,377],[377,396],[280,347],[347,330],[330,280],[269,303],[303,270],[270,269],[151,9],[9,337],[337,151],[344,278],[278,360],[360,344],[424,418],[418,431],[431,424],[270,304],[304,409],[409,270],[272,310],[310,407],[407,272],[322,270],[270,410],[410,322],[449,450],[450,347],[347,449],[432,422],[422,434],[434,432],[18,313],[313,17],[17,18],[291,306],[306,375],[375,291],[259,387],[387,260],[260,259],[424,335],[335,418],[418,424],[434,364],[364,416],[416,434],[391,423],[423,327],[327,391],[301,251],[251,298],[298,301],[275,281],[281,4],[4,275],[254,373],[373,253],[253,254],[375,307],[307,321],[321,375],[280,425],[425,411],[411,280],[200,421],[421,18],[18,200],[335,321],[321,406],[406,335],[321,320],[320,405],[405,321],[314,315],[315,17],[17,314],[423,426],[426,266],[266,423],[396,377],[377,369],[369,396],[270,322],[322,269],[269,270],[413,417],[417,464],[464,413],[385,386],[386,258],[258,385],[248,456],[456,419],[419,248],[298,284],[284,333],[333,298],[168,417],[417,8],[8,168],[448,346],[346,261],[261,448],[417,413],[413,285],[285,417],[326,327],[327,328],[328,326],[277,355],[355,329],[329,277],[309,392],[392,438],[438,309],[381,382],[382,256],[256,381],[279,429],[429,360],[360,279],[365,364],[364,379],[379,365],[355,277],[277,437],[437,355],[282,443],[443,283],[283,282],[281,275],[275,363],[363,281],[395,431],[431,369],[369,395],[299,297],[297,337],[337,299],[335,273],[273,321],[321,335],[348,450],[450,349],[349,348],[359,446],[446,467],[467,359],[283,293],[293,282],[282,283],[250,458],[458,462],[462,250],[300,276],[276,383],[383,300],[292,308],[308,325],[325,292],[283,276],[276,293],[293,283],[264,372],[372,447],[447,264],[346,352],[352,340],[340,346],[354,274],[274,19],[19,354],[363,456],[456,281],[281,363],[426,436],[436,425],[425,426],[380,381],[381,252],[252,380],[267,269],[269,393],[393,267],[421,200],[200,428],[428,421],[371,266],[266,329],[329,371],[432,287],[287,422],[422,432],[290,250],[250,328],[328,290],[385,258],[258,384],[384,385],[446,265],[265,342],[342,446],[386,387],[387,257],[257,386],[422,424],[424,430],[430,422],[445,342],[342,276],[276,445],[422,273],[273,424],[424,422],[306,292],[292,307],[307,306],[352,366],[366,345],[345,352],[268,271],[271,302],[302,268],[358,423],[423,371],[371,358],[327,294],[294,460],[460,327],[331,279],[279,294],[294,331],[303,271],[271,304],[304,303],[436,432],[432,427],[427,436],[304,272],[272,408],[408,304],[395,394],[394,431],[431,395],[378,395],[395,400],[400,378],[296,334],[334,299],[299,296],[6,351],[351,168],[168,6],[376,352],[352,411],[411,376],[307,325],[325,320],[320,307],[285,295],[295,336],[336,285],[320,319],[319,404],[404,320],[329,330],[330,349],[349,329],[334,293],[293,333],[333,334],[366,323],[323,447],[447,366],[316,15],[15,315],[315,316],[331,358],[358,279],[279,331],[317,14],[14,316],[316,317],[8,285],[285,9],[9,8],[277,329],[329,350],[350,277],[253,374],[374,252],[252,253],[319,318],[318,403],[403,319],[351,6],[6,419],[419,351],[324,318],[318,325],[325,324],[397,367],[367,365],[365,397],[288,435],[435,397],[397,288],[278,344],[344,439],[439,278],[310,272],[272,311],[311,310],[248,195],[195,281],[281,248],[375,273],[273,291],[291,375],[175,396],[396,199],[199,175],[312,311],[311,268],[268,312],[276,283],[283,445],[445,276],[390,373],[373,339],[339,390],[295,282],[282,296],[296,295],[448,449],[449,346],[346,448],[356,264],[264,454],[454,356],[337,336],[336,299],[299,337],[337,338],[338,151],[151,337],[294,278],[278,455],[455,294],[308,292],[292,415],[415,308],[429,358],[358,355],[355,429],[265,340],[340,372],[372,265],[352,346],[346,280],[280,352],[295,442],[442,282],[282,295],[354,19],[19,370],[370,354],[285,441],[441,295],[295,285],[195,248],[248,197],[197,195],[457,440],[440,274],[274,457],[301,300],[300,368],[368,301],[417,351],[351,465],[465,417],[251,301],[301,389],[389,251],[394,395],[395,379],[379,394],[399,412],[412,419],[419,399],[410,436],[436,322],[322,410],[326,2],[2,393],[393,326],[354,370],[370,461],[461,354],[393,164],[164,267],[267,393],[268,302],[302,12],[12,268],[312,268],[268,13],[13,312],[298,293],[293,301],[301,298],[265,446],[446,340],[340,265],[280,330],[330,425],[425,280],[322,426],[426,391],[391,322],[420,429],[429,437],[437,420],[393,391],[391,326],[326,393],[344,440],[440,438],[438,344],[458,459],[459,461],[461,458],[364,434],[434,394],[394,364],[428,396],[396,262],[262,428],[274,354],[354,457],[457,274],[317,316],[316,402],[402,317],[316,315],[315,403],[403,316],[315,314],[314,404],[404,315],[314,313],[313,405],[405,314],[313,421],[421,406],[406,313],[323,366],[366,361],[361,323],[292,306],[306,407],[407,292],[306,291],[291,408],[408,306],[291,287],[287,409],[409,291],[287,432],[432,410],[410,287],[427,434],[434,411],[411,427],[372,264],[264,383],[383,372],[459,309],[309,457],[457,459],[366,352],[352,401],[401,366],[1,274],[274,4],[4,1],[418,421],[421,262],[262,418],[331,294],[294,358],[358,331],[435,433],[433,367],[367,435],[392,289],[289,439],[439,392],[328,462],[462,326],[326,328],[94,2],[2,370],[370,94],[289,305],[305,455],[455,289],[339,254],[254,448],[448,339],[359,255],[255,446],[446,359],[254,253],[253,449],[449,254],[253,252],[252,450],[450,253],[252,256],[256,451],[451,252],[256,341],[341,452],[452,256],[414,413],[413,463],[463,414],[286,441],[441,414],[414,286],[286,258],[258,441],[441,286],[258,257],[257,442],[442,258],[257,259],[259,443],[443,257],[259,260],[260,444],[444,259],[260,467],[467,445],[445,260],[309,459],[459,250],[250,309],[305,289],[289,290],[290,305],[305,290],[290,460],[460,305],[401,376],[376,435],[435,401],[309,250],[250,392],[392,309],[376,411],[411,433],[433,376],[453,341],[341,464],[464,453],[357,453],[453,465],[465,357],[343,357],[357,412],[412,343],[437,343],[343,399],[399,437],[344,360],[360,440],[440,344],[420,437],[437,456],[456,420],[360,420],[420,363],[363,360],[361,401],[401,288],[288,361],[265,372],[372,353],[353,265],[390,339],[339,249],[249,390],[339,448],[448,255],[255,339]);function oc(t){t.j={faceLandmarks:[],faceBlendshapes:[],facialTransformationMatrixes:[]}}var ac=class extends Ya{constructor(t,e){super(new Va(t,e),\"image_in\",\"norm_rect\",!1),this.j={faceLandmarks:[],faceBlendshapes:[],facialTransformationMatrixes:[]},this.outputFacialTransformationMatrixes=this.outputFaceBlendshapes=!1,sn(t=this.h=new Us,0,1,e=new Ls),this.v=new Cs,sn(this.h,0,3,this.v),this.s=new Is,sn(this.h,0,2,this.s),pn(this.s,4,1),gn(this.s,2,.5),gn(this.v,2,.5),gn(this.h,4,.5)}get baseOptions(){return en(this.h,Ls,1)}set baseOptions(t){sn(this.h,0,1,t)}o(t){return\"numFaces\"in t&&pn(this.s,4,t.numFaces??1),\"minFaceDetectionConfidence\"in t&&gn(this.s,2,t.minFaceDetectionConfidence??.5),\"minTrackingConfidence\"in t&&gn(this.h,4,t.minTrackingConfidence??.5),\"minFacePresenceConfidence\"in t&&gn(this.v,2,t.minFacePresenceConfidence??.5),\"outputFaceBlendshapes\"in t&&(this.outputFaceBlendshapes=!!t.outputFaceBlendshapes),\"outputFacialTransformationMatrixes\"in t&&(this.outputFacialTransformationMatrixes=!!t.outputFacialTransformationMatrixes),this.l(t)}D(t,e){return oc(this),Wa(this,t,e),this.j}F(t,e,n){return oc(this),za(this,t,n,e),this.j}m(){var t=new qi;Yi(t,\"image_in\"),Yi(t,\"norm_rect\"),$i(t,\"face_landmarks\");const e=new Di;Xn(e,Bs,this.h);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.face_landmarker.FaceLandmarkerGraph\"),ji(n,\"IMAGE:image_in\"),ji(n,\"NORM_RECT:norm_rect\"),Vi(n,\"NORM_LANDMARKS:face_landmarks\"),n.o(e),Ki(t,n),this.g.attachProtoVectorListener(\"face_landmarks\",((t,e)=>{for(const e of t)t=us(e),this.j.faceLandmarks.push(ko(t));Wo(this,e)})),this.g.attachEmptyPacketListener(\"face_landmarks\",(t=>{Wo(this,t)})),this.outputFaceBlendshapes&&($i(t,\"blendshapes\"),Vi(n,\"BLENDSHAPES:blendshapes\"),this.g.attachProtoVectorListener(\"blendshapes\",((t,e)=>{if(this.outputFaceBlendshapes)for(const e of t)t=ns(e),this.j.faceBlendshapes.push(Ao(t.g()??[]));Wo(this,e)})),this.g.attachEmptyPacketListener(\"blendshapes\",(t=>{Wo(this,t)}))),this.outputFacialTransformationMatrixes&&($i(t,\"face_geometry\"),Vi(n,\"FACE_GEOMETRY:face_geometry\"),this.g.attachProtoVectorListener(\"face_geometry\",((t,e)=>{if(this.outputFacialTransformationMatrixes)for(const e of t)(t=en(Os(e),ls,2))&&this.j.facialTransformationMatrixes.push({rows:un(t,1)??0??0,columns:un(t,2)??0??0,data:Ve(t,3,$t,je()).slice()??[]});Wo(this,e)})),this.g.attachEmptyPacketListener(\"face_geometry\",(t=>{Wo(this,t)}))),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};ac.prototype.detectForVideo=ac.prototype.F,ac.prototype.detect=ac.prototype.D,ac.prototype.setOptions=ac.prototype.o,ac.createFromModelPath=function(t,e){return Xa(ac,t,{baseOptions:{modelAssetPath:e}})},ac.createFromModelBuffer=function(t,e){return Xa(ac,t,{baseOptions:{modelAssetBuffer:e}})},ac.createFromOptions=function(t,e){return Xa(ac,t,e)},ac.FACE_LANDMARKS_LIPS=qa,ac.FACE_LANDMARKS_LEFT_EYE=Ja,ac.FACE_LANDMARKS_LEFT_EYEBROW=Za,ac.FACE_LANDMARKS_LEFT_IRIS=Qa,ac.FACE_LANDMARKS_RIGHT_EYE=tc,ac.FACE_LANDMARKS_RIGHT_EYEBROW=ec,ac.FACE_LANDMARKS_RIGHT_IRIS=nc,ac.FACE_LANDMARKS_FACE_OVAL=rc,ac.FACE_LANDMARKS_CONTOURS=ic,ac.FACE_LANDMARKS_TESSELATION=sc;var cc=class extends Ya{constructor(t,e){super(new Va(t,e),\"image_in\",\"norm_rect\",!0),sn(t=this.j=new Gs,0,1,e=new Ls)}get baseOptions(){return en(this.j,Ls,1)}set baseOptions(t){sn(this.j,0,1,t)}o(t){return super.l(t)}Oa(t,e,n){const r=\"function\"!=typeof e?e:{};if(this.h=\"function\"==typeof e?e:n,Wa(this,t,r??{}),!this.h)return this.s}m(){var t=new qi;Yi(t,\"image_in\"),Yi(t,\"norm_rect\"),$i(t,\"stylized_image\");const e=new Di;Xn(e,js,this.j);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.face_stylizer.FaceStylizerGraph\"),ji(n,\"IMAGE:image_in\"),ji(n,\"NORM_RECT:norm_rect\"),Vi(n,\"STYLIZED_IMAGE:stylized_image\"),n.o(e),Ki(t,n),this.g.U(\"stylized_image\",((t,e)=>{var n=!this.h,r=t.data,i=t.width;const s=i*(t=t.height);if(r instanceof Uint8Array)if(r.length===3*s){const e=new Uint8ClampedArray(4*s);for(let t=0;t<s;++t)e[4*t]=r[3*t],e[4*t+1]=r[3*t+1],e[4*t+2]=r[3*t+2],e[4*t+3]=255;r=new ImageData(e,i,t)}else{if(r.length!==4*s)throw Error(\"Unsupported channel count: \"+r.length/s);r=new ImageData(new Uint8ClampedArray(r.buffer,r.byteOffset,r.length),i,t)}else if(!(r instanceof WebGLTexture))throw Error(`Unsupported format: ${r.constructor.name}`);i=new Da([r],!1,!1,this.g.i.canvas,this.O,i,t),this.s=n=n?i.clone():i,this.h&&this.h(n),Wo(this,e)})),this.g.attachEmptyPacketListener(\"stylized_image\",(t=>{this.s=null,this.h&&this.h(null),Wo(this,t)})),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};cc.prototype.stylize=cc.prototype.Oa,cc.prototype.setOptions=cc.prototype.o,cc.createFromModelPath=function(t,e){return Xa(cc,t,{baseOptions:{modelAssetPath:e}})},cc.createFromModelBuffer=function(t,e){return Xa(cc,t,{baseOptions:{modelAssetBuffer:e}})},cc.createFromOptions=function(t,e){return Xa(cc,t,e)};var hc=Ba([0,1],[1,2],[2,3],[3,4],[0,5],[5,6],[6,7],[7,8],[5,9],[9,10],[10,11],[11,12],[9,13],[13,14],[14,15],[15,16],[13,17],[0,17],[17,18],[18,19],[19,20]);function uc(t){t.gestures=[],t.landmarks=[],t.worldLandmarks=[],t.handedness=[]}function lc(t){return 0===t.gestures.length?{gestures:[],landmarks:[],worldLandmarks:[],handedness:[],handednesses:[]}:{gestures:t.gestures,landmarks:t.landmarks,worldLandmarks:t.worldLandmarks,handedness:t.handedness,handednesses:t.handedness}}function dc(t,e=!0){const n=[];for(const i of t){var r=ns(i);t=[];for(const n of r.g())r=e&&null!=un(n,1)?un(n,1)??0:-1,t.push({score:dn(n,2)??0,index:r,categoryName:ln(n,3)??\"\"??\"\",displayName:ln(n,4)??\"\"??\"\"});n.push(t)}return n}var fc=class extends Ya{constructor(t,e){super(new Va(t,e),\"image_in\",\"norm_rect\",!1),this.gestures=[],this.landmarks=[],this.worldLandmarks=[],this.handedness=[],sn(t=this.j=new Ys,0,1,e=new Ls),this.s=new Ks,sn(this.j,0,2,this.s),this.C=new zs,sn(this.s,0,3,this.C),this.v=new Ws,sn(this.s,0,2,this.v),this.h=new Hs,sn(this.j,0,3,this.h),gn(this.v,2,.5),gn(this.s,4,.5),gn(this.C,2,.5)}get baseOptions(){return en(this.j,Ls,1)}set baseOptions(t){sn(this.j,0,1,t)}o(t){if(pn(this.v,3,t.numHands??1),\"minHandDetectionConfidence\"in t&&gn(this.v,2,t.minHandDetectionConfidence??.5),\"minTrackingConfidence\"in t&&gn(this.s,4,t.minTrackingConfidence??.5),\"minHandPresenceConfidence\"in t&&gn(this.C,2,t.minHandPresenceConfidence??.5),t.cannedGesturesClassifierOptions){var e=new Vs,n=e,r=To(t.cannedGesturesClassifierOptions,en(this.h,Vs,3)?.h());sn(n,0,2,r),sn(this.h,0,3,e)}else void 0===t.cannedGesturesClassifierOptions&&en(this.h,Vs,3)?.g();return t.customGesturesClassifierOptions?(sn(n=e=new Vs,0,2,r=To(t.customGesturesClassifierOptions,en(this.h,Vs,4)?.h())),sn(this.h,0,4,e)):void 0===t.customGesturesClassifierOptions&&en(this.h,Vs,4)?.g(),this.l(t)}Ja(t,e){return uc(this),Wa(this,t,e),lc(this)}Ka(t,e,n){return uc(this),za(this,t,n,e),lc(this)}m(){var t=new qi;Yi(t,\"image_in\"),Yi(t,\"norm_rect\"),$i(t,\"hand_gestures\"),$i(t,\"hand_landmarks\"),$i(t,\"world_hand_landmarks\"),$i(t,\"handedness\");const e=new Di;Xn(e,Qs,this.j);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.gesture_recognizer.GestureRecognizerGraph\"),ji(n,\"IMAGE:image_in\"),ji(n,\"NORM_RECT:norm_rect\"),Vi(n,\"HAND_GESTURES:hand_gestures\"),Vi(n,\"LANDMARKS:hand_landmarks\"),Vi(n,\"WORLD_LANDMARKS:world_hand_landmarks\"),Vi(n,\"HANDEDNESS:handedness\"),n.o(e),Ki(t,n),this.g.attachProtoVectorListener(\"hand_landmarks\",((t,e)=>{for(const e of t){t=us(e);const n=[];for(const e of rn(t,hs,1))n.push({x:dn(e,1)??0,y:dn(e,2)??0,z:dn(e,3)??0,visibility:dn(e,4)??0});this.landmarks.push(n)}Wo(this,e)})),this.g.attachEmptyPacketListener(\"hand_landmarks\",(t=>{Wo(this,t)})),this.g.attachProtoVectorListener(\"world_hand_landmarks\",((t,e)=>{for(const e of t){t=cs(e);const n=[];for(const e of rn(t,as,1))n.push({x:dn(e,1)??0,y:dn(e,2)??0,z:dn(e,3)??0,visibility:dn(e,4)??0});this.worldLandmarks.push(n)}Wo(this,e)})),this.g.attachEmptyPacketListener(\"world_hand_landmarks\",(t=>{Wo(this,t)})),this.g.attachProtoVectorListener(\"hand_gestures\",((t,e)=>{this.gestures.push(...dc(t,!1)),Wo(this,e)})),this.g.attachEmptyPacketListener(\"hand_gestures\",(t=>{Wo(this,t)})),this.g.attachProtoVectorListener(\"handedness\",((t,e)=>{this.handedness.push(...dc(t)),Wo(this,e)})),this.g.attachEmptyPacketListener(\"handedness\",(t=>{Wo(this,t)})),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};function pc(t){return{landmarks:t.landmarks,worldLandmarks:t.worldLandmarks,handednesses:t.handedness,handedness:t.handedness}}fc.prototype.recognizeForVideo=fc.prototype.Ka,fc.prototype.recognize=fc.prototype.Ja,fc.prototype.setOptions=fc.prototype.o,fc.createFromModelPath=function(t,e){return Xa(fc,t,{baseOptions:{modelAssetPath:e}})},fc.createFromModelBuffer=function(t,e){return Xa(fc,t,{baseOptions:{modelAssetBuffer:e}})},fc.createFromOptions=function(t,e){return Xa(fc,t,e)},fc.HAND_CONNECTIONS=hc;var gc=class extends Ya{constructor(t,e){super(new Va(t,e),\"image_in\",\"norm_rect\",!1),this.landmarks=[],this.worldLandmarks=[],this.handedness=[],sn(t=this.h=new Ks,0,1,e=new Ls),this.s=new zs,sn(this.h,0,3,this.s),this.j=new Ws,sn(this.h,0,2,this.j),pn(this.j,3,1),gn(this.j,2,.5),gn(this.s,2,.5),gn(this.h,4,.5)}get baseOptions(){return en(this.h,Ls,1)}set baseOptions(t){sn(this.h,0,1,t)}o(t){return\"numHands\"in t&&pn(this.j,3,t.numHands??1),\"minHandDetectionConfidence\"in t&&gn(this.j,2,t.minHandDetectionConfidence??.5),\"minTrackingConfidence\"in t&&gn(this.h,4,t.minTrackingConfidence??.5),\"minHandPresenceConfidence\"in t&&gn(this.s,2,t.minHandPresenceConfidence??.5),this.l(t)}D(t,e){return this.landmarks=[],this.worldLandmarks=[],this.handedness=[],Wa(this,t,e),pc(this)}F(t,e,n){return this.landmarks=[],this.worldLandmarks=[],this.handedness=[],za(this,t,n,e),pc(this)}m(){var t=new qi;Yi(t,\"image_in\"),Yi(t,\"norm_rect\"),$i(t,\"hand_landmarks\"),$i(t,\"world_hand_landmarks\"),$i(t,\"handedness\");const e=new Di;Xn(e,to,this.h);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.hand_landmarker.HandLandmarkerGraph\"),ji(n,\"IMAGE:image_in\"),ji(n,\"NORM_RECT:norm_rect\"),Vi(n,\"LANDMARKS:hand_landmarks\"),Vi(n,\"WORLD_LANDMARKS:world_hand_landmarks\"),Vi(n,\"HANDEDNESS:handedness\"),n.o(e),Ki(t,n),this.g.attachProtoVectorListener(\"hand_landmarks\",((t,e)=>{for(const e of t)t=us(e),this.landmarks.push(ko(t));Wo(this,e)})),this.g.attachEmptyPacketListener(\"hand_landmarks\",(t=>{Wo(this,t)})),this.g.attachProtoVectorListener(\"world_hand_landmarks\",((t,e)=>{for(const e of t)t=cs(e),this.worldLandmarks.push(So(t));Wo(this,e)})),this.g.attachEmptyPacketListener(\"world_hand_landmarks\",(t=>{Wo(this,t)})),this.g.attachProtoVectorListener(\"handedness\",((t,e)=>{var n=this.handedness,r=n.push;const i=[];for(const e of t){t=ns(e);const n=[];for(const e of t.g())n.push({score:dn(e,2)??0,index:un(e,1)??0??-1,categoryName:ln(e,3)??\"\"??\"\",displayName:ln(e,4)??\"\"??\"\"});i.push(n)}r.call(n,...i),Wo(this,e)})),this.g.attachEmptyPacketListener(\"handedness\",(t=>{Wo(this,t)})),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};gc.prototype.detectForVideo=gc.prototype.F,gc.prototype.detect=gc.prototype.D,gc.prototype.setOptions=gc.prototype.o,gc.createFromModelPath=function(t,e){return Xa(gc,t,{baseOptions:{modelAssetPath:e}})},gc.createFromModelBuffer=function(t,e){return Xa(gc,t,{baseOptions:{modelAssetBuffer:e}})},gc.createFromOptions=function(t,e){return Xa(gc,t,e)},gc.HAND_CONNECTIONS=hc;var mc=Ba([0,1],[1,2],[2,3],[3,7],[0,4],[4,5],[5,6],[6,8],[9,10],[11,12],[11,13],[13,15],[15,17],[15,19],[15,21],[17,19],[12,14],[14,16],[16,18],[16,20],[16,22],[18,20],[11,23],[12,24],[23,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,31],[30,32],[27,31],[28,32]);function yc(t){t.h={faceLandmarks:[],faceBlendshapes:[],poseLandmarks:[],poseWorldLandmarks:[],poseSegmentationMasks:[],leftHandLandmarks:[],leftHandWorldLandmarks:[],rightHandLandmarks:[],rightHandWorldLandmarks:[]}}function _c(t){try{if(!t.C)return t.h;t.C(t.h)}finally{Yo(t)}}function vc(t,e){t=us(t),e.push(ko(t))}var Ec=class extends Ya{constructor(t,e){super(new Va(t,e),\"input_frames_image\",null,!1),this.h={faceLandmarks:[],faceBlendshapes:[],poseLandmarks:[],poseWorldLandmarks:[],poseSegmentationMasks:[],leftHandLandmarks:[],leftHandWorldLandmarks:[],rightHandLandmarks:[],rightHandWorldLandmarks:[]},this.outputPoseSegmentationMasks=this.outputFaceBlendshapes=!1,sn(t=this.j=new io,0,1,e=new Ls),this.J=new zs,sn(this.j,0,2,this.J),this.Z=new eo,sn(this.j,0,3,this.Z),this.s=new Is,sn(this.j,0,4,this.s),this.H=new Cs,sn(this.j,0,5,this.H),this.v=new no,sn(this.j,0,6,this.v),this.K=new ro,sn(this.j,0,7,this.K),gn(this.s,2,.5),gn(this.s,3,.3),gn(this.H,2,.5),gn(this.v,2,.5),gn(this.v,3,.3),gn(this.K,2,.5),gn(this.J,2,.5)}get baseOptions(){return en(this.j,Ls,1)}set baseOptions(t){sn(this.j,0,1,t)}o(t){return\"minFaceDetectionConfidence\"in t&&gn(this.s,2,t.minFaceDetectionConfidence??.5),\"minFaceSuppressionThreshold\"in t&&gn(this.s,3,t.minFaceSuppressionThreshold??.3),\"minFacePresenceConfidence\"in t&&gn(this.H,2,t.minFacePresenceConfidence??.5),\"outputFaceBlendshapes\"in t&&(this.outputFaceBlendshapes=!!t.outputFaceBlendshapes),\"minPoseDetectionConfidence\"in t&&gn(this.v,2,t.minPoseDetectionConfidence??.5),\"minPoseSuppressionThreshold\"in t&&gn(this.v,3,t.minPoseSuppressionThreshold??.3),\"minPosePresenceConfidence\"in t&&gn(this.K,2,t.minPosePresenceConfidence??.5),\"outputPoseSegmentationMasks\"in t&&(this.outputPoseSegmentationMasks=!!t.outputPoseSegmentationMasks),\"minHandLandmarksConfidence\"in t&&gn(this.J,2,t.minHandLandmarksConfidence??.5),this.l(t)}D(t,e,n){const r=\"function\"!=typeof e?e:{};return this.C=\"function\"==typeof e?e:n,yc(this),Wa(this,t,r),_c(this)}F(t,e,n,r){const i=\"function\"!=typeof n?n:{};return this.C=\"function\"==typeof n?n:r,yc(this),za(this,t,i,e),_c(this)}m(){var t=new qi;Yi(t,\"input_frames_image\"),$i(t,\"pose_landmarks\"),$i(t,\"pose_world_landmarks\"),$i(t,\"face_landmarks\"),$i(t,\"left_hand_landmarks\"),$i(t,\"left_hand_world_landmarks\"),$i(t,\"right_hand_landmarks\"),$i(t,\"right_hand_world_landmarks\");const e=new Di,n=new bi;Ke(n,1,ae(\"type.googleapis.com/mediapipe.tasks.vision.holistic_landmarker.proto.HolisticLandmarkerGraphOptions\"),\"\"),function(t,e){if(null!=e)if(Array.isArray(e))De(t,2,Re(e));else{if(!(\"string\"==typeof e||e instanceof N||O(e)))throw Error(\"invalid value in Any.value field: \"+e+\" expected a ByteString, a base64 encoded string, a Uint8Array or a jspb array\");Ke(t,2,ft(e,!1),U())}}(n,this.j.g());const r=new Xi;Gi(r,\"mediapipe.tasks.vision.holistic_landmarker.HolisticLandmarkerGraph\"),hn(r,8,bi,n),ji(r,\"IMAGE:input_frames_image\"),Vi(r,\"POSE_LANDMARKS:pose_landmarks\"),Vi(r,\"POSE_WORLD_LANDMARKS:pose_world_landmarks\"),Vi(r,\"FACE_LANDMARKS:face_landmarks\"),Vi(r,\"LEFT_HAND_LANDMARKS:left_hand_landmarks\"),Vi(r,\"LEFT_HAND_WORLD_LANDMARKS:left_hand_world_landmarks\"),Vi(r,\"RIGHT_HAND_LANDMARKS:right_hand_landmarks\"),Vi(r,\"RIGHT_HAND_WORLD_LANDMARKS:right_hand_world_landmarks\"),r.o(e),Ki(t,r),zo(this,t),this.g.attachProtoListener(\"pose_landmarks\",((t,e)=>{vc(t,this.h.poseLandmarks),Wo(this,e)})),this.g.attachEmptyPacketListener(\"pose_landmarks\",(t=>{Wo(this,t)})),this.g.attachProtoListener(\"pose_world_landmarks\",((t,e)=>{var n=this.h.poseWorldLandmarks;t=cs(t),n.push(So(t)),Wo(this,e)})),this.g.attachEmptyPacketListener(\"pose_world_landmarks\",(t=>{Wo(this,t)})),this.outputPoseSegmentationMasks&&(Vi(r,\"POSE_SEGMENTATION_MASK:pose_segmentation_mask\"),Ko(this,\"pose_segmentation_mask\"),this.g.U(\"pose_segmentation_mask\",((t,e)=>{this.h.poseSegmentationMasks=[Ka(this,t,!0,!this.C)],Wo(this,e)})),this.g.attachEmptyPacketListener(\"pose_segmentation_mask\",(t=>{this.h.poseSegmentationMasks=[],Wo(this,t)}))),this.g.attachProtoListener(\"face_landmarks\",((t,e)=>{vc(t,this.h.faceLandmarks),Wo(this,e)})),this.g.attachEmptyPacketListener(\"face_landmarks\",(t=>{Wo(this,t)})),this.outputFaceBlendshapes&&($i(t,\"extra_blendshapes\"),Vi(r,\"FACE_BLENDSHAPES:extra_blendshapes\"),this.g.attachProtoListener(\"extra_blendshapes\",((t,e)=>{var n=this.h.faceBlendshapes;this.outputFaceBlendshapes&&(t=ns(t),n.push(Ao(t.g()??[]))),Wo(this,e)})),this.g.attachEmptyPacketListener(\"extra_blendshapes\",(t=>{Wo(this,t)}))),this.g.attachProtoListener(\"left_hand_landmarks\",((t,e)=>{vc(t,this.h.leftHandLandmarks),Wo(this,e)})),this.g.attachEmptyPacketListener(\"left_hand_landmarks\",(t=>{Wo(this,t)})),this.g.attachProtoListener(\"left_hand_world_landmarks\",((t,e)=>{var n=this.h.leftHandWorldLandmarks;t=cs(t),n.push(So(t)),Wo(this,e)})),this.g.attachEmptyPacketListener(\"left_hand_world_landmarks\",(t=>{Wo(this,t)})),this.g.attachProtoListener(\"right_hand_landmarks\",((t,e)=>{vc(t,this.h.rightHandLandmarks),Wo(this,e)})),this.g.attachEmptyPacketListener(\"right_hand_landmarks\",(t=>{Wo(this,t)})),this.g.attachProtoListener(\"right_hand_world_landmarks\",((t,e)=>{var n=this.h.rightHandWorldLandmarks;t=cs(t),n.push(So(t)),Wo(this,e)})),this.g.attachEmptyPacketListener(\"right_hand_world_landmarks\",(t=>{Wo(this,t)})),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};Ec.prototype.detectForVideo=Ec.prototype.F,Ec.prototype.detect=Ec.prototype.D,Ec.prototype.setOptions=Ec.prototype.o,Ec.createFromModelPath=function(t,e){return Xa(Ec,t,{baseOptions:{modelAssetPath:e}})},Ec.createFromModelBuffer=function(t,e){return Xa(Ec,t,{baseOptions:{modelAssetBuffer:e}})},Ec.createFromOptions=function(t,e){return Xa(Ec,t,e)},Ec.HAND_CONNECTIONS=hc,Ec.POSE_CONNECTIONS=mc,Ec.FACE_LANDMARKS_LIPS=qa,Ec.FACE_LANDMARKS_LEFT_EYE=Ja,Ec.FACE_LANDMARKS_LEFT_EYEBROW=Za,Ec.FACE_LANDMARKS_LEFT_IRIS=Qa,Ec.FACE_LANDMARKS_RIGHT_EYE=tc,Ec.FACE_LANDMARKS_RIGHT_EYEBROW=ec,Ec.FACE_LANDMARKS_RIGHT_IRIS=nc,Ec.FACE_LANDMARKS_FACE_OVAL=rc,Ec.FACE_LANDMARKS_CONTOURS=ic,Ec.FACE_LANDMARKS_TESSELATION=sc;var wc=class extends Ya{constructor(t,e){super(new Va(t,e),\"input_image\",\"norm_rect\",!0),this.j={classifications:[]},sn(t=this.h=new ao,0,1,e=new Ls)}get baseOptions(){return en(this.h,Ls,1)}set baseOptions(t){sn(this.h,0,1,t)}o(t){return sn(this.h,0,2,To(t,en(this.h,ws,2))),this.l(t)}sa(t,e){return this.j={classifications:[]},Wa(this,t,e),this.j}ta(t,e,n){return this.j={classifications:[]},za(this,t,n,e),this.j}m(){var t=new qi;Yi(t,\"input_image\"),Yi(t,\"norm_rect\"),$i(t,\"classifications\");const e=new Di;Xn(e,co,this.h);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.image_classifier.ImageClassifierGraph\"),ji(n,\"IMAGE:input_image\"),ji(n,\"NORM_RECT:norm_rect\"),Vi(n,\"CLASSIFICATIONS:classifications\"),n.o(e),Ki(t,n),this.g.attachProtoListener(\"classifications\",((t,e)=>{this.j=function(t){const e={classifications:rn(t,ps,1).map((t=>Ao(en(t,ts,4)?.g()??[],un(t,2)??0,ln(t,3)??\"\")))};return null!=ie(Ce(t,2))&&(e.timestampMs=ie(Ce(t,2))??0),e}(gs(t)),Wo(this,e)})),this.g.attachEmptyPacketListener(\"classifications\",(t=>{Wo(this,t)})),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};wc.prototype.classifyForVideo=wc.prototype.ta,wc.prototype.classify=wc.prototype.sa,wc.prototype.setOptions=wc.prototype.o,wc.createFromModelPath=function(t,e){return Xa(wc,t,{baseOptions:{modelAssetPath:e}})},wc.createFromModelBuffer=function(t,e){return Xa(wc,t,{baseOptions:{modelAssetBuffer:e}})},wc.createFromOptions=function(t,e){return Xa(wc,t,e)};var Tc=class extends Ya{constructor(t,e){super(new Va(t,e),\"image_in\",\"norm_rect\",!0),this.h=new ho,this.embeddings={embeddings:[]},sn(t=this.h,0,1,e=new Ls)}get baseOptions(){return en(this.h,Ls,1)}set baseOptions(t){sn(this.h,0,1,t)}o(t){var e=this.h,n=en(this.h,As,2);return n=n?n.clone():new As,void 0!==t.l2Normalize?fn(n,1,t.l2Normalize):\"l2Normalize\"in t&&De(n,1),void 0!==t.quantize?fn(n,2,t.quantize):\"quantize\"in t&&De(n,2),sn(e,0,2,n),this.l(t)}za(t,e){return Wa(this,t,e),this.embeddings}Aa(t,e,n){return za(this,t,n,e),this.embeddings}m(){var t=new qi;Yi(t,\"image_in\"),Yi(t,\"norm_rect\"),$i(t,\"embeddings_out\");const e=new Di;Xn(e,uo,this.h);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.image_embedder.ImageEmbedderGraph\"),ji(n,\"IMAGE:image_in\"),ji(n,\"NORM_RECT:norm_rect\"),Vi(n,\"EMBEDDINGS:embeddings_out\"),n.o(e),Ki(t,n),this.g.attachProtoListener(\"embeddings_out\",((t,e)=>{t=Es(t),this.embeddings=function(t){return{embeddings:rn(t,_s,1).map((t=>{const e={headIndex:un(t,3)??0??-1,headName:ln(t,4)??\"\"??\"\"};if(void 0!==tn(t,ms,$e(t,1)))t=Ve(t=en(t,ms,$e(t,1)),1,$t,je()),e.floatEmbedding=t.slice();else{const n=new Uint8Array(0);e.quantizedEmbedding=en(t,ys,$e(t,2))?.oa()?.h()??n}return e})),timestampMs:ie(Ce(t,2))??0}}(t),Wo(this,e)})),this.g.attachEmptyPacketListener(\"embeddings_out\",(t=>{Wo(this,t)})),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};Tc.cosineSimilarity=function(t,e){if(t.floatEmbedding&&e.floatEmbedding)t=Lo(t.floatEmbedding,e.floatEmbedding);else{if(!t.quantizedEmbedding||!e.quantizedEmbedding)throw Error(\"Cannot compute cosine similarity between quantized and float embeddings.\");t=Lo(xo(t.quantizedEmbedding),xo(e.quantizedEmbedding))}return t},Tc.prototype.embedForVideo=Tc.prototype.Aa,Tc.prototype.embed=Tc.prototype.za,Tc.prototype.setOptions=Tc.prototype.o,Tc.createFromModelPath=function(t,e){return Xa(Tc,t,{baseOptions:{modelAssetPath:e}})},Tc.createFromModelBuffer=function(t,e){return Xa(Tc,t,{baseOptions:{modelAssetBuffer:e}})},Tc.createFromOptions=function(t,e){return Xa(Tc,t,e)};var Ac=class{constructor(t,e,n){this.confidenceMasks=t,this.categoryMask=e,this.qualityScores=n}close(){this.confidenceMasks?.forEach((t=>{t.close()})),this.categoryMask?.close()}};function bc(t){t.categoryMask=void 0,t.confidenceMasks=void 0,t.qualityScores=void 0}function kc(t){try{const e=new Ac(t.confidenceMasks,t.categoryMask,t.qualityScores);if(!t.j)return e;t.j(e)}finally{Yo(t)}}Ac.prototype.close=Ac.prototype.close;var Sc=class extends Ya{constructor(t,e){super(new Va(t,e),\"image_in\",\"norm_rect\",!1),this.s=[],this.outputCategoryMask=!1,this.outputConfidenceMasks=!0,this.h=new mo,this.v=new lo,sn(this.h,0,3,this.v),sn(t=this.h,0,1,e=new Ls)}get baseOptions(){return en(this.h,Ls,1)}set baseOptions(t){sn(this.h,0,1,t)}o(t){return void 0!==t.displayNamesLocale?De(this.h,2,ae(t.displayNamesLocale)):\"displayNamesLocale\"in t&&De(this.h,2),\"outputCategoryMask\"in t&&(this.outputCategoryMask=t.outputCategoryMask??!1),\"outputConfidenceMasks\"in t&&(this.outputConfidenceMasks=t.outputConfidenceMasks??!0),super.l(t)}I(){!function(t){const e=rn(t.da(),Xi,1).filter((t=>(ln(t,1)??\"\").includes(\"mediapipe.tasks.TensorsToSegmentationCalculator\")));if(t.s=[],e.length>1)throw Error(\"The graph has more than one mediapipe.tasks.TensorsToSegmentationCalculator.\");1===e.length&&(en(e[0],Di,7)?.l()?.g()??new Map).forEach(((e,n)=>{t.s[Number(n)]=ln(e,1)??\"\"}))}(this)}segment(t,e,n){const r=\"function\"!=typeof e?e:{};return this.j=\"function\"==typeof e?e:n,bc(this),Wa(this,t,r),kc(this)}Ma(t,e,n,r){const i=\"function\"!=typeof n?n:{};return this.j=\"function\"==typeof n?n:r,bc(this),za(this,t,i,e),kc(this)}Da(){return this.s}m(){var t=new qi;Yi(t,\"image_in\"),Yi(t,\"norm_rect\");const e=new Di;Xn(e,yo,this.h);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.image_segmenter.ImageSegmenterGraph\"),ji(n,\"IMAGE:image_in\"),ji(n,\"NORM_RECT:norm_rect\"),n.o(e),Ki(t,n),zo(this,t),this.outputConfidenceMasks&&($i(t,\"confidence_masks\"),Vi(n,\"CONFIDENCE_MASKS:confidence_masks\"),Ko(this,\"confidence_masks\"),this.g.ca(\"confidence_masks\",((t,e)=>{this.confidenceMasks=t.map((t=>Ka(this,t,!0,!this.j))),Wo(this,e)})),this.g.attachEmptyPacketListener(\"confidence_masks\",(t=>{this.confidenceMasks=[],Wo(this,t)}))),this.outputCategoryMask&&($i(t,\"category_mask\"),Vi(n,\"CATEGORY_MASK:category_mask\"),Ko(this,\"category_mask\"),this.g.U(\"category_mask\",((t,e)=>{this.categoryMask=Ka(this,t,!1,!this.j),Wo(this,e)})),this.g.attachEmptyPacketListener(\"category_mask\",(t=>{this.categoryMask=void 0,Wo(this,t)}))),$i(t,\"quality_scores\"),Vi(n,\"QUALITY_SCORES:quality_scores\"),this.g.attachFloatVectorListener(\"quality_scores\",((t,e)=>{this.qualityScores=t,Wo(this,e)})),this.g.attachEmptyPacketListener(\"quality_scores\",(t=>{this.categoryMask=void 0,Wo(this,t)})),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};Sc.prototype.getLabels=Sc.prototype.Da,Sc.prototype.segmentForVideo=Sc.prototype.Ma,Sc.prototype.segment=Sc.prototype.segment,Sc.prototype.setOptions=Sc.prototype.o,Sc.createFromModelPath=function(t,e){return Xa(Sc,t,{baseOptions:{modelAssetPath:e}})},Sc.createFromModelBuffer=function(t,e){return Xa(Sc,t,{baseOptions:{modelAssetBuffer:e}})},Sc.createFromOptions=function(t,e){return Xa(Sc,t,e)};var xc=class{constructor(t,e,n){this.confidenceMasks=t,this.categoryMask=e,this.qualityScores=n}close(){this.confidenceMasks?.forEach((t=>{t.close()})),this.categoryMask?.close()}};xc.prototype.close=xc.prototype.close;var Lc=class extends Hn{constructor(t){super(t)}},Rc=[0,oi,-2],Fc=[0,Qr,-3,hi,Qr,-1],Ic=[0,Fc],Mc=[0,Fc,oi,-1],Pc=class extends Hn{constructor(t){super(t)}},Oc=[0,Qr,-1,hi],Cc=class extends Hn{constructor(t){super(t)}},Uc=class extends Hn{constructor(t){super(t)}},Dc=[1,2,3,4,5,6,7,8,9,10,14,15],Nc=class extends Hn{constructor(t){super(t)}};Nc.prototype.g=Ai([0,pi,[0,Dc,gi,Fc,gi,[0,Fc,Rc],gi,Ic,gi,[0,Ic,Rc],gi,Oc,gi,[0,Qr,-3,hi,vi],gi,[0,Qr,-3,hi],gi,[0,fi,Qr,-2,hi,oi,hi,-1,2,Qr,Rc],gi,Mc,gi,[0,Mc,Rc],Qr,Rc,fi,gi,[0,Qr,-3,hi,Rc,-1],gi,[0,pi,Oc]],fi,[0,fi,oi,-1,hi]]);var Bc=class extends Ya{constructor(t,e){super(new Va(t,e),\"image_in\",\"norm_rect_in\",!1),this.outputCategoryMask=!1,this.outputConfidenceMasks=!0,this.h=new mo,this.s=new lo,sn(this.h,0,3,this.s),sn(t=this.h,0,1,e=new Ls)}get baseOptions(){return en(this.h,Ls,1)}set baseOptions(t){sn(this.h,0,1,t)}o(t){return\"outputCategoryMask\"in t&&(this.outputCategoryMask=t.outputCategoryMask??!1),\"outputConfidenceMasks\"in t&&(this.outputConfidenceMasks=t.outputConfidenceMasks??!0),super.l(t)}segment(t,e,n,r){const i=\"function\"!=typeof n?n:{};this.j=\"function\"==typeof n?n:r,this.qualityScores=this.categoryMask=this.confidenceMasks=void 0,n=this.B+1,r=new Nc;const s=new Uc;var o=new Lc;if(pn(o,1,255),sn(s,0,12,o),e.keypoint&&e.scribble)throw Error(\"Cannot provide both keypoint and scribble.\");if(e.keypoint){var a=new Pc;fn(a,3,!0),gn(a,1,e.keypoint.x),gn(a,2,e.keypoint.y),on(s,5,Dc,a)}else{if(!e.scribble)throw Error(\"Must provide either a keypoint or a scribble.\");for(a of(o=new Cc,e.scribble))fn(e=new Pc,3,!0),gn(e,1,a.x),gn(e,2,a.y),hn(o,1,Pc,e);on(s,15,Dc,o)}hn(r,1,Uc,s),this.g.addProtoToStream(r.g(),\"drishti.RenderData\",\"roi_in\",n),Wa(this,t,i);t:{try{const t=new xc(this.confidenceMasks,this.categoryMask,this.qualityScores);if(!this.j){var c=t;break t}this.j(t)}finally{Yo(this)}c=void 0}return c}m(){var t=new qi;Yi(t,\"image_in\"),Yi(t,\"roi_in\"),Yi(t,\"norm_rect_in\");const e=new Di;Xn(e,yo,this.h);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.interactive_segmenter.InteractiveSegmenterGraph\"),ji(n,\"IMAGE:image_in\"),ji(n,\"ROI:roi_in\"),ji(n,\"NORM_RECT:norm_rect_in\"),n.o(e),Ki(t,n),zo(this,t),this.outputConfidenceMasks&&($i(t,\"confidence_masks\"),Vi(n,\"CONFIDENCE_MASKS:confidence_masks\"),Ko(this,\"confidence_masks\"),this.g.ca(\"confidence_masks\",((t,e)=>{this.confidenceMasks=t.map((t=>Ka(this,t,!0,!this.j))),Wo(this,e)})),this.g.attachEmptyPacketListener(\"confidence_masks\",(t=>{this.confidenceMasks=[],Wo(this,t)}))),this.outputCategoryMask&&($i(t,\"category_mask\"),Vi(n,\"CATEGORY_MASK:category_mask\"),Ko(this,\"category_mask\"),this.g.U(\"category_mask\",((t,e)=>{this.categoryMask=Ka(this,t,!1,!this.j),Wo(this,e)})),this.g.attachEmptyPacketListener(\"category_mask\",(t=>{this.categoryMask=void 0,Wo(this,t)}))),$i(t,\"quality_scores\"),Vi(n,\"QUALITY_SCORES:quality_scores\"),this.g.attachFloatVectorListener(\"quality_scores\",((t,e)=>{this.qualityScores=t,Wo(this,e)})),this.g.attachEmptyPacketListener(\"quality_scores\",(t=>{this.categoryMask=void 0,Wo(this,t)})),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};Bc.prototype.segment=Bc.prototype.segment,Bc.prototype.setOptions=Bc.prototype.o,Bc.createFromModelPath=function(t,e){return Xa(Bc,t,{baseOptions:{modelAssetPath:e}})},Bc.createFromModelBuffer=function(t,e){return Xa(Bc,t,{baseOptions:{modelAssetBuffer:e}})},Bc.createFromOptions=function(t,e){return Xa(Bc,t,e)};var Gc=class extends Ya{constructor(t,e){super(new Va(t,e),\"input_frame_gpu\",\"norm_rect\",!1),this.j={detections:[]},sn(t=this.h=new _o,0,1,e=new Ls)}get baseOptions(){return en(this.h,Ls,1)}set baseOptions(t){sn(this.h,0,1,t)}o(t){return void 0!==t.displayNamesLocale?De(this.h,2,ae(t.displayNamesLocale)):\"displayNamesLocale\"in t&&De(this.h,2),void 0!==t.maxResults?pn(this.h,3,t.maxResults):\"maxResults\"in t&&De(this.h,3),void 0!==t.scoreThreshold?gn(this.h,4,t.scoreThreshold):\"scoreThreshold\"in t&&De(this.h,4),void 0!==t.categoryAllowlist?mn(this.h,5,t.categoryAllowlist):\"categoryAllowlist\"in t&&De(this.h,5),void 0!==t.categoryDenylist?mn(this.h,6,t.categoryDenylist):\"categoryDenylist\"in t&&De(this.h,6),this.l(t)}D(t,e){return this.j={detections:[]},Wa(this,t,e),this.j}F(t,e,n){return this.j={detections:[]},za(this,t,n,e),this.j}m(){var t=new qi;Yi(t,\"input_frame_gpu\"),Yi(t,\"norm_rect\"),$i(t,\"detections\");const e=new Di;Xn(e,vo,this.h);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.ObjectDetectorGraph\"),ji(n,\"IMAGE:input_frame_gpu\"),ji(n,\"NORM_RECT:norm_rect\"),Vi(n,\"DETECTIONS:detections\"),n.o(e),Ki(t,n),this.g.attachProtoVectorListener(\"detections\",((t,e)=>{for(const e of t)t=os(e),this.j.detections.push(bo(t));Wo(this,e)})),this.g.attachEmptyPacketListener(\"detections\",(t=>{Wo(this,t)})),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};Gc.prototype.detectForVideo=Gc.prototype.F,Gc.prototype.detect=Gc.prototype.D,Gc.prototype.setOptions=Gc.prototype.o,Gc.createFromModelPath=async function(t,e){return Xa(Gc,t,{baseOptions:{modelAssetPath:e}})},Gc.createFromModelBuffer=function(t,e){return Xa(Gc,t,{baseOptions:{modelAssetBuffer:e}})},Gc.createFromOptions=function(t,e){return Xa(Gc,t,e)};var jc=class{constructor(t,e,n){this.landmarks=t,this.worldLandmarks=e,this.segmentationMasks=n}close(){this.segmentationMasks?.forEach((t=>{t.close()}))}};function Vc(t){t.landmarks=[],t.worldLandmarks=[],t.segmentationMasks=void 0}function Xc(t){try{const e=new jc(t.landmarks,t.worldLandmarks,t.segmentationMasks);if(!t.s)return e;t.s(e)}finally{Yo(t)}}jc.prototype.close=jc.prototype.close;var Hc=class extends Ya{constructor(t,e){super(new Va(t,e),\"image_in\",\"norm_rect\",!1),this.landmarks=[],this.worldLandmarks=[],this.outputSegmentationMasks=!1,sn(t=this.h=new Eo,0,1,e=new Ls),this.v=new ro,sn(this.h,0,3,this.v),this.j=new no,sn(this.h,0,2,this.j),pn(this.j,4,1),gn(this.j,2,.5),gn(this.v,2,.5),gn(this.h,4,.5)}get baseOptions(){return en(this.h,Ls,1)}set baseOptions(t){sn(this.h,0,1,t)}o(t){return\"numPoses\"in t&&pn(this.j,4,t.numPoses??1),\"minPoseDetectionConfidence\"in t&&gn(this.j,2,t.minPoseDetectionConfidence??.5),\"minTrackingConfidence\"in t&&gn(this.h,4,t.minTrackingConfidence??.5),\"minPosePresenceConfidence\"in t&&gn(this.v,2,t.minPosePresenceConfidence??.5),\"outputSegmentationMasks\"in t&&(this.outputSegmentationMasks=t.outputSegmentationMasks??!1),this.l(t)}D(t,e,n){const r=\"function\"!=typeof e?e:{};return this.s=\"function\"==typeof e?e:n,Vc(this),Wa(this,t,r),Xc(this)}F(t,e,n,r){const i=\"function\"!=typeof n?n:{};return this.s=\"function\"==typeof n?n:r,Vc(this),za(this,t,i,e),Xc(this)}m(){var t=new qi;Yi(t,\"image_in\"),Yi(t,\"norm_rect\"),$i(t,\"normalized_landmarks\"),$i(t,\"world_landmarks\"),$i(t,\"segmentation_masks\");const e=new Di;Xn(e,wo,this.h);const n=new Xi;Gi(n,\"mediapipe.tasks.vision.pose_landmarker.PoseLandmarkerGraph\"),ji(n,\"IMAGE:image_in\"),ji(n,\"NORM_RECT:norm_rect\"),Vi(n,\"NORM_LANDMARKS:normalized_landmarks\"),Vi(n,\"WORLD_LANDMARKS:world_landmarks\"),n.o(e),Ki(t,n),zo(this,t),this.g.attachProtoVectorListener(\"normalized_landmarks\",((t,e)=>{this.landmarks=[];for(const e of t)t=us(e),this.landmarks.push(ko(t));Wo(this,e)})),this.g.attachEmptyPacketListener(\"normalized_landmarks\",(t=>{this.landmarks=[],Wo(this,t)})),this.g.attachProtoVectorListener(\"world_landmarks\",((t,e)=>{this.worldLandmarks=[];for(const e of t)t=cs(e),this.worldLandmarks.push(So(t));Wo(this,e)})),this.g.attachEmptyPacketListener(\"world_landmarks\",(t=>{this.worldLandmarks=[],Wo(this,t)})),this.outputSegmentationMasks&&(Vi(n,\"SEGMENTATION_MASK:segmentation_masks\"),Ko(this,\"segmentation_masks\"),this.g.ca(\"segmentation_masks\",((t,e)=>{this.segmentationMasks=t.map((t=>Ka(this,t,!0,!this.s))),Wo(this,e)})),this.g.attachEmptyPacketListener(\"segmentation_masks\",(t=>{this.segmentationMasks=[],Wo(this,t)}))),t=t.g(),this.setGraph(new Uint8Array(t),!0)}};Hc.prototype.detectForVideo=Hc.prototype.F,Hc.prototype.detect=Hc.prototype.D,Hc.prototype.setOptions=Hc.prototype.o,Hc.createFromModelPath=function(t,e){return Xa(Hc,t,{baseOptions:{modelAssetPath:e}})},Hc.createFromModelBuffer=function(t,e){return Xa(Hc,t,{baseOptions:{modelAssetBuffer:e}})},Hc.createFromOptions=function(t,e){return Xa(Hc,t,e)},Hc.POSE_CONNECTIONS=mc;\n//# sourceMappingURL=vision_bundle_mjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@mediapipe/tasks-vision/vision_bundle.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs":
/*!*****************************************!*\
  !*** ./node_modules/clsx/dist/clsx.mjs ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: function() { return /* binding */ clsx; }\n/* harmony export */ });\nfunction r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}/* harmony default export */ __webpack_exports__[\"default\"] = (clsx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGNBQWMsYUFBYSwrQ0FBK0MsZ0RBQWdELGVBQWUsUUFBUSxJQUFJLDBDQUEwQyx5Q0FBeUMsU0FBZ0IsZ0JBQWdCLHdDQUF3QyxJQUFJLG1EQUFtRCxTQUFTLCtEQUFlLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm1qcz80Y2Q2Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKXt2YXIgbz1lLmxlbmd0aDtmb3IodD0wO3Q8bzt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpfWVsc2UgZm9yKGYgaW4gZSllW2ZdJiYobiYmKG4rPVwiIFwiKSxuKz1mKTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCIsbz1hcmd1bWVudHMubGVuZ3RoO2Y8bztmKyspKGU9YXJndW1lbnRzW2ZdKSYmKHQ9cihlKSkmJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBkZWZhdWx0IGNsc3g7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/shared/mp3-misc.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/shared/mp3-misc.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FRAME_HEADER_SIZE: function() { return /* binding */ FRAME_HEADER_SIZE; },\n/* harmony export */   INFO: function() { return /* binding */ INFO; },\n/* harmony export */   MPEG_V1_BITRATES: function() { return /* binding */ MPEG_V1_BITRATES; },\n/* harmony export */   MPEG_V2_BITRATES: function() { return /* binding */ MPEG_V2_BITRATES; },\n/* harmony export */   SAMPLING_RATES: function() { return /* binding */ SAMPLING_RATES; },\n/* harmony export */   XING: function() { return /* binding */ XING; },\n/* harmony export */   computeMp3FrameSize: function() { return /* binding */ computeMp3FrameSize; },\n/* harmony export */   decodeSynchsafe: function() { return /* binding */ decodeSynchsafe; },\n/* harmony export */   encodeSynchsafe: function() { return /* binding */ encodeSynchsafe; },\n/* harmony export */   getXingOffset: function() { return /* binding */ getXingOffset; },\n/* harmony export */   readFrameHeader: function() { return /* binding */ readFrameHeader; }\n/* harmony export */ });\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nconst FRAME_HEADER_SIZE = 4;\n// These are in kbps:\nconst MPEG_V1_BITRATES = {\n    // Layer 3\n    1: [-1, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1],\n    // Layer 2\n    2: [-1, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1],\n    // Layer 1\n    3: [-1, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1],\n};\nconst MPEG_V2_BITRATES = {\n    // Layer 3\n    1: [-1, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, -1],\n    // Layer 2\n    2: [-1, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1],\n    // Layer 1\n    3: [-1, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1],\n};\nconst SAMPLING_RATES = {\n    // MPEG Version 2.5\n    0: [11025, 12000, 8000, -1],\n    // MPEG Version 2 (ISO/IEC 13818-3)\n    2: [22050, 24000, 16000, -1],\n    // MPEG Version 1 (ISO/IEC 11172-3)\n    3: [44100, 48000, 32000, -1],\n};\n/** 'Xing' */\nconst XING = 0x58696e67;\n/** 'Info' */\nconst INFO = 0x496e666f;\nconst computeMp3FrameSize = (layer, bitrate, sampleRate, padding) => {\n    if (layer === 3) {\n        // Layer 1\n        return Math.floor((12 * bitrate / sampleRate + padding) * 4);\n    }\n    else {\n        return Math.floor((144 * bitrate / sampleRate) + padding);\n    }\n};\nconst getXingOffset = (mpegVersionId, channel) => {\n    return mpegVersionId === 3\n        ? (channel === 3 ? 21 : 36)\n        : (channel === 3 ? 13 : 21);\n};\nconst readFrameHeader = (word, remainingBytes) => {\n    const firstByte = word >>> 24;\n    const secondByte = (word >>> 16) & 0xff;\n    const thirdByte = (word >>> 8) & 0xff;\n    const fourthByte = word & 0xff;\n    if (firstByte !== 0xff && secondByte !== 0xff && thirdByte !== 0xff && fourthByte !== 0xff) {\n        return {\n            header: null,\n            bytesAdvanced: 4,\n        };\n    }\n    if (firstByte !== 0xff) {\n        return { header: null, bytesAdvanced: 1 };\n    }\n    if ((secondByte & 0xe0) !== 0xe0) {\n        return { header: null, bytesAdvanced: 1 };\n    }\n    const mpegVersionId = (secondByte >> 3) & 0x3;\n    const layer = (secondByte >> 1) & 0x3;\n    const bitrateIndex = (thirdByte >> 4) & 0xf;\n    const frequencyIndex = (thirdByte >> 2) & 0x3;\n    const padding = (thirdByte >> 1) & 0x1;\n    const channel = (fourthByte >> 6) & 0x3;\n    const modeExtension = (fourthByte >> 4) & 0x3;\n    const copyright = (fourthByte >> 3) & 0x1;\n    const original = (fourthByte >> 2) & 0x1;\n    const emphasis = fourthByte & 0x3;\n    const kilobitRate = mpegVersionId === 3\n        ? MPEG_V1_BITRATES[layer]?.[bitrateIndex]\n        : MPEG_V2_BITRATES[layer]?.[bitrateIndex];\n    if (!kilobitRate || kilobitRate === -1) {\n        return { header: null, bytesAdvanced: 1 };\n    }\n    const bitrate = kilobitRate * 1000;\n    const sampleRate = SAMPLING_RATES[mpegVersionId]?.[frequencyIndex];\n    if (!sampleRate || sampleRate === -1) {\n        return { header: null, bytesAdvanced: 1 };\n    }\n    const frameLength = computeMp3FrameSize(layer, bitrate, sampleRate, padding);\n    if (remainingBytes !== null && remainingBytes < frameLength) {\n        // The frame doesn't fit into the rest of the file\n        return { header: null, bytesAdvanced: 1 };\n    }\n    let audioSamplesInFrame;\n    if (mpegVersionId === 3) {\n        audioSamplesInFrame = layer === 3 ? 384 : 1152;\n    }\n    else {\n        if (layer === 3) {\n            audioSamplesInFrame = 384;\n        }\n        else if (layer === 2) {\n            audioSamplesInFrame = 1152;\n        }\n        else {\n            audioSamplesInFrame = 576;\n        }\n    }\n    return {\n        header: {\n            totalSize: frameLength,\n            mpegVersionId,\n            layer,\n            bitrate,\n            frequencyIndex,\n            sampleRate,\n            channel,\n            modeExtension,\n            copyright,\n            original,\n            emphasis,\n            audioSamplesInFrame,\n        },\n        bytesAdvanced: 1,\n    };\n};\nconst encodeSynchsafe = (unsynchsafed) => {\n    let mask = 0x7f;\n    let synchsafed = 0;\n    let unsynchsafedRest = unsynchsafed;\n    while ((mask ^ 0x7fffffff) !== 0) {\n        synchsafed = unsynchsafedRest & ~mask;\n        synchsafed <<= 1;\n        synchsafed |= unsynchsafedRest & mask;\n        mask = ((mask + 1) << 8) - 1;\n        unsynchsafedRest = synchsafed;\n    }\n    return synchsafed;\n};\nconst decodeSynchsafe = (synchsafed) => {\n    let mask = 0x7f000000;\n    let unsynchsafed = 0;\n    while (mask !== 0) {\n        unsynchsafed >>= 1;\n        unsynchsafed |= synchsafed & mask;\n        mask >>= 8;\n    }\n    return unsynchsafed;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/shared/mp3-misc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/adts/adts-muxer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/adts/adts-muxer.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdtsMuxer: function() { return /* binding */ AdtsMuxer; }\n/* harmony export */ });\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _muxer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/muxer.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\nclass AdtsMuxer extends _muxer_js__WEBPACK_IMPORTED_MODULE_0__.Muxer {\n    constructor(output, format) {\n        super(output);\n        this.header = new Uint8Array(7);\n        this.headerBitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_1__.Bitstream(this.header);\n        this.audioSpecificConfig = null;\n        this.format = format;\n        this.writer = output._writer;\n    }\n    async start() {\n        // Nothing needed here\n    }\n    async getMimeType() {\n        return 'audio/aac';\n    }\n    async addEncodedVideoPacket() {\n        throw new Error('ADTS does not support video.');\n    }\n    async addEncodedAudioPacket(track, packet, meta) {\n        // https://wiki.multimedia.cx/index.php/ADTS (last visited: 2025/08/17)\n        const release = await this.mutex.acquire();\n        try {\n            this.validateAndNormalizeTimestamp(track, packet.timestamp, packet.type === 'key');\n            if (!this.audioSpecificConfig) {\n                (0,_codec_js__WEBPACK_IMPORTED_MODULE_2__.validateAudioChunkMetadata)(meta);\n                const description = meta?.decoderConfig?.description;\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(description);\n                this.audioSpecificConfig = (0,_codec_js__WEBPACK_IMPORTED_MODULE_2__.parseAacAudioSpecificConfig)((0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(description));\n                const { objectType, frequencyIndex, channelConfiguration } = this.audioSpecificConfig;\n                const profile = objectType - 1;\n                this.headerBitstream.writeBits(12, 0b1111_11111111); // Syncword\n                this.headerBitstream.writeBits(1, 0); // MPEG Version\n                this.headerBitstream.writeBits(2, 0); // Layer\n                this.headerBitstream.writeBits(1, 1); // Protection absence\n                this.headerBitstream.writeBits(2, profile); // Profile\n                this.headerBitstream.writeBits(4, frequencyIndex); // MPEG-4 Sampling Frequency Index\n                this.headerBitstream.writeBits(1, 0); // Private bit\n                this.headerBitstream.writeBits(3, channelConfiguration); // MPEG-4 Channel Configuration\n                this.headerBitstream.writeBits(1, 0); // Originality\n                this.headerBitstream.writeBits(1, 0); // Home\n                this.headerBitstream.writeBits(1, 0); // Copyright ID bit\n                this.headerBitstream.writeBits(1, 0); // Copyright ID start\n                this.headerBitstream.skipBits(13); // Frame length\n                this.headerBitstream.writeBits(11, 0x7ff); // Buffer fullness\n                this.headerBitstream.writeBits(2, 0); // Number of AAC frames minus 1\n                // Omit CRC check\n            }\n            const frameLength = packet.data.byteLength + this.header.byteLength;\n            this.headerBitstream.pos = 30;\n            this.headerBitstream.writeBits(13, frameLength);\n            const startPos = this.writer.getPos();\n            this.writer.write(this.header);\n            this.writer.write(packet.data);\n            if (this.format._options.onFrame) {\n                const frameBytes = new Uint8Array(frameLength);\n                frameBytes.set(this.header, 0);\n                frameBytes.set(packet.data, this.header.byteLength);\n                this.format._options.onFrame(frameBytes, startPos);\n            }\n            await this.writer.flush();\n        }\n        finally {\n            release();\n        }\n    }\n    async addSubtitleCue() {\n        throw new Error('ADTS does not support subtitles.');\n    }\n    async finalize() { }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvYWR0cy9hZHRzLW11eGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNzRjtBQUN6QjtBQUN6QjtBQUM3Qix3QkFBd0IsNENBQUs7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLCtDQUFTO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFFQUEwQjtBQUMxQztBQUNBLGdCQUFnQixnREFBTTtBQUN0QiwyQ0FBMkMsc0VBQTJCLENBQUMsc0RBQVk7QUFDbkYsd0JBQXdCLG1EQUFtRDtBQUMzRTtBQUNBLHFFQUFxRTtBQUNyRSxzREFBc0Q7QUFDdEQsc0RBQXNEO0FBQ3RELHNEQUFzRDtBQUN0RCw0REFBNEQ7QUFDNUQsbUVBQW1FO0FBQ25FLHNEQUFzRDtBQUN0RCx5RUFBeUU7QUFDekUsc0RBQXNEO0FBQ3RELHNEQUFzRDtBQUN0RCxzREFBc0Q7QUFDdEQsc0RBQXNEO0FBQ3RELG1EQUFtRDtBQUNuRCwyREFBMkQ7QUFDM0Qsc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvYWR0cy9hZHRzLW11eGVyLmpzPzM5NjciXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUtcHJlc2VudCwgVmFuaWxhZ3kgYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwczovL21vemlsbGEub3JnL01QTC8yLjAvLlxuICovXG5pbXBvcnQgeyBwYXJzZUFhY0F1ZGlvU3BlY2lmaWNDb25maWcsIHZhbGlkYXRlQXVkaW9DaHVua01ldGFkYXRhIH0gZnJvbSAnLi4vY29kZWMuanMnO1xuaW1wb3J0IHsgYXNzZXJ0LCBCaXRzdHJlYW0sIHRvVWludDhBcnJheSB9IGZyb20gJy4uL21pc2MuanMnO1xuaW1wb3J0IHsgTXV4ZXIgfSBmcm9tICcuLi9tdXhlci5qcyc7XG5leHBvcnQgY2xhc3MgQWR0c011eGVyIGV4dGVuZHMgTXV4ZXIge1xuICAgIGNvbnN0cnVjdG9yKG91dHB1dCwgZm9ybWF0KSB7XG4gICAgICAgIHN1cGVyKG91dHB1dCk7XG4gICAgICAgIHRoaXMuaGVhZGVyID0gbmV3IFVpbnQ4QXJyYXkoNyk7XG4gICAgICAgIHRoaXMuaGVhZGVyQml0c3RyZWFtID0gbmV3IEJpdHN0cmVhbSh0aGlzLmhlYWRlcik7XG4gICAgICAgIHRoaXMuYXVkaW9TcGVjaWZpY0NvbmZpZyA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICB0aGlzLndyaXRlciA9IG91dHB1dC5fd3JpdGVyO1xuICAgIH1cbiAgICBhc3luYyBzdGFydCgpIHtcbiAgICAgICAgLy8gTm90aGluZyBuZWVkZWQgaGVyZVxuICAgIH1cbiAgICBhc3luYyBnZXRNaW1lVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuICdhdWRpby9hYWMnO1xuICAgIH1cbiAgICBhc3luYyBhZGRFbmNvZGVkVmlkZW9QYWNrZXQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQURUUyBkb2VzIG5vdCBzdXBwb3J0IHZpZGVvLicpO1xuICAgIH1cbiAgICBhc3luYyBhZGRFbmNvZGVkQXVkaW9QYWNrZXQodHJhY2ssIHBhY2tldCwgbWV0YSkge1xuICAgICAgICAvLyBodHRwczovL3dpa2kubXVsdGltZWRpYS5jeC9pbmRleC5waHAvQURUUyAobGFzdCB2aXNpdGVkOiAyMDI1LzA4LzE3KVxuICAgICAgICBjb25zdCByZWxlYXNlID0gYXdhaXQgdGhpcy5tdXRleC5hY3F1aXJlKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlQW5kTm9ybWFsaXplVGltZXN0YW1wKHRyYWNrLCBwYWNrZXQudGltZXN0YW1wLCBwYWNrZXQudHlwZSA9PT0gJ2tleScpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmF1ZGlvU3BlY2lmaWNDb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUF1ZGlvQ2h1bmtNZXRhZGF0YShtZXRhKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IG1ldGE/LmRlY29kZXJDb25maWc/LmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIGFzc2VydChkZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1NwZWNpZmljQ29uZmlnID0gcGFyc2VBYWNBdWRpb1NwZWNpZmljQ29uZmlnKHRvVWludDhBcnJheShkZXNjcmlwdGlvbikpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgb2JqZWN0VHlwZSwgZnJlcXVlbmN5SW5kZXgsIGNoYW5uZWxDb25maWd1cmF0aW9uIH0gPSB0aGlzLmF1ZGlvU3BlY2lmaWNDb25maWc7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZmlsZSA9IG9iamVjdFR5cGUgLSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyQml0c3RyZWFtLndyaXRlQml0cygxMiwgMGIxMTExXzExMTExMTExKTsgLy8gU3luY3dvcmRcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlckJpdHN0cmVhbS53cml0ZUJpdHMoMSwgMCk7IC8vIE1QRUcgVmVyc2lvblxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyQml0c3RyZWFtLndyaXRlQml0cygyLCAwKTsgLy8gTGF5ZXJcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlckJpdHN0cmVhbS53cml0ZUJpdHMoMSwgMSk7IC8vIFByb3RlY3Rpb24gYWJzZW5jZVxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyQml0c3RyZWFtLndyaXRlQml0cygyLCBwcm9maWxlKTsgLy8gUHJvZmlsZVxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyQml0c3RyZWFtLndyaXRlQml0cyg0LCBmcmVxdWVuY3lJbmRleCk7IC8vIE1QRUctNCBTYW1wbGluZyBGcmVxdWVuY3kgSW5kZXhcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlckJpdHN0cmVhbS53cml0ZUJpdHMoMSwgMCk7IC8vIFByaXZhdGUgYml0XG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJCaXRzdHJlYW0ud3JpdGVCaXRzKDMsIGNoYW5uZWxDb25maWd1cmF0aW9uKTsgLy8gTVBFRy00IENoYW5uZWwgQ29uZmlndXJhdGlvblxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyQml0c3RyZWFtLndyaXRlQml0cygxLCAwKTsgLy8gT3JpZ2luYWxpdHlcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlckJpdHN0cmVhbS53cml0ZUJpdHMoMSwgMCk7IC8vIEhvbWVcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlckJpdHN0cmVhbS53cml0ZUJpdHMoMSwgMCk7IC8vIENvcHlyaWdodCBJRCBiaXRcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlckJpdHN0cmVhbS53cml0ZUJpdHMoMSwgMCk7IC8vIENvcHlyaWdodCBJRCBzdGFydFxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyQml0c3RyZWFtLnNraXBCaXRzKDEzKTsgLy8gRnJhbWUgbGVuZ3RoXG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJCaXRzdHJlYW0ud3JpdGVCaXRzKDExLCAweDdmZik7IC8vIEJ1ZmZlciBmdWxsbmVzc1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyQml0c3RyZWFtLndyaXRlQml0cygyLCAwKTsgLy8gTnVtYmVyIG9mIEFBQyBmcmFtZXMgbWludXMgMVxuICAgICAgICAgICAgICAgIC8vIE9taXQgQ1JDIGNoZWNrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmcmFtZUxlbmd0aCA9IHBhY2tldC5kYXRhLmJ5dGVMZW5ndGggKyB0aGlzLmhlYWRlci5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJCaXRzdHJlYW0ucG9zID0gMzA7XG4gICAgICAgICAgICB0aGlzLmhlYWRlckJpdHN0cmVhbS53cml0ZUJpdHMoMTMsIGZyYW1lTGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0UG9zID0gdGhpcy53cml0ZXIuZ2V0UG9zKCk7XG4gICAgICAgICAgICB0aGlzLndyaXRlci53cml0ZSh0aGlzLmhlYWRlcik7XG4gICAgICAgICAgICB0aGlzLndyaXRlci53cml0ZShwYWNrZXQuZGF0YSk7XG4gICAgICAgICAgICBpZiAodGhpcy5mb3JtYXQuX29wdGlvbnMub25GcmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lQnl0ZXMgPSBuZXcgVWludDhBcnJheShmcmFtZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgZnJhbWVCeXRlcy5zZXQodGhpcy5oZWFkZXIsIDApO1xuICAgICAgICAgICAgICAgIGZyYW1lQnl0ZXMuc2V0KHBhY2tldC5kYXRhLCB0aGlzLmhlYWRlci5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1hdC5fb3B0aW9ucy5vbkZyYW1lKGZyYW1lQnl0ZXMsIHN0YXJ0UG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMud3JpdGVyLmZsdXNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICByZWxlYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgYWRkU3VidGl0bGVDdWUoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQURUUyBkb2VzIG5vdCBzdXBwb3J0IHN1YnRpdGxlcy4nKTtcbiAgICB9XG4gICAgYXN5bmMgZmluYWxpemUoKSB7IH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/adts/adts-muxer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec-data.js":
/*!****************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/codec-data.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvcNalUnitType: function() { return /* binding */ AvcNalUnitType; },\n/* harmony export */   HevcNalUnitType: function() { return /* binding */ HevcNalUnitType; },\n/* harmony export */   determineVideoPacketType: function() { return /* binding */ determineVideoPacketType; },\n/* harmony export */   extractAv1CodecInfoFromPacket: function() { return /* binding */ extractAv1CodecInfoFromPacket; },\n/* harmony export */   extractAvcDecoderConfigurationRecord: function() { return /* binding */ extractAvcDecoderConfigurationRecord; },\n/* harmony export */   extractAvcNalUnits: function() { return /* binding */ extractAvcNalUnits; },\n/* harmony export */   extractHevcDecoderConfigurationRecord: function() { return /* binding */ extractHevcDecoderConfigurationRecord; },\n/* harmony export */   extractHevcNalUnits: function() { return /* binding */ extractHevcNalUnits; },\n/* harmony export */   extractNalUnitTypeForHevc: function() { return /* binding */ extractNalUnitTypeForHevc; },\n/* harmony export */   extractVp9CodecInfoFromPacket: function() { return /* binding */ extractVp9CodecInfoFromPacket; },\n/* harmony export */   findNalUnitsInAnnexB: function() { return /* binding */ findNalUnitsInAnnexB; },\n/* harmony export */   iterateAv1PacketObus: function() { return /* binding */ iterateAv1PacketObus; },\n/* harmony export */   parseModesFromVorbisSetupPacket: function() { return /* binding */ parseModesFromVorbisSetupPacket; },\n/* harmony export */   parseOpusIdentificationHeader: function() { return /* binding */ parseOpusIdentificationHeader; },\n/* harmony export */   parseOpusTocByte: function() { return /* binding */ parseOpusTocByte; },\n/* harmony export */   serializeAvcDecoderConfigurationRecord: function() { return /* binding */ serializeAvcDecoderConfigurationRecord; },\n/* harmony export */   serializeHevcDecoderConfigurationRecord: function() { return /* binding */ serializeHevcDecoderConfigurationRecord; },\n/* harmony export */   transformAnnexBToLengthPrefixed: function() { return /* binding */ transformAnnexBToLengthPrefixed; }\n/* harmony export */ });\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n// References for AVC/HEVC code:\n// ISO 14496-15\n// Rec. ITU-T H.264\n// Rec. ITU-T H.265\n// https://stackoverflow.com/questions/24884827\nvar AvcNalUnitType;\n(function (AvcNalUnitType) {\n    AvcNalUnitType[AvcNalUnitType[\"IDR\"] = 5] = \"IDR\";\n    AvcNalUnitType[AvcNalUnitType[\"SPS\"] = 7] = \"SPS\";\n    AvcNalUnitType[AvcNalUnitType[\"PPS\"] = 8] = \"PPS\";\n    AvcNalUnitType[AvcNalUnitType[\"SPS_EXT\"] = 13] = \"SPS_EXT\";\n})(AvcNalUnitType || (AvcNalUnitType = {}));\nvar HevcNalUnitType;\n(function (HevcNalUnitType) {\n    HevcNalUnitType[HevcNalUnitType[\"RASL_N\"] = 8] = \"RASL_N\";\n    HevcNalUnitType[HevcNalUnitType[\"RASL_R\"] = 9] = \"RASL_R\";\n    HevcNalUnitType[HevcNalUnitType[\"BLA_W_LP\"] = 16] = \"BLA_W_LP\";\n    HevcNalUnitType[HevcNalUnitType[\"RSV_IRAP_VCL23\"] = 23] = \"RSV_IRAP_VCL23\";\n    HevcNalUnitType[HevcNalUnitType[\"VPS_NUT\"] = 32] = \"VPS_NUT\";\n    HevcNalUnitType[HevcNalUnitType[\"SPS_NUT\"] = 33] = \"SPS_NUT\";\n    HevcNalUnitType[HevcNalUnitType[\"PPS_NUT\"] = 34] = \"PPS_NUT\";\n    HevcNalUnitType[HevcNalUnitType[\"PREFIX_SEI_NUT\"] = 39] = \"PREFIX_SEI_NUT\";\n    HevcNalUnitType[HevcNalUnitType[\"SUFFIX_SEI_NUT\"] = 40] = \"SUFFIX_SEI_NUT\";\n})(HevcNalUnitType || (HevcNalUnitType = {}));\n/** Finds all NAL units in an AVC packet in Annex B format. */\nconst findNalUnitsInAnnexB = (packetData) => {\n    const nalUnits = [];\n    let i = 0;\n    while (i < packetData.length) {\n        let startCodePos = -1;\n        let startCodeLength = 0;\n        for (let j = i; j < packetData.length - 3; j++) {\n            // Check for 3-byte start code (0x000001)\n            if (packetData[j] === 0 && packetData[j + 1] === 0 && packetData[j + 2] === 1) {\n                startCodePos = j;\n                startCodeLength = 3;\n                break;\n            }\n            // Check for 4-byte start code (0x00000001)\n            if (j < packetData.length - 4\n                && packetData[j] === 0\n                && packetData[j + 1] === 0\n                && packetData[j + 2] === 0\n                && packetData[j + 3] === 1) {\n                startCodePos = j;\n                startCodeLength = 4;\n                break;\n            }\n        }\n        if (startCodePos === -1) {\n            break; // No more start codes found\n        }\n        // If this isn't the first start code, extract the previous NAL unit\n        if (i > 0 && startCodePos > i) {\n            const nalData = packetData.subarray(i, startCodePos);\n            if (nalData.length > 0) {\n                nalUnits.push(nalData);\n            }\n        }\n        i = startCodePos + startCodeLength;\n    }\n    // Extract the last NAL unit if there is one\n    if (i < packetData.length) {\n        const nalData = packetData.subarray(i);\n        if (nalData.length > 0) {\n            nalUnits.push(nalData);\n        }\n    }\n    return nalUnits;\n};\n/** Finds all NAL units in an AVC packet in length-prefixed format. */\nconst findNalUnitsInLengthPrefixed = (packetData, lengthSize) => {\n    const nalUnits = [];\n    let offset = 0;\n    const dataView = new DataView(packetData.buffer, packetData.byteOffset, packetData.byteLength);\n    while (offset + lengthSize <= packetData.length) {\n        let nalUnitLength;\n        if (lengthSize === 1) {\n            nalUnitLength = dataView.getUint8(offset);\n        }\n        else if (lengthSize === 2) {\n            nalUnitLength = dataView.getUint16(offset, false);\n        }\n        else if (lengthSize === 3) {\n            nalUnitLength = (dataView.getUint16(offset, false) << 8) + dataView.getUint8(offset + 2);\n        }\n        else if (lengthSize === 4) {\n            nalUnitLength = dataView.getUint32(offset, false);\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assertNever)(lengthSize);\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false);\n        }\n        offset += lengthSize;\n        const nalUnit = packetData.subarray(offset, offset + nalUnitLength);\n        nalUnits.push(nalUnit);\n        offset += nalUnitLength;\n    }\n    return nalUnits;\n};\nconst removeEmulationPreventionBytes = (data) => {\n    const result = [];\n    const len = data.length;\n    for (let i = 0; i < len; i++) {\n        // Look for the 0x000003 pattern\n        if (i + 2 < len && data[i] === 0x00 && data[i + 1] === 0x00 && data[i + 2] === 0x03) {\n            result.push(0x00, 0x00); // Push the first two bytes\n            i += 2; // Skip the 0x03 byte\n        }\n        else {\n            result.push(data[i]);\n        }\n    }\n    return new Uint8Array(result);\n};\n/** Converts an AVC packet in Annex B format to length-prefixed format. */\nconst transformAnnexBToLengthPrefixed = (packetData) => {\n    const NAL_UNIT_LENGTH_SIZE = 4;\n    const nalUnits = findNalUnitsInAnnexB(packetData);\n    if (nalUnits.length === 0) {\n        // If no NAL units were found, it's not valid Annex B data\n        return null;\n    }\n    let totalSize = 0;\n    for (const nalUnit of nalUnits) {\n        totalSize += NAL_UNIT_LENGTH_SIZE + nalUnit.byteLength;\n    }\n    const avccData = new Uint8Array(totalSize);\n    const dataView = new DataView(avccData.buffer);\n    let offset = 0;\n    // Write each NAL unit with its length prefix\n    for (const nalUnit of nalUnits) {\n        const length = nalUnit.byteLength;\n        dataView.setUint32(offset, length, false);\n        offset += 4;\n        avccData.set(nalUnit, offset);\n        offset += nalUnit.byteLength;\n    }\n    return avccData;\n};\nconst extractAvcNalUnits = (packetData, decoderConfig) => {\n    if (decoderConfig.description) {\n        // Stream is length-prefixed. Let's extract the size of the length prefix from the decoder config\n        const bytes = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toUint8Array)(decoderConfig.description);\n        const lengthSizeMinusOne = bytes[4] & 0b11;\n        const lengthSize = (lengthSizeMinusOne + 1);\n        return findNalUnitsInLengthPrefixed(packetData, lengthSize);\n    }\n    else {\n        // Stream is in Annex B format\n        return findNalUnitsInAnnexB(packetData);\n    }\n};\nconst extractNalUnitTypeForAvc = (data) => {\n    return data[0] & 0x1F;\n};\n/** Builds an AvcDecoderConfigurationRecord from an AVC packet in Annex B format. */\nconst extractAvcDecoderConfigurationRecord = (packetData) => {\n    try {\n        const nalUnits = findNalUnitsInAnnexB(packetData);\n        const spsUnits = nalUnits.filter(unit => extractNalUnitTypeForAvc(unit) === AvcNalUnitType.SPS);\n        const ppsUnits = nalUnits.filter(unit => extractNalUnitTypeForAvc(unit) === AvcNalUnitType.PPS);\n        const spsExtUnits = nalUnits.filter(unit => extractNalUnitTypeForAvc(unit) === AvcNalUnitType.SPS_EXT);\n        if (spsUnits.length === 0) {\n            return null;\n        }\n        if (ppsUnits.length === 0) {\n            return null;\n        }\n        // Let's get the first SPS for profile and level information\n        const spsData = spsUnits[0];\n        const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(removeEmulationPreventionBytes(spsData));\n        bitstream.skipBits(1); // forbidden_zero_bit\n        bitstream.skipBits(2); // nal_ref_idc\n        const nal_unit_type = bitstream.readBits(5);\n        if (nal_unit_type !== 7) { // SPS NAL unit type is 7\n            console.error('Invalid SPS NAL unit type');\n            return null;\n        }\n        const profile_idc = bitstream.readAlignedByte();\n        const constraint_flags = bitstream.readAlignedByte();\n        const level_idc = bitstream.readAlignedByte();\n        const record = {\n            configurationVersion: 1,\n            avcProfileIndication: profile_idc,\n            profileCompatibility: constraint_flags,\n            avcLevelIndication: level_idc,\n            lengthSizeMinusOne: 3, // Typically 4 bytes for length field\n            sequenceParameterSets: spsUnits,\n            pictureParameterSets: ppsUnits,\n            chromaFormat: null,\n            bitDepthLumaMinus8: null,\n            bitDepthChromaMinus8: null,\n            sequenceParameterSetExt: null,\n        };\n        if (profile_idc === 100\n            || profile_idc === 110\n            || profile_idc === 122\n            || profile_idc === 144) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // seq_parameter_set_id\n            const chroma_format_idc = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n            if (chroma_format_idc === 3) {\n                bitstream.skipBits(1); // separate_colour_plane_flag\n            }\n            const bit_depth_luma_minus8 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n            const bit_depth_chroma_minus8 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n            record.chromaFormat = chroma_format_idc;\n            record.bitDepthLumaMinus8 = bit_depth_luma_minus8;\n            record.bitDepthChromaMinus8 = bit_depth_chroma_minus8;\n            record.sequenceParameterSetExt = spsExtUnits;\n        }\n        return record;\n    }\n    catch (error) {\n        console.error('Error building AVC Decoder Configuration Record:', error);\n        return null;\n    }\n};\n/** Serializes an AvcDecoderConfigurationRecord into the format specified in Section 5.3.3.1 of ISO 14496-15. */\nconst serializeAvcDecoderConfigurationRecord = (record) => {\n    const bytes = [];\n    // Write header\n    bytes.push(record.configurationVersion);\n    bytes.push(record.avcProfileIndication);\n    bytes.push(record.profileCompatibility);\n    bytes.push(record.avcLevelIndication);\n    bytes.push(0xFC | (record.lengthSizeMinusOne & 0x03)); // Reserved bits (6) + lengthSizeMinusOne (2)\n    // Reserved bits (3) + numOfSequenceParameterSets (5)\n    bytes.push(0xE0 | (record.sequenceParameterSets.length & 0x1F));\n    // Write SPS\n    for (const sps of record.sequenceParameterSets) {\n        const length = sps.byteLength;\n        bytes.push(length >> 8); // High byte\n        bytes.push(length & 0xFF); // Low byte\n        for (let i = 0; i < length; i++) {\n            bytes.push(sps[i]);\n        }\n    }\n    bytes.push(record.pictureParameterSets.length);\n    // Write PPS\n    for (const pps of record.pictureParameterSets) {\n        const length = pps.byteLength;\n        bytes.push(length >> 8); // High byte\n        bytes.push(length & 0xFF); // Low byte\n        for (let i = 0; i < length; i++) {\n            bytes.push(pps[i]);\n        }\n    }\n    if (record.avcProfileIndication === 100\n        || record.avcProfileIndication === 110\n        || record.avcProfileIndication === 122\n        || record.avcProfileIndication === 144) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(record.chromaFormat !== null);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(record.bitDepthLumaMinus8 !== null);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(record.bitDepthChromaMinus8 !== null);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(record.sequenceParameterSetExt !== null);\n        bytes.push(0xFC | (record.chromaFormat & 0x03)); // Reserved bits + chroma_format\n        bytes.push(0xF8 | (record.bitDepthLumaMinus8 & 0x07)); // Reserved bits + bit_depth_luma_minus8\n        bytes.push(0xF8 | (record.bitDepthChromaMinus8 & 0x07)); // Reserved bits + bit_depth_chroma_minus8\n        bytes.push(record.sequenceParameterSetExt.length);\n        // Write SPS Ext\n        for (const spsExt of record.sequenceParameterSetExt) {\n            const length = spsExt.byteLength;\n            bytes.push(length >> 8); // High byte\n            bytes.push(length & 0xFF); // Low byte\n            for (let i = 0; i < length; i++) {\n                bytes.push(spsExt[i]);\n            }\n        }\n    }\n    return new Uint8Array(bytes);\n};\nconst extractHevcNalUnits = (packetData, decoderConfig) => {\n    if (decoderConfig.description) {\n        // Stream is length-prefixed. Let's extract the size of the length prefix from the decoder config\n        const bytes = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toUint8Array)(decoderConfig.description);\n        const lengthSizeMinusOne = bytes[21] & 0b11;\n        const lengthSize = (lengthSizeMinusOne + 1);\n        return findNalUnitsInLengthPrefixed(packetData, lengthSize);\n    }\n    else {\n        // Stream is in Annex B format\n        return findNalUnitsInAnnexB(packetData);\n    }\n};\nconst extractNalUnitTypeForHevc = (data) => {\n    return (data[0] >> 1) & 0x3F;\n};\n/** Builds a HevcDecoderConfigurationRecord from an HEVC packet in Annex B format. */\nconst extractHevcDecoderConfigurationRecord = (packetData) => {\n    try {\n        const nalUnits = findNalUnitsInAnnexB(packetData);\n        const vpsUnits = nalUnits.filter(unit => extractNalUnitTypeForHevc(unit) === HevcNalUnitType.VPS_NUT);\n        const spsUnits = nalUnits.filter(unit => extractNalUnitTypeForHevc(unit) === HevcNalUnitType.SPS_NUT);\n        const ppsUnits = nalUnits.filter(unit => extractNalUnitTypeForHevc(unit) === HevcNalUnitType.PPS_NUT);\n        const seiUnits = nalUnits.filter(unit => extractNalUnitTypeForHevc(unit) === HevcNalUnitType.PREFIX_SEI_NUT\n            || extractNalUnitTypeForHevc(unit) === HevcNalUnitType.SUFFIX_SEI_NUT);\n        if (spsUnits.length === 0 || ppsUnits.length === 0)\n            return null;\n        const sps = spsUnits[0];\n        const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(removeEmulationPreventionBytes(sps));\n        bitstream.skipBits(16); // NAL header\n        bitstream.readBits(4); // sps_video_parameter_set_id\n        const sps_max_sub_layers_minus1 = bitstream.readBits(3);\n        const sps_temporal_id_nesting_flag = bitstream.readBits(1);\n        const { general_profile_space, general_tier_flag, general_profile_idc, general_profile_compatibility_flags, general_constraint_indicator_flags, general_level_idc, } = parseProfileTierLevel(bitstream, sps_max_sub_layers_minus1);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // sps_seq_parameter_set_id\n        const chroma_format_idc = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n        if (chroma_format_idc === 3)\n            bitstream.skipBits(1); // separate_colour_plane_flag\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // pic_width_in_luma_samples\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // pic_height_in_luma_samples\n        if (bitstream.readBits(1)) { // conformance_window_flag\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // conf_win_left_offset\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // conf_win_right_offset\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // conf_win_top_offset\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // conf_win_bottom_offset\n        }\n        const bit_depth_luma_minus8 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n        const bit_depth_chroma_minus8 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // log2_max_pic_order_cnt_lsb_minus4\n        const sps_sub_layer_ordering_info_present_flag = bitstream.readBits(1);\n        const maxNum = sps_sub_layer_ordering_info_present_flag ? 0 : sps_max_sub_layers_minus1;\n        for (let i = maxNum; i <= sps_max_sub_layers_minus1; i++) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // sps_max_dec_pic_buffering_minus1[i]\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // sps_max_num_reorder_pics[i]\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // sps_max_latency_increase_plus1[i]\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // log2_min_luma_coding_block_size_minus3\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // log2_diff_max_min_luma_coding_block_size\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // log2_min_luma_transform_block_size_minus2\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // log2_diff_max_min_luma_transform_block_size\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // max_transform_hierarchy_depth_inter\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // max_transform_hierarchy_depth_intra\n        if (bitstream.readBits(1)) { // scaling_list_enabled_flag\n            if (bitstream.readBits(1)) {\n                skipScalingListData(bitstream);\n            }\n        }\n        bitstream.skipBits(1); // amp_enabled_flag\n        bitstream.skipBits(1); // sample_adaptive_offset_enabled_flag\n        if (bitstream.readBits(1)) { // pcm_enabled_flag\n            bitstream.skipBits(4); // pcm_sample_bit_depth_luma_minus1\n            bitstream.skipBits(4); // pcm_sample_bit_depth_chroma_minus1\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // log2_min_pcm_luma_coding_block_size_minus3\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // log2_diff_max_min_pcm_luma_coding_block_size\n            bitstream.skipBits(1); // pcm_loop_filter_disabled_flag\n        }\n        const num_short_term_ref_pic_sets = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n        skipAllStRefPicSets(bitstream, num_short_term_ref_pic_sets);\n        if (bitstream.readBits(1)) { // long_term_ref_pics_present_flag\n            const num_long_term_ref_pics_sps = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n            for (let i = 0; i < num_long_term_ref_pics_sps; i++) {\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // lt_ref_pic_poc_lsb_sps[i]\n                bitstream.skipBits(1); // used_by_curr_pic_lt_sps_flag[i]\n            }\n        }\n        bitstream.skipBits(1); // sps_temporal_mvp_enabled_flag\n        bitstream.skipBits(1); // strong_intra_smoothing_enabled_flag\n        let min_spatial_segmentation_idc = 0;\n        if (bitstream.readBits(1)) { // vui_parameters_present_flag\n            min_spatial_segmentation_idc = parseVuiForMinSpatialSegmentationIdc(bitstream, sps_max_sub_layers_minus1);\n        }\n        // Parse PPS for parallelismType\n        let parallelismType = 0;\n        if (ppsUnits.length > 0) {\n            const pps = ppsUnits[0];\n            const ppsBitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(removeEmulationPreventionBytes(pps));\n            ppsBitstream.skipBits(16); // NAL header\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(ppsBitstream); // pps_pic_parameter_set_id\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(ppsBitstream); // pps_seq_parameter_set_id\n            ppsBitstream.skipBits(1); // dependent_slice_segments_enabled_flag\n            ppsBitstream.skipBits(1); // output_flag_present_flag\n            ppsBitstream.skipBits(3); // num_extra_slice_header_bits\n            ppsBitstream.skipBits(1); // sign_data_hiding_enabled_flag\n            ppsBitstream.skipBits(1); // cabac_init_present_flag\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(ppsBitstream); // num_ref_idx_l0_default_active_minus1\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(ppsBitstream); // num_ref_idx_l1_default_active_minus1\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readSignedExpGolomb)(ppsBitstream); // init_qp_minus26\n            ppsBitstream.skipBits(1); // constrained_intra_pred_flag\n            ppsBitstream.skipBits(1); // transform_skip_enabled_flag\n            if (ppsBitstream.readBits(1)) { // cu_qp_delta_enabled_flag\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(ppsBitstream); // diff_cu_qp_delta_depth\n            }\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readSignedExpGolomb)(ppsBitstream); // pps_cb_qp_offset\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readSignedExpGolomb)(ppsBitstream); // pps_cr_qp_offset\n            ppsBitstream.skipBits(1); // pps_slice_chroma_qp_offsets_present_flag\n            ppsBitstream.skipBits(1); // weighted_pred_flag\n            ppsBitstream.skipBits(1); // weighted_bipred_flag\n            ppsBitstream.skipBits(1); // transquant_bypass_enabled_flag\n            const tiles_enabled_flag = ppsBitstream.readBits(1);\n            const entropy_coding_sync_enabled_flag = ppsBitstream.readBits(1);\n            if (!tiles_enabled_flag && !entropy_coding_sync_enabled_flag)\n                parallelismType = 0;\n            else if (tiles_enabled_flag && !entropy_coding_sync_enabled_flag)\n                parallelismType = 2;\n            else if (!tiles_enabled_flag && entropy_coding_sync_enabled_flag)\n                parallelismType = 3;\n            else\n                parallelismType = 0;\n        }\n        const arrays = [\n            ...(vpsUnits.length\n                ? [\n                    {\n                        arrayCompleteness: 1,\n                        nalUnitType: HevcNalUnitType.VPS_NUT,\n                        nalUnits: vpsUnits,\n                    },\n                ]\n                : []),\n            ...(spsUnits.length\n                ? [\n                    {\n                        arrayCompleteness: 1,\n                        nalUnitType: HevcNalUnitType.SPS_NUT,\n                        nalUnits: spsUnits,\n                    },\n                ]\n                : []),\n            ...(ppsUnits.length\n                ? [\n                    {\n                        arrayCompleteness: 1,\n                        nalUnitType: HevcNalUnitType.PPS_NUT,\n                        nalUnits: ppsUnits,\n                    },\n                ]\n                : []),\n            ...(seiUnits.length\n                ? [\n                    {\n                        arrayCompleteness: 1,\n                        nalUnitType: extractNalUnitTypeForHevc(seiUnits[0]),\n                        nalUnits: seiUnits,\n                    },\n                ]\n                : []),\n        ];\n        const record = {\n            configurationVersion: 1,\n            generalProfileSpace: general_profile_space,\n            generalTierFlag: general_tier_flag,\n            generalProfileIdc: general_profile_idc,\n            generalProfileCompatibilityFlags: general_profile_compatibility_flags,\n            generalConstraintIndicatorFlags: general_constraint_indicator_flags,\n            generalLevelIdc: general_level_idc,\n            minSpatialSegmentationIdc: min_spatial_segmentation_idc,\n            parallelismType,\n            chromaFormatIdc: chroma_format_idc,\n            bitDepthLumaMinus8: bit_depth_luma_minus8,\n            bitDepthChromaMinus8: bit_depth_chroma_minus8,\n            avgFrameRate: 0,\n            constantFrameRate: 0,\n            numTemporalLayers: sps_max_sub_layers_minus1 + 1,\n            temporalIdNested: sps_temporal_id_nesting_flag,\n            lengthSizeMinusOne: 3,\n            arrays,\n        };\n        return record;\n    }\n    catch (error) {\n        console.error('Error building HEVC Decoder Configuration Record:', error);\n        return null;\n    }\n};\nconst parseProfileTierLevel = (bitstream, maxNumSubLayersMinus1) => {\n    const general_profile_space = bitstream.readBits(2);\n    const general_tier_flag = bitstream.readBits(1);\n    const general_profile_idc = bitstream.readBits(5);\n    let general_profile_compatibility_flags = 0;\n    for (let i = 0; i < 32; i++) {\n        general_profile_compatibility_flags = (general_profile_compatibility_flags << 1) | bitstream.readBits(1);\n    }\n    const general_constraint_indicator_flags = new Uint8Array(6);\n    for (let i = 0; i < 6; i++) {\n        general_constraint_indicator_flags[i] = bitstream.readBits(8);\n    }\n    const general_level_idc = bitstream.readBits(8);\n    const sub_layer_profile_present_flag = [];\n    const sub_layer_level_present_flag = [];\n    for (let i = 0; i < maxNumSubLayersMinus1; i++) {\n        sub_layer_profile_present_flag.push(bitstream.readBits(1));\n        sub_layer_level_present_flag.push(bitstream.readBits(1));\n    }\n    if (maxNumSubLayersMinus1 > 0) {\n        for (let i = maxNumSubLayersMinus1; i < 8; i++) {\n            bitstream.skipBits(2); // reserved_zero_2bits\n        }\n    }\n    for (let i = 0; i < maxNumSubLayersMinus1; i++) {\n        if (sub_layer_profile_present_flag[i])\n            bitstream.skipBits(88);\n        if (sub_layer_level_present_flag[i])\n            bitstream.skipBits(8);\n    }\n    return {\n        general_profile_space,\n        general_tier_flag,\n        general_profile_idc,\n        general_profile_compatibility_flags,\n        general_constraint_indicator_flags,\n        general_level_idc,\n    };\n};\nconst skipScalingListData = (bitstream) => {\n    for (let sizeId = 0; sizeId < 4; sizeId++) {\n        for (let matrixId = 0; matrixId < (sizeId === 3 ? 2 : 6); matrixId++) {\n            const scaling_list_pred_mode_flag = bitstream.readBits(1);\n            if (!scaling_list_pred_mode_flag) {\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // scaling_list_pred_matrix_id_delta\n            }\n            else {\n                const coefNum = Math.min(64, 1 << (4 + (sizeId << 1)));\n                if (sizeId > 1) {\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readSignedExpGolomb)(bitstream); // scaling_list_dc_coef_minus8\n                }\n                for (let i = 0; i < coefNum; i++) {\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readSignedExpGolomb)(bitstream); // scaling_list_delta_coef\n                }\n            }\n        }\n    }\n};\nconst skipAllStRefPicSets = (bitstream, num_short_term_ref_pic_sets) => {\n    const NumDeltaPocs = [];\n    for (let stRpsIdx = 0; stRpsIdx < num_short_term_ref_pic_sets; stRpsIdx++) {\n        NumDeltaPocs[stRpsIdx] = skipStRefPicSet(bitstream, stRpsIdx, num_short_term_ref_pic_sets, NumDeltaPocs);\n    }\n};\nconst skipStRefPicSet = (bitstream, stRpsIdx, num_short_term_ref_pic_sets, NumDeltaPocs) => {\n    let NumDeltaPocsThis = 0;\n    let inter_ref_pic_set_prediction_flag = 0;\n    let RefRpsIdx = 0;\n    if (stRpsIdx !== 0) {\n        inter_ref_pic_set_prediction_flag = bitstream.readBits(1);\n    }\n    if (inter_ref_pic_set_prediction_flag) {\n        if (stRpsIdx === num_short_term_ref_pic_sets) {\n            const delta_idx_minus1 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n            RefRpsIdx = stRpsIdx - (delta_idx_minus1 + 1);\n        }\n        else {\n            RefRpsIdx = stRpsIdx - 1;\n        }\n        bitstream.readBits(1); // delta_rps_sign\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // abs_delta_rps_minus1\n        // The number of iterations is NumDeltaPocs[RefRpsIdx] + 1\n        const numDelta = NumDeltaPocs[RefRpsIdx] ?? 0;\n        for (let j = 0; j <= numDelta; j++) {\n            const used_by_curr_pic_flag = bitstream.readBits(1);\n            if (!used_by_curr_pic_flag) {\n                bitstream.readBits(1); // use_delta_flag\n            }\n        }\n        NumDeltaPocsThis = NumDeltaPocs[RefRpsIdx];\n    }\n    else {\n        const num_negative_pics = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n        const num_positive_pics = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n        for (let i = 0; i < num_negative_pics; i++) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // delta_poc_s0_minus1[i]\n            bitstream.readBits(1); // used_by_curr_pic_s0_flag[i]\n        }\n        for (let i = 0; i < num_positive_pics; i++) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // delta_poc_s1_minus1[i]\n            bitstream.readBits(1); // used_by_curr_pic_s1_flag[i]\n        }\n        NumDeltaPocsThis = num_negative_pics + num_positive_pics;\n    }\n    return NumDeltaPocsThis;\n};\nconst parseVuiForMinSpatialSegmentationIdc = (bitstream, sps_max_sub_layers_minus1) => {\n    if (bitstream.readBits(1)) { // aspect_ratio_info_present_flag\n        const aspect_ratio_idc = bitstream.readBits(8);\n        if (aspect_ratio_idc === 255) {\n            bitstream.readBits(16); // sar_width\n            bitstream.readBits(16); // sar_height\n        }\n    }\n    if (bitstream.readBits(1)) { // overscan_info_present_flag\n        bitstream.readBits(1); // overscan_appropriate_flag\n    }\n    if (bitstream.readBits(1)) { // video_signal_type_present_flag\n        bitstream.readBits(3); // video_format\n        bitstream.readBits(1); // video_full_range_flag\n        if (bitstream.readBits(1)) {\n            bitstream.readBits(8); // colour_primaries\n            bitstream.readBits(8); // transfer_characteristics\n            bitstream.readBits(8); // matrix_coeffs\n        }\n    }\n    if (bitstream.readBits(1)) { // chroma_loc_info_present_flag\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // chroma_sample_loc_type_top_field\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // chroma_sample_loc_type_bottom_field\n    }\n    bitstream.readBits(1); // neutral_chroma_indication_flag\n    bitstream.readBits(1); // field_seq_flag\n    bitstream.readBits(1); // frame_field_info_present_flag\n    if (bitstream.readBits(1)) { // default_display_window_flag\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // def_disp_win_left_offset\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // def_disp_win_right_offset\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // def_disp_win_top_offset\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // def_disp_win_bottom_offset\n    }\n    if (bitstream.readBits(1)) { // vui_timing_info_present_flag\n        bitstream.readBits(32); // vui_num_units_in_tick\n        bitstream.readBits(32); // vui_time_scale\n        if (bitstream.readBits(1)) { // vui_poc_proportional_to_timing_flag\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // vui_num_ticks_poc_diff_one_minus1\n        }\n        if (bitstream.readBits(1)) {\n            skipHrdParameters(bitstream, true, sps_max_sub_layers_minus1);\n        }\n    }\n    if (bitstream.readBits(1)) { // bitstream_restriction_flag\n        bitstream.readBits(1); // tiles_fixed_structure_flag\n        bitstream.readBits(1); // motion_vectors_over_pic_boundaries_flag\n        bitstream.readBits(1); // restricted_ref_pic_lists_flag\n        const min_spatial_segmentation_idc = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream);\n        // skip the rest\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // max_bytes_per_pic_denom\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // max_bits_per_min_cu_denom\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // log2_max_mv_length_horizontal\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // log2_max_mv_length_vertical\n        return min_spatial_segmentation_idc;\n    }\n    return 0;\n};\nconst skipHrdParameters = (bitstream, commonInfPresentFlag, maxNumSubLayersMinus1) => {\n    let nal_hrd_parameters_present_flag = false;\n    let vcl_hrd_parameters_present_flag = false;\n    let sub_pic_hrd_params_present_flag = false;\n    if (commonInfPresentFlag) {\n        nal_hrd_parameters_present_flag = bitstream.readBits(1) === 1;\n        vcl_hrd_parameters_present_flag = bitstream.readBits(1) === 1;\n        if (nal_hrd_parameters_present_flag || vcl_hrd_parameters_present_flag) {\n            sub_pic_hrd_params_present_flag = bitstream.readBits(1) === 1;\n            if (sub_pic_hrd_params_present_flag) {\n                bitstream.readBits(8); // tick_divisor_minus2\n                bitstream.readBits(5); // du_cpb_removal_delay_increment_length_minus1\n                bitstream.readBits(1); // sub_pic_cpb_params_in_pic_timing_sei_flag\n                bitstream.readBits(5); // dpb_output_delay_du_length_minus1\n            }\n            bitstream.readBits(4); // bit_rate_scale\n            bitstream.readBits(4); // cpb_size_scale\n            if (sub_pic_hrd_params_present_flag) {\n                bitstream.readBits(4); // cpb_size_du_scale\n            }\n            bitstream.readBits(5); // initial_cpb_removal_delay_length_minus1\n            bitstream.readBits(5); // au_cpb_removal_delay_length_minus1\n            bitstream.readBits(5); // dpb_output_delay_length_minus1\n        }\n    }\n    for (let i = 0; i <= maxNumSubLayersMinus1; i++) {\n        const fixed_pic_rate_general_flag = bitstream.readBits(1) === 1;\n        let fixed_pic_rate_within_cvs_flag = true; // Default assumption if general is true\n        if (!fixed_pic_rate_general_flag) {\n            fixed_pic_rate_within_cvs_flag = bitstream.readBits(1) === 1;\n        }\n        let low_delay_hrd_flag = false; // Default assumption\n        if (fixed_pic_rate_within_cvs_flag) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // elemental_duration_in_tc_minus1[i]\n        }\n        else {\n            low_delay_hrd_flag = bitstream.readBits(1) === 1;\n        }\n        let CpbCnt = 1; // Default if low_delay is true\n        if (!low_delay_hrd_flag) {\n            const cpb_cnt_minus1 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // cpb_cnt_minus1[i]\n            CpbCnt = cpb_cnt_minus1 + 1;\n        }\n        if (nal_hrd_parameters_present_flag) {\n            skipSubLayerHrdParameters(bitstream, CpbCnt, sub_pic_hrd_params_present_flag);\n        }\n        if (vcl_hrd_parameters_present_flag) {\n            skipSubLayerHrdParameters(bitstream, CpbCnt, sub_pic_hrd_params_present_flag);\n        }\n    }\n};\nconst skipSubLayerHrdParameters = (bitstream, CpbCnt, sub_pic_hrd_params_present_flag) => {\n    for (let i = 0; i < CpbCnt; i++) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // bit_rate_value_minus1[i]\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // cpb_size_value_minus1[i]\n        if (sub_pic_hrd_params_present_flag) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // cpb_size_du_value_minus1[i]\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.readExpGolomb)(bitstream); // bit_rate_du_value_minus1[i]\n        }\n        bitstream.readBits(1); // cbr_flag[i]\n    }\n};\n/** Serializes an HevcDecoderConfigurationRecord into the format specified in Section 8.3.3.1 of ISO 14496-15. */\nconst serializeHevcDecoderConfigurationRecord = (record) => {\n    const bytes = [];\n    bytes.push(record.configurationVersion);\n    bytes.push(((record.generalProfileSpace & 0x3) << 6)\n        | ((record.generalTierFlag & 0x1) << 5)\n        | (record.generalProfileIdc & 0x1F));\n    bytes.push((record.generalProfileCompatibilityFlags >>> 24) & 0xFF);\n    bytes.push((record.generalProfileCompatibilityFlags >>> 16) & 0xFF);\n    bytes.push((record.generalProfileCompatibilityFlags >>> 8) & 0xFF);\n    bytes.push(record.generalProfileCompatibilityFlags & 0xFF);\n    bytes.push(...record.generalConstraintIndicatorFlags);\n    bytes.push(record.generalLevelIdc & 0xFF);\n    bytes.push(0xF0 | ((record.minSpatialSegmentationIdc >> 8) & 0x0F)); // Reserved + high nibble\n    bytes.push(record.minSpatialSegmentationIdc & 0xFF); // Low byte\n    bytes.push(0xFC | (record.parallelismType & 0x03));\n    bytes.push(0xFC | (record.chromaFormatIdc & 0x03));\n    bytes.push(0xF8 | (record.bitDepthLumaMinus8 & 0x07));\n    bytes.push(0xF8 | (record.bitDepthChromaMinus8 & 0x07));\n    bytes.push((record.avgFrameRate >> 8) & 0xFF); // High byte\n    bytes.push(record.avgFrameRate & 0xFF); // Low byte\n    bytes.push(((record.constantFrameRate & 0x03) << 6)\n        | ((record.numTemporalLayers & 0x07) << 3)\n        | ((record.temporalIdNested & 0x01) << 2)\n        | (record.lengthSizeMinusOne & 0x03));\n    bytes.push(record.arrays.length & 0xFF);\n    for (const arr of record.arrays) {\n        bytes.push(((arr.arrayCompleteness & 0x01) << 7)\n            | (0 << 6)\n            | (arr.nalUnitType & 0x3F));\n        bytes.push((arr.nalUnits.length >> 8) & 0xFF); // High byte\n        bytes.push(arr.nalUnits.length & 0xFF); // Low byte\n        for (const nal of arr.nalUnits) {\n            bytes.push((nal.length >> 8) & 0xFF); // High byte\n            bytes.push(nal.length & 0xFF); // Low byte\n            for (let i = 0; i < nal.length; i++) {\n                bytes.push(nal[i]);\n            }\n        }\n    }\n    return new Uint8Array(bytes);\n};\nconst extractVp9CodecInfoFromPacket = (packet) => {\n    // eslint-disable-next-line @stylistic/max-len\n    // https://storage.googleapis.com/downloads.webmproject.org/docs/vp9/vp9-bitstream-specification-v0.7-20170222-draft.pdf\n    // http://downloads.webmproject.org/docs/vp9/vp9-bitstream_superframe-and-uncompressed-header_v1.0.pdf\n    const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(packet);\n    // Frame marker (0b10)\n    const frameMarker = bitstream.readBits(2);\n    if (frameMarker !== 2) {\n        return null;\n    }\n    // Profile\n    const profileLowBit = bitstream.readBits(1);\n    const profileHighBit = bitstream.readBits(1);\n    const profile = (profileHighBit << 1) + profileLowBit;\n    // Skip reserved bit for profile 3\n    if (profile === 3) {\n        bitstream.skipBits(1);\n    }\n    // show_existing_frame\n    const showExistingFrame = bitstream.readBits(1);\n    if (showExistingFrame === 1) {\n        return null;\n    }\n    // frame_type (0 = key frame)\n    const frameType = bitstream.readBits(1);\n    if (frameType !== 0) {\n        return null;\n    }\n    // Skip show_frame and error_resilient_mode\n    bitstream.skipBits(2);\n    // Sync code (0x498342)\n    const syncCode = bitstream.readBits(24);\n    if (syncCode !== 0x498342) {\n        return null;\n    }\n    // Color config\n    let bitDepth = 8;\n    if (profile >= 2) {\n        const tenOrTwelveBit = bitstream.readBits(1);\n        bitDepth = tenOrTwelveBit ? 12 : 10;\n    }\n    // Color space\n    const colorSpace = bitstream.readBits(3);\n    let chromaSubsampling = 0;\n    let videoFullRangeFlag = 0;\n    if (colorSpace !== 7) { // 7 is CS_RGB\n        const colorRange = bitstream.readBits(1);\n        videoFullRangeFlag = colorRange;\n        if (profile === 1 || profile === 3) {\n            const subsamplingX = bitstream.readBits(1);\n            const subsamplingY = bitstream.readBits(1);\n            // 0 = 4:2:0 vertical\n            // 1 = 4:2:0 colocated\n            // 2 = 4:2:2\n            // 3 = 4:4:4\n            chromaSubsampling = !subsamplingX && !subsamplingY\n                ? 3 // 0,0 = 4:4:4\n                : subsamplingX && !subsamplingY\n                    ? 2 // 1,0 = 4:2:2\n                    : 1; // 1,1 = 4:2:0 colocated (default)\n            // Skip reserved bit\n            bitstream.skipBits(1);\n        }\n        else {\n            // For profile 0 and 2, always 4:2:0\n            chromaSubsampling = 1; // Using colocated as default\n        }\n    }\n    else {\n        // RGB is always 4:4:4\n        chromaSubsampling = 3;\n        videoFullRangeFlag = 1;\n    }\n    // Parse frame size\n    const widthMinusOne = bitstream.readBits(16);\n    const heightMinusOne = bitstream.readBits(16);\n    const width = widthMinusOne + 1;\n    const height = heightMinusOne + 1;\n    // Calculate level based on dimensions\n    const pictureSize = width * height;\n    let level = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.last)(_codec_js__WEBPACK_IMPORTED_MODULE_1__.VP9_LEVEL_TABLE).level; // Default to highest level\n    for (const entry of _codec_js__WEBPACK_IMPORTED_MODULE_1__.VP9_LEVEL_TABLE) {\n        if (pictureSize <= entry.maxPictureSize) {\n            level = entry.level;\n            break;\n        }\n    }\n    // Map color_space to standard values\n    const matrixCoefficients = colorSpace === 7\n        ? 0\n        : colorSpace === 2\n            ? 1\n            : colorSpace === 1\n                ? 6\n                : 2;\n    const colourPrimaries = colorSpace === 2\n        ? 1\n        : colorSpace === 1\n            ? 6\n            : 2;\n    const transferCharacteristics = colorSpace === 2\n        ? 1\n        : colorSpace === 1\n            ? 6\n            : 2;\n    return {\n        profile,\n        level,\n        bitDepth,\n        chromaSubsampling,\n        videoFullRangeFlag,\n        colourPrimaries,\n        transferCharacteristics,\n        matrixCoefficients,\n    };\n};\n/** Iterates over all OBUs in an AV1 packet bistream. */\nconst iterateAv1PacketObus = function* (packet) {\n    // https://aomediacodec.github.io/av1-spec/av1-spec.pdf\n    const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(packet);\n    const readLeb128 = () => {\n        let value = 0;\n        for (let i = 0; i < 8; i++) {\n            const byte = bitstream.readAlignedByte();\n            value |= ((byte & 0x7f) << (i * 7));\n            if (!(byte & 0x80)) {\n                break;\n            }\n            // Spec requirement\n            if (i === 7 && (byte & 0x80)) {\n                return null;\n            }\n        }\n        // Spec requirement\n        if (value >= 2 ** 32 - 1) {\n            return null;\n        }\n        return value;\n    };\n    while (bitstream.getBitsLeft() >= 8) {\n        // Parse OBU header\n        bitstream.skipBits(1);\n        const obuType = bitstream.readBits(4);\n        const obuExtension = bitstream.readBits(1);\n        const obuHasSizeField = bitstream.readBits(1);\n        bitstream.skipBits(1);\n        // Skip extension header if present\n        if (obuExtension) {\n            bitstream.skipBits(8);\n        }\n        // Read OBU size if present\n        let obuSize;\n        if (obuHasSizeField) {\n            const obuSizeValue = readLeb128();\n            if (obuSizeValue === null)\n                return; // It was invalid\n            obuSize = obuSizeValue;\n        }\n        else {\n            // Calculate remaining bits and convert to bytes, rounding down\n            obuSize = Math.floor(bitstream.getBitsLeft() / 8);\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(bitstream.pos % 8 === 0);\n        yield {\n            type: obuType,\n            data: packet.subarray(bitstream.pos / 8, bitstream.pos / 8 + obuSize),\n        };\n        // Move to next OBU\n        bitstream.skipBits(obuSize * 8);\n    }\n};\n/**\n * When AV1 codec information is not provided by the container, we can still try to extract the information by digging\n * into the AV1 bitstream.\n */\nconst extractAv1CodecInfoFromPacket = (packet) => {\n    // https://aomediacodec.github.io/av1-spec/av1-spec.pdf\n    for (const { type, data } of iterateAv1PacketObus(packet)) {\n        if (type !== 1) {\n            continue; // 1 == OBU_SEQUENCE_HEADER\n        }\n        const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(data);\n        // Read sequence header fields\n        const seqProfile = bitstream.readBits(3);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const stillPicture = bitstream.readBits(1);\n        const reducedStillPictureHeader = bitstream.readBits(1);\n        let seqLevel = 0;\n        let seqTier = 0;\n        let bufferDelayLengthMinus1 = 0;\n        if (reducedStillPictureHeader) {\n            seqLevel = bitstream.readBits(5);\n        }\n        else {\n            // Parse timing_info_present_flag\n            const timingInfoPresentFlag = bitstream.readBits(1);\n            if (timingInfoPresentFlag) {\n                // Skip timing info (num_units_in_display_tick, time_scale, equal_picture_interval)\n                bitstream.skipBits(32); // num_units_in_display_tick\n                bitstream.skipBits(32); // time_scale\n                const equalPictureInterval = bitstream.readBits(1);\n                if (equalPictureInterval) {\n                    // Skip num_ticks_per_picture_minus_1 (uvlc)\n                    // Since this is variable length, we'd need to implement uvlc reading\n                    // For now, we'll return null as this is rare\n                    return null;\n                }\n            }\n            // Parse decoder_model_info_present_flag\n            const decoderModelInfoPresentFlag = bitstream.readBits(1);\n            if (decoderModelInfoPresentFlag) {\n                // Store buffer_delay_length_minus_1 instead of just skipping\n                bufferDelayLengthMinus1 = bitstream.readBits(5);\n                bitstream.skipBits(32); // num_units_in_decoding_tick\n                bitstream.skipBits(5); // buffer_removal_time_length_minus_1\n                bitstream.skipBits(5); // frame_presentation_time_length_minus_1\n            }\n            // Parse operating_points_cnt_minus_1\n            const operatingPointsCntMinus1 = bitstream.readBits(5);\n            // For each operating point\n            for (let i = 0; i <= operatingPointsCntMinus1; i++) {\n                // operating_point_idc[i]\n                bitstream.skipBits(12);\n                // seq_level_idx[i]\n                const seqLevelIdx = bitstream.readBits(5);\n                if (i === 0) {\n                    seqLevel = seqLevelIdx;\n                }\n                if (seqLevelIdx > 7) {\n                    // seq_tier[i]\n                    const seqTierTemp = bitstream.readBits(1);\n                    if (i === 0) {\n                        seqTier = seqTierTemp;\n                    }\n                }\n                if (decoderModelInfoPresentFlag) {\n                    // decoder_model_present_for_this_op[i]\n                    const decoderModelPresentForThisOp = bitstream.readBits(1);\n                    if (decoderModelPresentForThisOp) {\n                        const n = bufferDelayLengthMinus1 + 1;\n                        bitstream.skipBits(n); // decoder_buffer_delay[op]\n                        bitstream.skipBits(n); // encoder_buffer_delay[op]\n                        bitstream.skipBits(1); // low_delay_mode_flag[op]\n                    }\n                }\n                // initial_display_delay_present_flag\n                const initialDisplayDelayPresentFlag = bitstream.readBits(1);\n                if (initialDisplayDelayPresentFlag) {\n                    // initial_display_delay_minus_1[i]\n                    bitstream.skipBits(4);\n                }\n            }\n        }\n        const highBitdepth = bitstream.readBits(1);\n        let bitDepth = 8;\n        if (seqProfile === 2 && highBitdepth) {\n            const twelveBit = bitstream.readBits(1);\n            bitDepth = twelveBit ? 12 : 10;\n        }\n        else if (seqProfile <= 2) {\n            bitDepth = highBitdepth ? 10 : 8;\n        }\n        let monochrome = 0;\n        if (seqProfile !== 1) {\n            monochrome = bitstream.readBits(1);\n        }\n        let chromaSubsamplingX = 1;\n        let chromaSubsamplingY = 1;\n        let chromaSamplePosition = 0;\n        if (!monochrome) {\n            if (seqProfile === 0) {\n                chromaSubsamplingX = 1;\n                chromaSubsamplingY = 1;\n            }\n            else if (seqProfile === 1) {\n                chromaSubsamplingX = 0;\n                chromaSubsamplingY = 0;\n            }\n            else {\n                if (bitDepth === 12) {\n                    chromaSubsamplingX = bitstream.readBits(1);\n                    if (chromaSubsamplingX) {\n                        chromaSubsamplingY = bitstream.readBits(1);\n                    }\n                }\n            }\n            if (chromaSubsamplingX && chromaSubsamplingY) {\n                chromaSamplePosition = bitstream.readBits(2);\n            }\n        }\n        return {\n            profile: seqProfile,\n            level: seqLevel,\n            tier: seqTier,\n            bitDepth,\n            monochrome,\n            chromaSubsamplingX,\n            chromaSubsamplingY,\n            chromaSamplePosition,\n        };\n    }\n    return null;\n};\nconst parseOpusIdentificationHeader = (bytes) => {\n    const view = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toDataView)(bytes);\n    const outputChannelCount = view.getUint8(9);\n    const preSkip = view.getUint16(10, true);\n    const inputSampleRate = view.getUint32(12, true);\n    const outputGain = view.getInt16(16, true);\n    const channelMappingFamily = view.getUint8(18);\n    let channelMappingTable = null;\n    if (channelMappingFamily) {\n        channelMappingTable = bytes.subarray(19, 19 + 2 + outputChannelCount);\n    }\n    return {\n        outputChannelCount,\n        preSkip,\n        inputSampleRate,\n        outputGain,\n        channelMappingFamily,\n        channelMappingTable,\n    };\n};\n// From https://datatracker.ietf.org/doc/html/rfc6716, in 48 kHz samples\nconst OPUS_FRAME_DURATION_TABLE = [\n    480, 960, 1920, 2880,\n    480, 960, 1920, 2880,\n    480, 960, 1920, 2880,\n    480, 960,\n    480, 960,\n    120, 240, 480, 960,\n    120, 240, 480, 960,\n    120, 240, 480, 960,\n    120, 240, 480, 960,\n];\nconst parseOpusTocByte = (packet) => {\n    const config = packet[0] >> 3;\n    return {\n        durationInSamples: OPUS_FRAME_DURATION_TABLE[config],\n    };\n};\n// Based on vorbis_parser.c from FFmpeg.\nconst parseModesFromVorbisSetupPacket = (setupHeader) => {\n    // Verify that this is a Setup header.\n    if (setupHeader.length < 7) {\n        throw new Error('Setup header is too short.');\n    }\n    if (setupHeader[0] !== 5) {\n        throw new Error('Wrong packet type in Setup header.');\n    }\n    const signature = String.fromCharCode(...setupHeader.slice(1, 7));\n    if (signature !== 'vorbis') {\n        throw new Error('Invalid packet signature in Setup header.');\n    }\n    // Reverse the entire buffer.\n    const bufSize = setupHeader.length;\n    const revBuffer = new Uint8Array(bufSize);\n    for (let i = 0; i < bufSize; i++) {\n        revBuffer[i] = setupHeader[bufSize - 1 - i];\n    }\n    // Initialize a Bitstream on the reversed buffer.\n    const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(revBuffer);\n    // --- Find the framing bit.\n    // In FFmpeg code, we scan until get_bits1() returns 1.\n    let gotFramingBit = 0;\n    while (bitstream.getBitsLeft() > 97) {\n        if (bitstream.readBits(1) === 1) {\n            gotFramingBit = bitstream.pos;\n            break;\n        }\n    }\n    if (gotFramingBit === 0) {\n        throw new Error('Invalid Setup header: framing bit not found.');\n    }\n    // --- Search backwards for a valid mode header.\n    // We try to “guess” the number of modes by reading a fixed pattern.\n    let modeCount = 0;\n    let gotModeHeader = false;\n    let lastModeCount = 0;\n    while (bitstream.getBitsLeft() >= 97) {\n        const tempPos = bitstream.pos;\n        const a = bitstream.readBits(8);\n        const b = bitstream.readBits(16);\n        const c = bitstream.readBits(16);\n        // If a > 63 or b or c nonzero, assume we’ve gone too far.\n        if (a > 63 || b !== 0 || c !== 0) {\n            bitstream.pos = tempPos;\n            break;\n        }\n        bitstream.skipBits(1);\n        modeCount++;\n        if (modeCount > 64) {\n            break;\n        }\n        const bsClone = bitstream.clone();\n        const candidate = bsClone.readBits(6) + 1;\n        if (candidate === modeCount) {\n            gotModeHeader = true;\n            lastModeCount = modeCount;\n        }\n    }\n    if (!gotModeHeader) {\n        throw new Error('Invalid Setup header: mode header not found.');\n    }\n    if (lastModeCount > 63) {\n        throw new Error(`Unsupported mode count: ${lastModeCount}.`);\n    }\n    const finalModeCount = lastModeCount;\n    // --- Reinitialize the bitstream.\n    bitstream.pos = 0;\n    // Skip the bits up to the found framing bit.\n    bitstream.skipBits(gotFramingBit);\n    // --- Now read, for each mode (in reverse order), 40 bits then one bit.\n    // That one bit is the mode blockflag.\n    const modeBlockflags = Array(finalModeCount).fill(0);\n    for (let i = finalModeCount - 1; i >= 0; i--) {\n        bitstream.skipBits(40);\n        modeBlockflags[i] = bitstream.readBits(1);\n    }\n    return { modeBlockflags };\n};\n/** Determines a packet's type (key or delta) by digging into the packet bitstream. */\nconst determineVideoPacketType = async (videoTrack, packet) => {\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(videoTrack.codec);\n    switch (videoTrack.codec) {\n        case 'avc':\n            {\n                const decoderConfig = await videoTrack.getDecoderConfig();\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(decoderConfig);\n                const nalUnits = extractAvcNalUnits(packet.data, decoderConfig);\n                const isKeyframe = nalUnits.some(x => extractNalUnitTypeForAvc(x) === AvcNalUnitType.IDR);\n                return isKeyframe ? 'key' : 'delta';\n            }\n            ;\n        case 'hevc':\n            {\n                const decoderConfig = await videoTrack.getDecoderConfig();\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(decoderConfig);\n                const nalUnits = extractHevcNalUnits(packet.data, decoderConfig);\n                const isKeyframe = nalUnits.some((x) => {\n                    const type = extractNalUnitTypeForHevc(x);\n                    return HevcNalUnitType.BLA_W_LP <= type && type <= HevcNalUnitType.RSV_IRAP_VCL23;\n                });\n                return isKeyframe ? 'key' : 'delta';\n            }\n            ;\n        case 'vp8':\n            {\n                // VP8, once again, by far the easiest to deal with.\n                const frameType = packet.data[0] & 0b1;\n                return frameType === 0 ? 'key' : 'delta';\n            }\n            ;\n        case 'vp9':\n            {\n                const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(packet.data);\n                if (bitstream.readBits(2) !== 2) {\n                    return null;\n                }\n                ;\n                const profileLowBit = bitstream.readBits(1);\n                const profileHighBit = bitstream.readBits(1);\n                const profile = (profileHighBit << 1) + profileLowBit;\n                // Skip reserved bit for profile 3\n                if (profile === 3) {\n                    bitstream.skipBits(1);\n                }\n                const showExistingFrame = bitstream.readBits(1);\n                if (showExistingFrame) {\n                    return null;\n                }\n                const frameType = bitstream.readBits(1);\n                return frameType === 0 ? 'key' : 'delta';\n            }\n            ;\n        case 'av1':\n            {\n                let reducedStillPictureHeader = false;\n                for (const { type, data } of iterateAv1PacketObus(packet.data)) {\n                    if (type === 1) { // OBU_SEQUENCE_HEADER\n                        const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(data);\n                        bitstream.skipBits(4);\n                        reducedStillPictureHeader = !!bitstream.readBits(1);\n                    }\n                    else if (type === 3 // OBU_FRAME_HEADER\n                        || type === 6 // OBU_FRAME\n                        || type === 7 // OBU_REDUNDANT_FRAME_HEADER\n                    ) {\n                        if (reducedStillPictureHeader) {\n                            return 'key';\n                        }\n                        const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(data);\n                        const showExistingFrame = bitstream.readBits(1);\n                        if (showExistingFrame) {\n                            return null;\n                        }\n                        const frameType = bitstream.readBits(2);\n                        return frameType === 0 ? 'key' : 'delta';\n                    }\n                }\n                return null;\n            }\n            ;\n        default:\n            {\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assertNever)(videoTrack.codec);\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false);\n            }\n            ;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec-data.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js":
/*!***********************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/codec.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUDIO_CODECS: function() { return /* binding */ AUDIO_CODECS; },\n/* harmony export */   NON_PCM_AUDIO_CODECS: function() { return /* binding */ NON_PCM_AUDIO_CODECS; },\n/* harmony export */   OPUS_SAMPLE_RATE: function() { return /* binding */ OPUS_SAMPLE_RATE; },\n/* harmony export */   PCM_AUDIO_CODECS: function() { return /* binding */ PCM_AUDIO_CODECS; },\n/* harmony export */   SUBTITLE_CODECS: function() { return /* binding */ SUBTITLE_CODECS; },\n/* harmony export */   VIDEO_CODECS: function() { return /* binding */ VIDEO_CODECS; },\n/* harmony export */   VP9_LEVEL_TABLE: function() { return /* binding */ VP9_LEVEL_TABLE; },\n/* harmony export */   aacChannelMap: function() { return /* binding */ aacChannelMap; },\n/* harmony export */   aacFrequencyTable: function() { return /* binding */ aacFrequencyTable; },\n/* harmony export */   buildAudioCodecString: function() { return /* binding */ buildAudioCodecString; },\n/* harmony export */   buildVideoCodecString: function() { return /* binding */ buildVideoCodecString; },\n/* harmony export */   extractAudioCodecString: function() { return /* binding */ extractAudioCodecString; },\n/* harmony export */   extractVideoCodecString: function() { return /* binding */ extractVideoCodecString; },\n/* harmony export */   generateAv1CodecConfigurationFromCodecString: function() { return /* binding */ generateAv1CodecConfigurationFromCodecString; },\n/* harmony export */   generateVp9CodecConfigurationFromCodecString: function() { return /* binding */ generateVp9CodecConfigurationFromCodecString; },\n/* harmony export */   getAudioEncoderConfigExtension: function() { return /* binding */ getAudioEncoderConfigExtension; },\n/* harmony export */   getVideoEncoderConfigExtension: function() { return /* binding */ getVideoEncoderConfigExtension; },\n/* harmony export */   inferCodecFromCodecString: function() { return /* binding */ inferCodecFromCodecString; },\n/* harmony export */   parseAacAudioSpecificConfig: function() { return /* binding */ parseAacAudioSpecificConfig; },\n/* harmony export */   parsePcmCodec: function() { return /* binding */ parsePcmCodec; },\n/* harmony export */   validateAudioChunkMetadata: function() { return /* binding */ validateAudioChunkMetadata; },\n/* harmony export */   validateSubtitleMetadata: function() { return /* binding */ validateSubtitleMetadata; },\n/* harmony export */   validateVideoChunkMetadata: function() { return /* binding */ validateVideoChunkMetadata; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n/**\n * List of known video codecs, ordered by encoding preference.\n * @group Codecs\n * @public\n */\nconst VIDEO_CODECS = [\n    'avc',\n    'hevc',\n    'vp9',\n    'av1',\n    'vp8',\n];\n/**\n * List of known PCM (uncompressed) audio codecs, ordered by encoding preference.\n * @group Codecs\n * @public\n */\nconst PCM_AUDIO_CODECS = [\n    'pcm-s16', // We don't prefix 'le' so we're compatible with the WebCodecs-registered PCM codec strings\n    'pcm-s16be',\n    'pcm-s24',\n    'pcm-s24be',\n    'pcm-s32',\n    'pcm-s32be',\n    'pcm-f32',\n    'pcm-f32be',\n    'pcm-f64',\n    'pcm-f64be',\n    'pcm-u8',\n    'pcm-s8',\n    'ulaw',\n    'alaw',\n];\n/**\n * List of known compressed audio codecs, ordered by encoding preference.\n * @group Codecs\n * @public\n */\nconst NON_PCM_AUDIO_CODECS = [\n    'aac',\n    'opus',\n    'mp3',\n    'vorbis',\n    'flac',\n];\n/**\n * List of known audio codecs, ordered by encoding preference.\n * @group Codecs\n * @public\n */\nconst AUDIO_CODECS = [\n    ...NON_PCM_AUDIO_CODECS,\n    ...PCM_AUDIO_CODECS,\n];\n/**\n * List of known subtitle codecs, ordered by encoding preference.\n * @group Codecs\n * @public\n */\nconst SUBTITLE_CODECS = [\n    'webvtt',\n]; // TODO add the rest\n// https://en.wikipedia.org/wiki/Advanced_Video_Coding\nconst AVC_LEVEL_TABLE = [\n    { maxMacroblocks: 99, maxBitrate: 64000, level: 0x0A }, // Level 1\n    { maxMacroblocks: 396, maxBitrate: 192000, level: 0x0B }, // Level 1.1\n    { maxMacroblocks: 396, maxBitrate: 384000, level: 0x0C }, // Level 1.2\n    { maxMacroblocks: 396, maxBitrate: 768000, level: 0x0D }, // Level 1.3\n    { maxMacroblocks: 396, maxBitrate: 2000000, level: 0x14 }, // Level 2\n    { maxMacroblocks: 792, maxBitrate: 4000000, level: 0x15 }, // Level 2.1\n    { maxMacroblocks: 1620, maxBitrate: 4000000, level: 0x16 }, // Level 2.2\n    { maxMacroblocks: 1620, maxBitrate: 10000000, level: 0x1E }, // Level 3\n    { maxMacroblocks: 3600, maxBitrate: 14000000, level: 0x1F }, // Level 3.1\n    { maxMacroblocks: 5120, maxBitrate: 20000000, level: 0x20 }, // Level 3.2\n    { maxMacroblocks: 8192, maxBitrate: 20000000, level: 0x28 }, // Level 4\n    { maxMacroblocks: 8192, maxBitrate: 50000000, level: 0x29 }, // Level 4.1\n    { maxMacroblocks: 8704, maxBitrate: 50000000, level: 0x2A }, // Level 4.2\n    { maxMacroblocks: 22080, maxBitrate: 135000000, level: 0x32 }, // Level 5\n    { maxMacroblocks: 36864, maxBitrate: 240000000, level: 0x33 }, // Level 5.1\n    { maxMacroblocks: 36864, maxBitrate: 240000000, level: 0x34 }, // Level 5.2\n    { maxMacroblocks: 139264, maxBitrate: 240000000, level: 0x3C }, // Level 6\n    { maxMacroblocks: 139264, maxBitrate: 480000000, level: 0x3D }, // Level 6.1\n    { maxMacroblocks: 139264, maxBitrate: 800000000, level: 0x3E }, // Level 6.2\n];\n// https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding\nconst HEVC_LEVEL_TABLE = [\n    { maxPictureSize: 36864, maxBitrate: 128000, tier: 'L', level: 30 }, // Level 1 (Low Tier)\n    { maxPictureSize: 122880, maxBitrate: 1500000, tier: 'L', level: 60 }, // Level 2 (Low Tier)\n    { maxPictureSize: 245760, maxBitrate: 3000000, tier: 'L', level: 63 }, // Level 2.1 (Low Tier)\n    { maxPictureSize: 552960, maxBitrate: 6000000, tier: 'L', level: 90 }, // Level 3 (Low Tier)\n    { maxPictureSize: 983040, maxBitrate: 10000000, tier: 'L', level: 93 }, // Level 3.1 (Low Tier)\n    { maxPictureSize: 2228224, maxBitrate: 12000000, tier: 'L', level: 120 }, // Level 4 (Low Tier)\n    { maxPictureSize: 2228224, maxBitrate: 30000000, tier: 'H', level: 120 }, // Level 4 (High Tier)\n    { maxPictureSize: 2228224, maxBitrate: 20000000, tier: 'L', level: 123 }, // Level 4.1 (Low Tier)\n    { maxPictureSize: 2228224, maxBitrate: 50000000, tier: 'H', level: 123 }, // Level 4.1 (High Tier)\n    { maxPictureSize: 8912896, maxBitrate: 25000000, tier: 'L', level: 150 }, // Level 5 (Low Tier)\n    { maxPictureSize: 8912896, maxBitrate: 100000000, tier: 'H', level: 150 }, // Level 5 (High Tier)\n    { maxPictureSize: 8912896, maxBitrate: 40000000, tier: 'L', level: 153 }, // Level 5.1 (Low Tier)\n    { maxPictureSize: 8912896, maxBitrate: 160000000, tier: 'H', level: 153 }, // Level 5.1 (High Tier)\n    { maxPictureSize: 8912896, maxBitrate: 60000000, tier: 'L', level: 156 }, // Level 5.2 (Low Tier)\n    { maxPictureSize: 8912896, maxBitrate: 240000000, tier: 'H', level: 156 }, // Level 5.2 (High Tier)\n    { maxPictureSize: 35651584, maxBitrate: 60000000, tier: 'L', level: 180 }, // Level 6 (Low Tier)\n    { maxPictureSize: 35651584, maxBitrate: 240000000, tier: 'H', level: 180 }, // Level 6 (High Tier)\n    { maxPictureSize: 35651584, maxBitrate: 120000000, tier: 'L', level: 183 }, // Level 6.1 (Low Tier)\n    { maxPictureSize: 35651584, maxBitrate: 480000000, tier: 'H', level: 183 }, // Level 6.1 (High Tier)\n    { maxPictureSize: 35651584, maxBitrate: 240000000, tier: 'L', level: 186 }, // Level 6.2 (Low Tier)\n    { maxPictureSize: 35651584, maxBitrate: 800000000, tier: 'H', level: 186 }, // Level 6.2 (High Tier)\n];\n// https://en.wikipedia.org/wiki/VP9\nconst VP9_LEVEL_TABLE = [\n    { maxPictureSize: 36864, maxBitrate: 200000, level: 10 }, // Level 1\n    { maxPictureSize: 73728, maxBitrate: 800000, level: 11 }, // Level 1.1\n    { maxPictureSize: 122880, maxBitrate: 1800000, level: 20 }, // Level 2\n    { maxPictureSize: 245760, maxBitrate: 3600000, level: 21 }, // Level 2.1\n    { maxPictureSize: 552960, maxBitrate: 7200000, level: 30 }, // Level 3\n    { maxPictureSize: 983040, maxBitrate: 12000000, level: 31 }, // Level 3.1\n    { maxPictureSize: 2228224, maxBitrate: 18000000, level: 40 }, // Level 4\n    { maxPictureSize: 2228224, maxBitrate: 30000000, level: 41 }, // Level 4.1\n    { maxPictureSize: 8912896, maxBitrate: 60000000, level: 50 }, // Level 5\n    { maxPictureSize: 8912896, maxBitrate: 120000000, level: 51 }, // Level 5.1\n    { maxPictureSize: 8912896, maxBitrate: 180000000, level: 52 }, // Level 5.2\n    { maxPictureSize: 35651584, maxBitrate: 180000000, level: 60 }, // Level 6\n    { maxPictureSize: 35651584, maxBitrate: 240000000, level: 61 }, // Level 6.1\n    { maxPictureSize: 35651584, maxBitrate: 480000000, level: 62 }, // Level 6.2\n];\n// https://en.wikipedia.org/wiki/AV1\nconst AV1_LEVEL_TABLE = [\n    { maxPictureSize: 147456, maxBitrate: 1500000, tier: 'M', level: 0 }, // Level 2.0 (Main Tier)\n    { maxPictureSize: 278784, maxBitrate: 3000000, tier: 'M', level: 1 }, // Level 2.1 (Main Tier)\n    { maxPictureSize: 665856, maxBitrate: 6000000, tier: 'M', level: 4 }, // Level 3.0 (Main Tier)\n    { maxPictureSize: 1065024, maxBitrate: 10000000, tier: 'M', level: 5 }, // Level 3.1 (Main Tier)\n    { maxPictureSize: 2359296, maxBitrate: 12000000, tier: 'M', level: 8 }, // Level 4.0 (Main Tier)\n    { maxPictureSize: 2359296, maxBitrate: 30000000, tier: 'H', level: 8 }, // Level 4.0 (High Tier)\n    { maxPictureSize: 2359296, maxBitrate: 20000000, tier: 'M', level: 9 }, // Level 4.1 (Main Tier)\n    { maxPictureSize: 2359296, maxBitrate: 50000000, tier: 'H', level: 9 }, // Level 4.1 (High Tier)\n    { maxPictureSize: 8912896, maxBitrate: 30000000, tier: 'M', level: 12 }, // Level 5.0 (Main Tier)\n    { maxPictureSize: 8912896, maxBitrate: 100000000, tier: 'H', level: 12 }, // Level 5.0 (High Tier)\n    { maxPictureSize: 8912896, maxBitrate: 40000000, tier: 'M', level: 13 }, // Level 5.1 (Main Tier)\n    { maxPictureSize: 8912896, maxBitrate: 160000000, tier: 'H', level: 13 }, // Level 5.1 (High Tier)\n    { maxPictureSize: 8912896, maxBitrate: 60000000, tier: 'M', level: 14 }, // Level 5.2 (Main Tier)\n    { maxPictureSize: 8912896, maxBitrate: 240000000, tier: 'H', level: 14 }, // Level 5.2 (High Tier)\n    { maxPictureSize: 35651584, maxBitrate: 60000000, tier: 'M', level: 15 }, // Level 5.3 (Main Tier)\n    { maxPictureSize: 35651584, maxBitrate: 240000000, tier: 'H', level: 15 }, // Level 5.3 (High Tier)\n    { maxPictureSize: 35651584, maxBitrate: 60000000, tier: 'M', level: 16 }, // Level 6.0 (Main Tier)\n    { maxPictureSize: 35651584, maxBitrate: 240000000, tier: 'H', level: 16 }, // Level 6.0 (High Tier)\n    { maxPictureSize: 35651584, maxBitrate: 100000000, tier: 'M', level: 17 }, // Level 6.1 (Main Tier)\n    { maxPictureSize: 35651584, maxBitrate: 480000000, tier: 'H', level: 17 }, // Level 6.1 (High Tier)\n    { maxPictureSize: 35651584, maxBitrate: 160000000, tier: 'M', level: 18 }, // Level 6.2 (Main Tier)\n    { maxPictureSize: 35651584, maxBitrate: 800000000, tier: 'H', level: 18 }, // Level 6.2 (High Tier)\n    { maxPictureSize: 35651584, maxBitrate: 160000000, tier: 'M', level: 19 }, // Level 6.3 (Main Tier)\n    { maxPictureSize: 35651584, maxBitrate: 800000000, tier: 'H', level: 19 }, // Level 6.3 (High Tier)\n];\nconst VP9_DEFAULT_SUFFIX = '.01.01.01.01.00';\nconst AV1_DEFAULT_SUFFIX = '.0.110.01.01.01.0';\nconst buildVideoCodecString = (codec, width, height, bitrate) => {\n    if (codec === 'avc') {\n        const profileIndication = 0x64; // High Profile\n        const totalMacroblocks = Math.ceil(width / 16) * Math.ceil(height / 16);\n        // Determine the level based on the table\n        const levelInfo = AVC_LEVEL_TABLE.find(level => totalMacroblocks <= level.maxMacroblocks && bitrate <= level.maxBitrate) ?? (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.last)(AVC_LEVEL_TABLE);\n        const levelIndication = levelInfo ? levelInfo.level : 0;\n        const hexProfileIndication = profileIndication.toString(16).padStart(2, '0');\n        const hexProfileCompatibility = '00';\n        const hexLevelIndication = levelIndication.toString(16).padStart(2, '0');\n        return `avc1.${hexProfileIndication}${hexProfileCompatibility}${hexLevelIndication}`;\n    }\n    else if (codec === 'hevc') {\n        const profilePrefix = ''; // Profile space 0\n        const profileIdc = 1; // Main Profile\n        const compatibilityFlags = '6'; // Taken from the example in ISO 14496-15\n        const pictureSize = width * height;\n        const levelInfo = HEVC_LEVEL_TABLE.find(level => pictureSize <= level.maxPictureSize && bitrate <= level.maxBitrate) ?? (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.last)(HEVC_LEVEL_TABLE);\n        const constraintFlags = 'B0'; // Progressive source flag\n        return 'hev1.'\n            + `${profilePrefix}${profileIdc}.`\n            + `${compatibilityFlags}.`\n            + `${levelInfo.tier}${levelInfo.level}.`\n            + `${constraintFlags}`;\n    }\n    else if (codec === 'vp8') {\n        return 'vp8'; // Easy, this one\n    }\n    else if (codec === 'vp9') {\n        const profile = '00'; // Profile 0\n        const pictureSize = width * height;\n        const levelInfo = VP9_LEVEL_TABLE.find(level => pictureSize <= level.maxPictureSize && bitrate <= level.maxBitrate) ?? (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.last)(VP9_LEVEL_TABLE);\n        const bitDepth = '08'; // 8-bit\n        return `vp09.${profile}.${levelInfo.level.toString().padStart(2, '0')}.${bitDepth}`;\n    }\n    else if (codec === 'av1') {\n        const profile = 0; // Main Profile, single digit\n        const pictureSize = width * height;\n        const levelInfo = AV1_LEVEL_TABLE.find(level => pictureSize <= level.maxPictureSize && bitrate <= level.maxBitrate) ?? (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.last)(AV1_LEVEL_TABLE);\n        const level = levelInfo.level.toString().padStart(2, '0');\n        const bitDepth = '08'; // 8-bit\n        return `av01.${profile}.${level}${levelInfo.tier}.${bitDepth}`;\n    }\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    throw new TypeError(`Unhandled codec '${codec}'.`);\n};\nconst generateVp9CodecConfigurationFromCodecString = (codecString) => {\n    // Reference: https://www.webmproject.org/docs/container/#vp9-codec-feature-metadata-codecprivate\n    const parts = codecString.split('.'); // We can derive the required values from the codec string\n    const profile = Number(parts[1]);\n    const level = Number(parts[2]);\n    const bitDepth = Number(parts[3]);\n    const chromaSubsampling = parts[4] ? Number(parts[4]) : 1;\n    return [\n        1, 1, profile,\n        2, 1, level,\n        3, 1, bitDepth,\n        4, 1, chromaSubsampling,\n    ];\n};\nconst generateAv1CodecConfigurationFromCodecString = (codecString) => {\n    // Reference: https://aomediacodec.github.io/av1-isobmff/\n    const parts = codecString.split('.'); // We can derive the required values from the codec string\n    const marker = 1;\n    const version = 1;\n    const firstByte = (marker << 7) + version;\n    const profile = Number(parts[1]);\n    const levelAndTier = parts[2];\n    const level = Number(levelAndTier.slice(0, -1));\n    const secondByte = (profile << 5) + level;\n    const tier = levelAndTier.slice(-1) === 'H' ? 1 : 0;\n    const bitDepth = Number(parts[3]);\n    const highBitDepth = bitDepth === 8 ? 0 : 1;\n    const twelveBit = 0;\n    const monochrome = parts[4] ? Number(parts[4]) : 0;\n    const chromaSubsamplingX = parts[5] ? Number(parts[5][0]) : 1;\n    const chromaSubsamplingY = parts[5] ? Number(parts[5][1]) : 1;\n    const chromaSamplePosition = parts[5] ? Number(parts[5][2]) : 0; // CSP_UNKNOWN\n    const thirdByte = (tier << 7)\n        + (highBitDepth << 6)\n        + (twelveBit << 5)\n        + (monochrome << 4)\n        + (chromaSubsamplingX << 3)\n        + (chromaSubsamplingY << 2)\n        + chromaSamplePosition;\n    const initialPresentationDelayPresent = 0; // Should be fine\n    const fourthByte = initialPresentationDelayPresent;\n    return [firstByte, secondByte, thirdByte, fourthByte];\n};\nconst extractVideoCodecString = (trackInfo) => {\n    const { codec, codecDescription, colorSpace, avcCodecInfo, hevcCodecInfo, vp9CodecInfo, av1CodecInfo } = trackInfo;\n    if (codec === 'avc') {\n        if (avcCodecInfo) {\n            const bytes = new Uint8Array([\n                avcCodecInfo.avcProfileIndication,\n                avcCodecInfo.profileCompatibility,\n                avcCodecInfo.avcLevelIndication,\n            ]);\n            return `avc1.${(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHexString)(bytes)}`;\n        }\n        if (!codecDescription || codecDescription.byteLength < 4) {\n            throw new TypeError('AVC decoder description is not provided or is not at least 4 bytes long.');\n        }\n        return `avc1.${(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHexString)(codecDescription.subarray(1, 4))}`;\n    }\n    else if (codec === 'hevc') {\n        let generalProfileSpace;\n        let generalProfileIdc;\n        let compatibilityFlags;\n        let generalTierFlag;\n        let generalLevelIdc;\n        let constraintFlags;\n        if (hevcCodecInfo) {\n            generalProfileSpace = hevcCodecInfo.generalProfileSpace;\n            generalProfileIdc = hevcCodecInfo.generalProfileIdc;\n            compatibilityFlags = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.reverseBitsU32)(hevcCodecInfo.generalProfileCompatibilityFlags);\n            generalTierFlag = hevcCodecInfo.generalTierFlag;\n            generalLevelIdc = hevcCodecInfo.generalLevelIdc;\n            constraintFlags = [...hevcCodecInfo.generalConstraintIndicatorFlags];\n        }\n        else {\n            if (!codecDescription || codecDescription.byteLength < 23) {\n                throw new TypeError('HEVC decoder description is not provided or is not at least 23 bytes long.');\n            }\n            const view = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toDataView)(codecDescription);\n            const profileByte = view.getUint8(1);\n            generalProfileSpace = (profileByte >> 6) & 0x03;\n            generalProfileIdc = profileByte & 0x1F;\n            compatibilityFlags = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.reverseBitsU32)(view.getUint32(2));\n            generalTierFlag = (profileByte >> 5) & 0x01;\n            generalLevelIdc = view.getUint8(12);\n            constraintFlags = [];\n            for (let i = 0; i < 6; i++) {\n                constraintFlags.push(view.getUint8(6 + i));\n            }\n        }\n        let codecString = 'hev1.';\n        codecString += ['', 'A', 'B', 'C'][generalProfileSpace] + generalProfileIdc;\n        codecString += '.';\n        codecString += compatibilityFlags.toString(16).toUpperCase();\n        codecString += '.';\n        codecString += generalTierFlag === 0 ? 'L' : 'H';\n        codecString += generalLevelIdc;\n        while (constraintFlags.length > 0 && constraintFlags[constraintFlags.length - 1] === 0) {\n            constraintFlags.pop();\n        }\n        if (constraintFlags.length > 0) {\n            codecString += '.';\n            codecString += constraintFlags.map(x => x.toString(16).toUpperCase()).join('.');\n        }\n        return codecString;\n    }\n    else if (codec === 'vp8') {\n        return 'vp8'; // Easy, this one\n    }\n    else if (codec === 'vp9') {\n        if (!vp9CodecInfo) {\n            // Calculate level based on dimensions\n            const pictureSize = trackInfo.width * trackInfo.height;\n            let level = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.last)(VP9_LEVEL_TABLE).level; // Default to highest level\n            for (const entry of VP9_LEVEL_TABLE) {\n                if (pictureSize <= entry.maxPictureSize) {\n                    level = entry.level;\n                    break;\n                }\n            }\n            // We don't really know better, so let's return a general-purpose, common codec string and hope for the best\n            return `vp09.00.${level.toString().padStart(2, '0')}.08`;\n        }\n        const profile = vp9CodecInfo.profile.toString().padStart(2, '0');\n        const level = vp9CodecInfo.level.toString().padStart(2, '0');\n        const bitDepth = vp9CodecInfo.bitDepth.toString().padStart(2, '0');\n        const chromaSubsampling = vp9CodecInfo.chromaSubsampling.toString().padStart(2, '0');\n        const colourPrimaries = vp9CodecInfo.colourPrimaries.toString().padStart(2, '0');\n        const transferCharacteristics = vp9CodecInfo.transferCharacteristics.toString().padStart(2, '0');\n        const matrixCoefficients = vp9CodecInfo.matrixCoefficients.toString().padStart(2, '0');\n        const videoFullRangeFlag = vp9CodecInfo.videoFullRangeFlag.toString().padStart(2, '0');\n        let string = `vp09.${profile}.${level}.${bitDepth}.${chromaSubsampling}`;\n        string += `.${colourPrimaries}.${transferCharacteristics}.${matrixCoefficients}.${videoFullRangeFlag}`;\n        if (string.endsWith(VP9_DEFAULT_SUFFIX)) {\n            string = string.slice(0, -VP9_DEFAULT_SUFFIX.length);\n        }\n        return string;\n    }\n    else if (codec === 'av1') {\n        if (!av1CodecInfo) {\n            // Calculate level based on dimensions\n            const pictureSize = trackInfo.width * trackInfo.height;\n            let level = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.last)(VP9_LEVEL_TABLE).level; // Default to highest level\n            for (const entry of VP9_LEVEL_TABLE) {\n                if (pictureSize <= entry.maxPictureSize) {\n                    level = entry.level;\n                    break;\n                }\n            }\n            // We don't really know better, so let's return a general-purpose, common codec string and hope for the best\n            return `av01.0.${level.toString().padStart(2, '0')}M.08`;\n        }\n        // https://aomediacodec.github.io/av1-isobmff/#codecsparam\n        const profile = av1CodecInfo.profile; // Single digit\n        const level = av1CodecInfo.level.toString().padStart(2, '0');\n        const tier = av1CodecInfo.tier ? 'H' : 'M';\n        const bitDepth = av1CodecInfo.bitDepth.toString().padStart(2, '0');\n        const monochrome = av1CodecInfo.monochrome ? '1' : '0';\n        const chromaSubsampling = 100 * av1CodecInfo.chromaSubsamplingX\n            + 10 * av1CodecInfo.chromaSubsamplingY\n            + 1 * (av1CodecInfo.chromaSubsamplingX && av1CodecInfo.chromaSubsamplingY\n                ? av1CodecInfo.chromaSamplePosition\n                : 0);\n        // The defaults are 1 (ITU-R BT.709)\n        const colorPrimaries = colorSpace?.primaries ? _misc_js__WEBPACK_IMPORTED_MODULE_0__.COLOR_PRIMARIES_MAP[colorSpace.primaries] : 1;\n        const transferCharacteristics = colorSpace?.transfer ? _misc_js__WEBPACK_IMPORTED_MODULE_0__.TRANSFER_CHARACTERISTICS_MAP[colorSpace.transfer] : 1;\n        const matrixCoefficients = colorSpace?.matrix ? _misc_js__WEBPACK_IMPORTED_MODULE_0__.MATRIX_COEFFICIENTS_MAP[colorSpace.matrix] : 1;\n        const videoFullRangeFlag = colorSpace?.fullRange ? 1 : 0;\n        let string = `av01.${profile}.${level}${tier}.${bitDepth}`;\n        string += `.${monochrome}.${chromaSubsampling.toString().padStart(3, '0')}`;\n        string += `.${colorPrimaries.toString().padStart(2, '0')}`;\n        string += `.${transferCharacteristics.toString().padStart(2, '0')}`;\n        string += `.${matrixCoefficients.toString().padStart(2, '0')}`;\n        string += `.${videoFullRangeFlag}`;\n        if (string.endsWith(AV1_DEFAULT_SUFFIX)) {\n            string = string.slice(0, -AV1_DEFAULT_SUFFIX.length);\n        }\n        return string;\n    }\n    throw new TypeError(`Unhandled codec '${codec}'.`);\n};\nconst buildAudioCodecString = (codec, numberOfChannels, sampleRate) => {\n    if (codec === 'aac') {\n        // If stereo or higher channels and lower sample rate, likely using HE-AAC v2 with PS\n        if (numberOfChannels >= 2 && sampleRate <= 24000) {\n            return 'mp4a.40.29'; // HE-AAC v2 (AAC LC + SBR + PS)\n        }\n        // If sample rate is low, likely using HE-AAC v1 with SBR\n        if (sampleRate <= 24000) {\n            return 'mp4a.40.5'; // HE-AAC v1 (AAC LC + SBR)\n        }\n        // Default to standard AAC-LC for higher sample rates\n        return 'mp4a.40.2'; // AAC-LC\n    }\n    else if (codec === 'mp3') {\n        return 'mp3';\n    }\n    else if (codec === 'opus') {\n        return 'opus';\n    }\n    else if (codec === 'vorbis') {\n        return 'vorbis';\n    }\n    else if (codec === 'flac') {\n        return 'flac';\n    }\n    else if (PCM_AUDIO_CODECS.includes(codec)) {\n        return codec;\n    }\n    throw new TypeError(`Unhandled codec '${codec}'.`);\n};\nconst extractAudioCodecString = (trackInfo) => {\n    const { codec, codecDescription, aacCodecInfo } = trackInfo;\n    if (codec === 'aac') {\n        if (!aacCodecInfo) {\n            throw new TypeError('AAC codec info must be provided.');\n        }\n        if (aacCodecInfo.isMpeg2) {\n            return 'mp4a.67';\n        }\n        else {\n            const audioSpecificConfig = parseAacAudioSpecificConfig(codecDescription);\n            return `mp4a.40.${audioSpecificConfig.objectType}`;\n        }\n    }\n    else if (codec === 'mp3') {\n        return 'mp3';\n    }\n    else if (codec === 'opus') {\n        return 'opus';\n    }\n    else if (codec === 'vorbis') {\n        return 'vorbis';\n    }\n    else if (codec === 'flac') {\n        return 'flac';\n    }\n    else if (codec && PCM_AUDIO_CODECS.includes(codec)) {\n        return codec;\n    }\n    throw new TypeError(`Unhandled codec '${codec}'.`);\n};\nconst aacFrequencyTable = [\n    96000, 88200, 64000, 48000, 44100, 32000,\n    24000, 22050, 16000, 12000, 11025, 8000, 7350,\n];\nconst aacChannelMap = [-1, 1, 2, 3, 4, 5, 6, 8];\nconst parseAacAudioSpecificConfig = (bytes) => {\n    if (!bytes || bytes.byteLength < 2) {\n        throw new TypeError('AAC description must be at least 2 bytes long.');\n    }\n    const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.Bitstream(bytes);\n    let objectType = bitstream.readBits(5);\n    if (objectType === 31) {\n        objectType = 32 + bitstream.readBits(6);\n    }\n    const frequencyIndex = bitstream.readBits(4);\n    let sampleRate = null;\n    if (frequencyIndex === 15) {\n        sampleRate = bitstream.readBits(24);\n    }\n    else {\n        if (frequencyIndex < aacFrequencyTable.length) {\n            sampleRate = aacFrequencyTable[frequencyIndex];\n        }\n    }\n    const channelConfiguration = bitstream.readBits(4);\n    let numberOfChannels = null;\n    if (channelConfiguration >= 1 && channelConfiguration <= 7) {\n        numberOfChannels = aacChannelMap[channelConfiguration];\n    }\n    return {\n        objectType,\n        frequencyIndex,\n        sampleRate,\n        channelConfiguration,\n        numberOfChannels,\n    };\n};\nconst OPUS_SAMPLE_RATE = 48_000;\nconst PCM_CODEC_REGEX = /^pcm-([usf])(\\d+)+(be)?$/;\nconst parsePcmCodec = (codec) => {\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(PCM_AUDIO_CODECS.includes(codec));\n    if (codec === 'ulaw') {\n        return { dataType: 'ulaw', sampleSize: 1, littleEndian: true, silentValue: 255 };\n    }\n    else if (codec === 'alaw') {\n        return { dataType: 'alaw', sampleSize: 1, littleEndian: true, silentValue: 213 };\n    }\n    const match = PCM_CODEC_REGEX.exec(codec);\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(match);\n    let dataType;\n    if (match[1] === 'u') {\n        dataType = 'unsigned';\n    }\n    else if (match[1] === 's') {\n        dataType = 'signed';\n    }\n    else {\n        dataType = 'float';\n    }\n    const sampleSize = (Number(match[2]) / 8);\n    const littleEndian = match[3] !== 'be';\n    const silentValue = codec === 'pcm-u8' ? 2 ** 7 : 0;\n    return { dataType, sampleSize, littleEndian, silentValue };\n};\nconst inferCodecFromCodecString = (codecString) => {\n    // Video codecs\n    if (codecString.startsWith('avc1') || codecString.startsWith('avc3')) {\n        return 'avc';\n    }\n    else if (codecString.startsWith('hev1') || codecString.startsWith('hvc1')) {\n        return 'hevc';\n    }\n    else if (codecString === 'vp8') {\n        return 'vp8';\n    }\n    else if (codecString.startsWith('vp09')) {\n        return 'vp9';\n    }\n    else if (codecString.startsWith('av01')) {\n        return 'av1';\n    }\n    // Audio codecs\n    if (codecString.startsWith('mp4a.40') || codecString === 'mp4a.67') {\n        return 'aac';\n    }\n    else if (codecString === 'mp3'\n        || codecString === 'mp4a.69'\n        || codecString === 'mp4a.6B'\n        || codecString === 'mp4a.6b') {\n        return 'mp3';\n    }\n    else if (codecString === 'opus') {\n        return 'opus';\n    }\n    else if (codecString === 'vorbis') {\n        return 'vorbis';\n    }\n    else if (codecString === 'flac') {\n        return 'flac';\n    }\n    else if (codecString === 'ulaw') {\n        return 'ulaw';\n    }\n    else if (codecString === 'alaw') {\n        return 'alaw';\n    }\n    else if (PCM_CODEC_REGEX.test(codecString)) {\n        return codecString;\n    }\n    // Subtitle codecs\n    if (codecString === 'webvtt') {\n        return 'webvtt';\n    }\n    return null;\n};\nconst getVideoEncoderConfigExtension = (codec) => {\n    if (codec === 'avc') {\n        return {\n            avc: {\n                format: 'avc', // Ensure the format is not Annex B\n            },\n        };\n    }\n    else if (codec === 'hevc') {\n        return {\n            hevc: {\n                format: 'hevc', // Ensure the format is not Annex B\n            },\n        };\n    }\n    return {};\n};\nconst getAudioEncoderConfigExtension = (codec) => {\n    if (codec === 'aac') {\n        return {\n            aac: {\n                format: 'aac', // Ensure the format is not ADTS\n            },\n        };\n    }\n    else if (codec === 'opus') {\n        return {\n            opus: {\n                format: 'opus',\n            },\n        };\n    }\n    return {};\n};\nconst VALID_VIDEO_CODEC_STRING_PREFIXES = ['avc1', 'avc3', 'hev1', 'hvc1', 'vp8', 'vp09', 'av01'];\nconst AVC_CODEC_STRING_REGEX = /^(avc1|avc3)\\.[0-9a-fA-F]{6}$/;\nconst HEVC_CODEC_STRING_REGEX = /^(hev1|hvc1)\\.(?:[ABC]?\\d+)\\.[0-9a-fA-F]{1,8}\\.[LH]\\d+(?:\\.[0-9a-fA-F]{1,2}){0,6}$/;\nconst VP9_CODEC_STRING_REGEX = /^vp09(?:\\.\\d{2}){3}(?:(?:\\.\\d{2}){5})?$/;\nconst AV1_CODEC_STRING_REGEX = /^av01\\.\\d\\.\\d{2}[MH]\\.\\d{2}(?:\\.\\d\\.\\d{3}\\.\\d{2}\\.\\d{2}\\.\\d{2}\\.\\d)?$/;\nconst validateVideoChunkMetadata = (metadata) => {\n    if (!metadata) {\n        throw new TypeError('Video chunk metadata must be provided.');\n    }\n    if (typeof metadata !== 'object') {\n        throw new TypeError('Video chunk metadata must be an object.');\n    }\n    if (!metadata.decoderConfig) {\n        throw new TypeError('Video chunk metadata must include a decoder configuration.');\n    }\n    if (typeof metadata.decoderConfig !== 'object') {\n        throw new TypeError('Video chunk metadata decoder configuration must be an object.');\n    }\n    if (typeof metadata.decoderConfig.codec !== 'string') {\n        throw new TypeError('Video chunk metadata decoder configuration must specify a codec string.');\n    }\n    if (!VALID_VIDEO_CODEC_STRING_PREFIXES.some(prefix => metadata.decoderConfig.codec.startsWith(prefix))) {\n        throw new TypeError('Video chunk metadata decoder configuration codec string must be a valid video codec string as specified in'\n            + ' the WebCodecs Codec Registry.');\n    }\n    if (!Number.isInteger(metadata.decoderConfig.codedWidth) || metadata.decoderConfig.codedWidth <= 0) {\n        throw new TypeError('Video chunk metadata decoder configuration must specify a valid codedWidth (positive integer).');\n    }\n    if (!Number.isInteger(metadata.decoderConfig.codedHeight) || metadata.decoderConfig.codedHeight <= 0) {\n        throw new TypeError('Video chunk metadata decoder configuration must specify a valid codedHeight (positive integer).');\n    }\n    if (metadata.decoderConfig.description !== undefined) {\n        if (!(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isAllowSharedBufferSource)(metadata.decoderConfig.description)) {\n            throw new TypeError('Video chunk metadata decoder configuration description, when defined, must be an ArrayBuffer or an'\n                + ' ArrayBuffer view.');\n        }\n    }\n    if (metadata.decoderConfig.colorSpace !== undefined) {\n        const { colorSpace } = metadata.decoderConfig;\n        if (typeof colorSpace !== 'object') {\n            throw new TypeError('Video chunk metadata decoder configuration colorSpace, when provided, must be an object.');\n        }\n        const primariesValues = Object.keys(_misc_js__WEBPACK_IMPORTED_MODULE_0__.COLOR_PRIMARIES_MAP);\n        if (colorSpace.primaries != null && !primariesValues.includes(colorSpace.primaries)) {\n            throw new TypeError(`Video chunk metadata decoder configuration colorSpace primaries, when defined, must be one of`\n                + ` ${primariesValues.join(', ')}.`);\n        }\n        const transferValues = Object.keys(_misc_js__WEBPACK_IMPORTED_MODULE_0__.TRANSFER_CHARACTERISTICS_MAP);\n        if (colorSpace.transfer != null && !transferValues.includes(colorSpace.transfer)) {\n            throw new TypeError(`Video chunk metadata decoder configuration colorSpace transfer, when defined, must be one of`\n                + ` ${transferValues.join(', ')}.`);\n        }\n        const matrixValues = Object.keys(_misc_js__WEBPACK_IMPORTED_MODULE_0__.MATRIX_COEFFICIENTS_MAP);\n        if (colorSpace.matrix != null && !matrixValues.includes(colorSpace.matrix)) {\n            throw new TypeError(`Video chunk metadata decoder configuration colorSpace matrix, when defined, must be one of`\n                + ` ${matrixValues.join(', ')}.`);\n        }\n        if (colorSpace.fullRange != null && typeof colorSpace.fullRange !== 'boolean') {\n            throw new TypeError('Video chunk metadata decoder configuration colorSpace fullRange, when defined, must be a boolean.');\n        }\n    }\n    if (metadata.decoderConfig.codec.startsWith('avc1') || metadata.decoderConfig.codec.startsWith('avc3')) {\n        // AVC-specific validation\n        if (!AVC_CODEC_STRING_REGEX.test(metadata.decoderConfig.codec)) {\n            throw new TypeError('Video chunk metadata decoder configuration codec string for AVC must be a valid AVC codec string as'\n                + ' specified in Section 3.4 of RFC 6381.');\n        }\n        // `description` may or may not be set, depending on if the format is AVCC or Annex B, so don't perform any\n        // validation for it.\n        // https://www.w3.org/TR/webcodecs-avc-codec-registration\n    }\n    else if (metadata.decoderConfig.codec.startsWith('hev1') || metadata.decoderConfig.codec.startsWith('hvc1')) {\n        // HEVC-specific validation\n        if (!HEVC_CODEC_STRING_REGEX.test(metadata.decoderConfig.codec)) {\n            throw new TypeError('Video chunk metadata decoder configuration codec string for HEVC must be a valid HEVC codec string as'\n                + ' specified in Section E.3 of ISO 14496-15.');\n        }\n        // `description` may or may not be set, depending on if the format is HEVC or Annex B, so don't perform any\n        // validation for it.\n        // https://www.w3.org/TR/webcodecs-hevc-codec-registration\n    }\n    else if (metadata.decoderConfig.codec.startsWith('vp8')) {\n        // VP8-specific validation\n        if (metadata.decoderConfig.codec !== 'vp8') {\n            throw new TypeError('Video chunk metadata decoder configuration codec string for VP8 must be \"vp8\".');\n        }\n    }\n    else if (metadata.decoderConfig.codec.startsWith('vp09')) {\n        // VP9-specific validation\n        if (!VP9_CODEC_STRING_REGEX.test(metadata.decoderConfig.codec)) {\n            throw new TypeError('Video chunk metadata decoder configuration codec string for VP9 must be a valid VP9 codec string as'\n                + ' specified in Section \"Codecs Parameter String\" of https://www.webmproject.org/vp9/mp4/.');\n        }\n    }\n    else if (metadata.decoderConfig.codec.startsWith('av01')) {\n        // AV1-specific validation\n        if (!AV1_CODEC_STRING_REGEX.test(metadata.decoderConfig.codec)) {\n            throw new TypeError('Video chunk metadata decoder configuration codec string for AV1 must be a valid AV1 codec string as'\n                + ' specified in Section \"Codecs Parameter String\" of https://aomediacodec.github.io/av1-isobmff/.');\n        }\n    }\n};\nconst VALID_AUDIO_CODEC_STRING_PREFIXES = ['mp4a', 'mp3', 'opus', 'vorbis', 'flac', 'ulaw', 'alaw', 'pcm'];\nconst validateAudioChunkMetadata = (metadata) => {\n    if (!metadata) {\n        throw new TypeError('Audio chunk metadata must be provided.');\n    }\n    if (typeof metadata !== 'object') {\n        throw new TypeError('Audio chunk metadata must be an object.');\n    }\n    if (!metadata.decoderConfig) {\n        throw new TypeError('Audio chunk metadata must include a decoder configuration.');\n    }\n    if (typeof metadata.decoderConfig !== 'object') {\n        throw new TypeError('Audio chunk metadata decoder configuration must be an object.');\n    }\n    if (typeof metadata.decoderConfig.codec !== 'string') {\n        throw new TypeError('Audio chunk metadata decoder configuration must specify a codec string.');\n    }\n    if (!VALID_AUDIO_CODEC_STRING_PREFIXES.some(prefix => metadata.decoderConfig.codec.startsWith(prefix))) {\n        throw new TypeError('Audio chunk metadata decoder configuration codec string must be a valid audio codec string as specified in'\n            + ' the WebCodecs Codec Registry.');\n    }\n    if (!Number.isInteger(metadata.decoderConfig.sampleRate) || metadata.decoderConfig.sampleRate <= 0) {\n        throw new TypeError('Audio chunk metadata decoder configuration must specify a valid sampleRate (positive integer).');\n    }\n    if (!Number.isInteger(metadata.decoderConfig.numberOfChannels) || metadata.decoderConfig.numberOfChannels <= 0) {\n        throw new TypeError('Audio chunk metadata decoder configuration must specify a valid numberOfChannels (positive integer).');\n    }\n    if (metadata.decoderConfig.description !== undefined) {\n        if (!(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isAllowSharedBufferSource)(metadata.decoderConfig.description)) {\n            throw new TypeError('Audio chunk metadata decoder configuration description, when defined, must be an ArrayBuffer or an'\n                + ' ArrayBuffer view.');\n        }\n    }\n    if (metadata.decoderConfig.codec.startsWith('mp4a')\n        // These three refer to MP3:\n        && metadata.decoderConfig.codec !== 'mp4a.69'\n        && metadata.decoderConfig.codec !== 'mp4a.6B'\n        && metadata.decoderConfig.codec !== 'mp4a.6b') {\n        // AAC-specific validation\n        const validStrings = ['mp4a.40.2', 'mp4a.40.02', 'mp4a.40.5', 'mp4a.40.05', 'mp4a.40.29', 'mp4a.67'];\n        if (!validStrings.includes(metadata.decoderConfig.codec)) {\n            throw new TypeError('Audio chunk metadata decoder configuration codec string for AAC must be a valid AAC codec string as'\n                + ' specified in https://www.w3.org/TR/webcodecs-aac-codec-registration/.');\n        }\n        if (!metadata.decoderConfig.description) {\n            throw new TypeError('Audio chunk metadata decoder configuration for AAC must include a description, which is expected to be'\n                + ' an AudioSpecificConfig as specified in ISO 14496-3.');\n        }\n    }\n    else if (metadata.decoderConfig.codec.startsWith('mp3') || metadata.decoderConfig.codec.startsWith('mp4a')) {\n        // MP3-specific validation\n        if (metadata.decoderConfig.codec !== 'mp3'\n            && metadata.decoderConfig.codec !== 'mp4a.69'\n            && metadata.decoderConfig.codec !== 'mp4a.6B'\n            && metadata.decoderConfig.codec !== 'mp4a.6b') {\n            throw new TypeError('Audio chunk metadata decoder configuration codec string for MP3 must be \"mp3\", \"mp4a.69\" or'\n                + ' \"mp4a.6B\".');\n        }\n    }\n    else if (metadata.decoderConfig.codec.startsWith('opus')) {\n        // Opus-specific validation\n        if (metadata.decoderConfig.codec !== 'opus') {\n            throw new TypeError('Audio chunk metadata decoder configuration codec string for Opus must be \"opus\".');\n        }\n        if (metadata.decoderConfig.description && metadata.decoderConfig.description.byteLength < 18) {\n            // Description is optional for Opus per-spec, so we shouldn't enforce it\n            throw new TypeError('Audio chunk metadata decoder configuration description, when specified, is expected to be an'\n                + ' Identification Header as specified in Section 5.1 of RFC 7845.');\n        }\n    }\n    else if (metadata.decoderConfig.codec.startsWith('vorbis')) {\n        // Vorbis-specific validation\n        if (metadata.decoderConfig.codec !== 'vorbis') {\n            throw new TypeError('Audio chunk metadata decoder configuration codec string for Vorbis must be \"vorbis\".');\n        }\n        if (!metadata.decoderConfig.description) {\n            throw new TypeError('Audio chunk metadata decoder configuration for Vorbis must include a description, which is expected to'\n                + ' adhere to the format described in https://www.w3.org/TR/webcodecs-vorbis-codec-registration/.');\n        }\n    }\n    else if (metadata.decoderConfig.codec.startsWith('flac')) {\n        // FLAC-specific validation\n        if (metadata.decoderConfig.codec !== 'flac') {\n            throw new TypeError('Audio chunk metadata decoder configuration codec string for FLAC must be \"flac\".');\n        }\n        const minDescriptionSize = 4 + 4 + 34; // 'fLaC' + metadata block header + STREAMINFO block\n        if (!metadata.decoderConfig.description || metadata.decoderConfig.description.byteLength < minDescriptionSize) {\n            throw new TypeError('Audio chunk metadata decoder configuration for FLAC must include a description, which is expected to'\n                + ' adhere to the format described in https://www.w3.org/TR/webcodecs-flac-codec-registration/.');\n        }\n    }\n    else if (metadata.decoderConfig.codec.startsWith('pcm')\n        || metadata.decoderConfig.codec.startsWith('ulaw')\n        || metadata.decoderConfig.codec.startsWith('alaw')) {\n        // PCM-specific validation\n        if (!PCM_AUDIO_CODECS.includes(metadata.decoderConfig.codec)) {\n            throw new TypeError('Audio chunk metadata decoder configuration codec string for PCM must be one of the supported PCM'\n                + ` codecs (${PCM_AUDIO_CODECS.join(', ')}).`);\n        }\n    }\n};\nconst validateSubtitleMetadata = (metadata) => {\n    if (!metadata) {\n        throw new TypeError('Subtitle metadata must be provided.');\n    }\n    if (typeof metadata !== 'object') {\n        throw new TypeError('Subtitle metadata must be an object.');\n    }\n    if (!metadata.config) {\n        throw new TypeError('Subtitle metadata must include a config object.');\n    }\n    if (typeof metadata.config !== 'object') {\n        throw new TypeError('Subtitle metadata config must be an object.');\n    }\n    if (typeof metadata.config.description !== 'string') {\n        throw new TypeError('Subtitle metadata config description must be a string.');\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/custom-coder.js":
/*!******************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/custom-coder.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomAudioDecoder: function() { return /* binding */ CustomAudioDecoder; },\n/* harmony export */   CustomAudioEncoder: function() { return /* binding */ CustomAudioEncoder; },\n/* harmony export */   CustomVideoDecoder: function() { return /* binding */ CustomVideoDecoder; },\n/* harmony export */   CustomVideoEncoder: function() { return /* binding */ CustomVideoEncoder; },\n/* harmony export */   customAudioDecoders: function() { return /* binding */ customAudioDecoders; },\n/* harmony export */   customAudioEncoders: function() { return /* binding */ customAudioEncoders; },\n/* harmony export */   customVideoDecoders: function() { return /* binding */ customVideoDecoders; },\n/* harmony export */   customVideoEncoders: function() { return /* binding */ customVideoEncoders; },\n/* harmony export */   registerDecoder: function() { return /* binding */ registerDecoder; },\n/* harmony export */   registerEncoder: function() { return /* binding */ registerEncoder; }\n/* harmony export */ });\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n/**\n * Base class for custom video decoders. To add your own custom video decoder, extend this class, implement the\n * abstract methods and static `supports` method, and register the decoder using {@link registerDecoder}.\n * @group Custom coders\n * @public\n */\nclass CustomVideoDecoder {\n    /** Returns true if and only if the decoder can decode the given codec configuration. */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static supports(codec, config) {\n        return false;\n    }\n}\n/**\n * Base class for custom audio decoders. To add your own custom audio decoder, extend this class, implement the\n * abstract methods and static `supports` method, and register the decoder using {@link registerDecoder}.\n * @group Custom coders\n * @public\n */\nclass CustomAudioDecoder {\n    /** Returns true if and only if the decoder can decode the given codec configuration. */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static supports(codec, config) {\n        return false;\n    }\n}\n/**\n * Base class for custom video encoders. To add your own custom video encoder, extend this class, implement the\n * abstract methods and static `supports` method, and register the encoder using {@link registerEncoder}.\n * @group Custom coders\n * @public\n */\nclass CustomVideoEncoder {\n    /** Returns true if and only if the encoder can encode the given codec configuration. */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static supports(codec, config) {\n        return false;\n    }\n}\n/**\n * Base class for custom audio encoders. To add your own custom audio encoder, extend this class, implement the\n * abstract methods and static `supports` method, and register the encoder using {@link registerEncoder}.\n * @group Custom coders\n * @public\n */\nclass CustomAudioEncoder {\n    /** Returns true if and only if the encoder can encode the given codec configuration. */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static supports(codec, config) {\n        return false;\n    }\n}\nconst customVideoDecoders = [];\nconst customAudioDecoders = [];\nconst customVideoEncoders = [];\nconst customAudioEncoders = [];\n/**\n * Registers a custom video or audio decoder. Registered decoders will automatically be used for decoding whenever\n * possible.\n * @group Custom coders\n * @public\n */\nconst registerDecoder = (decoder) => {\n    if (decoder.prototype instanceof CustomVideoDecoder) {\n        const casted = decoder;\n        if (customVideoDecoders.includes(casted)) {\n            console.warn('Video decoder already registered.');\n            return;\n        }\n        customVideoDecoders.push(casted);\n    }\n    else if (decoder.prototype instanceof CustomAudioDecoder) {\n        const casted = decoder;\n        if (customAudioDecoders.includes(casted)) {\n            console.warn('Audio decoder already registered.');\n            return;\n        }\n        customAudioDecoders.push(casted);\n    }\n    else {\n        throw new TypeError('Decoder must be a CustomVideoDecoder or CustomAudioDecoder.');\n    }\n};\n/**\n * Registers a custom video or audio encoder. Registered encoders will automatically be used for encoding whenever\n * possible.\n * @group Custom coders\n * @public\n */\nconst registerEncoder = (encoder) => {\n    if (encoder.prototype instanceof CustomVideoEncoder) {\n        const casted = encoder;\n        if (customVideoEncoders.includes(casted)) {\n            console.warn('Video encoder already registered.');\n            return;\n        }\n        customVideoEncoders.push(casted);\n    }\n    else if (encoder.prototype instanceof CustomAudioEncoder) {\n        const casted = encoder;\n        if (customAudioEncoders.includes(casted)) {\n            console.warn('Audio encoder already registered.');\n            return;\n        }\n        customAudioEncoders.push(casted);\n    }\n    else {\n        throw new TypeError('Encoder must be a CustomVideoEncoder or CustomAudioEncoder.');\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvY3VzdG9tLWNvZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0Ysc0JBQXNCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixzQkFBc0I7QUFDeEc7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0ZBQWtGLHNCQUFzQjtBQUN4RztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0Ysc0JBQXNCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNBO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21lZGlhYnVubnkvZGlzdC9tb2R1bGVzL3NyYy9jdXN0b20tY29kZXIuanM/NWJiYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyNS1wcmVzZW50LCBWYW5pbGFneSBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHBzOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG4gKi9cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgY3VzdG9tIHZpZGVvIGRlY29kZXJzLiBUbyBhZGQgeW91ciBvd24gY3VzdG9tIHZpZGVvIGRlY29kZXIsIGV4dGVuZCB0aGlzIGNsYXNzLCBpbXBsZW1lbnQgdGhlXG4gKiBhYnN0cmFjdCBtZXRob2RzIGFuZCBzdGF0aWMgYHN1cHBvcnRzYCBtZXRob2QsIGFuZCByZWdpc3RlciB0aGUgZGVjb2RlciB1c2luZyB7QGxpbmsgcmVnaXN0ZXJEZWNvZGVyfS5cbiAqIEBncm91cCBDdXN0b20gY29kZXJzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDdXN0b21WaWRlb0RlY29kZXIge1xuICAgIC8qKiBSZXR1cm5zIHRydWUgaWYgYW5kIG9ubHkgaWYgdGhlIGRlY29kZXIgY2FuIGRlY29kZSB0aGUgZ2l2ZW4gY29kZWMgY29uZmlndXJhdGlvbi4gKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgc3RhdGljIHN1cHBvcnRzKGNvZGVjLCBjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgY3VzdG9tIGF1ZGlvIGRlY29kZXJzLiBUbyBhZGQgeW91ciBvd24gY3VzdG9tIGF1ZGlvIGRlY29kZXIsIGV4dGVuZCB0aGlzIGNsYXNzLCBpbXBsZW1lbnQgdGhlXG4gKiBhYnN0cmFjdCBtZXRob2RzIGFuZCBzdGF0aWMgYHN1cHBvcnRzYCBtZXRob2QsIGFuZCByZWdpc3RlciB0aGUgZGVjb2RlciB1c2luZyB7QGxpbmsgcmVnaXN0ZXJEZWNvZGVyfS5cbiAqIEBncm91cCBDdXN0b20gY29kZXJzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDdXN0b21BdWRpb0RlY29kZXIge1xuICAgIC8qKiBSZXR1cm5zIHRydWUgaWYgYW5kIG9ubHkgaWYgdGhlIGRlY29kZXIgY2FuIGRlY29kZSB0aGUgZ2l2ZW4gY29kZWMgY29uZmlndXJhdGlvbi4gKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgc3RhdGljIHN1cHBvcnRzKGNvZGVjLCBjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgY3VzdG9tIHZpZGVvIGVuY29kZXJzLiBUbyBhZGQgeW91ciBvd24gY3VzdG9tIHZpZGVvIGVuY29kZXIsIGV4dGVuZCB0aGlzIGNsYXNzLCBpbXBsZW1lbnQgdGhlXG4gKiBhYnN0cmFjdCBtZXRob2RzIGFuZCBzdGF0aWMgYHN1cHBvcnRzYCBtZXRob2QsIGFuZCByZWdpc3RlciB0aGUgZW5jb2RlciB1c2luZyB7QGxpbmsgcmVnaXN0ZXJFbmNvZGVyfS5cbiAqIEBncm91cCBDdXN0b20gY29kZXJzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDdXN0b21WaWRlb0VuY29kZXIge1xuICAgIC8qKiBSZXR1cm5zIHRydWUgaWYgYW5kIG9ubHkgaWYgdGhlIGVuY29kZXIgY2FuIGVuY29kZSB0aGUgZ2l2ZW4gY29kZWMgY29uZmlndXJhdGlvbi4gKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgc3RhdGljIHN1cHBvcnRzKGNvZGVjLCBjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgY3VzdG9tIGF1ZGlvIGVuY29kZXJzLiBUbyBhZGQgeW91ciBvd24gY3VzdG9tIGF1ZGlvIGVuY29kZXIsIGV4dGVuZCB0aGlzIGNsYXNzLCBpbXBsZW1lbnQgdGhlXG4gKiBhYnN0cmFjdCBtZXRob2RzIGFuZCBzdGF0aWMgYHN1cHBvcnRzYCBtZXRob2QsIGFuZCByZWdpc3RlciB0aGUgZW5jb2RlciB1c2luZyB7QGxpbmsgcmVnaXN0ZXJFbmNvZGVyfS5cbiAqIEBncm91cCBDdXN0b20gY29kZXJzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDdXN0b21BdWRpb0VuY29kZXIge1xuICAgIC8qKiBSZXR1cm5zIHRydWUgaWYgYW5kIG9ubHkgaWYgdGhlIGVuY29kZXIgY2FuIGVuY29kZSB0aGUgZ2l2ZW4gY29kZWMgY29uZmlndXJhdGlvbi4gKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgc3RhdGljIHN1cHBvcnRzKGNvZGVjLCBjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBjdXN0b21WaWRlb0RlY29kZXJzID0gW107XG5leHBvcnQgY29uc3QgY3VzdG9tQXVkaW9EZWNvZGVycyA9IFtdO1xuZXhwb3J0IGNvbnN0IGN1c3RvbVZpZGVvRW5jb2RlcnMgPSBbXTtcbmV4cG9ydCBjb25zdCBjdXN0b21BdWRpb0VuY29kZXJzID0gW107XG4vKipcbiAqIFJlZ2lzdGVycyBhIGN1c3RvbSB2aWRlbyBvciBhdWRpbyBkZWNvZGVyLiBSZWdpc3RlcmVkIGRlY29kZXJzIHdpbGwgYXV0b21hdGljYWxseSBiZSB1c2VkIGZvciBkZWNvZGluZyB3aGVuZXZlclxuICogcG9zc2libGUuXG4gKiBAZ3JvdXAgQ3VzdG9tIGNvZGVyc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJEZWNvZGVyID0gKGRlY29kZXIpID0+IHtcbiAgICBpZiAoZGVjb2Rlci5wcm90b3R5cGUgaW5zdGFuY2VvZiBDdXN0b21WaWRlb0RlY29kZXIpIHtcbiAgICAgICAgY29uc3QgY2FzdGVkID0gZGVjb2RlcjtcbiAgICAgICAgaWYgKGN1c3RvbVZpZGVvRGVjb2RlcnMuaW5jbHVkZXMoY2FzdGVkKSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdWaWRlbyBkZWNvZGVyIGFscmVhZHkgcmVnaXN0ZXJlZC4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdXN0b21WaWRlb0RlY29kZXJzLnB1c2goY2FzdGVkKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGVjb2Rlci5wcm90b3R5cGUgaW5zdGFuY2VvZiBDdXN0b21BdWRpb0RlY29kZXIpIHtcbiAgICAgICAgY29uc3QgY2FzdGVkID0gZGVjb2RlcjtcbiAgICAgICAgaWYgKGN1c3RvbUF1ZGlvRGVjb2RlcnMuaW5jbHVkZXMoY2FzdGVkKSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdBdWRpbyBkZWNvZGVyIGFscmVhZHkgcmVnaXN0ZXJlZC4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdXN0b21BdWRpb0RlY29kZXJzLnB1c2goY2FzdGVkKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RlY29kZXIgbXVzdCBiZSBhIEN1c3RvbVZpZGVvRGVjb2RlciBvciBDdXN0b21BdWRpb0RlY29kZXIuJyk7XG4gICAgfVxufTtcbi8qKlxuICogUmVnaXN0ZXJzIGEgY3VzdG9tIHZpZGVvIG9yIGF1ZGlvIGVuY29kZXIuIFJlZ2lzdGVyZWQgZW5jb2RlcnMgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHVzZWQgZm9yIGVuY29kaW5nIHdoZW5ldmVyXG4gKiBwb3NzaWJsZS5cbiAqIEBncm91cCBDdXN0b20gY29kZXJzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCByZWdpc3RlckVuY29kZXIgPSAoZW5jb2RlcikgPT4ge1xuICAgIGlmIChlbmNvZGVyLnByb3RvdHlwZSBpbnN0YW5jZW9mIEN1c3RvbVZpZGVvRW5jb2Rlcikge1xuICAgICAgICBjb25zdCBjYXN0ZWQgPSBlbmNvZGVyO1xuICAgICAgICBpZiAoY3VzdG9tVmlkZW9FbmNvZGVycy5pbmNsdWRlcyhjYXN0ZWQpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1ZpZGVvIGVuY29kZXIgYWxyZWFkeSByZWdpc3RlcmVkLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN1c3RvbVZpZGVvRW5jb2RlcnMucHVzaChjYXN0ZWQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChlbmNvZGVyLnByb3RvdHlwZSBpbnN0YW5jZW9mIEN1c3RvbUF1ZGlvRW5jb2Rlcikge1xuICAgICAgICBjb25zdCBjYXN0ZWQgPSBlbmNvZGVyO1xuICAgICAgICBpZiAoY3VzdG9tQXVkaW9FbmNvZGVycy5pbmNsdWRlcyhjYXN0ZWQpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0F1ZGlvIGVuY29kZXIgYWxyZWFkeSByZWdpc3RlcmVkLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN1c3RvbUF1ZGlvRW5jb2RlcnMucHVzaChjYXN0ZWQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRW5jb2RlciBtdXN0IGJlIGEgQ3VzdG9tVmlkZW9FbmNvZGVyIG9yIEN1c3RvbUF1ZGlvRW5jb2Rlci4nKTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/custom-coder.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/demuxer.js":
/*!*************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/demuxer.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Demuxer: function() { return /* binding */ Demuxer; }\n/* harmony export */ });\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nclass Demuxer {\n    constructor(input) {\n        this.input = input;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvZGVtdXhlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvZGVtdXhlci5qcz8wOWQyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDI1LXByZXNlbnQsIFZhbmlsYWd5IGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cbiAqL1xuZXhwb3J0IGNsYXNzIERlbXV4ZXIge1xuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/demuxer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/encode.js":
/*!************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/encode.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QUALITY_HIGH: function() { return /* binding */ QUALITY_HIGH; },\n/* harmony export */   QUALITY_LOW: function() { return /* binding */ QUALITY_LOW; },\n/* harmony export */   QUALITY_MEDIUM: function() { return /* binding */ QUALITY_MEDIUM; },\n/* harmony export */   QUALITY_VERY_HIGH: function() { return /* binding */ QUALITY_VERY_HIGH; },\n/* harmony export */   QUALITY_VERY_LOW: function() { return /* binding */ QUALITY_VERY_LOW; },\n/* harmony export */   Quality: function() { return /* binding */ Quality; },\n/* harmony export */   buildAudioEncoderConfig: function() { return /* binding */ buildAudioEncoderConfig; },\n/* harmony export */   buildVideoEncoderConfig: function() { return /* binding */ buildVideoEncoderConfig; },\n/* harmony export */   canEncode: function() { return /* binding */ canEncode; },\n/* harmony export */   canEncodeAudio: function() { return /* binding */ canEncodeAudio; },\n/* harmony export */   canEncodeSubtitles: function() { return /* binding */ canEncodeSubtitles; },\n/* harmony export */   canEncodeVideo: function() { return /* binding */ canEncodeVideo; },\n/* harmony export */   getEncodableAudioCodecs: function() { return /* binding */ getEncodableAudioCodecs; },\n/* harmony export */   getEncodableCodecs: function() { return /* binding */ getEncodableCodecs; },\n/* harmony export */   getEncodableSubtitleCodecs: function() { return /* binding */ getEncodableSubtitleCodecs; },\n/* harmony export */   getEncodableVideoCodecs: function() { return /* binding */ getEncodableVideoCodecs; },\n/* harmony export */   getFirstEncodableAudioCodec: function() { return /* binding */ getFirstEncodableAudioCodec; },\n/* harmony export */   getFirstEncodableSubtitleCodec: function() { return /* binding */ getFirstEncodableSubtitleCodec; },\n/* harmony export */   getFirstEncodableVideoCodec: function() { return /* binding */ getFirstEncodableVideoCodec; },\n/* harmony export */   validateAudioEncodingAdditionalOptions: function() { return /* binding */ validateAudioEncodingAdditionalOptions; },\n/* harmony export */   validateAudioEncodingConfig: function() { return /* binding */ validateAudioEncodingConfig; },\n/* harmony export */   validateVideoEncodingAdditionalOptions: function() { return /* binding */ validateVideoEncodingAdditionalOptions; },\n/* harmony export */   validateVideoEncodingConfig: function() { return /* binding */ validateVideoEncodingConfig; }\n/* harmony export */ });\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _custom_coder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./custom-coder.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/custom-coder.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\nconst validateVideoEncodingConfig = (config) => {\n    if (!config || typeof config !== 'object') {\n        throw new TypeError('Encoding config must be an object.');\n    }\n    if (!_codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS.includes(config.codec)) {\n        throw new TypeError(`Invalid video codec '${config.codec}'. Must be one of: ${_codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS.join(', ')}.`);\n    }\n    if (!(config.bitrate instanceof Quality) && (!Number.isInteger(config.bitrate) || config.bitrate <= 0)) {\n        throw new TypeError('config.bitrate must be a positive integer or a quality.');\n    }\n    if (config.keyFrameInterval !== undefined\n        && (!Number.isFinite(config.keyFrameInterval) || config.keyFrameInterval < 0)) {\n        throw new TypeError('config.keyFrameInterval, when provided, must be a non-negative number.');\n    }\n    if (config.sizeChangeBehavior !== undefined\n        && !['deny', 'passThrough', 'fill', 'contain', 'cover'].includes(config.sizeChangeBehavior)) {\n        throw new TypeError('config.sizeChangeBehavior, when provided, must be \\'deny\\', \\'passThrough\\', \\'fill\\', \\'contain\\''\n            + ' or \\'cover\\'.');\n    }\n    if (config.onEncodedPacket !== undefined && typeof config.onEncodedPacket !== 'function') {\n        throw new TypeError('config.onEncodedChunk, when provided, must be a function.');\n    }\n    if (config.onEncoderConfig !== undefined && typeof config.onEncoderConfig !== 'function') {\n        throw new TypeError('config.onEncoderConfig, when provided, must be a function.');\n    }\n    validateVideoEncodingAdditionalOptions(config.codec, config);\n};\nconst validateVideoEncodingAdditionalOptions = (codec, options) => {\n    if (!options || typeof options !== 'object') {\n        throw new TypeError('Encoding options must be an object.');\n    }\n    if (options.bitrateMode !== undefined && !['constant', 'variable'].includes(options.bitrateMode)) {\n        throw new TypeError('bitrateMode, when provided, must be \\'constant\\' or \\'variable\\'.');\n    }\n    if (options.latencyMode !== undefined && !['quality', 'realtime'].includes(options.latencyMode)) {\n        throw new TypeError('latencyMode, when provided, must be \\'quality\\' or \\'realtime\\'.');\n    }\n    if (options.fullCodecString !== undefined && typeof options.fullCodecString !== 'string') {\n        throw new TypeError('fullCodecString, when provided, must be a string.');\n    }\n    if (options.fullCodecString !== undefined && (0,_codec_js__WEBPACK_IMPORTED_MODULE_0__.inferCodecFromCodecString)(options.fullCodecString) !== codec) {\n        throw new TypeError(`fullCodecString, when provided, must be a string that matches the specified codec (${codec}).`);\n    }\n    if (options.hardwareAcceleration !== undefined\n        && !['no-preference', 'prefer-hardware', 'prefer-software'].includes(options.hardwareAcceleration)) {\n        throw new TypeError('hardwareAcceleration, when provided, must be \\'no-preference\\', \\'prefer-hardware\\' or'\n            + ' \\'prefer-software\\'.');\n    }\n    if (options.scalabilityMode !== undefined && typeof options.scalabilityMode !== 'string') {\n        throw new TypeError('scalabilityMode, when provided, must be a string.');\n    }\n    if (options.contentHint !== undefined && typeof options.contentHint !== 'string') {\n        throw new TypeError('contentHint, when provided, must be a string.');\n    }\n};\nconst buildVideoEncoderConfig = (options) => {\n    const resolvedBitrate = options.bitrate instanceof Quality\n        ? options.bitrate._toVideoBitrate(options.codec, options.width, options.height)\n        : options.bitrate;\n    return {\n        codec: options.fullCodecString ?? (0,_codec_js__WEBPACK_IMPORTED_MODULE_0__.buildVideoCodecString)(options.codec, options.width, options.height, resolvedBitrate),\n        width: options.width,\n        height: options.height,\n        bitrate: resolvedBitrate,\n        bitrateMode: options.bitrateMode,\n        framerate: options.framerate, // this.source._connectedTrack?.metadata.frameRate,\n        latencyMode: options.latencyMode,\n        hardwareAcceleration: options.hardwareAcceleration,\n        scalabilityMode: options.scalabilityMode,\n        contentHint: options.contentHint,\n        ...(0,_codec_js__WEBPACK_IMPORTED_MODULE_0__.getVideoEncoderConfigExtension)(options.codec),\n    };\n};\nconst validateAudioEncodingConfig = (config) => {\n    if (!config || typeof config !== 'object') {\n        throw new TypeError('Encoding config must be an object.');\n    }\n    if (!_codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS.includes(config.codec)) {\n        throw new TypeError(`Invalid audio codec '${config.codec}'. Must be one of: ${_codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS.join(', ')}.`);\n    }\n    if (config.bitrate === undefined\n        && (!_codec_js__WEBPACK_IMPORTED_MODULE_0__.PCM_AUDIO_CODECS.includes(config.codec) || config.codec === 'flac')) {\n        throw new TypeError('config.bitrate must be provided for compressed audio codecs.');\n    }\n    if (config.bitrate !== undefined\n        && !(config.bitrate instanceof Quality)\n        && (!Number.isInteger(config.bitrate) || config.bitrate <= 0)) {\n        throw new TypeError('config.bitrate, when provided, must be a positive integer or a quality.');\n    }\n    if (config.onEncodedPacket !== undefined && typeof config.onEncodedPacket !== 'function') {\n        throw new TypeError('config.onEncodedChunk, when provided, must be a function.');\n    }\n    if (config.onEncoderConfig !== undefined && typeof config.onEncoderConfig !== 'function') {\n        throw new TypeError('config.onEncoderConfig, when provided, must be a function.');\n    }\n    validateAudioEncodingAdditionalOptions(config.codec, config);\n};\nconst validateAudioEncodingAdditionalOptions = (codec, options) => {\n    if (!options || typeof options !== 'object') {\n        throw new TypeError('Encoding options must be an object.');\n    }\n    if (options.bitrateMode !== undefined && !['constant', 'variable'].includes(options.bitrateMode)) {\n        throw new TypeError('bitrateMode, when provided, must be \\'constant\\' or \\'variable\\'.');\n    }\n    if (options.fullCodecString !== undefined && typeof options.fullCodecString !== 'string') {\n        throw new TypeError('fullCodecString, when provided, must be a string.');\n    }\n    if (options.fullCodecString !== undefined && (0,_codec_js__WEBPACK_IMPORTED_MODULE_0__.inferCodecFromCodecString)(options.fullCodecString) !== codec) {\n        throw new TypeError(`fullCodecString, when provided, must be a string that matches the specified codec (${codec}).`);\n    }\n};\nconst buildAudioEncoderConfig = (options) => {\n    const resolvedBitrate = options.bitrate instanceof Quality\n        ? options.bitrate._toAudioBitrate(options.codec)\n        : options.bitrate;\n    return {\n        codec: options.fullCodecString ?? (0,_codec_js__WEBPACK_IMPORTED_MODULE_0__.buildAudioCodecString)(options.codec, options.numberOfChannels, options.sampleRate),\n        numberOfChannels: options.numberOfChannels,\n        sampleRate: options.sampleRate,\n        bitrate: resolvedBitrate,\n        bitrateMode: options.bitrateMode,\n        ...(0,_codec_js__WEBPACK_IMPORTED_MODULE_0__.getAudioEncoderConfigExtension)(options.codec),\n    };\n};\n/**\n * Represents a subjective media quality level.\n * @group Encoding\n * @public\n */\nclass Quality {\n    /** @internal */\n    constructor(factor) {\n        this._factor = factor;\n    }\n    /** @internal */\n    _toVideoBitrate(codec, width, height) {\n        const pixels = width * height;\n        const codecEfficiencyFactors = {\n            avc: 1.0, // H.264/AVC (baseline)\n            hevc: 0.6, // H.265/HEVC (~40% more efficient than AVC)\n            vp9: 0.6, // Similar to HEVC\n            av1: 0.4, // ~60% more efficient than AVC\n            vp8: 1.2, // Slightly less efficient than AVC\n        };\n        const referencePixels = 1920 * 1080;\n        const referenceBitrate = 3000000;\n        const scaleFactor = Math.pow(pixels / referencePixels, 0.95); // Slight non-linear scaling\n        const baseBitrate = referenceBitrate * scaleFactor;\n        const codecAdjustedBitrate = baseBitrate * codecEfficiencyFactors[codec];\n        const finalBitrate = codecAdjustedBitrate * this._factor;\n        return Math.ceil(finalBitrate / 1000) * 1000;\n    }\n    /** @internal */\n    _toAudioBitrate(codec) {\n        if (_codec_js__WEBPACK_IMPORTED_MODULE_0__.PCM_AUDIO_CODECS.includes(codec) || codec === 'flac') {\n            return undefined;\n        }\n        const baseRates = {\n            aac: 128000, // 128kbps base for AAC\n            opus: 64000, // 64kbps base for Opus\n            mp3: 160000, // 160kbps base for MP3\n            vorbis: 64000, // 64kbps base for Vorbis\n        };\n        const baseBitrate = baseRates[codec];\n        if (!baseBitrate) {\n            throw new Error(`Unhandled codec: ${codec}`);\n        }\n        let finalBitrate = baseBitrate * this._factor;\n        if (codec === 'aac') {\n            // AAC only works with specific bitrates, let's find the closest\n            const validRates = [96000, 128000, 160000, 192000];\n            finalBitrate = validRates.reduce((prev, curr) => Math.abs(curr - finalBitrate) < Math.abs(prev - finalBitrate) ? curr : prev);\n        }\n        else if (codec === 'opus' || codec === 'vorbis') {\n            finalBitrate = Math.max(6000, finalBitrate);\n        }\n        else if (codec === 'mp3') {\n            const validRates = [\n                8000, 16000, 24000, 32000, 40000, 48000, 64000, 80000,\n                96000, 112000, 128000, 160000, 192000, 224000, 256000, 320000,\n            ];\n            finalBitrate = validRates.reduce((prev, curr) => Math.abs(curr - finalBitrate) < Math.abs(prev - finalBitrate) ? curr : prev);\n        }\n        return Math.round(finalBitrate / 1000) * 1000;\n    }\n}\n/**\n * Represents a very low media quality.\n * @group Encoding\n * @public\n */\nconst QUALITY_VERY_LOW = new Quality(0.3);\n/**\n * Represents a low media quality.\n * @group Encoding\n * @public\n */\nconst QUALITY_LOW = new Quality(0.6);\n/**\n * Represents a medium media quality.\n * @group Encoding\n * @public\n */\nconst QUALITY_MEDIUM = new Quality(1);\n/**\n * Represents a high media quality.\n * @group Encoding\n * @public\n */\nconst QUALITY_HIGH = new Quality(2);\n/**\n * Represents a very high media quality.\n * @group Encoding\n * @public\n */\nconst QUALITY_VERY_HIGH = new Quality(4);\n/**\n * Checks if the browser is able to encode the given codec.\n * @group Encoding\n * @public\n */\nconst canEncode = (codec) => {\n    if (_codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS.includes(codec)) {\n        return canEncodeVideo(codec);\n    }\n    else if (_codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS.includes(codec)) {\n        return canEncodeAudio(codec);\n    }\n    else if (_codec_js__WEBPACK_IMPORTED_MODULE_0__.SUBTITLE_CODECS.includes(codec)) {\n        return canEncodeSubtitles(codec);\n    }\n    throw new TypeError(`Unknown codec '${codec}'.`);\n};\n/**\n * Checks if the browser is able to encode the given video codec with the given parameters.\n * @group Encoding\n * @public\n */\nconst canEncodeVideo = async (codec, options = {}) => {\n    const { width = 1280, height = 720, bitrate = 1e6, ...restOptions } = options;\n    if (!_codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS.includes(codec)) {\n        return false;\n    }\n    if (!Number.isInteger(width) || width <= 0) {\n        throw new TypeError('width must be a positive integer.');\n    }\n    if (!Number.isInteger(height) || height <= 0) {\n        throw new TypeError('height must be a positive integer.');\n    }\n    if (!(bitrate instanceof Quality) && (!Number.isInteger(bitrate) || bitrate <= 0)) {\n        throw new TypeError('bitrate must be a positive integer or a quality.');\n    }\n    validateVideoEncodingAdditionalOptions(codec, restOptions);\n    let encoderConfig = null;\n    if (_custom_coder_js__WEBPACK_IMPORTED_MODULE_1__.customVideoEncoders.length > 0) {\n        encoderConfig ??= buildVideoEncoderConfig({\n            codec,\n            width,\n            height,\n            bitrate,\n            framerate: undefined,\n            ...restOptions,\n        });\n        if (_custom_coder_js__WEBPACK_IMPORTED_MODULE_1__.customVideoEncoders.some(x => x.supports(codec, encoderConfig))) {\n            // There's a custom encoder\n            return true;\n        }\n    }\n    if (typeof VideoEncoder === 'undefined') {\n        return false;\n    }\n    encoderConfig ??= buildVideoEncoderConfig({\n        codec,\n        width,\n        height,\n        bitrate,\n        framerate: undefined,\n        ...restOptions,\n    });\n    const support = await VideoEncoder.isConfigSupported(encoderConfig);\n    return support.supported === true;\n};\n/**\n * Checks if the browser is able to encode the given audio codec with the given parameters.\n * @group Encoding\n * @public\n */\nconst canEncodeAudio = async (codec, options = {}) => {\n    const { numberOfChannels = 2, sampleRate = 48000, bitrate = 128e3, ...restOptions } = options;\n    if (!_codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS.includes(codec)) {\n        return false;\n    }\n    if (!Number.isInteger(numberOfChannels) || numberOfChannels <= 0) {\n        throw new TypeError('numberOfChannels must be a positive integer.');\n    }\n    if (!Number.isInteger(sampleRate) || sampleRate <= 0) {\n        throw new TypeError('sampleRate must be a positive integer.');\n    }\n    if (!(bitrate instanceof Quality) && (!Number.isInteger(bitrate) || bitrate <= 0)) {\n        throw new TypeError('bitrate must be a positive integer.');\n    }\n    validateAudioEncodingAdditionalOptions(codec, restOptions);\n    let encoderConfig = null;\n    if (_custom_coder_js__WEBPACK_IMPORTED_MODULE_1__.customAudioEncoders.length > 0) {\n        encoderConfig ??= buildAudioEncoderConfig({\n            codec,\n            numberOfChannels,\n            sampleRate,\n            bitrate,\n            ...restOptions,\n        });\n        if (_custom_coder_js__WEBPACK_IMPORTED_MODULE_1__.customAudioEncoders.some(x => x.supports(codec, encoderConfig))) {\n            // There's a custom encoder\n            return true;\n        }\n    }\n    if (_codec_js__WEBPACK_IMPORTED_MODULE_0__.PCM_AUDIO_CODECS.includes(codec)) {\n        return true; // Because we encode these ourselves\n    }\n    if (typeof AudioEncoder === 'undefined') {\n        return false;\n    }\n    encoderConfig ??= buildAudioEncoderConfig({\n        codec,\n        numberOfChannels,\n        sampleRate,\n        bitrate,\n        ...restOptions,\n    });\n    const support = await AudioEncoder.isConfigSupported(encoderConfig);\n    return support.supported === true;\n};\n/**\n * Checks if the browser is able to encode the given subtitle codec.\n * @group Encoding\n * @public\n */\nconst canEncodeSubtitles = async (codec) => {\n    if (!_codec_js__WEBPACK_IMPORTED_MODULE_0__.SUBTITLE_CODECS.includes(codec)) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the list of all media codecs that can be encoded by the browser.\n * @group Encoding\n * @public\n */\nconst getEncodableCodecs = async () => {\n    const [videoCodecs, audioCodecs, subtitleCodecs] = await Promise.all([\n        getEncodableVideoCodecs(),\n        getEncodableAudioCodecs(),\n        getEncodableSubtitleCodecs(),\n    ]);\n    return [...videoCodecs, ...audioCodecs, ...subtitleCodecs];\n};\n/**\n * Returns the list of all video codecs that can be encoded by the browser.\n * @group Encoding\n * @public\n */\nconst getEncodableVideoCodecs = async (checkedCodecs = _codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS, options) => {\n    const bools = await Promise.all(checkedCodecs.map(codec => canEncodeVideo(codec, options)));\n    return checkedCodecs.filter((_, i) => bools[i]);\n};\n/**\n * Returns the list of all audio codecs that can be encoded by the browser.\n * @group Encoding\n * @public\n */\nconst getEncodableAudioCodecs = async (checkedCodecs = _codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS, options) => {\n    const bools = await Promise.all(checkedCodecs.map(codec => canEncodeAudio(codec, options)));\n    return checkedCodecs.filter((_, i) => bools[i]);\n};\n/**\n * Returns the list of all subtitle codecs that can be encoded by the browser.\n * @group Encoding\n * @public\n */\nconst getEncodableSubtitleCodecs = async (checkedCodecs = _codec_js__WEBPACK_IMPORTED_MODULE_0__.SUBTITLE_CODECS) => {\n    const bools = await Promise.all(checkedCodecs.map(canEncodeSubtitles));\n    return checkedCodecs.filter((_, i) => bools[i]);\n};\n/**\n * Returns the first video codec from the given list that can be encoded by the browser.\n * @group Encoding\n * @public\n */\nconst getFirstEncodableVideoCodec = async (checkedCodecs, options) => {\n    for (const codec of checkedCodecs) {\n        if (await canEncodeVideo(codec, options)) {\n            return codec;\n        }\n    }\n    return null;\n};\n/**\n * Returns the first audio codec from the given list that can be encoded by the browser.\n * @group Encoding\n * @public\n */\nconst getFirstEncodableAudioCodec = async (checkedCodecs, options) => {\n    for (const codec of checkedCodecs) {\n        if (await canEncodeAudio(codec, options)) {\n            return codec;\n        }\n    }\n    return null;\n};\n/**\n * Returns the first subtitle codec from the given list that can be encoded by the browser.\n * @group Encoding\n * @public\n */\nconst getFirstEncodableSubtitleCodec = async (checkedCodecs) => {\n    for (const codec of checkedCodecs) {\n        if (await canEncodeSubtitles(codec)) {\n            return codec;\n        }\n    }\n    return null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/encode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/input-track.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/input-track.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InputAudioTrack: function() { return /* binding */ InputAudioTrack; },\n/* harmony export */   InputTrack: function() { return /* binding */ InputTrack; },\n/* harmony export */   InputVideoTrack: function() { return /* binding */ InputVideoTrack; }\n/* harmony export */ });\n/* harmony import */ var _codec_data_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./codec-data.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec-data.js\");\n/* harmony import */ var _custom_coder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./custom-coder.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/custom-coder.js\");\n/* harmony import */ var _media_sink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./media-sink.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/media-sink.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _packet_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./packet.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/packet.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n/**\n * Represents a media track in an input file.\n * @group Input files & tracks\n * @public\n */\nclass InputTrack {\n    /** @internal */\n    constructor(backing) {\n        this._backing = backing;\n    }\n    /** Returns true if and only if this track is a video track. */\n    isVideoTrack() {\n        return this instanceof InputVideoTrack;\n    }\n    /** Returns true if and only if this track is an audio track. */\n    isAudioTrack() {\n        return this instanceof InputAudioTrack;\n    }\n    /** The unique ID of this track in the input file. */\n    get id() {\n        return this._backing.getId();\n    }\n    /**\n     * The identifier of the codec used internally by the container. It is not homogenized by Mediabunny\n     * and depends entirely on the container format.\n     *\n     * This field can be used to determine the codec of a track in case Mediabunny doesn't know that codec.\n     *\n     * - For ISOBMFF files, this field returns the name of the Sample Description Box (e.g. `'avc1'`).\n     * - For Matroska files, this field returns the value of the `CodecID` element.\n     * - For WAVE files, this field returns the value of the format tag in the `'fmt '` chunk.\n     * - For ADTS files, this field contains the `MPEG-4 Audio Object Type`.\n     * - In all other cases, this field is `null`.\n     */\n    get internalCodecId() {\n        return this._backing.getInternalCodecId();\n    }\n    /**\n     * The ISO 639-2/T language code for this track. If the language is unknown, this field is `'und'` (undetermined).\n     */\n    get languageCode() {\n        return this._backing.getLanguageCode();\n    }\n    /** A user-defined name for this track. */\n    get name() {\n        return this._backing.getName();\n    }\n    /**\n     * A positive number x such that all timestamps and durations of all packets of this track are\n     * integer multiples of 1/x.\n     */\n    get timeResolution() {\n        return this._backing.getTimeResolution();\n    }\n    /**\n     * Returns the start timestamp of the first packet of this track, in seconds. While often near zero, this value\n     * may be positive or even negative. A negative starting timestamp means the track's timing has been offset. Samples\n     * with a negative timestamp should not be presented.\n     */\n    getFirstTimestamp() {\n        return this._backing.getFirstTimestamp();\n    }\n    /** Returns the end timestamp of the last packet of this track, in seconds. */\n    computeDuration() {\n        return this._backing.computeDuration();\n    }\n    /**\n     * Computes aggregate packet statistics for this track, such as average packet rate or bitrate.\n     *\n     * @param targetPacketCount - This optional parameter sets a target for how many packets this method must have\n     * looked at before it can return early; this means, you can use it to aggregate only a subset (prefix) of all\n     * packets. This is very useful for getting a great estimate of video frame rate without having to scan through the\n     * entire file.\n     */\n    async computePacketStats(targetPacketCount = Infinity) {\n        const sink = new _media_sink_js__WEBPACK_IMPORTED_MODULE_0__.EncodedPacketSink(this);\n        let startTimestamp = Infinity;\n        let endTimestamp = -Infinity;\n        let packetCount = 0;\n        let totalPacketBytes = 0;\n        for await (const packet of sink.packets(undefined, undefined, { metadataOnly: true })) {\n            if (packetCount >= targetPacketCount\n                // This additional condition is needed to produce correct results with out-of-presentation-order packets\n                && packet.timestamp >= endTimestamp) {\n                break;\n            }\n            startTimestamp = Math.min(startTimestamp, packet.timestamp);\n            endTimestamp = Math.max(endTimestamp, packet.timestamp + packet.duration);\n            packetCount++;\n            totalPacketBytes += packet.byteLength;\n        }\n        return {\n            packetCount,\n            averagePacketRate: packetCount\n                ? Number((packetCount / (endTimestamp - startTimestamp)).toPrecision(16))\n                : 0,\n            averageBitrate: packetCount\n                ? Number((8 * totalPacketBytes / (endTimestamp - startTimestamp)).toPrecision(16))\n                : 0,\n        };\n    }\n}\n/**\n * Represents a video track in an input file.\n * @group Input files & tracks\n * @public\n */\nclass InputVideoTrack extends InputTrack {\n    /** @internal */\n    constructor(backing) {\n        super(backing);\n        this._backing = backing;\n    }\n    get type() {\n        return 'video';\n    }\n    get codec() {\n        return this._backing.getCodec();\n    }\n    /** The width in pixels of the track's coded samples, before any transformations or rotations. */\n    get codedWidth() {\n        return this._backing.getCodedWidth();\n    }\n    /** The height in pixels of the track's coded samples, before any transformations or rotations. */\n    get codedHeight() {\n        return this._backing.getCodedHeight();\n    }\n    /** The angle in degrees by which the track's frames should be rotated (clockwise). */\n    get rotation() {\n        return this._backing.getRotation();\n    }\n    /** The width in pixels of the track's frames after rotation. */\n    get displayWidth() {\n        const rotation = this._backing.getRotation();\n        return rotation % 180 === 0 ? this._backing.getCodedWidth() : this._backing.getCodedHeight();\n    }\n    /** The height in pixels of the track's frames after rotation. */\n    get displayHeight() {\n        const rotation = this._backing.getRotation();\n        return rotation % 180 === 0 ? this._backing.getCodedHeight() : this._backing.getCodedWidth();\n    }\n    /** Returns the color space of the track's samples. */\n    getColorSpace() {\n        return this._backing.getColorSpace();\n    }\n    /** If this method returns true, the track's samples use a high dynamic range (HDR). */\n    async hasHighDynamicRange() {\n        const colorSpace = await this._backing.getColorSpace();\n        return colorSpace.primaries === 'bt2020' || colorSpace.primaries === 'smpte432'\n            || colorSpace.transfer === 'pg' || colorSpace.transfer === 'hlg'\n            || colorSpace.matrix === 'bt2020-ncl';\n    }\n    /**\n     * Returns the [decoder configuration](https://www.w3.org/TR/webcodecs/#video-decoder-config) for decoding the\n     * track's packets using a [`VideoDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/VideoDecoder). Returns\n     * null if the track's codec is unknown.\n     */\n    getDecoderConfig() {\n        return this._backing.getDecoderConfig();\n    }\n    async getCodecParameterString() {\n        const decoderConfig = await this._backing.getDecoderConfig();\n        return decoderConfig?.codec ?? null;\n    }\n    async canDecode() {\n        try {\n            const decoderConfig = await this._backing.getDecoderConfig();\n            if (!decoderConfig) {\n                return false;\n            }\n            const codec = this._backing.getCodec();\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(codec !== null);\n            if (_custom_coder_js__WEBPACK_IMPORTED_MODULE_2__.customVideoDecoders.some(x => x.supports(codec, decoderConfig))) {\n                return true;\n            }\n            if (typeof VideoDecoder === 'undefined') {\n                return false;\n            }\n            const support = await VideoDecoder.isConfigSupported(decoderConfig);\n            return support.supported === true;\n        }\n        catch (error) {\n            console.error('Error during decodability check:', error);\n            return false;\n        }\n    }\n    async determinePacketType(packet) {\n        if (!(packet instanceof _packet_js__WEBPACK_IMPORTED_MODULE_3__.EncodedPacket)) {\n            throw new TypeError('packet must be an EncodedPacket.');\n        }\n        if (packet.isMetadataOnly) {\n            throw new TypeError('packet must not be metadata-only to determine its type.');\n        }\n        if (this.codec === null) {\n            return null;\n        }\n        return (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_4__.determineVideoPacketType)(this, packet);\n    }\n}\n/**\n * Represents an audio track in an input file.\n * @group Input files & tracks\n * @public\n */\nclass InputAudioTrack extends InputTrack {\n    /** @internal */\n    constructor(backing) {\n        super(backing);\n        this._backing = backing;\n    }\n    get type() {\n        return 'audio';\n    }\n    get codec() {\n        return this._backing.getCodec();\n    }\n    /** The number of audio channels in the track. */\n    get numberOfChannels() {\n        return this._backing.getNumberOfChannels();\n    }\n    /** The track's audio sample rate in hertz. */\n    get sampleRate() {\n        return this._backing.getSampleRate();\n    }\n    /**\n     * Returns the [decoder configuration](https://www.w3.org/TR/webcodecs/#audio-decoder-config) for decoding the\n     * track's packets using an [`AudioDecoder`](https://developer.mozilla.org/en-US/docs/Web/API/AudioDecoder). Returns\n     * null if the track's codec is unknown.\n     */\n    getDecoderConfig() {\n        return this._backing.getDecoderConfig();\n    }\n    async getCodecParameterString() {\n        const decoderConfig = await this._backing.getDecoderConfig();\n        return decoderConfig?.codec ?? null;\n    }\n    async canDecode() {\n        try {\n            const decoderConfig = await this._backing.getDecoderConfig();\n            if (!decoderConfig) {\n                return false;\n            }\n            const codec = this._backing.getCodec();\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(codec !== null);\n            if (_custom_coder_js__WEBPACK_IMPORTED_MODULE_2__.customAudioDecoders.some(x => x.supports(codec, decoderConfig))) {\n                return true;\n            }\n            if (decoderConfig.codec.startsWith('pcm-')) {\n                return true; // Since we decode it ourselves\n            }\n            else {\n                if (typeof AudioDecoder === 'undefined') {\n                    return false;\n                }\n                const support = await AudioDecoder.isConfigSupported(decoderConfig);\n                return support.supported === true;\n            }\n        }\n        catch (error) {\n            console.error('Error during decodability check:', error);\n            return false;\n        }\n    }\n    async determinePacketType(packet) {\n        if (!(packet instanceof _packet_js__WEBPACK_IMPORTED_MODULE_3__.EncodedPacket)) {\n            throw new TypeError('packet must be an EncodedPacket.');\n        }\n        if (this.codec === null) {\n            return null;\n        }\n        return 'key'; // No audio codec with delta packets\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/input-track.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-boxes.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-boxes.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IsobmffBoxWriter: function() { return /* binding */ IsobmffBoxWriter; },\n/* harmony export */   av1C: function() { return /* binding */ av1C; },\n/* harmony export */   avcC: function() { return /* binding */ avcC; },\n/* harmony export */   box: function() { return /* binding */ box; },\n/* harmony export */   colr: function() { return /* binding */ colr; },\n/* harmony export */   cslg: function() { return /* binding */ cslg; },\n/* harmony export */   ctts: function() { return /* binding */ ctts; },\n/* harmony export */   dOps: function() { return /* binding */ dOps; },\n/* harmony export */   dfLa: function() { return /* binding */ dfLa; },\n/* harmony export */   dinf: function() { return /* binding */ dinf; },\n/* harmony export */   dref: function() { return /* binding */ dref; },\n/* harmony export */   enda: function() { return /* binding */ enda; },\n/* harmony export */   esds: function() { return /* binding */ esds; },\n/* harmony export */   frma: function() { return /* binding */ frma; },\n/* harmony export */   ftyp: function() { return /* binding */ ftyp; },\n/* harmony export */   fullBox: function() { return /* binding */ fullBox; },\n/* harmony export */   hdlr: function() { return /* binding */ hdlr; },\n/* harmony export */   hvcC: function() { return /* binding */ hvcC; },\n/* harmony export */   mdat: function() { return /* binding */ mdat; },\n/* harmony export */   mdhd: function() { return /* binding */ mdhd; },\n/* harmony export */   mdia: function() { return /* binding */ mdia; },\n/* harmony export */   mfhd: function() { return /* binding */ mfhd; },\n/* harmony export */   mfra: function() { return /* binding */ mfra; },\n/* harmony export */   mfro: function() { return /* binding */ mfro; },\n/* harmony export */   minf: function() { return /* binding */ minf; },\n/* harmony export */   moof: function() { return /* binding */ moof; },\n/* harmony export */   moov: function() { return /* binding */ moov; },\n/* harmony export */   mvex: function() { return /* binding */ mvex; },\n/* harmony export */   mvhd: function() { return /* binding */ mvhd; },\n/* harmony export */   nmhd: function() { return /* binding */ nmhd; },\n/* harmony export */   smhd: function() { return /* binding */ smhd; },\n/* harmony export */   soundSampleDescription: function() { return /* binding */ soundSampleDescription; },\n/* harmony export */   stbl: function() { return /* binding */ stbl; },\n/* harmony export */   stco: function() { return /* binding */ stco; },\n/* harmony export */   stsc: function() { return /* binding */ stsc; },\n/* harmony export */   stsd: function() { return /* binding */ stsd; },\n/* harmony export */   stss: function() { return /* binding */ stss; },\n/* harmony export */   stsz: function() { return /* binding */ stsz; },\n/* harmony export */   stts: function() { return /* binding */ stts; },\n/* harmony export */   subtitleSampleDescription: function() { return /* binding */ subtitleSampleDescription; },\n/* harmony export */   tfdt: function() { return /* binding */ tfdt; },\n/* harmony export */   tfhd: function() { return /* binding */ tfhd; },\n/* harmony export */   tfra: function() { return /* binding */ tfra; },\n/* harmony export */   tkhd: function() { return /* binding */ tkhd; },\n/* harmony export */   traf: function() { return /* binding */ traf; },\n/* harmony export */   trak: function() { return /* binding */ trak; },\n/* harmony export */   trex: function() { return /* binding */ trex; },\n/* harmony export */   trun: function() { return /* binding */ trun; },\n/* harmony export */   txtC: function() { return /* binding */ txtC; },\n/* harmony export */   url: function() { return /* binding */ url; },\n/* harmony export */   videoSampleDescription: function() { return /* binding */ videoSampleDescription; },\n/* harmony export */   vmhd: function() { return /* binding */ vmhd; },\n/* harmony export */   vpcC: function() { return /* binding */ vpcC; },\n/* harmony export */   vttC: function() { return /* binding */ vttC; },\n/* harmony export */   vtta: function() { return /* binding */ vtta; },\n/* harmony export */   vttc: function() { return /* binding */ vttc; },\n/* harmony export */   vtte: function() { return /* binding */ vtte; },\n/* harmony export */   wave: function() { return /* binding */ wave; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _subtitles_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../subtitles.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/subtitles.js\");\n/* harmony import */ var _isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isobmff-muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-muxer.js\");\n/* harmony import */ var _codec_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../codec-data.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec-data.js\");\n/* harmony import */ var _tags_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tags.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/tags.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n\nclass IsobmffBoxWriter {\n    constructor(writer) {\n        this.writer = writer;\n        this.helper = new Uint8Array(8);\n        this.helperView = new DataView(this.helper.buffer);\n        /**\n         * Stores the position from the start of the file to where boxes elements have been written. This is used to\n         * rewrite/edit elements that were already added before, and to measure sizes of things.\n         */\n        this.offsets = new WeakMap();\n    }\n    writeU32(value) {\n        this.helperView.setUint32(0, value, false);\n        this.writer.write(this.helper.subarray(0, 4));\n    }\n    writeU64(value) {\n        this.helperView.setUint32(0, Math.floor(value / 2 ** 32), false);\n        this.helperView.setUint32(4, value, false);\n        this.writer.write(this.helper.subarray(0, 8));\n    }\n    writeAscii(text) {\n        for (let i = 0; i < text.length; i++) {\n            this.helperView.setUint8(i % 8, text.charCodeAt(i));\n            if (i % 8 === 7)\n                this.writer.write(this.helper);\n        }\n        if (text.length % 8 !== 0) {\n            this.writer.write(this.helper.subarray(0, text.length % 8));\n        }\n    }\n    writeBox(box) {\n        this.offsets.set(box, this.writer.getPos());\n        if (box.contents && !box.children) {\n            this.writeBoxHeader(box, box.size ?? box.contents.byteLength + 8);\n            this.writer.write(box.contents);\n        }\n        else {\n            const startPos = this.writer.getPos();\n            this.writeBoxHeader(box, 0);\n            if (box.contents)\n                this.writer.write(box.contents);\n            if (box.children)\n                for (const child of box.children)\n                    if (child)\n                        this.writeBox(child);\n            const endPos = this.writer.getPos();\n            const size = box.size ?? endPos - startPos;\n            this.writer.seek(startPos);\n            this.writeBoxHeader(box, size);\n            this.writer.seek(endPos);\n        }\n    }\n    writeBoxHeader(box, size) {\n        this.writeU32(box.largeSize ? 1 : size);\n        this.writeAscii(box.type);\n        if (box.largeSize)\n            this.writeU64(size);\n    }\n    measureBoxHeader(box) {\n        return 8 + (box.largeSize ? 8 : 0);\n    }\n    patchBox(box) {\n        const boxOffset = this.offsets.get(box);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(boxOffset !== undefined);\n        const endPos = this.writer.getPos();\n        this.writer.seek(boxOffset);\n        this.writeBox(box);\n        this.writer.seek(endPos);\n    }\n    measureBox(box) {\n        if (box.contents && !box.children) {\n            const headerSize = this.measureBoxHeader(box);\n            return headerSize + box.contents.byteLength;\n        }\n        else {\n            let result = this.measureBoxHeader(box);\n            if (box.contents)\n                result += box.contents.byteLength;\n            if (box.children)\n                for (const child of box.children)\n                    if (child)\n                        result += this.measureBox(child);\n            return result;\n        }\n    }\n}\nconst bytes = new Uint8Array(8);\nconst view = new DataView(bytes.buffer);\nconst u8 = (value) => {\n    return [(value % 0x100 + 0x100) % 0x100];\n};\nconst u16 = (value) => {\n    view.setUint16(0, value, false);\n    return [bytes[0], bytes[1]];\n};\nconst i16 = (value) => {\n    view.setInt16(0, value, false);\n    return [bytes[0], bytes[1]];\n};\nconst u24 = (value) => {\n    view.setUint32(0, value, false);\n    return [bytes[1], bytes[2], bytes[3]];\n};\nconst u32 = (value) => {\n    view.setUint32(0, value, false);\n    return [bytes[0], bytes[1], bytes[2], bytes[3]];\n};\nconst i32 = (value) => {\n    view.setInt32(0, value, false);\n    return [bytes[0], bytes[1], bytes[2], bytes[3]];\n};\nconst u64 = (value) => {\n    view.setUint32(0, Math.floor(value / 2 ** 32), false);\n    view.setUint32(4, value, false);\n    return [bytes[0], bytes[1], bytes[2], bytes[3], bytes[4], bytes[5], bytes[6], bytes[7]];\n};\nconst fixed_8_8 = (value) => {\n    view.setInt16(0, 2 ** 8 * value, false);\n    return [bytes[0], bytes[1]];\n};\nconst fixed_16_16 = (value) => {\n    view.setInt32(0, 2 ** 16 * value, false);\n    return [bytes[0], bytes[1], bytes[2], bytes[3]];\n};\nconst fixed_2_30 = (value) => {\n    view.setInt32(0, 2 ** 30 * value, false);\n    return [bytes[0], bytes[1], bytes[2], bytes[3]];\n};\nconst variableUnsignedInt = (value, byteLength) => {\n    const bytes = [];\n    let remaining = value;\n    do {\n        let byte = remaining & 0x7f;\n        remaining >>= 7;\n        // If this isn't the first byte we're adding (meaning there will be more bytes after it\n        // when we reverse the array), set the continuation bit\n        if (bytes.length > 0) {\n            byte |= 0x80;\n        }\n        bytes.push(byte);\n        if (byteLength !== undefined) {\n            byteLength--;\n        }\n    } while (remaining > 0 || byteLength);\n    // Reverse the array since we built it backwards\n    return bytes.reverse();\n};\nconst ascii = (text, nullTerminated = false) => {\n    const bytes = Array(text.length).fill(null).map((_, i) => text.charCodeAt(i));\n    if (nullTerminated)\n        bytes.push(0x00);\n    return bytes;\n};\nconst lastPresentedSample = (samples) => {\n    let result = null;\n    for (const sample of samples) {\n        if (!result || sample.timestamp > result.timestamp) {\n            result = sample;\n        }\n    }\n    return result;\n};\nconst rotationMatrix = (rotationInDegrees) => {\n    const theta = rotationInDegrees * (Math.PI / 180);\n    const cosTheta = Math.round(Math.cos(theta));\n    const sinTheta = Math.round(Math.sin(theta));\n    // Matrices are post-multiplied in ISOBMFF, meaning this is the transpose of your typical rotation matrix\n    return [\n        cosTheta, sinTheta, 0,\n        -sinTheta, cosTheta, 0,\n        0, 0, 1,\n    ];\n};\nconst IDENTITY_MATRIX = rotationMatrix(0);\nconst matrixToBytes = (matrix) => {\n    return [\n        fixed_16_16(matrix[0]), fixed_16_16(matrix[1]), fixed_2_30(matrix[2]),\n        fixed_16_16(matrix[3]), fixed_16_16(matrix[4]), fixed_2_30(matrix[5]),\n        fixed_16_16(matrix[6]), fixed_16_16(matrix[7]), fixed_2_30(matrix[8]),\n    ];\n};\nconst box = (type, contents, children) => ({\n    type,\n    contents: contents && new Uint8Array(contents.flat(10)),\n    children,\n});\n/** A FullBox always starts with a version byte, followed by three flag bytes. */\nconst fullBox = (type, version, flags, contents, children) => box(type, [u8(version), u24(flags), contents ?? []], children);\n/**\n * File Type Compatibility Box: Allows the reader to determine whether this is a type of file that the\n * reader understands.\n */\nconst ftyp = (details) => {\n    // You can find the full logic for this at\n    // https://github.com/FFmpeg/FFmpeg/blob/de2fb43e785773738c660cdafb9309b1ef1bc80d/libavformat/movenc.c#L5518\n    // Obviously, this lib only needs a small subset of that logic.\n    const minorVersion = 0x200;\n    if (details.isQuickTime) {\n        return box('ftyp', [\n            ascii('qt  '), // Major brand\n            u32(minorVersion), // Minor version\n            // Compatible brands\n            ascii('qt  '),\n        ]);\n    }\n    if (details.fragmented) {\n        return box('ftyp', [\n            ascii('iso5'), // Major brand\n            u32(minorVersion), // Minor version\n            // Compatible brands\n            ascii('iso5'),\n            ascii('iso6'),\n            ascii('mp41'),\n        ]);\n    }\n    return box('ftyp', [\n        ascii('isom'), // Major brand\n        u32(minorVersion), // Minor version\n        // Compatible brands\n        ascii('isom'),\n        details.holdsAvc ? ascii('avc1') : [],\n        ascii('mp41'),\n    ]);\n};\n/** Movie Sample Data Box. Contains the actual frames/samples of the media. */\nconst mdat = (reserveLargeSize) => ({ type: 'mdat', largeSize: reserveLargeSize });\n/**\n * Movie Box: Used to specify the information that defines a movie - that is, the information that allows\n * an application to interpret the sample data that is stored elsewhere.\n */\nconst moov = (muxer, fragmented = false) => box('moov', undefined, [\n    mvhd(muxer.creationTime, muxer.trackDatas),\n    ...muxer.trackDatas.map(x => trak(x, muxer.creationTime)),\n    fragmented ? mvex(muxer.trackDatas) : null,\n    udta(muxer),\n]);\n/** Movie Header Box: Used to specify the characteristics of the entire movie, such as timescale and duration. */\nconst mvhd = (creationTime, trackDatas) => {\n    const duration = (0,_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.intoTimescale)(Math.max(0, ...trackDatas\n        .filter(x => x.samples.length > 0)\n        .map((x) => {\n        const lastSample = lastPresentedSample(x.samples);\n        return lastSample.timestamp + lastSample.duration;\n    })), _isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_TIMESCALE);\n    const nextTrackId = Math.max(0, ...trackDatas.map(x => x.track.id)) + 1;\n    // Conditionally use u64 if u32 isn't enough\n    const needsU64 = !(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isU32)(creationTime) || !(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isU32)(duration);\n    const u32OrU64 = needsU64 ? u64 : u32;\n    return fullBox('mvhd', +needsU64, 0, [\n        u32OrU64(creationTime), // Creation time\n        u32OrU64(creationTime), // Modification time\n        u32(_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_TIMESCALE), // Timescale\n        u32OrU64(duration), // Duration\n        fixed_16_16(1), // Preferred rate\n        fixed_8_8(1), // Preferred volume\n        Array(10).fill(0), // Reserved\n        matrixToBytes(IDENTITY_MATRIX), // Matrix\n        Array(24).fill(0), // Pre-defined\n        u32(nextTrackId), // Next track ID\n    ]);\n};\n/**\n * Track Box: Defines a single track of a movie. A movie may consist of one or more tracks. Each track is\n * independent of the other tracks in the movie and carries its own temporal and spatial information. Each Track Box\n * contains its associated Media Box.\n */\nconst trak = (trackData, creationTime) => {\n    const trackMetadata = (0,_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.getTrackMetadata)(trackData);\n    return box('trak', undefined, [\n        tkhd(trackData, creationTime),\n        mdia(trackData, creationTime),\n        trackMetadata.name !== undefined\n            ? box('udta', undefined, [\n                box('name', [\n                    ..._misc_js__WEBPACK_IMPORTED_MODULE_0__.textEncoder.encode(trackMetadata.name),\n                ]),\n            ])\n            : null,\n    ]);\n};\n/** Track Header Box: Specifies the characteristics of a single track within a movie. */\nconst tkhd = (trackData, creationTime) => {\n    const lastSample = lastPresentedSample(trackData.samples);\n    const durationInGlobalTimescale = (0,_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.intoTimescale)(lastSample ? lastSample.timestamp + lastSample.duration : 0, _isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_TIMESCALE);\n    const needsU64 = !(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isU32)(creationTime) || !(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isU32)(durationInGlobalTimescale);\n    const u32OrU64 = needsU64 ? u64 : u32;\n    let matrix;\n    if (trackData.type === 'video') {\n        const rotation = trackData.track.metadata.rotation;\n        matrix = rotationMatrix(rotation ?? 0);\n    }\n    else {\n        matrix = IDENTITY_MATRIX;\n    }\n    return fullBox('tkhd', +needsU64, 3, [\n        u32OrU64(creationTime), // Creation time\n        u32OrU64(creationTime), // Modification time\n        u32(trackData.track.id), // Track ID\n        u32(0), // Reserved\n        u32OrU64(durationInGlobalTimescale), // Duration\n        Array(8).fill(0), // Reserved\n        u16(0), // Layer\n        u16(trackData.track.id), // Alternate group\n        fixed_8_8(trackData.type === 'audio' ? 1 : 0), // Volume\n        u16(0), // Reserved\n        matrixToBytes(matrix), // Matrix\n        fixed_16_16(trackData.type === 'video' ? trackData.info.width : 0), // Track width\n        fixed_16_16(trackData.type === 'video' ? trackData.info.height : 0), // Track height\n    ]);\n};\n/** Media Box: Describes and define a track's media type and sample data. */\nconst mdia = (trackData, creationTime) => box('mdia', undefined, [\n    mdhd(trackData, creationTime),\n    hdlr(true, TRACK_TYPE_TO_COMPONENT_SUBTYPE[trackData.type], TRACK_TYPE_TO_HANDLER_NAME[trackData.type]),\n    minf(trackData),\n]);\n/** Media Header Box: Specifies the characteristics of a media, including timescale and duration. */\nconst mdhd = (trackData, creationTime) => {\n    const lastSample = lastPresentedSample(trackData.samples);\n    const localDuration = (0,_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.intoTimescale)(lastSample ? lastSample.timestamp + lastSample.duration : 0, trackData.timescale);\n    const needsU64 = !(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isU32)(creationTime) || !(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isU32)(localDuration);\n    const u32OrU64 = needsU64 ? u64 : u32;\n    return fullBox('mdhd', +needsU64, 0, [\n        u32OrU64(creationTime), // Creation time\n        u32OrU64(creationTime), // Modification time\n        u32(trackData.timescale), // Timescale\n        u32OrU64(localDuration), // Duration\n        u16(getLanguageCodeInt(trackData.track.metadata.languageCode ?? _misc_js__WEBPACK_IMPORTED_MODULE_0__.UNDETERMINED_LANGUAGE)), // Language\n        u16(0), // Quality\n    ]);\n};\nconst TRACK_TYPE_TO_COMPONENT_SUBTYPE = {\n    video: 'vide',\n    audio: 'soun',\n    subtitle: 'text',\n};\nconst TRACK_TYPE_TO_HANDLER_NAME = {\n    video: 'MediabunnyVideoHandler',\n    audio: 'MediabunnySoundHandler',\n    subtitle: 'MediabunnyTextHandler',\n};\n/** Handler Reference Box. */\nconst hdlr = (hasComponentType, handlerType, name, manufacturer = '\\0\\0\\0\\0') => fullBox('hdlr', 0, 0, [\n    hasComponentType ? ascii('mhlr') : u32(0), // Component type\n    ascii(handlerType), // Component subtype\n    ascii(manufacturer), // Component manufacturer\n    u32(0), // Component flags\n    u32(0), // Component flags mask\n    ascii(name, true), // Component name\n]);\n/**\n * Media Information Box: Stores handler-specific information for a track's media data. The media handler uses this\n * information to map from media time to media data and to process the media data.\n */\nconst minf = (trackData) => box('minf', undefined, [\n    TRACK_TYPE_TO_HEADER_BOX[trackData.type](),\n    dinf(),\n    stbl(trackData),\n]);\n/** Video Media Information Header Box: Defines specific color and graphics mode information. */\nconst vmhd = () => fullBox('vmhd', 0, 1, [\n    u16(0), // Graphics mode\n    u16(0), // Opcolor R\n    u16(0), // Opcolor G\n    u16(0), // Opcolor B\n]);\n/** Sound Media Information Header Box: Stores the sound media's control information, such as balance. */\nconst smhd = () => fullBox('smhd', 0, 0, [\n    u16(0), // Balance\n    u16(0), // Reserved\n]);\n/** Null Media Header Box. */\nconst nmhd = () => fullBox('nmhd', 0, 0);\nconst TRACK_TYPE_TO_HEADER_BOX = {\n    video: vmhd,\n    audio: smhd,\n    subtitle: nmhd,\n};\n/**\n * Data Information Box: Contains information specifying the data handler component that provides access to the\n * media data. The data handler component uses the Data Information Box to interpret the media's data.\n */\nconst dinf = () => box('dinf', undefined, [\n    dref(),\n]);\n/**\n * Data Reference Box: Contains tabular data that instructs the data handler component how to access the media's data.\n */\nconst dref = () => fullBox('dref', 0, 0, [\n    u32(1), // Entry count\n], [\n    url(),\n]);\nconst url = () => fullBox('url ', 0, 1); // Self-reference flag enabled\n/**\n * Sample Table Box: Contains information for converting from media time to sample number to sample location. This box\n * also indicates how to interpret the sample (for example, whether to decompress the video data and, if so, how).\n */\nconst stbl = (trackData) => {\n    const needsCtts = trackData.compositionTimeOffsetTable.length > 1\n        || trackData.compositionTimeOffsetTable.some(x => x.sampleCompositionTimeOffset !== 0);\n    return box('stbl', undefined, [\n        stsd(trackData),\n        stts(trackData),\n        needsCtts ? ctts(trackData) : null,\n        needsCtts ? cslg(trackData) : null,\n        stsc(trackData),\n        stsz(trackData),\n        stco(trackData),\n        stss(trackData),\n    ]);\n};\n/**\n * Sample Description Box: Stores information that allows you to decode samples in the media. The data stored in the\n * sample description varies, depending on the media type.\n */\nconst stsd = (trackData) => {\n    let sampleDescription;\n    if (trackData.type === 'video') {\n        sampleDescription = videoSampleDescription(VIDEO_CODEC_TO_BOX_NAME[trackData.track.source._codec], trackData);\n    }\n    else if (trackData.type === 'audio') {\n        const boxName = audioCodecToBoxName(trackData.track.source._codec, trackData.muxer.isQuickTime);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(boxName);\n        sampleDescription = soundSampleDescription(boxName, trackData);\n    }\n    else if (trackData.type === 'subtitle') {\n        sampleDescription = subtitleSampleDescription(SUBTITLE_CODEC_TO_BOX_NAME[trackData.track.source._codec], trackData);\n    }\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(sampleDescription);\n    return fullBox('stsd', 0, 0, [\n        u32(1), // Entry count\n    ], [\n        sampleDescription,\n    ]);\n};\n/** Video Sample Description Box: Contains information that defines how to interpret video media data. */\nconst videoSampleDescription = (compressionType, trackData) => box(compressionType, [\n    Array(6).fill(0), // Reserved\n    u16(1), // Data reference index\n    u16(0), // Pre-defined\n    u16(0), // Reserved\n    Array(12).fill(0), // Pre-defined\n    u16(trackData.info.width), // Width\n    u16(trackData.info.height), // Height\n    u32(0x00480000), // Horizontal resolution\n    u32(0x00480000), // Vertical resolution\n    u32(0), // Reserved\n    u16(1), // Frame count\n    Array(32).fill(0), // Compressor name\n    u16(0x0018), // Depth\n    i16(0xffff), // Pre-defined\n], [\n    VIDEO_CODEC_TO_CONFIGURATION_BOX[trackData.track.source._codec](trackData),\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.colorSpaceIsComplete)(trackData.info.decoderConfig.colorSpace) ? colr(trackData) : null,\n]);\n/** Colour Information Box: Specifies the color space of the video. */\nconst colr = (trackData) => box('colr', [\n    ascii('nclx'), // Colour type\n    u16(_misc_js__WEBPACK_IMPORTED_MODULE_0__.COLOR_PRIMARIES_MAP[trackData.info.decoderConfig.colorSpace.primaries]), // Colour primaries\n    u16(_misc_js__WEBPACK_IMPORTED_MODULE_0__.TRANSFER_CHARACTERISTICS_MAP[trackData.info.decoderConfig.colorSpace.transfer]), // Transfer characteristics\n    u16(_misc_js__WEBPACK_IMPORTED_MODULE_0__.MATRIX_COEFFICIENTS_MAP[trackData.info.decoderConfig.colorSpace.matrix]), // Matrix coefficients\n    u8((trackData.info.decoderConfig.colorSpace.fullRange ? 1 : 0) << 7), // Full range flag\n]);\n/** AVC Configuration Box: Provides additional information to the decoder. */\nconst avcC = (trackData) => trackData.info.decoderConfig && box('avcC', [\n    // For AVC, description is an AVCDecoderConfigurationRecord, so nothing else to do here\n    ...(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toUint8Array)(trackData.info.decoderConfig.description),\n]);\n/** HEVC Configuration Box: Provides additional information to the decoder. */\nconst hvcC = (trackData) => trackData.info.decoderConfig && box('hvcC', [\n    // For HEVC, description is an HEVCDecoderConfigurationRecord, so nothing else to do here\n    ...(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toUint8Array)(trackData.info.decoderConfig.description),\n]);\n/** VP Configuration Box: Provides additional information to the decoder. */\nconst vpcC = (trackData) => {\n    // Reference: https://www.webmproject.org/vp9/mp4/\n    if (!trackData.info.decoderConfig) {\n        return null;\n    }\n    const decoderConfig = trackData.info.decoderConfig;\n    const parts = decoderConfig.codec.split('.'); // We can derive the required values from the codec string\n    const profile = Number(parts[1]);\n    const level = Number(parts[2]);\n    const bitDepth = Number(parts[3]);\n    const chromaSubsampling = parts[4] ? Number(parts[4]) : 1; // 4:2:0 colocated with luma (0,0)\n    const videoFullRangeFlag = parts[8] ? Number(parts[8]) : Number(decoderConfig.colorSpace?.fullRange ?? 0);\n    const thirdByte = (bitDepth << 4) + (chromaSubsampling << 1) + videoFullRangeFlag;\n    const colourPrimaries = parts[5]\n        ? Number(parts[5])\n        : decoderConfig.colorSpace?.primaries\n            ? _misc_js__WEBPACK_IMPORTED_MODULE_0__.COLOR_PRIMARIES_MAP[decoderConfig.colorSpace.primaries]\n            : 2; // Default to undetermined\n    const transferCharacteristics = parts[6]\n        ? Number(parts[6])\n        : decoderConfig.colorSpace?.transfer\n            ? _misc_js__WEBPACK_IMPORTED_MODULE_0__.TRANSFER_CHARACTERISTICS_MAP[decoderConfig.colorSpace.transfer]\n            : 2;\n    const matrixCoefficients = parts[7]\n        ? Number(parts[7])\n        : decoderConfig.colorSpace?.matrix\n            ? _misc_js__WEBPACK_IMPORTED_MODULE_0__.MATRIX_COEFFICIENTS_MAP[decoderConfig.colorSpace.matrix]\n            : 2;\n    return fullBox('vpcC', 1, 0, [\n        u8(profile), // Profile\n        u8(level), // Level\n        u8(thirdByte), // Bit depth, chroma subsampling, full range\n        u8(colourPrimaries), // Colour primaries\n        u8(transferCharacteristics), // Transfer characteristics\n        u8(matrixCoefficients), // Matrix coefficients\n        u16(0), // Codec initialization data size\n    ]);\n};\n/** AV1 Configuration Box: Provides additional information to the decoder. */\nconst av1C = (trackData) => {\n    return box('av1C', (0,_codec_js__WEBPACK_IMPORTED_MODULE_2__.generateAv1CodecConfigurationFromCodecString)(trackData.info.decoderConfig.codec));\n};\n/** Sound Sample Description Box: Contains information that defines how to interpret sound media data. */\nconst soundSampleDescription = (compressionType, trackData) => {\n    let version = 0;\n    let contents;\n    let sampleSizeInBits = 16;\n    if (_codec_js__WEBPACK_IMPORTED_MODULE_2__.PCM_AUDIO_CODECS.includes(trackData.track.source._codec)) {\n        const codec = trackData.track.source._codec;\n        const { sampleSize } = (0,_codec_js__WEBPACK_IMPORTED_MODULE_2__.parsePcmCodec)(codec);\n        sampleSizeInBits = 8 * sampleSize;\n        if (sampleSizeInBits > 16) {\n            version = 1;\n        }\n    }\n    if (version === 0) {\n        contents = [\n            Array(6).fill(0), // Reserved\n            u16(1), // Data reference index\n            u16(version), // Version\n            u16(0), // Revision level\n            u32(0), // Vendor\n            u16(trackData.info.numberOfChannels), // Number of channels\n            u16(sampleSizeInBits), // Sample size (bits)\n            u16(0), // Compression ID\n            u16(0), // Packet size\n            u16(trackData.info.sampleRate < 2 ** 16 ? trackData.info.sampleRate : 0), // Sample rate (upper)\n            u16(0), // Sample rate (lower)\n        ];\n    }\n    else {\n        contents = [\n            Array(6).fill(0), // Reserved\n            u16(1), // Data reference index\n            u16(version), // Version\n            u16(0), // Revision level\n            u32(0), // Vendor\n            u16(trackData.info.numberOfChannels), // Number of channels\n            u16(Math.min(sampleSizeInBits, 16)), // Sample size (bits)\n            u16(0), // Compression ID\n            u16(0), // Packet size\n            u16(trackData.info.sampleRate < 2 ** 16 ? trackData.info.sampleRate : 0), // Sample rate (upper)\n            u16(0), // Sample rate (lower)\n            u32(1), // Samples per packet (must be 1 for uncompressed formats)\n            u32(sampleSizeInBits / 8), // Bytes per packet\n            u32(trackData.info.numberOfChannels * sampleSizeInBits / 8), // Bytes per frame\n            u32(2), // Bytes per sample (constant in FFmpeg)\n        ];\n    }\n    return box(compressionType, contents, [\n        audioCodecToConfigurationBox(trackData.track.source._codec, trackData.muxer.isQuickTime)?.(trackData) ?? null,\n    ]);\n};\n/** MPEG-4 Elementary Stream Descriptor Box. */\nconst esds = (trackData) => {\n    // We build up the bytes in a layered way which reflects the nested structure\n    let objectTypeIndication;\n    switch (trackData.track.source._codec) {\n        case 'aac':\n            {\n                objectTypeIndication = 0x40;\n            }\n            ;\n            break;\n        case 'mp3':\n            {\n                objectTypeIndication = 0x6b;\n            }\n            ;\n            break;\n        case 'vorbis':\n            {\n                objectTypeIndication = 0xdd;\n            }\n            ;\n            break;\n        default: throw new Error(`Unhandled audio codec: ${trackData.track.source._codec}`);\n    }\n    let bytes = [\n        ...u8(objectTypeIndication), // Object type indication\n        ...u8(0x15), // stream type(6bits)=5 audio, flags(2bits)=1\n        ...u24(0), // 24bit buffer size\n        ...u32(0), // max bitrate\n        ...u32(0), // avg bitrate\n    ];\n    if (trackData.info.decoderConfig.description) {\n        const description = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toUint8Array)(trackData.info.decoderConfig.description);\n        // Add the decoder description to the end\n        bytes = [\n            ...bytes,\n            ...u8(0x05), // TAG(5) = DecoderSpecificInfo\n            ...variableUnsignedInt(description.byteLength),\n            ...description,\n        ];\n    }\n    bytes = [\n        ...u16(1), // ES_ID = 1\n        ...u8(0x00), // flags etc = 0\n        ...u8(0x04), // TAG(4) = ES Descriptor\n        ...variableUnsignedInt(bytes.length),\n        ...bytes,\n        ...u8(0x06), // TAG(6)\n        ...u8(0x01), // length\n        ...u8(0x02), // data\n    ];\n    bytes = [\n        ...u8(0x03), // TAG(3) = Object Descriptor\n        ...variableUnsignedInt(bytes.length),\n        ...bytes,\n    ];\n    return fullBox('esds', 0, 0, bytes);\n};\nconst wave = (trackData) => {\n    return box('wave', undefined, [\n        frma(trackData),\n        enda(trackData),\n        box('\\x00\\x00\\x00\\x00'), // NULL tag at the end\n    ]);\n};\nconst frma = (trackData) => {\n    return box('frma', [\n        ascii(audioCodecToBoxName(trackData.track.source._codec, trackData.muxer.isQuickTime)),\n    ]);\n};\n// This box specifies PCM endianness\nconst enda = (trackData) => {\n    const { littleEndian } = (0,_codec_js__WEBPACK_IMPORTED_MODULE_2__.parsePcmCodec)(trackData.track.source._codec);\n    return box('enda', [\n        u16(+littleEndian),\n    ]);\n};\n/** Opus Specific Box. */\nconst dOps = (trackData) => {\n    let outputChannelCount = trackData.info.numberOfChannels;\n    // Default PreSkip, should be at least 80 milliseconds worth of playback, measured in 48000 Hz samples\n    let preSkip = 3840;\n    let inputSampleRate = trackData.info.sampleRate;\n    let outputGain = 0;\n    let channelMappingFamily = 0;\n    let channelMappingTable = new Uint8Array(0);\n    // Read preskip and from codec private data from the encoder\n    // https://www.rfc-editor.org/rfc/rfc7845#section-5\n    const description = trackData.info.decoderConfig?.description;\n    if (description) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(description.byteLength >= 18);\n        const bytes = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toUint8Array)(description);\n        const header = (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_3__.parseOpusIdentificationHeader)(bytes);\n        outputChannelCount = header.outputChannelCount;\n        preSkip = header.preSkip;\n        inputSampleRate = header.inputSampleRate;\n        outputGain = header.outputGain;\n        channelMappingFamily = header.channelMappingFamily;\n        if (header.channelMappingTable) {\n            channelMappingTable = header.channelMappingTable;\n        }\n    }\n    // https://www.opus-codec.org/docs/opus_in_isobmff.html\n    return box('dOps', [\n        u8(0), // Version\n        u8(outputChannelCount), // OutputChannelCount\n        u16(preSkip), // PreSkip\n        u32(inputSampleRate), // InputSampleRate\n        i16(outputGain), // OutputGain\n        u8(channelMappingFamily), // ChannelMappingFamily\n        ...channelMappingTable,\n    ]);\n};\n/** FLAC specific box. */\nconst dfLa = (trackData) => {\n    const description = trackData.info.decoderConfig?.description;\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(description);\n    const bytes = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toUint8Array)(description);\n    return fullBox('dfLa', 0, 0, [\n        ...bytes.subarray(4),\n    ]);\n};\n/** PCM Configuration Box, ISO/IEC 23003-5. */\nconst pcmC = (trackData) => {\n    const { littleEndian, sampleSize } = (0,_codec_js__WEBPACK_IMPORTED_MODULE_2__.parsePcmCodec)(trackData.track.source._codec);\n    const formatFlags = +littleEndian;\n    return fullBox('pcmC', 0, 0, [\n        u8(formatFlags),\n        u8(8 * sampleSize),\n    ]);\n};\nconst subtitleSampleDescription = (compressionType, trackData) => box(compressionType, [\n    Array(6).fill(0), // Reserved\n    u16(1), // Data reference index\n], [\n    SUBTITLE_CODEC_TO_CONFIGURATION_BOX[trackData.track.source._codec](trackData),\n]);\nconst vttC = (trackData) => box('vttC', [\n    ..._misc_js__WEBPACK_IMPORTED_MODULE_0__.textEncoder.encode(trackData.info.config.description),\n]);\nconst txtC = (textConfig) => fullBox('txtC', 0, 0, [\n    ...textConfig, 0, // Text config (null-terminated)\n]);\n/**\n * Time-To-Sample Box: Stores duration information for a media's samples, providing a mapping from a time in a media\n * to the corresponding data sample. The table is compact, meaning that consecutive samples with the same time delta\n * will be grouped.\n */\nconst stts = (trackData) => {\n    return fullBox('stts', 0, 0, [\n        u32(trackData.timeToSampleTable.length), // Number of entries\n        trackData.timeToSampleTable.map(x => [\n            u32(x.sampleCount), // Sample count\n            u32(x.sampleDelta), // Sample duration\n        ]),\n    ]);\n};\n/** Sync Sample Box: Identifies the key frames in the media, marking the random access points within a stream. */\nconst stss = (trackData) => {\n    if (trackData.samples.every(x => x.type === 'key'))\n        return null; // No stss box -> every frame is a key frame\n    const keySamples = [...trackData.samples.entries()].filter(([, sample]) => sample.type === 'key');\n    return fullBox('stss', 0, 0, [\n        u32(keySamples.length), // Number of entries\n        keySamples.map(([index]) => u32(index + 1)), // Sync sample table\n    ]);\n};\n/**\n * Sample-To-Chunk Box: As samples are added to a media, they are collected into chunks that allow optimized data\n * access. A chunk contains one or more samples. Chunks in a media may have different sizes, and the samples within a\n * chunk may have different sizes. The Sample-To-Chunk Box stores chunk information for the samples in a media, stored\n * in a compactly-coded fashion.\n */\nconst stsc = (trackData) => {\n    return fullBox('stsc', 0, 0, [\n        u32(trackData.compactlyCodedChunkTable.length), // Number of entries\n        trackData.compactlyCodedChunkTable.map(x => [\n            u32(x.firstChunk), // First chunk\n            u32(x.samplesPerChunk), // Samples per chunk\n            u32(1), // Sample description index\n        ]),\n    ]);\n};\n/** Sample Size Box: Specifies the byte size of each sample in the media. */\nconst stsz = (trackData) => {\n    if (trackData.type === 'audio' && trackData.info.requiresPcmTransformation) {\n        const { sampleSize } = (0,_codec_js__WEBPACK_IMPORTED_MODULE_2__.parsePcmCodec)(trackData.track.source._codec);\n        // With PCM, every sample has the same size\n        return fullBox('stsz', 0, 0, [\n            u32(sampleSize * trackData.info.numberOfChannels), // Sample size\n            u32(trackData.samples.reduce((acc, x) => acc + (0,_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.intoTimescale)(x.duration, trackData.timescale), 0)),\n        ]);\n    }\n    return fullBox('stsz', 0, 0, [\n        u32(0), // Sample size (0 means non-constant size)\n        u32(trackData.samples.length), // Number of entries\n        trackData.samples.map(x => u32(x.size)), // Sample size table\n    ]);\n};\n/** Chunk Offset Box: Identifies the location of each chunk of data in the media's data stream, relative to the file. */\nconst stco = (trackData) => {\n    if (trackData.finalizedChunks.length > 0 && (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.last)(trackData.finalizedChunks).offset >= 2 ** 32) {\n        // If the file is large, use the co64 box\n        return fullBox('co64', 0, 0, [\n            u32(trackData.finalizedChunks.length), // Number of entries\n            trackData.finalizedChunks.map(x => u64(x.offset)), // Chunk offset table\n        ]);\n    }\n    return fullBox('stco', 0, 0, [\n        u32(trackData.finalizedChunks.length), // Number of entries\n        trackData.finalizedChunks.map(x => u32(x.offset)), // Chunk offset table\n    ]);\n};\n/**\n * Composition Time to Sample Box: Stores composition time offset information (PTS-DTS) for a\n * media's samples. The table is compact, meaning that consecutive samples with the same time\n * composition time offset will be grouped.\n */\nconst ctts = (trackData) => {\n    return fullBox('ctts', 1, 0, [\n        u32(trackData.compositionTimeOffsetTable.length), // Number of entries\n        trackData.compositionTimeOffsetTable.map(x => [\n            u32(x.sampleCount), // Sample count\n            i32(x.sampleCompositionTimeOffset), // Sample offset\n        ]),\n    ]);\n};\n/**\n * Composition to Decode Box: Stores information about the composition and display times of the media samples.\n */\nconst cslg = (trackData) => {\n    let leastDecodeToDisplayDelta = Infinity;\n    let greatestDecodeToDisplayDelta = -Infinity;\n    let compositionStartTime = Infinity;\n    let compositionEndTime = -Infinity;\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(trackData.compositionTimeOffsetTable.length > 0);\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(trackData.samples.length > 0);\n    for (let i = 0; i < trackData.compositionTimeOffsetTable.length; i++) {\n        const entry = trackData.compositionTimeOffsetTable[i];\n        leastDecodeToDisplayDelta = Math.min(leastDecodeToDisplayDelta, entry.sampleCompositionTimeOffset);\n        greatestDecodeToDisplayDelta = Math.max(greatestDecodeToDisplayDelta, entry.sampleCompositionTimeOffset);\n    }\n    for (let i = 0; i < trackData.samples.length; i++) {\n        const sample = trackData.samples[i];\n        compositionStartTime = Math.min(compositionStartTime, (0,_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.intoTimescale)(sample.timestamp, trackData.timescale));\n        compositionEndTime = Math.max(compositionEndTime, (0,_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.intoTimescale)(sample.timestamp + sample.duration, trackData.timescale));\n    }\n    const compositionToDtsShift = Math.max(-leastDecodeToDisplayDelta, 0);\n    if (compositionEndTime >= 2 ** 31) {\n        // For very large files, the composition end time can't be represented in i32, so let's just scrap the box in\n        // that case. QuickTime fails to read the file if there's a cslg box with version 1, so that's sadly not an\n        // option.\n        return null;\n    }\n    return fullBox('cslg', 0, 0, [\n        i32(compositionToDtsShift), // Composition to DTS shift\n        i32(leastDecodeToDisplayDelta), // Least decode to display delta\n        i32(greatestDecodeToDisplayDelta), // Greatest decode to display delta\n        i32(compositionStartTime), // Composition start time\n        i32(compositionEndTime), // Composition end time\n    ]);\n};\n/**\n * Movie Extends Box: This box signals to readers that the file is fragmented. Contains a single Track Extends Box\n * for each track in the movie.\n */\nconst mvex = (trackDatas) => {\n    return box('mvex', undefined, trackDatas.map(trex));\n};\n/** Track Extends Box: Contains the default values used by the movie fragments. */\nconst trex = (trackData) => {\n    return fullBox('trex', 0, 0, [\n        u32(trackData.track.id), // Track ID\n        u32(1), // Default sample description index\n        u32(0), // Default sample duration\n        u32(0), // Default sample size\n        u32(0), // Default sample flags\n    ]);\n};\n/**\n * Movie Fragment Box: The movie fragments extend the presentation in time. They provide the information that would\n * previously have been\tin the Movie Box.\n */\nconst moof = (sequenceNumber, trackDatas) => {\n    return box('moof', undefined, [\n        mfhd(sequenceNumber),\n        ...trackDatas.map(traf),\n    ]);\n};\n/** Movie Fragment Header Box: Contains a sequence number as a safety check. */\nconst mfhd = (sequenceNumber) => {\n    return fullBox('mfhd', 0, 0, [\n        u32(sequenceNumber), // Sequence number\n    ]);\n};\nconst fragmentSampleFlags = (sample) => {\n    let byte1 = 0;\n    let byte2 = 0;\n    const byte3 = 0;\n    const byte4 = 0;\n    const sampleIsDifferenceSample = sample.type === 'delta';\n    byte2 |= +sampleIsDifferenceSample;\n    if (sampleIsDifferenceSample) {\n        byte1 |= 1; // There is redundant coding in this sample\n    }\n    else {\n        byte1 |= 2; // There is no redundant coding in this sample\n    }\n    // Note that there are a lot of other flags to potentially set here, but most are irrelevant / non-necessary\n    return byte1 << 24 | byte2 << 16 | byte3 << 8 | byte4;\n};\n/** Track Fragment Box */\nconst traf = (trackData) => {\n    return box('traf', undefined, [\n        tfhd(trackData),\n        tfdt(trackData),\n        trun(trackData),\n    ]);\n};\n/** Track Fragment Header Box: Provides a reference to the extended track, and flags. */\nconst tfhd = (trackData) => {\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(trackData.currentChunk);\n    let tfFlags = 0;\n    tfFlags |= 0x00008; // Default sample duration present\n    tfFlags |= 0x00010; // Default sample size present\n    tfFlags |= 0x00020; // Default sample flags present\n    tfFlags |= 0x20000; // Default base is moof\n    // Prefer the second sample over the first one, as the first one is a sync sample and therefore the \"odd one out\"\n    const referenceSample = trackData.currentChunk.samples[1] ?? trackData.currentChunk.samples[0];\n    const referenceSampleInfo = {\n        duration: referenceSample.timescaleUnitsToNextSample,\n        size: referenceSample.size,\n        flags: fragmentSampleFlags(referenceSample),\n    };\n    return fullBox('tfhd', 0, tfFlags, [\n        u32(trackData.track.id), // Track ID\n        u32(referenceSampleInfo.duration), // Default sample duration\n        u32(referenceSampleInfo.size), // Default sample size\n        u32(referenceSampleInfo.flags), // Default sample flags\n    ]);\n};\n/**\n * Track Fragment Decode Time Box: Provides the absolute decode time of the first sample of the fragment. This is\n * useful for performing random access on the media file.\n */\nconst tfdt = (trackData) => {\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(trackData.currentChunk);\n    return fullBox('tfdt', 1, 0, [\n        u64((0,_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.intoTimescale)(trackData.currentChunk.startTimestamp, trackData.timescale)), // Base Media Decode Time\n    ]);\n};\n/** Track Run Box: Specifies a run of contiguous samples for a given track. */\nconst trun = (trackData) => {\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(trackData.currentChunk);\n    const allSampleDurations = trackData.currentChunk.samples.map(x => x.timescaleUnitsToNextSample);\n    const allSampleSizes = trackData.currentChunk.samples.map(x => x.size);\n    const allSampleFlags = trackData.currentChunk.samples.map(fragmentSampleFlags);\n    const allSampleCompositionTimeOffsets = trackData.currentChunk.samples\n        .map(x => (0,_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.intoTimescale)(x.timestamp - x.decodeTimestamp, trackData.timescale));\n    const uniqueSampleDurations = new Set(allSampleDurations);\n    const uniqueSampleSizes = new Set(allSampleSizes);\n    const uniqueSampleFlags = new Set(allSampleFlags);\n    const uniqueSampleCompositionTimeOffsets = new Set(allSampleCompositionTimeOffsets);\n    const firstSampleFlagsPresent = uniqueSampleFlags.size === 2 && allSampleFlags[0] !== allSampleFlags[1];\n    const sampleDurationPresent = uniqueSampleDurations.size > 1;\n    const sampleSizePresent = uniqueSampleSizes.size > 1;\n    const sampleFlagsPresent = !firstSampleFlagsPresent && uniqueSampleFlags.size > 1;\n    const sampleCompositionTimeOffsetsPresent = uniqueSampleCompositionTimeOffsets.size > 1 || [...uniqueSampleCompositionTimeOffsets].some(x => x !== 0);\n    let flags = 0;\n    flags |= 0x0001; // Data offset present\n    flags |= 0x0004 * +firstSampleFlagsPresent; // First sample flags present\n    flags |= 0x0100 * +sampleDurationPresent; // Sample duration present\n    flags |= 0x0200 * +sampleSizePresent; // Sample size present\n    flags |= 0x0400 * +sampleFlagsPresent; // Sample flags present\n    flags |= 0x0800 * +sampleCompositionTimeOffsetsPresent; // Sample composition time offsets present\n    return fullBox('trun', 1, flags, [\n        u32(trackData.currentChunk.samples.length), // Sample count\n        u32(trackData.currentChunk.offset - trackData.currentChunk.moofOffset || 0), // Data offset\n        firstSampleFlagsPresent ? u32(allSampleFlags[0]) : [],\n        trackData.currentChunk.samples.map((_, i) => [\n            sampleDurationPresent ? u32(allSampleDurations[i]) : [], // Sample duration\n            sampleSizePresent ? u32(allSampleSizes[i]) : [], // Sample size\n            sampleFlagsPresent ? u32(allSampleFlags[i]) : [], // Sample flags\n            // Sample composition time offsets\n            sampleCompositionTimeOffsetsPresent ? i32(allSampleCompositionTimeOffsets[i]) : [],\n        ]),\n    ]);\n};\n/**\n * Movie Fragment Random Access Box: For each track, provides pointers to sync samples within the file\n * for random access.\n */\nconst mfra = (trackDatas) => {\n    return box('mfra', undefined, [\n        ...trackDatas.map(tfra),\n        mfro(),\n    ]);\n};\n/** Track Fragment Random Access Box: Provides pointers to sync samples within the file for random access. */\nconst tfra = (trackData, trackIndex) => {\n    const version = 1; // Using this version allows us to use 64-bit time and offset values\n    return fullBox('tfra', version, 0, [\n        u32(trackData.track.id), // Track ID\n        u32(0b111111), // This specifies that traf number, trun number and sample number are 32-bit ints\n        u32(trackData.finalizedChunks.length), // Number of entries\n        trackData.finalizedChunks.map(chunk => [\n            u64((0,_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.intoTimescale)(chunk.samples[0].timestamp, trackData.timescale)), // Time (in presentation time)\n            u64(chunk.moofOffset), // moof offset\n            u32(trackIndex + 1), // traf number\n            u32(1), // trun number\n            u32(1), // Sample number\n        ]),\n    ]);\n};\n/**\n * Movie Fragment Random Access Offset Box: Provides the size of the enclosing mfra box. This box can be used by readers\n * to quickly locate the mfra box by searching from the end of the file.\n */\nconst mfro = () => {\n    return fullBox('mfro', 0, 0, [\n        // This value needs to be overwritten manually from the outside, where the actual size of the enclosing mfra box\n        // is known\n        u32(0), // Size\n    ]);\n};\n/** VTT Empty Cue Box */\nconst vtte = () => box('vtte');\n/** VTT Cue Box */\nconst vttc = (payload, timestamp, identifier, settings, sourceId) => box('vttc', undefined, [\n    sourceId !== null ? box('vsid', [i32(sourceId)]) : null,\n    identifier !== null ? box('iden', [..._misc_js__WEBPACK_IMPORTED_MODULE_0__.textEncoder.encode(identifier)]) : null,\n    timestamp !== null ? box('ctim', [..._misc_js__WEBPACK_IMPORTED_MODULE_0__.textEncoder.encode((0,_subtitles_js__WEBPACK_IMPORTED_MODULE_4__.formatSubtitleTimestamp)(timestamp))]) : null,\n    settings !== null ? box('sttg', [..._misc_js__WEBPACK_IMPORTED_MODULE_0__.textEncoder.encode(settings)]) : null,\n    box('payl', [..._misc_js__WEBPACK_IMPORTED_MODULE_0__.textEncoder.encode(payload)]),\n]);\n/** VTT Additional Text Box */\nconst vtta = (notes) => box('vtta', [..._misc_js__WEBPACK_IMPORTED_MODULE_0__.textEncoder.encode(notes)]);\n/** User Data Box */\nconst udta = (muxer) => {\n    const boxes = [];\n    // Depending on the format, metadata tags are written differently\n    if (muxer.isQuickTime) {\n        addQuickTimeMetadataTagBoxes(boxes, muxer.output._metadataTags);\n    }\n    else {\n        const metaBox = meta(muxer.output._metadataTags);\n        if (metaBox) {\n            boxes.push(metaBox);\n        }\n    }\n    if (boxes.length === 0) {\n        return null;\n    }\n    return box('udta', undefined, boxes);\n};\nconst addQuickTimeMetadataTagBoxes = (boxes, tags) => {\n    // https://exiftool.org/TagNames/QuickTime.html (QuickTime UserData Tags)\n    // For QuickTime files, metadata tags are dumped into the udta box\n    for (const { key, value } of (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.keyValueIterator)(tags)) {\n        switch (key) {\n            case 'title':\n                {\n                    boxes.push(metadataTagStringBoxShort('©nam', value));\n                }\n                ;\n                break;\n            case 'description':\n                {\n                    boxes.push(metadataTagStringBoxShort('©des', value));\n                }\n                ;\n                break;\n            case 'artist':\n                {\n                    boxes.push(metadataTagStringBoxShort('©ART', value));\n                }\n                ;\n                break;\n            case 'album':\n                {\n                    boxes.push(metadataTagStringBoxShort('©alb', value));\n                }\n                ;\n                break;\n            case 'albumArtist':\n                {\n                    boxes.push(metadataTagStringBoxShort('albr', value));\n                }\n                ;\n                break;\n            case 'genre':\n                {\n                    boxes.push(metadataTagStringBoxShort('©gen', value));\n                }\n                ;\n                break;\n            case 'date':\n                {\n                    boxes.push(metadataTagStringBoxShort('©day', value.toISOString().slice(0, 10)));\n                }\n                ;\n                break;\n            case 'comment':\n                {\n                    boxes.push(metadataTagStringBoxShort('©cmt', value));\n                }\n                ;\n                break;\n            case 'lyrics':\n                {\n                    boxes.push(metadataTagStringBoxShort('©lyr', value));\n                }\n                ;\n                break;\n            case 'raw':\n                {\n                    // Handled later\n                }\n                ;\n                break;\n            case 'discNumber':\n            case 'discsTotal':\n            case 'trackNumber':\n            case 'tracksTotal':\n            case 'images':\n                {\n                    // Not written for QuickTime (common Apple L)\n                }\n                ;\n                break;\n            default: (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assertNever)(key);\n        }\n    }\n    if (tags.raw) {\n        for (const key in tags.raw) {\n            const value = tags.raw[key];\n            if (value == null || key.length !== 4 || boxes.some(x => x.type === key)) {\n                continue;\n            }\n            if (typeof value === 'string') {\n                boxes.push(metadataTagStringBoxShort(key, value));\n            }\n            else if (value instanceof Uint8Array) {\n                boxes.push(box(key, Array.from(value)));\n            }\n        }\n    }\n};\nconst metadataTagStringBoxShort = (name, value) => {\n    const encoded = _misc_js__WEBPACK_IMPORTED_MODULE_0__.textEncoder.encode(value);\n    return box(name, [\n        u16(encoded.length),\n        u16(getLanguageCodeInt('und')),\n        Array.from(encoded),\n    ]);\n};\nconst DATA_BOX_MIME_TYPE_MAP = {\n    'image/jpeg': 13,\n    'image/png': 14,\n    'image/bmp': 27,\n};\n/** Metadata Box */\nconst meta = (tags) => {\n    const boxes = [];\n    // https://exiftool.org/TagNames/QuickTime.html (QuickTime ItemList Tags)\n    // This is the metadata format used for MP4 files\n    for (const { key, value } of (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.keyValueIterator)(tags)) {\n        switch (key) {\n            case 'title':\n                {\n                    boxes.push(metadataTagStringBoxLong('©nam', value));\n                }\n                ;\n                break;\n            case 'description':\n                {\n                    boxes.push(metadataTagStringBoxLong('©des', value));\n                }\n                ;\n                break;\n            case 'artist':\n                {\n                    boxes.push(metadataTagStringBoxLong('©ART', value));\n                }\n                ;\n                break;\n            case 'album':\n                {\n                    boxes.push(metadataTagStringBoxLong('©alb', value));\n                }\n                ;\n                break;\n            case 'albumArtist':\n                {\n                    boxes.push(metadataTagStringBoxLong('aART', value));\n                }\n                ;\n                break;\n            case 'comment':\n                {\n                    boxes.push(metadataTagStringBoxLong('©cmt', value));\n                }\n                ;\n                break;\n            case 'genre':\n                {\n                    boxes.push(metadataTagStringBoxLong('©gen', value));\n                }\n                ;\n                break;\n            case 'lyrics':\n                {\n                    boxes.push(metadataTagStringBoxLong('©lyr', value));\n                }\n                ;\n                break;\n            case 'date':\n                {\n                    boxes.push(metadataTagStringBoxLong('©day', value.toISOString().slice(0, 10)));\n                }\n                ;\n                break;\n            case 'images':\n                {\n                    for (const image of value) {\n                        if (image.kind !== 'coverFront') {\n                            continue;\n                        }\n                        boxes.push(box('covr', undefined, [\n                            box('data', [\n                                u32(DATA_BOX_MIME_TYPE_MAP[image.mimeType] ?? 0), // Type indicator\n                                u32(0), // Locale indicator\n                                Array.from(image.data), // Kinda slow, hopefully temp\n                            ]),\n                        ]));\n                    }\n                }\n                ;\n                break;\n            case 'trackNumber':\n                {\n                    boxes.push(box('trkn', undefined, [\n                        box('data', [\n                            u32(0), // 8 bytes empty\n                            u32(0),\n                            u16(0), // Empty\n                            u16(value),\n                            u16(tags.tracksTotal ?? 0),\n                            u16(0), // Empty\n                        ]),\n                    ]));\n                }\n                ;\n                break;\n            case 'discNumber':\n                {\n                    boxes.push(box('disc', undefined, [\n                        box('data', [\n                            u32(0), // 8 bytes empty\n                            u32(0),\n                            u16(0), // Empty\n                            u16(value),\n                            u16(tags.discsTotal ?? 0),\n                            u16(0), // Empty\n                        ]),\n                    ]));\n                }\n                ;\n                break;\n            case 'tracksTotal':\n            case 'discsTotal':\n                {\n                    // These are included with 'trackNumber' and 'discNumber' respectively\n                }\n                ;\n                break;\n            case 'raw':\n                {\n                    // Handled later\n                }\n                ;\n                break;\n            default: (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assertNever)(key);\n        }\n    }\n    if (tags.raw) {\n        for (const key in tags.raw) {\n            const value = tags.raw[key];\n            if (value == null || key.length !== 4 || boxes.some(x => x.type === key)) {\n                continue;\n            }\n            if (typeof value === 'string') {\n                boxes.push(metadataTagStringBoxLong(key, value));\n            }\n            else if (value instanceof Uint8Array) {\n                boxes.push(box(key, undefined, [\n                    box('data', [\n                        u32(0), // Type indicator\n                        u32(0), // Locale indicator\n                        Array.from(value),\n                    ]),\n                ]));\n            }\n            else if (value instanceof _tags_js__WEBPACK_IMPORTED_MODULE_5__.RichImageData) {\n                boxes.push(box(key, undefined, [\n                    box('data', [\n                        u32(DATA_BOX_MIME_TYPE_MAP[value.mimeType] ?? 0), // Type indicator\n                        u32(0), // Locale indicator\n                        Array.from(value.data), // Kinda slow, hopefully temp\n                    ]),\n                ]));\n            }\n        }\n    }\n    if (boxes.length === 0) {\n        return null;\n    }\n    return fullBox('meta', 0, 0, undefined, [\n        hdlr(false, 'mdir', '', 'appl'),\n        box('ilst', undefined, boxes),\n    ]);\n};\nconst metadataTagStringBoxLong = (name, value) => {\n    return box(name, undefined, [\n        box('data', [\n            u32(1), // Type indicator (UTF-8)\n            u32(0), // Locale indicator\n            ..._misc_js__WEBPACK_IMPORTED_MODULE_0__.textEncoder.encode(value),\n        ]),\n    ]);\n};\nconst VIDEO_CODEC_TO_BOX_NAME = {\n    avc: 'avc1',\n    hevc: 'hvc1',\n    vp8: 'vp08',\n    vp9: 'vp09',\n    av1: 'av01',\n};\nconst VIDEO_CODEC_TO_CONFIGURATION_BOX = {\n    avc: avcC,\n    hevc: hvcC,\n    vp8: vpcC,\n    vp9: vpcC,\n    av1: av1C,\n};\nconst audioCodecToBoxName = (codec, isQuickTime) => {\n    switch (codec) {\n        case 'aac': return 'mp4a';\n        case 'mp3': return 'mp4a';\n        case 'opus': return 'Opus';\n        case 'vorbis': return 'mp4a';\n        case 'flac': return 'fLaC';\n        case 'ulaw': return 'ulaw';\n        case 'alaw': return 'alaw';\n        case 'pcm-u8': return 'raw ';\n        case 'pcm-s8': return 'sowt';\n    }\n    // Logic diverges here\n    if (isQuickTime) {\n        switch (codec) {\n            case 'pcm-s16': return 'sowt';\n            case 'pcm-s16be': return 'twos';\n            case 'pcm-s24': return 'in24';\n            case 'pcm-s24be': return 'in24';\n            case 'pcm-s32': return 'in32';\n            case 'pcm-s32be': return 'in32';\n            case 'pcm-f32': return 'fl32';\n            case 'pcm-f32be': return 'fl32';\n            case 'pcm-f64': return 'fl64';\n            case 'pcm-f64be': return 'fl64';\n        }\n    }\n    else {\n        switch (codec) {\n            case 'pcm-s16': return 'ipcm';\n            case 'pcm-s16be': return 'ipcm';\n            case 'pcm-s24': return 'ipcm';\n            case 'pcm-s24be': return 'ipcm';\n            case 'pcm-s32': return 'ipcm';\n            case 'pcm-s32be': return 'ipcm';\n            case 'pcm-f32': return 'fpcm';\n            case 'pcm-f32be': return 'fpcm';\n            case 'pcm-f64': return 'fpcm';\n            case 'pcm-f64be': return 'fpcm';\n        }\n    }\n};\nconst audioCodecToConfigurationBox = (codec, isQuickTime) => {\n    switch (codec) {\n        case 'aac': return esds;\n        case 'mp3': return esds;\n        case 'opus': return dOps;\n        case 'vorbis': return esds;\n        case 'flac': return dfLa;\n    }\n    // Logic diverges here\n    if (isQuickTime) {\n        switch (codec) {\n            case 'pcm-s24': return wave;\n            case 'pcm-s24be': return wave;\n            case 'pcm-s32': return wave;\n            case 'pcm-s32be': return wave;\n            case 'pcm-f32': return wave;\n            case 'pcm-f32be': return wave;\n            case 'pcm-f64': return wave;\n            case 'pcm-f64be': return wave;\n        }\n    }\n    else {\n        switch (codec) {\n            case 'pcm-s16': return pcmC;\n            case 'pcm-s16be': return pcmC;\n            case 'pcm-s24': return pcmC;\n            case 'pcm-s24be': return pcmC;\n            case 'pcm-s32': return pcmC;\n            case 'pcm-s32be': return pcmC;\n            case 'pcm-f32': return pcmC;\n            case 'pcm-f32be': return pcmC;\n            case 'pcm-f64': return pcmC;\n            case 'pcm-f64be': return pcmC;\n        }\n    }\n    return null;\n};\nconst SUBTITLE_CODEC_TO_BOX_NAME = {\n    webvtt: 'wvtt',\n};\nconst SUBTITLE_CODEC_TO_CONFIGURATION_BOX = {\n    webvtt: vttC,\n};\nconst getLanguageCodeInt = (code) => {\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(code.length === 3);\n    ;\n    let language = 0;\n    for (let i = 0; i < 3; i++) {\n        language <<= 5;\n        language += code.charCodeAt(i) - 0x60;\n    }\n    return language;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvaXNvYm1mZi9pc29ibWZmLWJveGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxTztBQUN4SDtBQUNuRDtBQUM4QjtBQUN2QjtBQUN0QjtBQUNwQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxzQ0FBc0MsMkNBQTJDO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLHFCQUFxQixnRUFBYTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSSwrREFBZ0I7QUFDekI7QUFDQTtBQUNBLHNCQUFzQiwrQ0FBSyxtQkFBbUIsK0NBQUs7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLCtEQUFnQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCwwQkFBMEIsbUVBQWdCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpREFBVztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esc0NBQXNDLGdFQUFhLDhEQUE4RCwrREFBZ0I7QUFDakksc0JBQXNCLCtDQUFLLG1CQUFtQiwrQ0FBSztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDBCQUEwQixnRUFBYTtBQUN2QyxzQkFBc0IsK0NBQUssbUJBQW1CLCtDQUFLO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSwyREFBcUI7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlDQUF5QztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxnREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSw4REFBb0I7QUFDeEI7QUFDQTtBQUNPO0FBQ1A7QUFDQSxRQUFRLHlEQUFtQjtBQUMzQixRQUFRLGtFQUE0QjtBQUNwQyxRQUFRLDZEQUF1QjtBQUMvQjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsT0FBTyxzREFBWTtBQUNuQjtBQUNBO0FBQ087QUFDUDtBQUNBLE9BQU8sc0RBQVk7QUFDbkI7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMseURBQW1CO0FBQ2pDLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxjQUFjLGtFQUE0QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNkRBQXVCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsdUJBQXVCLHVGQUE0QztBQUNuRTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVEQUFnQjtBQUN4QjtBQUNBLGdCQUFnQixhQUFhLEVBQUUsd0RBQWE7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELDhCQUE4QjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0RBQVk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxlQUFlLEVBQUUsd0RBQWE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsZ0RBQU07QUFDZCxzQkFBc0Isc0RBQVk7QUFDbEMsdUJBQXVCLDZFQUE2QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsSUFBSSxnREFBTTtBQUNWLGtCQUFrQixzREFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDJCQUEyQixFQUFFLHdEQUFhO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsT0FBTyxpREFBVztBQUNsQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxnQkFBZ0IsYUFBYSxFQUFFLHdEQUFhO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxnRUFBYTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGdEQUFnRCw4Q0FBSTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdEQUFNO0FBQ1YsSUFBSSxnREFBTTtBQUNWLG9CQUFvQixpREFBaUQ7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOEJBQThCO0FBQ2xEO0FBQ0EsOERBQThELGdFQUFhO0FBQzNFLDBEQUEwRCxnRUFBYTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsSUFBSSxnREFBTTtBQUNWO0FBQ0Esd0JBQXdCO0FBQ3hCLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEIsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsSUFBSSxnREFBTTtBQUNWO0FBQ0EsWUFBWSxnRUFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDTztBQUNQLElBQUksZ0RBQU07QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnRUFBYTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixnREFBZ0Q7QUFDaEQsOENBQThDO0FBQzlDLDBDQUEwQztBQUMxQywyQ0FBMkM7QUFDM0MsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0VBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNBLDBDQUEwQyxpREFBVztBQUNyRCx5Q0FBeUMsaURBQVcsUUFBUSxzRUFBdUI7QUFDbkYsd0NBQXdDLGlEQUFXO0FBQ25ELG9CQUFvQixpREFBVztBQUMvQjtBQUNBO0FBQ08sd0NBQXdDLGlEQUFXO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixhQUFhLEdBQUcsMERBQWdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscURBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlEQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGFBQWEsR0FBRywwREFBZ0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscURBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxtREFBYTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpREFBVztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksZ0RBQU07QUFDVjtBQUNBO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVkaWFidW5ueS9kaXN0L21vZHVsZXMvc3JjL2lzb2JtZmYvaXNvYm1mZi1ib3hlcy5qcz9jNjY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDI1LXByZXNlbnQsIFZhbmlsYWd5IGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cbiAqL1xuaW1wb3J0IHsgdG9VaW50OEFycmF5LCBhc3NlcnQsIGlzVTMyLCBsYXN0LCB0ZXh0RW5jb2RlciwgQ09MT1JfUFJJTUFSSUVTX01BUCwgVFJBTlNGRVJfQ0hBUkFDVEVSSVNUSUNTX01BUCwgTUFUUklYX0NPRUZGSUNJRU5UU19NQVAsIGNvbG9yU3BhY2VJc0NvbXBsZXRlLCBVTkRFVEVSTUlORURfTEFOR1VBR0UsIGFzc2VydE5ldmVyLCBrZXlWYWx1ZUl0ZXJhdG9yLCB9IGZyb20gJy4uL21pc2MuanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVBdjFDb2RlY0NvbmZpZ3VyYXRpb25Gcm9tQ29kZWNTdHJpbmcsIHBhcnNlUGNtQ29kZWMsIFBDTV9BVURJT19DT0RFQ1MsIH0gZnJvbSAnLi4vY29kZWMuanMnO1xuaW1wb3J0IHsgZm9ybWF0U3VidGl0bGVUaW1lc3RhbXAgfSBmcm9tICcuLi9zdWJ0aXRsZXMuanMnO1xuaW1wb3J0IHsgZ2V0VHJhY2tNZXRhZGF0YSwgR0xPQkFMX1RJTUVTQ0FMRSwgaW50b1RpbWVzY2FsZSwgfSBmcm9tICcuL2lzb2JtZmYtbXV4ZXIuanMnO1xuaW1wb3J0IHsgcGFyc2VPcHVzSWRlbnRpZmljYXRpb25IZWFkZXIgfSBmcm9tICcuLi9jb2RlYy1kYXRhLmpzJztcbmltcG9ydCB7IFJpY2hJbWFnZURhdGEgfSBmcm9tICcuLi90YWdzLmpzJztcbmV4cG9ydCBjbGFzcyBJc29ibWZmQm94V3JpdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih3cml0ZXIpIHtcbiAgICAgICAgdGhpcy53cml0ZXIgPSB3cml0ZXI7XG4gICAgICAgIHRoaXMuaGVscGVyID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgICAgIHRoaXMuaGVscGVyVmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLmhlbHBlci5idWZmZXIpO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmVzIHRoZSBwb3NpdGlvbiBmcm9tIHRoZSBzdGFydCBvZiB0aGUgZmlsZSB0byB3aGVyZSBib3hlcyBlbGVtZW50cyBoYXZlIGJlZW4gd3JpdHRlbi4gVGhpcyBpcyB1c2VkIHRvXG4gICAgICAgICAqIHJld3JpdGUvZWRpdCBlbGVtZW50cyB0aGF0IHdlcmUgYWxyZWFkeSBhZGRlZCBiZWZvcmUsIGFuZCB0byBtZWFzdXJlIHNpemVzIG9mIHRoaW5ncy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub2Zmc2V0cyA9IG5ldyBXZWFrTWFwKCk7XG4gICAgfVxuICAgIHdyaXRlVTMyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaGVscGVyVmlldy5zZXRVaW50MzIoMCwgdmFsdWUsIGZhbHNlKTtcbiAgICAgICAgdGhpcy53cml0ZXIud3JpdGUodGhpcy5oZWxwZXIuc3ViYXJyYXkoMCwgNCkpO1xuICAgIH1cbiAgICB3cml0ZVU2NCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmhlbHBlclZpZXcuc2V0VWludDMyKDAsIE1hdGguZmxvb3IodmFsdWUgLyAyICoqIDMyKSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmhlbHBlclZpZXcuc2V0VWludDMyKDQsIHZhbHVlLCBmYWxzZSk7XG4gICAgICAgIHRoaXMud3JpdGVyLndyaXRlKHRoaXMuaGVscGVyLnN1YmFycmF5KDAsIDgpKTtcbiAgICB9XG4gICAgd3JpdGVBc2NpaSh0ZXh0KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5oZWxwZXJWaWV3LnNldFVpbnQ4KGkgJSA4LCB0ZXh0LmNoYXJDb2RlQXQoaSkpO1xuICAgICAgICAgICAgaWYgKGkgJSA4ID09PSA3KVxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVyLndyaXRlKHRoaXMuaGVscGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dC5sZW5ndGggJSA4ICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLndyaXRlci53cml0ZSh0aGlzLmhlbHBlci5zdWJhcnJheSgwLCB0ZXh0Lmxlbmd0aCAlIDgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3cml0ZUJveChib3gpIHtcbiAgICAgICAgdGhpcy5vZmZzZXRzLnNldChib3gsIHRoaXMud3JpdGVyLmdldFBvcygpKTtcbiAgICAgICAgaWYgKGJveC5jb250ZW50cyAmJiAhYm94LmNoaWxkcmVuKSB7XG4gICAgICAgICAgICB0aGlzLndyaXRlQm94SGVhZGVyKGJveCwgYm94LnNpemUgPz8gYm94LmNvbnRlbnRzLmJ5dGVMZW5ndGggKyA4KTtcbiAgICAgICAgICAgIHRoaXMud3JpdGVyLndyaXRlKGJveC5jb250ZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydFBvcyA9IHRoaXMud3JpdGVyLmdldFBvcygpO1xuICAgICAgICAgICAgdGhpcy53cml0ZUJveEhlYWRlcihib3gsIDApO1xuICAgICAgICAgICAgaWYgKGJveC5jb250ZW50cylcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlci53cml0ZShib3guY29udGVudHMpO1xuICAgICAgICAgICAgaWYgKGJveC5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJveC5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZUJveChjaGlsZCk7XG4gICAgICAgICAgICBjb25zdCBlbmRQb3MgPSB0aGlzLndyaXRlci5nZXRQb3MoKTtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSBib3guc2l6ZSA/PyBlbmRQb3MgLSBzdGFydFBvcztcbiAgICAgICAgICAgIHRoaXMud3JpdGVyLnNlZWsoc3RhcnRQb3MpO1xuICAgICAgICAgICAgdGhpcy53cml0ZUJveEhlYWRlcihib3gsIHNpemUpO1xuICAgICAgICAgICAgdGhpcy53cml0ZXIuc2VlayhlbmRQb3MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdyaXRlQm94SGVhZGVyKGJveCwgc2l6ZSkge1xuICAgICAgICB0aGlzLndyaXRlVTMyKGJveC5sYXJnZVNpemUgPyAxIDogc2l6ZSk7XG4gICAgICAgIHRoaXMud3JpdGVBc2NpaShib3gudHlwZSk7XG4gICAgICAgIGlmIChib3gubGFyZ2VTaXplKVxuICAgICAgICAgICAgdGhpcy53cml0ZVU2NChzaXplKTtcbiAgICB9XG4gICAgbWVhc3VyZUJveEhlYWRlcihib3gpIHtcbiAgICAgICAgcmV0dXJuIDggKyAoYm94LmxhcmdlU2l6ZSA/IDggOiAwKTtcbiAgICB9XG4gICAgcGF0Y2hCb3goYm94KSB7XG4gICAgICAgIGNvbnN0IGJveE9mZnNldCA9IHRoaXMub2Zmc2V0cy5nZXQoYm94KTtcbiAgICAgICAgYXNzZXJ0KGJveE9mZnNldCAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgY29uc3QgZW5kUG9zID0gdGhpcy53cml0ZXIuZ2V0UG9zKCk7XG4gICAgICAgIHRoaXMud3JpdGVyLnNlZWsoYm94T2Zmc2V0KTtcbiAgICAgICAgdGhpcy53cml0ZUJveChib3gpO1xuICAgICAgICB0aGlzLndyaXRlci5zZWVrKGVuZFBvcyk7XG4gICAgfVxuICAgIG1lYXN1cmVCb3goYm94KSB7XG4gICAgICAgIGlmIChib3guY29udGVudHMgJiYgIWJveC5jaGlsZHJlbikge1xuICAgICAgICAgICAgY29uc3QgaGVhZGVyU2l6ZSA9IHRoaXMubWVhc3VyZUJveEhlYWRlcihib3gpO1xuICAgICAgICAgICAgcmV0dXJuIGhlYWRlclNpemUgKyBib3guY29udGVudHMuYnl0ZUxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLm1lYXN1cmVCb3hIZWFkZXIoYm94KTtcbiAgICAgICAgICAgIGlmIChib3guY29udGVudHMpXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGJveC5jb250ZW50cy5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGJveC5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJveC5jaGlsZHJlbilcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMubWVhc3VyZUJveChjaGlsZCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheSg4KTtcbmNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnl0ZXMuYnVmZmVyKTtcbmNvbnN0IHU4ID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIFsodmFsdWUgJSAweDEwMCArIDB4MTAwKSAlIDB4MTAwXTtcbn07XG5jb25zdCB1MTYgPSAodmFsdWUpID0+IHtcbiAgICB2aWV3LnNldFVpbnQxNigwLCB2YWx1ZSwgZmFsc2UpO1xuICAgIHJldHVybiBbYnl0ZXNbMF0sIGJ5dGVzWzFdXTtcbn07XG5jb25zdCBpMTYgPSAodmFsdWUpID0+IHtcbiAgICB2aWV3LnNldEludDE2KDAsIHZhbHVlLCBmYWxzZSk7XG4gICAgcmV0dXJuIFtieXRlc1swXSwgYnl0ZXNbMV1dO1xufTtcbmNvbnN0IHUyNCA9ICh2YWx1ZSkgPT4ge1xuICAgIHZpZXcuc2V0VWludDMyKDAsIHZhbHVlLCBmYWxzZSk7XG4gICAgcmV0dXJuIFtieXRlc1sxXSwgYnl0ZXNbMl0sIGJ5dGVzWzNdXTtcbn07XG5jb25zdCB1MzIgPSAodmFsdWUpID0+IHtcbiAgICB2aWV3LnNldFVpbnQzMigwLCB2YWx1ZSwgZmFsc2UpO1xuICAgIHJldHVybiBbYnl0ZXNbMF0sIGJ5dGVzWzFdLCBieXRlc1syXSwgYnl0ZXNbM11dO1xufTtcbmNvbnN0IGkzMiA9ICh2YWx1ZSkgPT4ge1xuICAgIHZpZXcuc2V0SW50MzIoMCwgdmFsdWUsIGZhbHNlKTtcbiAgICByZXR1cm4gW2J5dGVzWzBdLCBieXRlc1sxXSwgYnl0ZXNbMl0sIGJ5dGVzWzNdXTtcbn07XG5jb25zdCB1NjQgPSAodmFsdWUpID0+IHtcbiAgICB2aWV3LnNldFVpbnQzMigwLCBNYXRoLmZsb29yKHZhbHVlIC8gMiAqKiAzMiksIGZhbHNlKTtcbiAgICB2aWV3LnNldFVpbnQzMig0LCB2YWx1ZSwgZmFsc2UpO1xuICAgIHJldHVybiBbYnl0ZXNbMF0sIGJ5dGVzWzFdLCBieXRlc1syXSwgYnl0ZXNbM10sIGJ5dGVzWzRdLCBieXRlc1s1XSwgYnl0ZXNbNl0sIGJ5dGVzWzddXTtcbn07XG5jb25zdCBmaXhlZF84XzggPSAodmFsdWUpID0+IHtcbiAgICB2aWV3LnNldEludDE2KDAsIDIgKiogOCAqIHZhbHVlLCBmYWxzZSk7XG4gICAgcmV0dXJuIFtieXRlc1swXSwgYnl0ZXNbMV1dO1xufTtcbmNvbnN0IGZpeGVkXzE2XzE2ID0gKHZhbHVlKSA9PiB7XG4gICAgdmlldy5zZXRJbnQzMigwLCAyICoqIDE2ICogdmFsdWUsIGZhbHNlKTtcbiAgICByZXR1cm4gW2J5dGVzWzBdLCBieXRlc1sxXSwgYnl0ZXNbMl0sIGJ5dGVzWzNdXTtcbn07XG5jb25zdCBmaXhlZF8yXzMwID0gKHZhbHVlKSA9PiB7XG4gICAgdmlldy5zZXRJbnQzMigwLCAyICoqIDMwICogdmFsdWUsIGZhbHNlKTtcbiAgICByZXR1cm4gW2J5dGVzWzBdLCBieXRlc1sxXSwgYnl0ZXNbMl0sIGJ5dGVzWzNdXTtcbn07XG5jb25zdCB2YXJpYWJsZVVuc2lnbmVkSW50ID0gKHZhbHVlLCBieXRlTGVuZ3RoKSA9PiB7XG4gICAgY29uc3QgYnl0ZXMgPSBbXTtcbiAgICBsZXQgcmVtYWluaW5nID0gdmFsdWU7XG4gICAgZG8ge1xuICAgICAgICBsZXQgYnl0ZSA9IHJlbWFpbmluZyAmIDB4N2Y7XG4gICAgICAgIHJlbWFpbmluZyA+Pj0gNztcbiAgICAgICAgLy8gSWYgdGhpcyBpc24ndCB0aGUgZmlyc3QgYnl0ZSB3ZSdyZSBhZGRpbmcgKG1lYW5pbmcgdGhlcmUgd2lsbCBiZSBtb3JlIGJ5dGVzIGFmdGVyIGl0XG4gICAgICAgIC8vIHdoZW4gd2UgcmV2ZXJzZSB0aGUgYXJyYXkpLCBzZXQgdGhlIGNvbnRpbnVhdGlvbiBiaXRcbiAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGJ5dGUgfD0gMHg4MDtcbiAgICAgICAgfVxuICAgICAgICBieXRlcy5wdXNoKGJ5dGUpO1xuICAgICAgICBpZiAoYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoLS07XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChyZW1haW5pbmcgPiAwIHx8IGJ5dGVMZW5ndGgpO1xuICAgIC8vIFJldmVyc2UgdGhlIGFycmF5IHNpbmNlIHdlIGJ1aWx0IGl0IGJhY2t3YXJkc1xuICAgIHJldHVybiBieXRlcy5yZXZlcnNlKCk7XG59O1xuY29uc3QgYXNjaWkgPSAodGV4dCwgbnVsbFRlcm1pbmF0ZWQgPSBmYWxzZSkgPT4ge1xuICAgIGNvbnN0IGJ5dGVzID0gQXJyYXkodGV4dC5sZW5ndGgpLmZpbGwobnVsbCkubWFwKChfLCBpKSA9PiB0ZXh0LmNoYXJDb2RlQXQoaSkpO1xuICAgIGlmIChudWxsVGVybWluYXRlZClcbiAgICAgICAgYnl0ZXMucHVzaCgweDAwKTtcbiAgICByZXR1cm4gYnl0ZXM7XG59O1xuY29uc3QgbGFzdFByZXNlbnRlZFNhbXBsZSA9IChzYW1wbGVzKSA9PiB7XG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgZm9yIChjb25zdCBzYW1wbGUgb2Ygc2FtcGxlcykge1xuICAgICAgICBpZiAoIXJlc3VsdCB8fCBzYW1wbGUudGltZXN0YW1wID4gcmVzdWx0LnRpbWVzdGFtcCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gc2FtcGxlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuY29uc3Qgcm90YXRpb25NYXRyaXggPSAocm90YXRpb25JbkRlZ3JlZXMpID0+IHtcbiAgICBjb25zdCB0aGV0YSA9IHJvdGF0aW9uSW5EZWdyZWVzICogKE1hdGguUEkgLyAxODApO1xuICAgIGNvbnN0IGNvc1RoZXRhID0gTWF0aC5yb3VuZChNYXRoLmNvcyh0aGV0YSkpO1xuICAgIGNvbnN0IHNpblRoZXRhID0gTWF0aC5yb3VuZChNYXRoLnNpbih0aGV0YSkpO1xuICAgIC8vIE1hdHJpY2VzIGFyZSBwb3N0LW11bHRpcGxpZWQgaW4gSVNPQk1GRiwgbWVhbmluZyB0aGlzIGlzIHRoZSB0cmFuc3Bvc2Ugb2YgeW91ciB0eXBpY2FsIHJvdGF0aW9uIG1hdHJpeFxuICAgIHJldHVybiBbXG4gICAgICAgIGNvc1RoZXRhLCBzaW5UaGV0YSwgMCxcbiAgICAgICAgLXNpblRoZXRhLCBjb3NUaGV0YSwgMCxcbiAgICAgICAgMCwgMCwgMSxcbiAgICBdO1xufTtcbmNvbnN0IElERU5USVRZX01BVFJJWCA9IHJvdGF0aW9uTWF0cml4KDApO1xuY29uc3QgbWF0cml4VG9CeXRlcyA9IChtYXRyaXgpID0+IHtcbiAgICByZXR1cm4gW1xuICAgICAgICBmaXhlZF8xNl8xNihtYXRyaXhbMF0pLCBmaXhlZF8xNl8xNihtYXRyaXhbMV0pLCBmaXhlZF8yXzMwKG1hdHJpeFsyXSksXG4gICAgICAgIGZpeGVkXzE2XzE2KG1hdHJpeFszXSksIGZpeGVkXzE2XzE2KG1hdHJpeFs0XSksIGZpeGVkXzJfMzAobWF0cml4WzVdKSxcbiAgICAgICAgZml4ZWRfMTZfMTYobWF0cml4WzZdKSwgZml4ZWRfMTZfMTYobWF0cml4WzddKSwgZml4ZWRfMl8zMChtYXRyaXhbOF0pLFxuICAgIF07XG59O1xuZXhwb3J0IGNvbnN0IGJveCA9ICh0eXBlLCBjb250ZW50cywgY2hpbGRyZW4pID0+ICh7XG4gICAgdHlwZSxcbiAgICBjb250ZW50czogY29udGVudHMgJiYgbmV3IFVpbnQ4QXJyYXkoY29udGVudHMuZmxhdCgxMCkpLFxuICAgIGNoaWxkcmVuLFxufSk7XG4vKiogQSBGdWxsQm94IGFsd2F5cyBzdGFydHMgd2l0aCBhIHZlcnNpb24gYnl0ZSwgZm9sbG93ZWQgYnkgdGhyZWUgZmxhZyBieXRlcy4gKi9cbmV4cG9ydCBjb25zdCBmdWxsQm94ID0gKHR5cGUsIHZlcnNpb24sIGZsYWdzLCBjb250ZW50cywgY2hpbGRyZW4pID0+IGJveCh0eXBlLCBbdTgodmVyc2lvbiksIHUyNChmbGFncyksIGNvbnRlbnRzID8/IFtdXSwgY2hpbGRyZW4pO1xuLyoqXG4gKiBGaWxlIFR5cGUgQ29tcGF0aWJpbGl0eSBCb3g6IEFsbG93cyB0aGUgcmVhZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSB0eXBlIG9mIGZpbGUgdGhhdCB0aGVcbiAqIHJlYWRlciB1bmRlcnN0YW5kcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGZ0eXAgPSAoZGV0YWlscykgPT4ge1xuICAgIC8vIFlvdSBjYW4gZmluZCB0aGUgZnVsbCBsb2dpYyBmb3IgdGhpcyBhdFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9GRm1wZWcvRkZtcGVnL2Jsb2IvZGUyZmI0M2U3ODU3NzM3MzhjNjYwY2RhZmI5MzA5YjFlZjFiYzgwZC9saWJhdmZvcm1hdC9tb3ZlbmMuYyNMNTUxOFxuICAgIC8vIE9idmlvdXNseSwgdGhpcyBsaWIgb25seSBuZWVkcyBhIHNtYWxsIHN1YnNldCBvZiB0aGF0IGxvZ2ljLlxuICAgIGNvbnN0IG1pbm9yVmVyc2lvbiA9IDB4MjAwO1xuICAgIGlmIChkZXRhaWxzLmlzUXVpY2tUaW1lKSB7XG4gICAgICAgIHJldHVybiBib3goJ2Z0eXAnLCBbXG4gICAgICAgICAgICBhc2NpaSgncXQgICcpLCAvLyBNYWpvciBicmFuZFxuICAgICAgICAgICAgdTMyKG1pbm9yVmVyc2lvbiksIC8vIE1pbm9yIHZlcnNpb25cbiAgICAgICAgICAgIC8vIENvbXBhdGlibGUgYnJhbmRzXG4gICAgICAgICAgICBhc2NpaSgncXQgICcpLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgaWYgKGRldGFpbHMuZnJhZ21lbnRlZCkge1xuICAgICAgICByZXR1cm4gYm94KCdmdHlwJywgW1xuICAgICAgICAgICAgYXNjaWkoJ2lzbzUnKSwgLy8gTWFqb3IgYnJhbmRcbiAgICAgICAgICAgIHUzMihtaW5vclZlcnNpb24pLCAvLyBNaW5vciB2ZXJzaW9uXG4gICAgICAgICAgICAvLyBDb21wYXRpYmxlIGJyYW5kc1xuICAgICAgICAgICAgYXNjaWkoJ2lzbzUnKSxcbiAgICAgICAgICAgIGFzY2lpKCdpc282JyksXG4gICAgICAgICAgICBhc2NpaSgnbXA0MScpLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGJveCgnZnR5cCcsIFtcbiAgICAgICAgYXNjaWkoJ2lzb20nKSwgLy8gTWFqb3IgYnJhbmRcbiAgICAgICAgdTMyKG1pbm9yVmVyc2lvbiksIC8vIE1pbm9yIHZlcnNpb25cbiAgICAgICAgLy8gQ29tcGF0aWJsZSBicmFuZHNcbiAgICAgICAgYXNjaWkoJ2lzb20nKSxcbiAgICAgICAgZGV0YWlscy5ob2xkc0F2YyA/IGFzY2lpKCdhdmMxJykgOiBbXSxcbiAgICAgICAgYXNjaWkoJ21wNDEnKSxcbiAgICBdKTtcbn07XG4vKiogTW92aWUgU2FtcGxlIERhdGEgQm94LiBDb250YWlucyB0aGUgYWN0dWFsIGZyYW1lcy9zYW1wbGVzIG9mIHRoZSBtZWRpYS4gKi9cbmV4cG9ydCBjb25zdCBtZGF0ID0gKHJlc2VydmVMYXJnZVNpemUpID0+ICh7IHR5cGU6ICdtZGF0JywgbGFyZ2VTaXplOiByZXNlcnZlTGFyZ2VTaXplIH0pO1xuLyoqXG4gKiBNb3ZpZSBCb3g6IFVzZWQgdG8gc3BlY2lmeSB0aGUgaW5mb3JtYXRpb24gdGhhdCBkZWZpbmVzIGEgbW92aWUgLSB0aGF0IGlzLCB0aGUgaW5mb3JtYXRpb24gdGhhdCBhbGxvd3NcbiAqIGFuIGFwcGxpY2F0aW9uIHRvIGludGVycHJldCB0aGUgc2FtcGxlIGRhdGEgdGhhdCBpcyBzdG9yZWQgZWxzZXdoZXJlLlxuICovXG5leHBvcnQgY29uc3QgbW9vdiA9IChtdXhlciwgZnJhZ21lbnRlZCA9IGZhbHNlKSA9PiBib3goJ21vb3YnLCB1bmRlZmluZWQsIFtcbiAgICBtdmhkKG11eGVyLmNyZWF0aW9uVGltZSwgbXV4ZXIudHJhY2tEYXRhcyksXG4gICAgLi4ubXV4ZXIudHJhY2tEYXRhcy5tYXAoeCA9PiB0cmFrKHgsIG11eGVyLmNyZWF0aW9uVGltZSkpLFxuICAgIGZyYWdtZW50ZWQgPyBtdmV4KG11eGVyLnRyYWNrRGF0YXMpIDogbnVsbCxcbiAgICB1ZHRhKG11eGVyKSxcbl0pO1xuLyoqIE1vdmllIEhlYWRlciBCb3g6IFVzZWQgdG8gc3BlY2lmeSB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIHRoZSBlbnRpcmUgbW92aWUsIHN1Y2ggYXMgdGltZXNjYWxlIGFuZCBkdXJhdGlvbi4gKi9cbmV4cG9ydCBjb25zdCBtdmhkID0gKGNyZWF0aW9uVGltZSwgdHJhY2tEYXRhcykgPT4ge1xuICAgIGNvbnN0IGR1cmF0aW9uID0gaW50b1RpbWVzY2FsZShNYXRoLm1heCgwLCAuLi50cmFja0RhdGFzXG4gICAgICAgIC5maWx0ZXIoeCA9PiB4LnNhbXBsZXMubGVuZ3RoID4gMClcbiAgICAgICAgLm1hcCgoeCkgPT4ge1xuICAgICAgICBjb25zdCBsYXN0U2FtcGxlID0gbGFzdFByZXNlbnRlZFNhbXBsZSh4LnNhbXBsZXMpO1xuICAgICAgICByZXR1cm4gbGFzdFNhbXBsZS50aW1lc3RhbXAgKyBsYXN0U2FtcGxlLmR1cmF0aW9uO1xuICAgIH0pKSwgR0xPQkFMX1RJTUVTQ0FMRSk7XG4gICAgY29uc3QgbmV4dFRyYWNrSWQgPSBNYXRoLm1heCgwLCAuLi50cmFja0RhdGFzLm1hcCh4ID0+IHgudHJhY2suaWQpKSArIDE7XG4gICAgLy8gQ29uZGl0aW9uYWxseSB1c2UgdTY0IGlmIHUzMiBpc24ndCBlbm91Z2hcbiAgICBjb25zdCBuZWVkc1U2NCA9ICFpc1UzMihjcmVhdGlvblRpbWUpIHx8ICFpc1UzMihkdXJhdGlvbik7XG4gICAgY29uc3QgdTMyT3JVNjQgPSBuZWVkc1U2NCA/IHU2NCA6IHUzMjtcbiAgICByZXR1cm4gZnVsbEJveCgnbXZoZCcsICtuZWVkc1U2NCwgMCwgW1xuICAgICAgICB1MzJPclU2NChjcmVhdGlvblRpbWUpLCAvLyBDcmVhdGlvbiB0aW1lXG4gICAgICAgIHUzMk9yVTY0KGNyZWF0aW9uVGltZSksIC8vIE1vZGlmaWNhdGlvbiB0aW1lXG4gICAgICAgIHUzMihHTE9CQUxfVElNRVNDQUxFKSwgLy8gVGltZXNjYWxlXG4gICAgICAgIHUzMk9yVTY0KGR1cmF0aW9uKSwgLy8gRHVyYXRpb25cbiAgICAgICAgZml4ZWRfMTZfMTYoMSksIC8vIFByZWZlcnJlZCByYXRlXG4gICAgICAgIGZpeGVkXzhfOCgxKSwgLy8gUHJlZmVycmVkIHZvbHVtZVxuICAgICAgICBBcnJheSgxMCkuZmlsbCgwKSwgLy8gUmVzZXJ2ZWRcbiAgICAgICAgbWF0cml4VG9CeXRlcyhJREVOVElUWV9NQVRSSVgpLCAvLyBNYXRyaXhcbiAgICAgICAgQXJyYXkoMjQpLmZpbGwoMCksIC8vIFByZS1kZWZpbmVkXG4gICAgICAgIHUzMihuZXh0VHJhY2tJZCksIC8vIE5leHQgdHJhY2sgSURcbiAgICBdKTtcbn07XG4vKipcbiAqIFRyYWNrIEJveDogRGVmaW5lcyBhIHNpbmdsZSB0cmFjayBvZiBhIG1vdmllLiBBIG1vdmllIG1heSBjb25zaXN0IG9mIG9uZSBvciBtb3JlIHRyYWNrcy4gRWFjaCB0cmFjayBpc1xuICogaW5kZXBlbmRlbnQgb2YgdGhlIG90aGVyIHRyYWNrcyBpbiB0aGUgbW92aWUgYW5kIGNhcnJpZXMgaXRzIG93biB0ZW1wb3JhbCBhbmQgc3BhdGlhbCBpbmZvcm1hdGlvbi4gRWFjaCBUcmFjayBCb3hcbiAqIGNvbnRhaW5zIGl0cyBhc3NvY2lhdGVkIE1lZGlhIEJveC5cbiAqL1xuZXhwb3J0IGNvbnN0IHRyYWsgPSAodHJhY2tEYXRhLCBjcmVhdGlvblRpbWUpID0+IHtcbiAgICBjb25zdCB0cmFja01ldGFkYXRhID0gZ2V0VHJhY2tNZXRhZGF0YSh0cmFja0RhdGEpO1xuICAgIHJldHVybiBib3goJ3RyYWsnLCB1bmRlZmluZWQsIFtcbiAgICAgICAgdGtoZCh0cmFja0RhdGEsIGNyZWF0aW9uVGltZSksXG4gICAgICAgIG1kaWEodHJhY2tEYXRhLCBjcmVhdGlvblRpbWUpLFxuICAgICAgICB0cmFja01ldGFkYXRhLm5hbWUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBib3goJ3VkdGEnLCB1bmRlZmluZWQsIFtcbiAgICAgICAgICAgICAgICBib3goJ25hbWUnLCBbXG4gICAgICAgICAgICAgICAgICAgIC4uLnRleHRFbmNvZGVyLmVuY29kZSh0cmFja01ldGFkYXRhLm5hbWUpLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIDogbnVsbCxcbiAgICBdKTtcbn07XG4vKiogVHJhY2sgSGVhZGVyIEJveDogU3BlY2lmaWVzIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgYSBzaW5nbGUgdHJhY2sgd2l0aGluIGEgbW92aWUuICovXG5leHBvcnQgY29uc3QgdGtoZCA9ICh0cmFja0RhdGEsIGNyZWF0aW9uVGltZSkgPT4ge1xuICAgIGNvbnN0IGxhc3RTYW1wbGUgPSBsYXN0UHJlc2VudGVkU2FtcGxlKHRyYWNrRGF0YS5zYW1wbGVzKTtcbiAgICBjb25zdCBkdXJhdGlvbkluR2xvYmFsVGltZXNjYWxlID0gaW50b1RpbWVzY2FsZShsYXN0U2FtcGxlID8gbGFzdFNhbXBsZS50aW1lc3RhbXAgKyBsYXN0U2FtcGxlLmR1cmF0aW9uIDogMCwgR0xPQkFMX1RJTUVTQ0FMRSk7XG4gICAgY29uc3QgbmVlZHNVNjQgPSAhaXNVMzIoY3JlYXRpb25UaW1lKSB8fCAhaXNVMzIoZHVyYXRpb25Jbkdsb2JhbFRpbWVzY2FsZSk7XG4gICAgY29uc3QgdTMyT3JVNjQgPSBuZWVkc1U2NCA/IHU2NCA6IHUzMjtcbiAgICBsZXQgbWF0cml4O1xuICAgIGlmICh0cmFja0RhdGEudHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IHRyYWNrRGF0YS50cmFjay5tZXRhZGF0YS5yb3RhdGlvbjtcbiAgICAgICAgbWF0cml4ID0gcm90YXRpb25NYXRyaXgocm90YXRpb24gPz8gMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtYXRyaXggPSBJREVOVElUWV9NQVRSSVg7XG4gICAgfVxuICAgIHJldHVybiBmdWxsQm94KCd0a2hkJywgK25lZWRzVTY0LCAzLCBbXG4gICAgICAgIHUzMk9yVTY0KGNyZWF0aW9uVGltZSksIC8vIENyZWF0aW9uIHRpbWVcbiAgICAgICAgdTMyT3JVNjQoY3JlYXRpb25UaW1lKSwgLy8gTW9kaWZpY2F0aW9uIHRpbWVcbiAgICAgICAgdTMyKHRyYWNrRGF0YS50cmFjay5pZCksIC8vIFRyYWNrIElEXG4gICAgICAgIHUzMigwKSwgLy8gUmVzZXJ2ZWRcbiAgICAgICAgdTMyT3JVNjQoZHVyYXRpb25Jbkdsb2JhbFRpbWVzY2FsZSksIC8vIER1cmF0aW9uXG4gICAgICAgIEFycmF5KDgpLmZpbGwoMCksIC8vIFJlc2VydmVkXG4gICAgICAgIHUxNigwKSwgLy8gTGF5ZXJcbiAgICAgICAgdTE2KHRyYWNrRGF0YS50cmFjay5pZCksIC8vIEFsdGVybmF0ZSBncm91cFxuICAgICAgICBmaXhlZF84XzgodHJhY2tEYXRhLnR5cGUgPT09ICdhdWRpbycgPyAxIDogMCksIC8vIFZvbHVtZVxuICAgICAgICB1MTYoMCksIC8vIFJlc2VydmVkXG4gICAgICAgIG1hdHJpeFRvQnl0ZXMobWF0cml4KSwgLy8gTWF0cml4XG4gICAgICAgIGZpeGVkXzE2XzE2KHRyYWNrRGF0YS50eXBlID09PSAndmlkZW8nID8gdHJhY2tEYXRhLmluZm8ud2lkdGggOiAwKSwgLy8gVHJhY2sgd2lkdGhcbiAgICAgICAgZml4ZWRfMTZfMTYodHJhY2tEYXRhLnR5cGUgPT09ICd2aWRlbycgPyB0cmFja0RhdGEuaW5mby5oZWlnaHQgOiAwKSwgLy8gVHJhY2sgaGVpZ2h0XG4gICAgXSk7XG59O1xuLyoqIE1lZGlhIEJveDogRGVzY3JpYmVzIGFuZCBkZWZpbmUgYSB0cmFjaydzIG1lZGlhIHR5cGUgYW5kIHNhbXBsZSBkYXRhLiAqL1xuZXhwb3J0IGNvbnN0IG1kaWEgPSAodHJhY2tEYXRhLCBjcmVhdGlvblRpbWUpID0+IGJveCgnbWRpYScsIHVuZGVmaW5lZCwgW1xuICAgIG1kaGQodHJhY2tEYXRhLCBjcmVhdGlvblRpbWUpLFxuICAgIGhkbHIodHJ1ZSwgVFJBQ0tfVFlQRV9UT19DT01QT05FTlRfU1VCVFlQRVt0cmFja0RhdGEudHlwZV0sIFRSQUNLX1RZUEVfVE9fSEFORExFUl9OQU1FW3RyYWNrRGF0YS50eXBlXSksXG4gICAgbWluZih0cmFja0RhdGEpLFxuXSk7XG4vKiogTWVkaWEgSGVhZGVyIEJveDogU3BlY2lmaWVzIHRoZSBjaGFyYWN0ZXJpc3RpY3Mgb2YgYSBtZWRpYSwgaW5jbHVkaW5nIHRpbWVzY2FsZSBhbmQgZHVyYXRpb24uICovXG5leHBvcnQgY29uc3QgbWRoZCA9ICh0cmFja0RhdGEsIGNyZWF0aW9uVGltZSkgPT4ge1xuICAgIGNvbnN0IGxhc3RTYW1wbGUgPSBsYXN0UHJlc2VudGVkU2FtcGxlKHRyYWNrRGF0YS5zYW1wbGVzKTtcbiAgICBjb25zdCBsb2NhbER1cmF0aW9uID0gaW50b1RpbWVzY2FsZShsYXN0U2FtcGxlID8gbGFzdFNhbXBsZS50aW1lc3RhbXAgKyBsYXN0U2FtcGxlLmR1cmF0aW9uIDogMCwgdHJhY2tEYXRhLnRpbWVzY2FsZSk7XG4gICAgY29uc3QgbmVlZHNVNjQgPSAhaXNVMzIoY3JlYXRpb25UaW1lKSB8fCAhaXNVMzIobG9jYWxEdXJhdGlvbik7XG4gICAgY29uc3QgdTMyT3JVNjQgPSBuZWVkc1U2NCA/IHU2NCA6IHUzMjtcbiAgICByZXR1cm4gZnVsbEJveCgnbWRoZCcsICtuZWVkc1U2NCwgMCwgW1xuICAgICAgICB1MzJPclU2NChjcmVhdGlvblRpbWUpLCAvLyBDcmVhdGlvbiB0aW1lXG4gICAgICAgIHUzMk9yVTY0KGNyZWF0aW9uVGltZSksIC8vIE1vZGlmaWNhdGlvbiB0aW1lXG4gICAgICAgIHUzMih0cmFja0RhdGEudGltZXNjYWxlKSwgLy8gVGltZXNjYWxlXG4gICAgICAgIHUzMk9yVTY0KGxvY2FsRHVyYXRpb24pLCAvLyBEdXJhdGlvblxuICAgICAgICB1MTYoZ2V0TGFuZ3VhZ2VDb2RlSW50KHRyYWNrRGF0YS50cmFjay5tZXRhZGF0YS5sYW5ndWFnZUNvZGUgPz8gVU5ERVRFUk1JTkVEX0xBTkdVQUdFKSksIC8vIExhbmd1YWdlXG4gICAgICAgIHUxNigwKSwgLy8gUXVhbGl0eVxuICAgIF0pO1xufTtcbmNvbnN0IFRSQUNLX1RZUEVfVE9fQ09NUE9ORU5UX1NVQlRZUEUgPSB7XG4gICAgdmlkZW86ICd2aWRlJyxcbiAgICBhdWRpbzogJ3NvdW4nLFxuICAgIHN1YnRpdGxlOiAndGV4dCcsXG59O1xuY29uc3QgVFJBQ0tfVFlQRV9UT19IQU5ETEVSX05BTUUgPSB7XG4gICAgdmlkZW86ICdNZWRpYWJ1bm55VmlkZW9IYW5kbGVyJyxcbiAgICBhdWRpbzogJ01lZGlhYnVubnlTb3VuZEhhbmRsZXInLFxuICAgIHN1YnRpdGxlOiAnTWVkaWFidW5ueVRleHRIYW5kbGVyJyxcbn07XG4vKiogSGFuZGxlciBSZWZlcmVuY2UgQm94LiAqL1xuZXhwb3J0IGNvbnN0IGhkbHIgPSAoaGFzQ29tcG9uZW50VHlwZSwgaGFuZGxlclR5cGUsIG5hbWUsIG1hbnVmYWN0dXJlciA9ICdcXDBcXDBcXDBcXDAnKSA9PiBmdWxsQm94KCdoZGxyJywgMCwgMCwgW1xuICAgIGhhc0NvbXBvbmVudFR5cGUgPyBhc2NpaSgnbWhscicpIDogdTMyKDApLCAvLyBDb21wb25lbnQgdHlwZVxuICAgIGFzY2lpKGhhbmRsZXJUeXBlKSwgLy8gQ29tcG9uZW50IHN1YnR5cGVcbiAgICBhc2NpaShtYW51ZmFjdHVyZXIpLCAvLyBDb21wb25lbnQgbWFudWZhY3R1cmVyXG4gICAgdTMyKDApLCAvLyBDb21wb25lbnQgZmxhZ3NcbiAgICB1MzIoMCksIC8vIENvbXBvbmVudCBmbGFncyBtYXNrXG4gICAgYXNjaWkobmFtZSwgdHJ1ZSksIC8vIENvbXBvbmVudCBuYW1lXG5dKTtcbi8qKlxuICogTWVkaWEgSW5mb3JtYXRpb24gQm94OiBTdG9yZXMgaGFuZGxlci1zcGVjaWZpYyBpbmZvcm1hdGlvbiBmb3IgYSB0cmFjaydzIG1lZGlhIGRhdGEuIFRoZSBtZWRpYSBoYW5kbGVyIHVzZXMgdGhpc1xuICogaW5mb3JtYXRpb24gdG8gbWFwIGZyb20gbWVkaWEgdGltZSB0byBtZWRpYSBkYXRhIGFuZCB0byBwcm9jZXNzIHRoZSBtZWRpYSBkYXRhLlxuICovXG5leHBvcnQgY29uc3QgbWluZiA9ICh0cmFja0RhdGEpID0+IGJveCgnbWluZicsIHVuZGVmaW5lZCwgW1xuICAgIFRSQUNLX1RZUEVfVE9fSEVBREVSX0JPWFt0cmFja0RhdGEudHlwZV0oKSxcbiAgICBkaW5mKCksXG4gICAgc3RibCh0cmFja0RhdGEpLFxuXSk7XG4vKiogVmlkZW8gTWVkaWEgSW5mb3JtYXRpb24gSGVhZGVyIEJveDogRGVmaW5lcyBzcGVjaWZpYyBjb2xvciBhbmQgZ3JhcGhpY3MgbW9kZSBpbmZvcm1hdGlvbi4gKi9cbmV4cG9ydCBjb25zdCB2bWhkID0gKCkgPT4gZnVsbEJveCgndm1oZCcsIDAsIDEsIFtcbiAgICB1MTYoMCksIC8vIEdyYXBoaWNzIG1vZGVcbiAgICB1MTYoMCksIC8vIE9wY29sb3IgUlxuICAgIHUxNigwKSwgLy8gT3Bjb2xvciBHXG4gICAgdTE2KDApLCAvLyBPcGNvbG9yIEJcbl0pO1xuLyoqIFNvdW5kIE1lZGlhIEluZm9ybWF0aW9uIEhlYWRlciBCb3g6IFN0b3JlcyB0aGUgc291bmQgbWVkaWEncyBjb250cm9sIGluZm9ybWF0aW9uLCBzdWNoIGFzIGJhbGFuY2UuICovXG5leHBvcnQgY29uc3Qgc21oZCA9ICgpID0+IGZ1bGxCb3goJ3NtaGQnLCAwLCAwLCBbXG4gICAgdTE2KDApLCAvLyBCYWxhbmNlXG4gICAgdTE2KDApLCAvLyBSZXNlcnZlZFxuXSk7XG4vKiogTnVsbCBNZWRpYSBIZWFkZXIgQm94LiAqL1xuZXhwb3J0IGNvbnN0IG5taGQgPSAoKSA9PiBmdWxsQm94KCdubWhkJywgMCwgMCk7XG5jb25zdCBUUkFDS19UWVBFX1RPX0hFQURFUl9CT1ggPSB7XG4gICAgdmlkZW86IHZtaGQsXG4gICAgYXVkaW86IHNtaGQsXG4gICAgc3VidGl0bGU6IG5taGQsXG59O1xuLyoqXG4gKiBEYXRhIEluZm9ybWF0aW9uIEJveDogQ29udGFpbnMgaW5mb3JtYXRpb24gc3BlY2lmeWluZyB0aGUgZGF0YSBoYW5kbGVyIGNvbXBvbmVudCB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byB0aGVcbiAqIG1lZGlhIGRhdGEuIFRoZSBkYXRhIGhhbmRsZXIgY29tcG9uZW50IHVzZXMgdGhlIERhdGEgSW5mb3JtYXRpb24gQm94IHRvIGludGVycHJldCB0aGUgbWVkaWEncyBkYXRhLlxuICovXG5leHBvcnQgY29uc3QgZGluZiA9ICgpID0+IGJveCgnZGluZicsIHVuZGVmaW5lZCwgW1xuICAgIGRyZWYoKSxcbl0pO1xuLyoqXG4gKiBEYXRhIFJlZmVyZW5jZSBCb3g6IENvbnRhaW5zIHRhYnVsYXIgZGF0YSB0aGF0IGluc3RydWN0cyB0aGUgZGF0YSBoYW5kbGVyIGNvbXBvbmVudCBob3cgdG8gYWNjZXNzIHRoZSBtZWRpYSdzIGRhdGEuXG4gKi9cbmV4cG9ydCBjb25zdCBkcmVmID0gKCkgPT4gZnVsbEJveCgnZHJlZicsIDAsIDAsIFtcbiAgICB1MzIoMSksIC8vIEVudHJ5IGNvdW50XG5dLCBbXG4gICAgdXJsKCksXG5dKTtcbmV4cG9ydCBjb25zdCB1cmwgPSAoKSA9PiBmdWxsQm94KCd1cmwgJywgMCwgMSk7IC8vIFNlbGYtcmVmZXJlbmNlIGZsYWcgZW5hYmxlZFxuLyoqXG4gKiBTYW1wbGUgVGFibGUgQm94OiBDb250YWlucyBpbmZvcm1hdGlvbiBmb3IgY29udmVydGluZyBmcm9tIG1lZGlhIHRpbWUgdG8gc2FtcGxlIG51bWJlciB0byBzYW1wbGUgbG9jYXRpb24uIFRoaXMgYm94XG4gKiBhbHNvIGluZGljYXRlcyBob3cgdG8gaW50ZXJwcmV0IHRoZSBzYW1wbGUgKGZvciBleGFtcGxlLCB3aGV0aGVyIHRvIGRlY29tcHJlc3MgdGhlIHZpZGVvIGRhdGEgYW5kLCBpZiBzbywgaG93KS5cbiAqL1xuZXhwb3J0IGNvbnN0IHN0YmwgPSAodHJhY2tEYXRhKSA9PiB7XG4gICAgY29uc3QgbmVlZHNDdHRzID0gdHJhY2tEYXRhLmNvbXBvc2l0aW9uVGltZU9mZnNldFRhYmxlLmxlbmd0aCA+IDFcbiAgICAgICAgfHwgdHJhY2tEYXRhLmNvbXBvc2l0aW9uVGltZU9mZnNldFRhYmxlLnNvbWUoeCA9PiB4LnNhbXBsZUNvbXBvc2l0aW9uVGltZU9mZnNldCAhPT0gMCk7XG4gICAgcmV0dXJuIGJveCgnc3RibCcsIHVuZGVmaW5lZCwgW1xuICAgICAgICBzdHNkKHRyYWNrRGF0YSksXG4gICAgICAgIHN0dHModHJhY2tEYXRhKSxcbiAgICAgICAgbmVlZHNDdHRzID8gY3R0cyh0cmFja0RhdGEpIDogbnVsbCxcbiAgICAgICAgbmVlZHNDdHRzID8gY3NsZyh0cmFja0RhdGEpIDogbnVsbCxcbiAgICAgICAgc3RzYyh0cmFja0RhdGEpLFxuICAgICAgICBzdHN6KHRyYWNrRGF0YSksXG4gICAgICAgIHN0Y28odHJhY2tEYXRhKSxcbiAgICAgICAgc3Rzcyh0cmFja0RhdGEpLFxuICAgIF0pO1xufTtcbi8qKlxuICogU2FtcGxlIERlc2NyaXB0aW9uIEJveDogU3RvcmVzIGluZm9ybWF0aW9uIHRoYXQgYWxsb3dzIHlvdSB0byBkZWNvZGUgc2FtcGxlcyBpbiB0aGUgbWVkaWEuIFRoZSBkYXRhIHN0b3JlZCBpbiB0aGVcbiAqIHNhbXBsZSBkZXNjcmlwdGlvbiB2YXJpZXMsIGRlcGVuZGluZyBvbiB0aGUgbWVkaWEgdHlwZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHN0c2QgPSAodHJhY2tEYXRhKSA9PiB7XG4gICAgbGV0IHNhbXBsZURlc2NyaXB0aW9uO1xuICAgIGlmICh0cmFja0RhdGEudHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICBzYW1wbGVEZXNjcmlwdGlvbiA9IHZpZGVvU2FtcGxlRGVzY3JpcHRpb24oVklERU9fQ09ERUNfVE9fQk9YX05BTUVbdHJhY2tEYXRhLnRyYWNrLnNvdXJjZS5fY29kZWNdLCB0cmFja0RhdGEpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0cmFja0RhdGEudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICBjb25zdCBib3hOYW1lID0gYXVkaW9Db2RlY1RvQm94TmFtZSh0cmFja0RhdGEudHJhY2suc291cmNlLl9jb2RlYywgdHJhY2tEYXRhLm11eGVyLmlzUXVpY2tUaW1lKTtcbiAgICAgICAgYXNzZXJ0KGJveE5hbWUpO1xuICAgICAgICBzYW1wbGVEZXNjcmlwdGlvbiA9IHNvdW5kU2FtcGxlRGVzY3JpcHRpb24oYm94TmFtZSwgdHJhY2tEYXRhKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHJhY2tEYXRhLnR5cGUgPT09ICdzdWJ0aXRsZScpIHtcbiAgICAgICAgc2FtcGxlRGVzY3JpcHRpb24gPSBzdWJ0aXRsZVNhbXBsZURlc2NyaXB0aW9uKFNVQlRJVExFX0NPREVDX1RPX0JPWF9OQU1FW3RyYWNrRGF0YS50cmFjay5zb3VyY2UuX2NvZGVjXSwgdHJhY2tEYXRhKTtcbiAgICB9XG4gICAgYXNzZXJ0KHNhbXBsZURlc2NyaXB0aW9uKTtcbiAgICByZXR1cm4gZnVsbEJveCgnc3RzZCcsIDAsIDAsIFtcbiAgICAgICAgdTMyKDEpLCAvLyBFbnRyeSBjb3VudFxuICAgIF0sIFtcbiAgICAgICAgc2FtcGxlRGVzY3JpcHRpb24sXG4gICAgXSk7XG59O1xuLyoqIFZpZGVvIFNhbXBsZSBEZXNjcmlwdGlvbiBCb3g6IENvbnRhaW5zIGluZm9ybWF0aW9uIHRoYXQgZGVmaW5lcyBob3cgdG8gaW50ZXJwcmV0IHZpZGVvIG1lZGlhIGRhdGEuICovXG5leHBvcnQgY29uc3QgdmlkZW9TYW1wbGVEZXNjcmlwdGlvbiA9IChjb21wcmVzc2lvblR5cGUsIHRyYWNrRGF0YSkgPT4gYm94KGNvbXByZXNzaW9uVHlwZSwgW1xuICAgIEFycmF5KDYpLmZpbGwoMCksIC8vIFJlc2VydmVkXG4gICAgdTE2KDEpLCAvLyBEYXRhIHJlZmVyZW5jZSBpbmRleFxuICAgIHUxNigwKSwgLy8gUHJlLWRlZmluZWRcbiAgICB1MTYoMCksIC8vIFJlc2VydmVkXG4gICAgQXJyYXkoMTIpLmZpbGwoMCksIC8vIFByZS1kZWZpbmVkXG4gICAgdTE2KHRyYWNrRGF0YS5pbmZvLndpZHRoKSwgLy8gV2lkdGhcbiAgICB1MTYodHJhY2tEYXRhLmluZm8uaGVpZ2h0KSwgLy8gSGVpZ2h0XG4gICAgdTMyKDB4MDA0ODAwMDApLCAvLyBIb3Jpem9udGFsIHJlc29sdXRpb25cbiAgICB1MzIoMHgwMDQ4MDAwMCksIC8vIFZlcnRpY2FsIHJlc29sdXRpb25cbiAgICB1MzIoMCksIC8vIFJlc2VydmVkXG4gICAgdTE2KDEpLCAvLyBGcmFtZSBjb3VudFxuICAgIEFycmF5KDMyKS5maWxsKDApLCAvLyBDb21wcmVzc29yIG5hbWVcbiAgICB1MTYoMHgwMDE4KSwgLy8gRGVwdGhcbiAgICBpMTYoMHhmZmZmKSwgLy8gUHJlLWRlZmluZWRcbl0sIFtcbiAgICBWSURFT19DT0RFQ19UT19DT05GSUdVUkFUSU9OX0JPWFt0cmFja0RhdGEudHJhY2suc291cmNlLl9jb2RlY10odHJhY2tEYXRhKSxcbiAgICBjb2xvclNwYWNlSXNDb21wbGV0ZSh0cmFja0RhdGEuaW5mby5kZWNvZGVyQ29uZmlnLmNvbG9yU3BhY2UpID8gY29scih0cmFja0RhdGEpIDogbnVsbCxcbl0pO1xuLyoqIENvbG91ciBJbmZvcm1hdGlvbiBCb3g6IFNwZWNpZmllcyB0aGUgY29sb3Igc3BhY2Ugb2YgdGhlIHZpZGVvLiAqL1xuZXhwb3J0IGNvbnN0IGNvbHIgPSAodHJhY2tEYXRhKSA9PiBib3goJ2NvbHInLCBbXG4gICAgYXNjaWkoJ25jbHgnKSwgLy8gQ29sb3VyIHR5cGVcbiAgICB1MTYoQ09MT1JfUFJJTUFSSUVTX01BUFt0cmFja0RhdGEuaW5mby5kZWNvZGVyQ29uZmlnLmNvbG9yU3BhY2UucHJpbWFyaWVzXSksIC8vIENvbG91ciBwcmltYXJpZXNcbiAgICB1MTYoVFJBTlNGRVJfQ0hBUkFDVEVSSVNUSUNTX01BUFt0cmFja0RhdGEuaW5mby5kZWNvZGVyQ29uZmlnLmNvbG9yU3BhY2UudHJhbnNmZXJdKSwgLy8gVHJhbnNmZXIgY2hhcmFjdGVyaXN0aWNzXG4gICAgdTE2KE1BVFJJWF9DT0VGRklDSUVOVFNfTUFQW3RyYWNrRGF0YS5pbmZvLmRlY29kZXJDb25maWcuY29sb3JTcGFjZS5tYXRyaXhdKSwgLy8gTWF0cml4IGNvZWZmaWNpZW50c1xuICAgIHU4KCh0cmFja0RhdGEuaW5mby5kZWNvZGVyQ29uZmlnLmNvbG9yU3BhY2UuZnVsbFJhbmdlID8gMSA6IDApIDw8IDcpLCAvLyBGdWxsIHJhbmdlIGZsYWdcbl0pO1xuLyoqIEFWQyBDb25maWd1cmF0aW9uIEJveDogUHJvdmlkZXMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0byB0aGUgZGVjb2Rlci4gKi9cbmV4cG9ydCBjb25zdCBhdmNDID0gKHRyYWNrRGF0YSkgPT4gdHJhY2tEYXRhLmluZm8uZGVjb2RlckNvbmZpZyAmJiBib3goJ2F2Y0MnLCBbXG4gICAgLy8gRm9yIEFWQywgZGVzY3JpcHRpb24gaXMgYW4gQVZDRGVjb2RlckNvbmZpZ3VyYXRpb25SZWNvcmQsIHNvIG5vdGhpbmcgZWxzZSB0byBkbyBoZXJlXG4gICAgLi4udG9VaW50OEFycmF5KHRyYWNrRGF0YS5pbmZvLmRlY29kZXJDb25maWcuZGVzY3JpcHRpb24pLFxuXSk7XG4vKiogSEVWQyBDb25maWd1cmF0aW9uIEJveDogUHJvdmlkZXMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0byB0aGUgZGVjb2Rlci4gKi9cbmV4cG9ydCBjb25zdCBodmNDID0gKHRyYWNrRGF0YSkgPT4gdHJhY2tEYXRhLmluZm8uZGVjb2RlckNvbmZpZyAmJiBib3goJ2h2Y0MnLCBbXG4gICAgLy8gRm9yIEhFVkMsIGRlc2NyaXB0aW9uIGlzIGFuIEhFVkNEZWNvZGVyQ29uZmlndXJhdGlvblJlY29yZCwgc28gbm90aGluZyBlbHNlIHRvIGRvIGhlcmVcbiAgICAuLi50b1VpbnQ4QXJyYXkodHJhY2tEYXRhLmluZm8uZGVjb2RlckNvbmZpZy5kZXNjcmlwdGlvbiksXG5dKTtcbi8qKiBWUCBDb25maWd1cmF0aW9uIEJveDogUHJvdmlkZXMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0byB0aGUgZGVjb2Rlci4gKi9cbmV4cG9ydCBjb25zdCB2cGNDID0gKHRyYWNrRGF0YSkgPT4ge1xuICAgIC8vIFJlZmVyZW5jZTogaHR0cHM6Ly93d3cud2VibXByb2plY3Qub3JnL3ZwOS9tcDQvXG4gICAgaWYgKCF0cmFja0RhdGEuaW5mby5kZWNvZGVyQ29uZmlnKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBkZWNvZGVyQ29uZmlnID0gdHJhY2tEYXRhLmluZm8uZGVjb2RlckNvbmZpZztcbiAgICBjb25zdCBwYXJ0cyA9IGRlY29kZXJDb25maWcuY29kZWMuc3BsaXQoJy4nKTsgLy8gV2UgY2FuIGRlcml2ZSB0aGUgcmVxdWlyZWQgdmFsdWVzIGZyb20gdGhlIGNvZGVjIHN0cmluZ1xuICAgIGNvbnN0IHByb2ZpbGUgPSBOdW1iZXIocGFydHNbMV0pO1xuICAgIGNvbnN0IGxldmVsID0gTnVtYmVyKHBhcnRzWzJdKTtcbiAgICBjb25zdCBiaXREZXB0aCA9IE51bWJlcihwYXJ0c1szXSk7XG4gICAgY29uc3QgY2hyb21hU3Vic2FtcGxpbmcgPSBwYXJ0c1s0XSA/IE51bWJlcihwYXJ0c1s0XSkgOiAxOyAvLyA0OjI6MCBjb2xvY2F0ZWQgd2l0aCBsdW1hICgwLDApXG4gICAgY29uc3QgdmlkZW9GdWxsUmFuZ2VGbGFnID0gcGFydHNbOF0gPyBOdW1iZXIocGFydHNbOF0pIDogTnVtYmVyKGRlY29kZXJDb25maWcuY29sb3JTcGFjZT8uZnVsbFJhbmdlID8/IDApO1xuICAgIGNvbnN0IHRoaXJkQnl0ZSA9IChiaXREZXB0aCA8PCA0KSArIChjaHJvbWFTdWJzYW1wbGluZyA8PCAxKSArIHZpZGVvRnVsbFJhbmdlRmxhZztcbiAgICBjb25zdCBjb2xvdXJQcmltYXJpZXMgPSBwYXJ0c1s1XVxuICAgICAgICA/IE51bWJlcihwYXJ0c1s1XSlcbiAgICAgICAgOiBkZWNvZGVyQ29uZmlnLmNvbG9yU3BhY2U/LnByaW1hcmllc1xuICAgICAgICAgICAgPyBDT0xPUl9QUklNQVJJRVNfTUFQW2RlY29kZXJDb25maWcuY29sb3JTcGFjZS5wcmltYXJpZXNdXG4gICAgICAgICAgICA6IDI7IC8vIERlZmF1bHQgdG8gdW5kZXRlcm1pbmVkXG4gICAgY29uc3QgdHJhbnNmZXJDaGFyYWN0ZXJpc3RpY3MgPSBwYXJ0c1s2XVxuICAgICAgICA/IE51bWJlcihwYXJ0c1s2XSlcbiAgICAgICAgOiBkZWNvZGVyQ29uZmlnLmNvbG9yU3BhY2U/LnRyYW5zZmVyXG4gICAgICAgICAgICA/IFRSQU5TRkVSX0NIQVJBQ1RFUklTVElDU19NQVBbZGVjb2RlckNvbmZpZy5jb2xvclNwYWNlLnRyYW5zZmVyXVxuICAgICAgICAgICAgOiAyO1xuICAgIGNvbnN0IG1hdHJpeENvZWZmaWNpZW50cyA9IHBhcnRzWzddXG4gICAgICAgID8gTnVtYmVyKHBhcnRzWzddKVxuICAgICAgICA6IGRlY29kZXJDb25maWcuY29sb3JTcGFjZT8ubWF0cml4XG4gICAgICAgICAgICA/IE1BVFJJWF9DT0VGRklDSUVOVFNfTUFQW2RlY29kZXJDb25maWcuY29sb3JTcGFjZS5tYXRyaXhdXG4gICAgICAgICAgICA6IDI7XG4gICAgcmV0dXJuIGZ1bGxCb3goJ3ZwY0MnLCAxLCAwLCBbXG4gICAgICAgIHU4KHByb2ZpbGUpLCAvLyBQcm9maWxlXG4gICAgICAgIHU4KGxldmVsKSwgLy8gTGV2ZWxcbiAgICAgICAgdTgodGhpcmRCeXRlKSwgLy8gQml0IGRlcHRoLCBjaHJvbWEgc3Vic2FtcGxpbmcsIGZ1bGwgcmFuZ2VcbiAgICAgICAgdTgoY29sb3VyUHJpbWFyaWVzKSwgLy8gQ29sb3VyIHByaW1hcmllc1xuICAgICAgICB1OCh0cmFuc2ZlckNoYXJhY3RlcmlzdGljcyksIC8vIFRyYW5zZmVyIGNoYXJhY3RlcmlzdGljc1xuICAgICAgICB1OChtYXRyaXhDb2VmZmljaWVudHMpLCAvLyBNYXRyaXggY29lZmZpY2llbnRzXG4gICAgICAgIHUxNigwKSwgLy8gQ29kZWMgaW5pdGlhbGl6YXRpb24gZGF0YSBzaXplXG4gICAgXSk7XG59O1xuLyoqIEFWMSBDb25maWd1cmF0aW9uIEJveDogUHJvdmlkZXMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0byB0aGUgZGVjb2Rlci4gKi9cbmV4cG9ydCBjb25zdCBhdjFDID0gKHRyYWNrRGF0YSkgPT4ge1xuICAgIHJldHVybiBib3goJ2F2MUMnLCBnZW5lcmF0ZUF2MUNvZGVjQ29uZmlndXJhdGlvbkZyb21Db2RlY1N0cmluZyh0cmFja0RhdGEuaW5mby5kZWNvZGVyQ29uZmlnLmNvZGVjKSk7XG59O1xuLyoqIFNvdW5kIFNhbXBsZSBEZXNjcmlwdGlvbiBCb3g6IENvbnRhaW5zIGluZm9ybWF0aW9uIHRoYXQgZGVmaW5lcyBob3cgdG8gaW50ZXJwcmV0IHNvdW5kIG1lZGlhIGRhdGEuICovXG5leHBvcnQgY29uc3Qgc291bmRTYW1wbGVEZXNjcmlwdGlvbiA9IChjb21wcmVzc2lvblR5cGUsIHRyYWNrRGF0YSkgPT4ge1xuICAgIGxldCB2ZXJzaW9uID0gMDtcbiAgICBsZXQgY29udGVudHM7XG4gICAgbGV0IHNhbXBsZVNpemVJbkJpdHMgPSAxNjtcbiAgICBpZiAoUENNX0FVRElPX0NPREVDUy5pbmNsdWRlcyh0cmFja0RhdGEudHJhY2suc291cmNlLl9jb2RlYykpIHtcbiAgICAgICAgY29uc3QgY29kZWMgPSB0cmFja0RhdGEudHJhY2suc291cmNlLl9jb2RlYztcbiAgICAgICAgY29uc3QgeyBzYW1wbGVTaXplIH0gPSBwYXJzZVBjbUNvZGVjKGNvZGVjKTtcbiAgICAgICAgc2FtcGxlU2l6ZUluQml0cyA9IDggKiBzYW1wbGVTaXplO1xuICAgICAgICBpZiAoc2FtcGxlU2l6ZUluQml0cyA+IDE2KSB7XG4gICAgICAgICAgICB2ZXJzaW9uID0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodmVyc2lvbiA9PT0gMCkge1xuICAgICAgICBjb250ZW50cyA9IFtcbiAgICAgICAgICAgIEFycmF5KDYpLmZpbGwoMCksIC8vIFJlc2VydmVkXG4gICAgICAgICAgICB1MTYoMSksIC8vIERhdGEgcmVmZXJlbmNlIGluZGV4XG4gICAgICAgICAgICB1MTYodmVyc2lvbiksIC8vIFZlcnNpb25cbiAgICAgICAgICAgIHUxNigwKSwgLy8gUmV2aXNpb24gbGV2ZWxcbiAgICAgICAgICAgIHUzMigwKSwgLy8gVmVuZG9yXG4gICAgICAgICAgICB1MTYodHJhY2tEYXRhLmluZm8ubnVtYmVyT2ZDaGFubmVscyksIC8vIE51bWJlciBvZiBjaGFubmVsc1xuICAgICAgICAgICAgdTE2KHNhbXBsZVNpemVJbkJpdHMpLCAvLyBTYW1wbGUgc2l6ZSAoYml0cylcbiAgICAgICAgICAgIHUxNigwKSwgLy8gQ29tcHJlc3Npb24gSURcbiAgICAgICAgICAgIHUxNigwKSwgLy8gUGFja2V0IHNpemVcbiAgICAgICAgICAgIHUxNih0cmFja0RhdGEuaW5mby5zYW1wbGVSYXRlIDwgMiAqKiAxNiA/IHRyYWNrRGF0YS5pbmZvLnNhbXBsZVJhdGUgOiAwKSwgLy8gU2FtcGxlIHJhdGUgKHVwcGVyKVxuICAgICAgICAgICAgdTE2KDApLCAvLyBTYW1wbGUgcmF0ZSAobG93ZXIpXG4gICAgICAgIF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb250ZW50cyA9IFtcbiAgICAgICAgICAgIEFycmF5KDYpLmZpbGwoMCksIC8vIFJlc2VydmVkXG4gICAgICAgICAgICB1MTYoMSksIC8vIERhdGEgcmVmZXJlbmNlIGluZGV4XG4gICAgICAgICAgICB1MTYodmVyc2lvbiksIC8vIFZlcnNpb25cbiAgICAgICAgICAgIHUxNigwKSwgLy8gUmV2aXNpb24gbGV2ZWxcbiAgICAgICAgICAgIHUzMigwKSwgLy8gVmVuZG9yXG4gICAgICAgICAgICB1MTYodHJhY2tEYXRhLmluZm8ubnVtYmVyT2ZDaGFubmVscyksIC8vIE51bWJlciBvZiBjaGFubmVsc1xuICAgICAgICAgICAgdTE2KE1hdGgubWluKHNhbXBsZVNpemVJbkJpdHMsIDE2KSksIC8vIFNhbXBsZSBzaXplIChiaXRzKVxuICAgICAgICAgICAgdTE2KDApLCAvLyBDb21wcmVzc2lvbiBJRFxuICAgICAgICAgICAgdTE2KDApLCAvLyBQYWNrZXQgc2l6ZVxuICAgICAgICAgICAgdTE2KHRyYWNrRGF0YS5pbmZvLnNhbXBsZVJhdGUgPCAyICoqIDE2ID8gdHJhY2tEYXRhLmluZm8uc2FtcGxlUmF0ZSA6IDApLCAvLyBTYW1wbGUgcmF0ZSAodXBwZXIpXG4gICAgICAgICAgICB1MTYoMCksIC8vIFNhbXBsZSByYXRlIChsb3dlcilcbiAgICAgICAgICAgIHUzMigxKSwgLy8gU2FtcGxlcyBwZXIgcGFja2V0IChtdXN0IGJlIDEgZm9yIHVuY29tcHJlc3NlZCBmb3JtYXRzKVxuICAgICAgICAgICAgdTMyKHNhbXBsZVNpemVJbkJpdHMgLyA4KSwgLy8gQnl0ZXMgcGVyIHBhY2tldFxuICAgICAgICAgICAgdTMyKHRyYWNrRGF0YS5pbmZvLm51bWJlck9mQ2hhbm5lbHMgKiBzYW1wbGVTaXplSW5CaXRzIC8gOCksIC8vIEJ5dGVzIHBlciBmcmFtZVxuICAgICAgICAgICAgdTMyKDIpLCAvLyBCeXRlcyBwZXIgc2FtcGxlIChjb25zdGFudCBpbiBGRm1wZWcpXG4gICAgICAgIF07XG4gICAgfVxuICAgIHJldHVybiBib3goY29tcHJlc3Npb25UeXBlLCBjb250ZW50cywgW1xuICAgICAgICBhdWRpb0NvZGVjVG9Db25maWd1cmF0aW9uQm94KHRyYWNrRGF0YS50cmFjay5zb3VyY2UuX2NvZGVjLCB0cmFja0RhdGEubXV4ZXIuaXNRdWlja1RpbWUpPy4odHJhY2tEYXRhKSA/PyBudWxsLFxuICAgIF0pO1xufTtcbi8qKiBNUEVHLTQgRWxlbWVudGFyeSBTdHJlYW0gRGVzY3JpcHRvciBCb3guICovXG5leHBvcnQgY29uc3QgZXNkcyA9ICh0cmFja0RhdGEpID0+IHtcbiAgICAvLyBXZSBidWlsZCB1cCB0aGUgYnl0ZXMgaW4gYSBsYXllcmVkIHdheSB3aGljaCByZWZsZWN0cyB0aGUgbmVzdGVkIHN0cnVjdHVyZVxuICAgIGxldCBvYmplY3RUeXBlSW5kaWNhdGlvbjtcbiAgICBzd2l0Y2ggKHRyYWNrRGF0YS50cmFjay5zb3VyY2UuX2NvZGVjKSB7XG4gICAgICAgIGNhc2UgJ2FhYyc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZUluZGljYXRpb24gPSAweDQwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21wMyc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZUluZGljYXRpb24gPSAweDZiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ZvcmJpcyc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZUluZGljYXRpb24gPSAweGRkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgVW5oYW5kbGVkIGF1ZGlvIGNvZGVjOiAke3RyYWNrRGF0YS50cmFjay5zb3VyY2UuX2NvZGVjfWApO1xuICAgIH1cbiAgICBsZXQgYnl0ZXMgPSBbXG4gICAgICAgIC4uLnU4KG9iamVjdFR5cGVJbmRpY2F0aW9uKSwgLy8gT2JqZWN0IHR5cGUgaW5kaWNhdGlvblxuICAgICAgICAuLi51OCgweDE1KSwgLy8gc3RyZWFtIHR5cGUoNmJpdHMpPTUgYXVkaW8sIGZsYWdzKDJiaXRzKT0xXG4gICAgICAgIC4uLnUyNCgwKSwgLy8gMjRiaXQgYnVmZmVyIHNpemVcbiAgICAgICAgLi4udTMyKDApLCAvLyBtYXggYml0cmF0ZVxuICAgICAgICAuLi51MzIoMCksIC8vIGF2ZyBiaXRyYXRlXG4gICAgXTtcbiAgICBpZiAodHJhY2tEYXRhLmluZm8uZGVjb2RlckNvbmZpZy5kZXNjcmlwdGlvbikge1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRvVWludDhBcnJheSh0cmFja0RhdGEuaW5mby5kZWNvZGVyQ29uZmlnLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgLy8gQWRkIHRoZSBkZWNvZGVyIGRlc2NyaXB0aW9uIHRvIHRoZSBlbmRcbiAgICAgICAgYnl0ZXMgPSBbXG4gICAgICAgICAgICAuLi5ieXRlcyxcbiAgICAgICAgICAgIC4uLnU4KDB4MDUpLCAvLyBUQUcoNSkgPSBEZWNvZGVyU3BlY2lmaWNJbmZvXG4gICAgICAgICAgICAuLi52YXJpYWJsZVVuc2lnbmVkSW50KGRlc2NyaXB0aW9uLmJ5dGVMZW5ndGgpLFxuICAgICAgICAgICAgLi4uZGVzY3JpcHRpb24sXG4gICAgICAgIF07XG4gICAgfVxuICAgIGJ5dGVzID0gW1xuICAgICAgICAuLi51MTYoMSksIC8vIEVTX0lEID0gMVxuICAgICAgICAuLi51OCgweDAwKSwgLy8gZmxhZ3MgZXRjID0gMFxuICAgICAgICAuLi51OCgweDA0KSwgLy8gVEFHKDQpID0gRVMgRGVzY3JpcHRvclxuICAgICAgICAuLi52YXJpYWJsZVVuc2lnbmVkSW50KGJ5dGVzLmxlbmd0aCksXG4gICAgICAgIC4uLmJ5dGVzLFxuICAgICAgICAuLi51OCgweDA2KSwgLy8gVEFHKDYpXG4gICAgICAgIC4uLnU4KDB4MDEpLCAvLyBsZW5ndGhcbiAgICAgICAgLi4udTgoMHgwMiksIC8vIGRhdGFcbiAgICBdO1xuICAgIGJ5dGVzID0gW1xuICAgICAgICAuLi51OCgweDAzKSwgLy8gVEFHKDMpID0gT2JqZWN0IERlc2NyaXB0b3JcbiAgICAgICAgLi4udmFyaWFibGVVbnNpZ25lZEludChieXRlcy5sZW5ndGgpLFxuICAgICAgICAuLi5ieXRlcyxcbiAgICBdO1xuICAgIHJldHVybiBmdWxsQm94KCdlc2RzJywgMCwgMCwgYnl0ZXMpO1xufTtcbmV4cG9ydCBjb25zdCB3YXZlID0gKHRyYWNrRGF0YSkgPT4ge1xuICAgIHJldHVybiBib3goJ3dhdmUnLCB1bmRlZmluZWQsIFtcbiAgICAgICAgZnJtYSh0cmFja0RhdGEpLFxuICAgICAgICBlbmRhKHRyYWNrRGF0YSksXG4gICAgICAgIGJveCgnXFx4MDBcXHgwMFxceDAwXFx4MDAnKSwgLy8gTlVMTCB0YWcgYXQgdGhlIGVuZFxuICAgIF0pO1xufTtcbmV4cG9ydCBjb25zdCBmcm1hID0gKHRyYWNrRGF0YSkgPT4ge1xuICAgIHJldHVybiBib3goJ2ZybWEnLCBbXG4gICAgICAgIGFzY2lpKGF1ZGlvQ29kZWNUb0JveE5hbWUodHJhY2tEYXRhLnRyYWNrLnNvdXJjZS5fY29kZWMsIHRyYWNrRGF0YS5tdXhlci5pc1F1aWNrVGltZSkpLFxuICAgIF0pO1xufTtcbi8vIFRoaXMgYm94IHNwZWNpZmllcyBQQ00gZW5kaWFubmVzc1xuZXhwb3J0IGNvbnN0IGVuZGEgPSAodHJhY2tEYXRhKSA9PiB7XG4gICAgY29uc3QgeyBsaXR0bGVFbmRpYW4gfSA9IHBhcnNlUGNtQ29kZWModHJhY2tEYXRhLnRyYWNrLnNvdXJjZS5fY29kZWMpO1xuICAgIHJldHVybiBib3goJ2VuZGEnLCBbXG4gICAgICAgIHUxNigrbGl0dGxlRW5kaWFuKSxcbiAgICBdKTtcbn07XG4vKiogT3B1cyBTcGVjaWZpYyBCb3guICovXG5leHBvcnQgY29uc3QgZE9wcyA9ICh0cmFja0RhdGEpID0+IHtcbiAgICBsZXQgb3V0cHV0Q2hhbm5lbENvdW50ID0gdHJhY2tEYXRhLmluZm8ubnVtYmVyT2ZDaGFubmVscztcbiAgICAvLyBEZWZhdWx0IFByZVNraXAsIHNob3VsZCBiZSBhdCBsZWFzdCA4MCBtaWxsaXNlY29uZHMgd29ydGggb2YgcGxheWJhY2ssIG1lYXN1cmVkIGluIDQ4MDAwIEh6IHNhbXBsZXNcbiAgICBsZXQgcHJlU2tpcCA9IDM4NDA7XG4gICAgbGV0IGlucHV0U2FtcGxlUmF0ZSA9IHRyYWNrRGF0YS5pbmZvLnNhbXBsZVJhdGU7XG4gICAgbGV0IG91dHB1dEdhaW4gPSAwO1xuICAgIGxldCBjaGFubmVsTWFwcGluZ0ZhbWlseSA9IDA7XG4gICAgbGV0IGNoYW5uZWxNYXBwaW5nVGFibGUgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICAvLyBSZWFkIHByZXNraXAgYW5kIGZyb20gY29kZWMgcHJpdmF0ZSBkYXRhIGZyb20gdGhlIGVuY29kZXJcbiAgICAvLyBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNzg0NSNzZWN0aW9uLTVcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRyYWNrRGF0YS5pbmZvLmRlY29kZXJDb25maWc/LmRlc2NyaXB0aW9uO1xuICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICBhc3NlcnQoZGVzY3JpcHRpb24uYnl0ZUxlbmd0aCA+PSAxOCk7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gdG9VaW50OEFycmF5KGRlc2NyaXB0aW9uKTtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gcGFyc2VPcHVzSWRlbnRpZmljYXRpb25IZWFkZXIoYnl0ZXMpO1xuICAgICAgICBvdXRwdXRDaGFubmVsQ291bnQgPSBoZWFkZXIub3V0cHV0Q2hhbm5lbENvdW50O1xuICAgICAgICBwcmVTa2lwID0gaGVhZGVyLnByZVNraXA7XG4gICAgICAgIGlucHV0U2FtcGxlUmF0ZSA9IGhlYWRlci5pbnB1dFNhbXBsZVJhdGU7XG4gICAgICAgIG91dHB1dEdhaW4gPSBoZWFkZXIub3V0cHV0R2FpbjtcbiAgICAgICAgY2hhbm5lbE1hcHBpbmdGYW1pbHkgPSBoZWFkZXIuY2hhbm5lbE1hcHBpbmdGYW1pbHk7XG4gICAgICAgIGlmIChoZWFkZXIuY2hhbm5lbE1hcHBpbmdUYWJsZSkge1xuICAgICAgICAgICAgY2hhbm5lbE1hcHBpbmdUYWJsZSA9IGhlYWRlci5jaGFubmVsTWFwcGluZ1RhYmxlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vd3d3Lm9wdXMtY29kZWMub3JnL2RvY3Mvb3B1c19pbl9pc29ibWZmLmh0bWxcbiAgICByZXR1cm4gYm94KCdkT3BzJywgW1xuICAgICAgICB1OCgwKSwgLy8gVmVyc2lvblxuICAgICAgICB1OChvdXRwdXRDaGFubmVsQ291bnQpLCAvLyBPdXRwdXRDaGFubmVsQ291bnRcbiAgICAgICAgdTE2KHByZVNraXApLCAvLyBQcmVTa2lwXG4gICAgICAgIHUzMihpbnB1dFNhbXBsZVJhdGUpLCAvLyBJbnB1dFNhbXBsZVJhdGVcbiAgICAgICAgaTE2KG91dHB1dEdhaW4pLCAvLyBPdXRwdXRHYWluXG4gICAgICAgIHU4KGNoYW5uZWxNYXBwaW5nRmFtaWx5KSwgLy8gQ2hhbm5lbE1hcHBpbmdGYW1pbHlcbiAgICAgICAgLi4uY2hhbm5lbE1hcHBpbmdUYWJsZSxcbiAgICBdKTtcbn07XG4vKiogRkxBQyBzcGVjaWZpYyBib3guICovXG5leHBvcnQgY29uc3QgZGZMYSA9ICh0cmFja0RhdGEpID0+IHtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRyYWNrRGF0YS5pbmZvLmRlY29kZXJDb25maWc/LmRlc2NyaXB0aW9uO1xuICAgIGFzc2VydChkZXNjcmlwdGlvbik7XG4gICAgY29uc3QgYnl0ZXMgPSB0b1VpbnQ4QXJyYXkoZGVzY3JpcHRpb24pO1xuICAgIHJldHVybiBmdWxsQm94KCdkZkxhJywgMCwgMCwgW1xuICAgICAgICAuLi5ieXRlcy5zdWJhcnJheSg0KSxcbiAgICBdKTtcbn07XG4vKiogUENNIENvbmZpZ3VyYXRpb24gQm94LCBJU08vSUVDIDIzMDAzLTUuICovXG5jb25zdCBwY21DID0gKHRyYWNrRGF0YSkgPT4ge1xuICAgIGNvbnN0IHsgbGl0dGxlRW5kaWFuLCBzYW1wbGVTaXplIH0gPSBwYXJzZVBjbUNvZGVjKHRyYWNrRGF0YS50cmFjay5zb3VyY2UuX2NvZGVjKTtcbiAgICBjb25zdCBmb3JtYXRGbGFncyA9ICtsaXR0bGVFbmRpYW47XG4gICAgcmV0dXJuIGZ1bGxCb3goJ3BjbUMnLCAwLCAwLCBbXG4gICAgICAgIHU4KGZvcm1hdEZsYWdzKSxcbiAgICAgICAgdTgoOCAqIHNhbXBsZVNpemUpLFxuICAgIF0pO1xufTtcbmV4cG9ydCBjb25zdCBzdWJ0aXRsZVNhbXBsZURlc2NyaXB0aW9uID0gKGNvbXByZXNzaW9uVHlwZSwgdHJhY2tEYXRhKSA9PiBib3goY29tcHJlc3Npb25UeXBlLCBbXG4gICAgQXJyYXkoNikuZmlsbCgwKSwgLy8gUmVzZXJ2ZWRcbiAgICB1MTYoMSksIC8vIERhdGEgcmVmZXJlbmNlIGluZGV4XG5dLCBbXG4gICAgU1VCVElUTEVfQ09ERUNfVE9fQ09ORklHVVJBVElPTl9CT1hbdHJhY2tEYXRhLnRyYWNrLnNvdXJjZS5fY29kZWNdKHRyYWNrRGF0YSksXG5dKTtcbmV4cG9ydCBjb25zdCB2dHRDID0gKHRyYWNrRGF0YSkgPT4gYm94KCd2dHRDJywgW1xuICAgIC4uLnRleHRFbmNvZGVyLmVuY29kZSh0cmFja0RhdGEuaW5mby5jb25maWcuZGVzY3JpcHRpb24pLFxuXSk7XG5leHBvcnQgY29uc3QgdHh0QyA9ICh0ZXh0Q29uZmlnKSA9PiBmdWxsQm94KCd0eHRDJywgMCwgMCwgW1xuICAgIC4uLnRleHRDb25maWcsIDAsIC8vIFRleHQgY29uZmlnIChudWxsLXRlcm1pbmF0ZWQpXG5dKTtcbi8qKlxuICogVGltZS1Uby1TYW1wbGUgQm94OiBTdG9yZXMgZHVyYXRpb24gaW5mb3JtYXRpb24gZm9yIGEgbWVkaWEncyBzYW1wbGVzLCBwcm92aWRpbmcgYSBtYXBwaW5nIGZyb20gYSB0aW1lIGluIGEgbWVkaWFcbiAqIHRvIHRoZSBjb3JyZXNwb25kaW5nIGRhdGEgc2FtcGxlLiBUaGUgdGFibGUgaXMgY29tcGFjdCwgbWVhbmluZyB0aGF0IGNvbnNlY3V0aXZlIHNhbXBsZXMgd2l0aCB0aGUgc2FtZSB0aW1lIGRlbHRhXG4gKiB3aWxsIGJlIGdyb3VwZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBzdHRzID0gKHRyYWNrRGF0YSkgPT4ge1xuICAgIHJldHVybiBmdWxsQm94KCdzdHRzJywgMCwgMCwgW1xuICAgICAgICB1MzIodHJhY2tEYXRhLnRpbWVUb1NhbXBsZVRhYmxlLmxlbmd0aCksIC8vIE51bWJlciBvZiBlbnRyaWVzXG4gICAgICAgIHRyYWNrRGF0YS50aW1lVG9TYW1wbGVUYWJsZS5tYXAoeCA9PiBbXG4gICAgICAgICAgICB1MzIoeC5zYW1wbGVDb3VudCksIC8vIFNhbXBsZSBjb3VudFxuICAgICAgICAgICAgdTMyKHguc2FtcGxlRGVsdGEpLCAvLyBTYW1wbGUgZHVyYXRpb25cbiAgICAgICAgXSksXG4gICAgXSk7XG59O1xuLyoqIFN5bmMgU2FtcGxlIEJveDogSWRlbnRpZmllcyB0aGUga2V5IGZyYW1lcyBpbiB0aGUgbWVkaWEsIG1hcmtpbmcgdGhlIHJhbmRvbSBhY2Nlc3MgcG9pbnRzIHdpdGhpbiBhIHN0cmVhbS4gKi9cbmV4cG9ydCBjb25zdCBzdHNzID0gKHRyYWNrRGF0YSkgPT4ge1xuICAgIGlmICh0cmFja0RhdGEuc2FtcGxlcy5ldmVyeSh4ID0+IHgudHlwZSA9PT0gJ2tleScpKVxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gTm8gc3RzcyBib3ggLT4gZXZlcnkgZnJhbWUgaXMgYSBrZXkgZnJhbWVcbiAgICBjb25zdCBrZXlTYW1wbGVzID0gWy4uLnRyYWNrRGF0YS5zYW1wbGVzLmVudHJpZXMoKV0uZmlsdGVyKChbLCBzYW1wbGVdKSA9PiBzYW1wbGUudHlwZSA9PT0gJ2tleScpO1xuICAgIHJldHVybiBmdWxsQm94KCdzdHNzJywgMCwgMCwgW1xuICAgICAgICB1MzIoa2V5U2FtcGxlcy5sZW5ndGgpLCAvLyBOdW1iZXIgb2YgZW50cmllc1xuICAgICAgICBrZXlTYW1wbGVzLm1hcCgoW2luZGV4XSkgPT4gdTMyKGluZGV4ICsgMSkpLCAvLyBTeW5jIHNhbXBsZSB0YWJsZVxuICAgIF0pO1xufTtcbi8qKlxuICogU2FtcGxlLVRvLUNodW5rIEJveDogQXMgc2FtcGxlcyBhcmUgYWRkZWQgdG8gYSBtZWRpYSwgdGhleSBhcmUgY29sbGVjdGVkIGludG8gY2h1bmtzIHRoYXQgYWxsb3cgb3B0aW1pemVkIGRhdGFcbiAqIGFjY2Vzcy4gQSBjaHVuayBjb250YWlucyBvbmUgb3IgbW9yZSBzYW1wbGVzLiBDaHVua3MgaW4gYSBtZWRpYSBtYXkgaGF2ZSBkaWZmZXJlbnQgc2l6ZXMsIGFuZCB0aGUgc2FtcGxlcyB3aXRoaW4gYVxuICogY2h1bmsgbWF5IGhhdmUgZGlmZmVyZW50IHNpemVzLiBUaGUgU2FtcGxlLVRvLUNodW5rIEJveCBzdG9yZXMgY2h1bmsgaW5mb3JtYXRpb24gZm9yIHRoZSBzYW1wbGVzIGluIGEgbWVkaWEsIHN0b3JlZFxuICogaW4gYSBjb21wYWN0bHktY29kZWQgZmFzaGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IHN0c2MgPSAodHJhY2tEYXRhKSA9PiB7XG4gICAgcmV0dXJuIGZ1bGxCb3goJ3N0c2MnLCAwLCAwLCBbXG4gICAgICAgIHUzMih0cmFja0RhdGEuY29tcGFjdGx5Q29kZWRDaHVua1RhYmxlLmxlbmd0aCksIC8vIE51bWJlciBvZiBlbnRyaWVzXG4gICAgICAgIHRyYWNrRGF0YS5jb21wYWN0bHlDb2RlZENodW5rVGFibGUubWFwKHggPT4gW1xuICAgICAgICAgICAgdTMyKHguZmlyc3RDaHVuayksIC8vIEZpcnN0IGNodW5rXG4gICAgICAgICAgICB1MzIoeC5zYW1wbGVzUGVyQ2h1bmspLCAvLyBTYW1wbGVzIHBlciBjaHVua1xuICAgICAgICAgICAgdTMyKDEpLCAvLyBTYW1wbGUgZGVzY3JpcHRpb24gaW5kZXhcbiAgICAgICAgXSksXG4gICAgXSk7XG59O1xuLyoqIFNhbXBsZSBTaXplIEJveDogU3BlY2lmaWVzIHRoZSBieXRlIHNpemUgb2YgZWFjaCBzYW1wbGUgaW4gdGhlIG1lZGlhLiAqL1xuZXhwb3J0IGNvbnN0IHN0c3ogPSAodHJhY2tEYXRhKSA9PiB7XG4gICAgaWYgKHRyYWNrRGF0YS50eXBlID09PSAnYXVkaW8nICYmIHRyYWNrRGF0YS5pbmZvLnJlcXVpcmVzUGNtVHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgY29uc3QgeyBzYW1wbGVTaXplIH0gPSBwYXJzZVBjbUNvZGVjKHRyYWNrRGF0YS50cmFjay5zb3VyY2UuX2NvZGVjKTtcbiAgICAgICAgLy8gV2l0aCBQQ00sIGV2ZXJ5IHNhbXBsZSBoYXMgdGhlIHNhbWUgc2l6ZVxuICAgICAgICByZXR1cm4gZnVsbEJveCgnc3RzeicsIDAsIDAsIFtcbiAgICAgICAgICAgIHUzMihzYW1wbGVTaXplICogdHJhY2tEYXRhLmluZm8ubnVtYmVyT2ZDaGFubmVscyksIC8vIFNhbXBsZSBzaXplXG4gICAgICAgICAgICB1MzIodHJhY2tEYXRhLnNhbXBsZXMucmVkdWNlKChhY2MsIHgpID0+IGFjYyArIGludG9UaW1lc2NhbGUoeC5kdXJhdGlvbiwgdHJhY2tEYXRhLnRpbWVzY2FsZSksIDApKSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIHJldHVybiBmdWxsQm94KCdzdHN6JywgMCwgMCwgW1xuICAgICAgICB1MzIoMCksIC8vIFNhbXBsZSBzaXplICgwIG1lYW5zIG5vbi1jb25zdGFudCBzaXplKVxuICAgICAgICB1MzIodHJhY2tEYXRhLnNhbXBsZXMubGVuZ3RoKSwgLy8gTnVtYmVyIG9mIGVudHJpZXNcbiAgICAgICAgdHJhY2tEYXRhLnNhbXBsZXMubWFwKHggPT4gdTMyKHguc2l6ZSkpLCAvLyBTYW1wbGUgc2l6ZSB0YWJsZVxuICAgIF0pO1xufTtcbi8qKiBDaHVuayBPZmZzZXQgQm94OiBJZGVudGlmaWVzIHRoZSBsb2NhdGlvbiBvZiBlYWNoIGNodW5rIG9mIGRhdGEgaW4gdGhlIG1lZGlhJ3MgZGF0YSBzdHJlYW0sIHJlbGF0aXZlIHRvIHRoZSBmaWxlLiAqL1xuZXhwb3J0IGNvbnN0IHN0Y28gPSAodHJhY2tEYXRhKSA9PiB7XG4gICAgaWYgKHRyYWNrRGF0YS5maW5hbGl6ZWRDaHVua3MubGVuZ3RoID4gMCAmJiBsYXN0KHRyYWNrRGF0YS5maW5hbGl6ZWRDaHVua3MpLm9mZnNldCA+PSAyICoqIDMyKSB7XG4gICAgICAgIC8vIElmIHRoZSBmaWxlIGlzIGxhcmdlLCB1c2UgdGhlIGNvNjQgYm94XG4gICAgICAgIHJldHVybiBmdWxsQm94KCdjbzY0JywgMCwgMCwgW1xuICAgICAgICAgICAgdTMyKHRyYWNrRGF0YS5maW5hbGl6ZWRDaHVua3MubGVuZ3RoKSwgLy8gTnVtYmVyIG9mIGVudHJpZXNcbiAgICAgICAgICAgIHRyYWNrRGF0YS5maW5hbGl6ZWRDaHVua3MubWFwKHggPT4gdTY0KHgub2Zmc2V0KSksIC8vIENodW5rIG9mZnNldCB0YWJsZVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bGxCb3goJ3N0Y28nLCAwLCAwLCBbXG4gICAgICAgIHUzMih0cmFja0RhdGEuZmluYWxpemVkQ2h1bmtzLmxlbmd0aCksIC8vIE51bWJlciBvZiBlbnRyaWVzXG4gICAgICAgIHRyYWNrRGF0YS5maW5hbGl6ZWRDaHVua3MubWFwKHggPT4gdTMyKHgub2Zmc2V0KSksIC8vIENodW5rIG9mZnNldCB0YWJsZVxuICAgIF0pO1xufTtcbi8qKlxuICogQ29tcG9zaXRpb24gVGltZSB0byBTYW1wbGUgQm94OiBTdG9yZXMgY29tcG9zaXRpb24gdGltZSBvZmZzZXQgaW5mb3JtYXRpb24gKFBUUy1EVFMpIGZvciBhXG4gKiBtZWRpYSdzIHNhbXBsZXMuIFRoZSB0YWJsZSBpcyBjb21wYWN0LCBtZWFuaW5nIHRoYXQgY29uc2VjdXRpdmUgc2FtcGxlcyB3aXRoIHRoZSBzYW1lIHRpbWVcbiAqIGNvbXBvc2l0aW9uIHRpbWUgb2Zmc2V0IHdpbGwgYmUgZ3JvdXBlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGN0dHMgPSAodHJhY2tEYXRhKSA9PiB7XG4gICAgcmV0dXJuIGZ1bGxCb3goJ2N0dHMnLCAxLCAwLCBbXG4gICAgICAgIHUzMih0cmFja0RhdGEuY29tcG9zaXRpb25UaW1lT2Zmc2V0VGFibGUubGVuZ3RoKSwgLy8gTnVtYmVyIG9mIGVudHJpZXNcbiAgICAgICAgdHJhY2tEYXRhLmNvbXBvc2l0aW9uVGltZU9mZnNldFRhYmxlLm1hcCh4ID0+IFtcbiAgICAgICAgICAgIHUzMih4LnNhbXBsZUNvdW50KSwgLy8gU2FtcGxlIGNvdW50XG4gICAgICAgICAgICBpMzIoeC5zYW1wbGVDb21wb3NpdGlvblRpbWVPZmZzZXQpLCAvLyBTYW1wbGUgb2Zmc2V0XG4gICAgICAgIF0pLFxuICAgIF0pO1xufTtcbi8qKlxuICogQ29tcG9zaXRpb24gdG8gRGVjb2RlIEJveDogU3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb21wb3NpdGlvbiBhbmQgZGlzcGxheSB0aW1lcyBvZiB0aGUgbWVkaWEgc2FtcGxlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNzbGcgPSAodHJhY2tEYXRhKSA9PiB7XG4gICAgbGV0IGxlYXN0RGVjb2RlVG9EaXNwbGF5RGVsdGEgPSBJbmZpbml0eTtcbiAgICBsZXQgZ3JlYXRlc3REZWNvZGVUb0Rpc3BsYXlEZWx0YSA9IC1JbmZpbml0eTtcbiAgICBsZXQgY29tcG9zaXRpb25TdGFydFRpbWUgPSBJbmZpbml0eTtcbiAgICBsZXQgY29tcG9zaXRpb25FbmRUaW1lID0gLUluZmluaXR5O1xuICAgIGFzc2VydCh0cmFja0RhdGEuY29tcG9zaXRpb25UaW1lT2Zmc2V0VGFibGUubGVuZ3RoID4gMCk7XG4gICAgYXNzZXJ0KHRyYWNrRGF0YS5zYW1wbGVzLmxlbmd0aCA+IDApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhY2tEYXRhLmNvbXBvc2l0aW9uVGltZU9mZnNldFRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdHJhY2tEYXRhLmNvbXBvc2l0aW9uVGltZU9mZnNldFRhYmxlW2ldO1xuICAgICAgICBsZWFzdERlY29kZVRvRGlzcGxheURlbHRhID0gTWF0aC5taW4obGVhc3REZWNvZGVUb0Rpc3BsYXlEZWx0YSwgZW50cnkuc2FtcGxlQ29tcG9zaXRpb25UaW1lT2Zmc2V0KTtcbiAgICAgICAgZ3JlYXRlc3REZWNvZGVUb0Rpc3BsYXlEZWx0YSA9IE1hdGgubWF4KGdyZWF0ZXN0RGVjb2RlVG9EaXNwbGF5RGVsdGEsIGVudHJ5LnNhbXBsZUNvbXBvc2l0aW9uVGltZU9mZnNldCk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhY2tEYXRhLnNhbXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2FtcGxlID0gdHJhY2tEYXRhLnNhbXBsZXNbaV07XG4gICAgICAgIGNvbXBvc2l0aW9uU3RhcnRUaW1lID0gTWF0aC5taW4oY29tcG9zaXRpb25TdGFydFRpbWUsIGludG9UaW1lc2NhbGUoc2FtcGxlLnRpbWVzdGFtcCwgdHJhY2tEYXRhLnRpbWVzY2FsZSkpO1xuICAgICAgICBjb21wb3NpdGlvbkVuZFRpbWUgPSBNYXRoLm1heChjb21wb3NpdGlvbkVuZFRpbWUsIGludG9UaW1lc2NhbGUoc2FtcGxlLnRpbWVzdGFtcCArIHNhbXBsZS5kdXJhdGlvbiwgdHJhY2tEYXRhLnRpbWVzY2FsZSkpO1xuICAgIH1cbiAgICBjb25zdCBjb21wb3NpdGlvblRvRHRzU2hpZnQgPSBNYXRoLm1heCgtbGVhc3REZWNvZGVUb0Rpc3BsYXlEZWx0YSwgMCk7XG4gICAgaWYgKGNvbXBvc2l0aW9uRW5kVGltZSA+PSAyICoqIDMxKSB7XG4gICAgICAgIC8vIEZvciB2ZXJ5IGxhcmdlIGZpbGVzLCB0aGUgY29tcG9zaXRpb24gZW5kIHRpbWUgY2FuJ3QgYmUgcmVwcmVzZW50ZWQgaW4gaTMyLCBzbyBsZXQncyBqdXN0IHNjcmFwIHRoZSBib3ggaW5cbiAgICAgICAgLy8gdGhhdCBjYXNlLiBRdWlja1RpbWUgZmFpbHMgdG8gcmVhZCB0aGUgZmlsZSBpZiB0aGVyZSdzIGEgY3NsZyBib3ggd2l0aCB2ZXJzaW9uIDEsIHNvIHRoYXQncyBzYWRseSBub3QgYW5cbiAgICAgICAgLy8gb3B0aW9uLlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bGxCb3goJ2NzbGcnLCAwLCAwLCBbXG4gICAgICAgIGkzMihjb21wb3NpdGlvblRvRHRzU2hpZnQpLCAvLyBDb21wb3NpdGlvbiB0byBEVFMgc2hpZnRcbiAgICAgICAgaTMyKGxlYXN0RGVjb2RlVG9EaXNwbGF5RGVsdGEpLCAvLyBMZWFzdCBkZWNvZGUgdG8gZGlzcGxheSBkZWx0YVxuICAgICAgICBpMzIoZ3JlYXRlc3REZWNvZGVUb0Rpc3BsYXlEZWx0YSksIC8vIEdyZWF0ZXN0IGRlY29kZSB0byBkaXNwbGF5IGRlbHRhXG4gICAgICAgIGkzMihjb21wb3NpdGlvblN0YXJ0VGltZSksIC8vIENvbXBvc2l0aW9uIHN0YXJ0IHRpbWVcbiAgICAgICAgaTMyKGNvbXBvc2l0aW9uRW5kVGltZSksIC8vIENvbXBvc2l0aW9uIGVuZCB0aW1lXG4gICAgXSk7XG59O1xuLyoqXG4gKiBNb3ZpZSBFeHRlbmRzIEJveDogVGhpcyBib3ggc2lnbmFscyB0byByZWFkZXJzIHRoYXQgdGhlIGZpbGUgaXMgZnJhZ21lbnRlZC4gQ29udGFpbnMgYSBzaW5nbGUgVHJhY2sgRXh0ZW5kcyBCb3hcbiAqIGZvciBlYWNoIHRyYWNrIGluIHRoZSBtb3ZpZS5cbiAqL1xuZXhwb3J0IGNvbnN0IG12ZXggPSAodHJhY2tEYXRhcykgPT4ge1xuICAgIHJldHVybiBib3goJ212ZXgnLCB1bmRlZmluZWQsIHRyYWNrRGF0YXMubWFwKHRyZXgpKTtcbn07XG4vKiogVHJhY2sgRXh0ZW5kcyBCb3g6IENvbnRhaW5zIHRoZSBkZWZhdWx0IHZhbHVlcyB1c2VkIGJ5IHRoZSBtb3ZpZSBmcmFnbWVudHMuICovXG5leHBvcnQgY29uc3QgdHJleCA9ICh0cmFja0RhdGEpID0+IHtcbiAgICByZXR1cm4gZnVsbEJveCgndHJleCcsIDAsIDAsIFtcbiAgICAgICAgdTMyKHRyYWNrRGF0YS50cmFjay5pZCksIC8vIFRyYWNrIElEXG4gICAgICAgIHUzMigxKSwgLy8gRGVmYXVsdCBzYW1wbGUgZGVzY3JpcHRpb24gaW5kZXhcbiAgICAgICAgdTMyKDApLCAvLyBEZWZhdWx0IHNhbXBsZSBkdXJhdGlvblxuICAgICAgICB1MzIoMCksIC8vIERlZmF1bHQgc2FtcGxlIHNpemVcbiAgICAgICAgdTMyKDApLCAvLyBEZWZhdWx0IHNhbXBsZSBmbGFnc1xuICAgIF0pO1xufTtcbi8qKlxuICogTW92aWUgRnJhZ21lbnQgQm94OiBUaGUgbW92aWUgZnJhZ21lbnRzIGV4dGVuZCB0aGUgcHJlc2VudGF0aW9uIGluIHRpbWUuIFRoZXkgcHJvdmlkZSB0aGUgaW5mb3JtYXRpb24gdGhhdCB3b3VsZFxuICogcHJldmlvdXNseSBoYXZlIGJlZW5cdGluIHRoZSBNb3ZpZSBCb3guXG4gKi9cbmV4cG9ydCBjb25zdCBtb29mID0gKHNlcXVlbmNlTnVtYmVyLCB0cmFja0RhdGFzKSA9PiB7XG4gICAgcmV0dXJuIGJveCgnbW9vZicsIHVuZGVmaW5lZCwgW1xuICAgICAgICBtZmhkKHNlcXVlbmNlTnVtYmVyKSxcbiAgICAgICAgLi4udHJhY2tEYXRhcy5tYXAodHJhZiksXG4gICAgXSk7XG59O1xuLyoqIE1vdmllIEZyYWdtZW50IEhlYWRlciBCb3g6IENvbnRhaW5zIGEgc2VxdWVuY2UgbnVtYmVyIGFzIGEgc2FmZXR5IGNoZWNrLiAqL1xuZXhwb3J0IGNvbnN0IG1maGQgPSAoc2VxdWVuY2VOdW1iZXIpID0+IHtcbiAgICByZXR1cm4gZnVsbEJveCgnbWZoZCcsIDAsIDAsIFtcbiAgICAgICAgdTMyKHNlcXVlbmNlTnVtYmVyKSwgLy8gU2VxdWVuY2UgbnVtYmVyXG4gICAgXSk7XG59O1xuY29uc3QgZnJhZ21lbnRTYW1wbGVGbGFncyA9IChzYW1wbGUpID0+IHtcbiAgICBsZXQgYnl0ZTEgPSAwO1xuICAgIGxldCBieXRlMiA9IDA7XG4gICAgY29uc3QgYnl0ZTMgPSAwO1xuICAgIGNvbnN0IGJ5dGU0ID0gMDtcbiAgICBjb25zdCBzYW1wbGVJc0RpZmZlcmVuY2VTYW1wbGUgPSBzYW1wbGUudHlwZSA9PT0gJ2RlbHRhJztcbiAgICBieXRlMiB8PSArc2FtcGxlSXNEaWZmZXJlbmNlU2FtcGxlO1xuICAgIGlmIChzYW1wbGVJc0RpZmZlcmVuY2VTYW1wbGUpIHtcbiAgICAgICAgYnl0ZTEgfD0gMTsgLy8gVGhlcmUgaXMgcmVkdW5kYW50IGNvZGluZyBpbiB0aGlzIHNhbXBsZVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYnl0ZTEgfD0gMjsgLy8gVGhlcmUgaXMgbm8gcmVkdW5kYW50IGNvZGluZyBpbiB0aGlzIHNhbXBsZVxuICAgIH1cbiAgICAvLyBOb3RlIHRoYXQgdGhlcmUgYXJlIGEgbG90IG9mIG90aGVyIGZsYWdzIHRvIHBvdGVudGlhbGx5IHNldCBoZXJlLCBidXQgbW9zdCBhcmUgaXJyZWxldmFudCAvIG5vbi1uZWNlc3NhcnlcbiAgICByZXR1cm4gYnl0ZTEgPDwgMjQgfCBieXRlMiA8PCAxNiB8IGJ5dGUzIDw8IDggfCBieXRlNDtcbn07XG4vKiogVHJhY2sgRnJhZ21lbnQgQm94ICovXG5leHBvcnQgY29uc3QgdHJhZiA9ICh0cmFja0RhdGEpID0+IHtcbiAgICByZXR1cm4gYm94KCd0cmFmJywgdW5kZWZpbmVkLCBbXG4gICAgICAgIHRmaGQodHJhY2tEYXRhKSxcbiAgICAgICAgdGZkdCh0cmFja0RhdGEpLFxuICAgICAgICB0cnVuKHRyYWNrRGF0YSksXG4gICAgXSk7XG59O1xuLyoqIFRyYWNrIEZyYWdtZW50IEhlYWRlciBCb3g6IFByb3ZpZGVzIGEgcmVmZXJlbmNlIHRvIHRoZSBleHRlbmRlZCB0cmFjaywgYW5kIGZsYWdzLiAqL1xuZXhwb3J0IGNvbnN0IHRmaGQgPSAodHJhY2tEYXRhKSA9PiB7XG4gICAgYXNzZXJ0KHRyYWNrRGF0YS5jdXJyZW50Q2h1bmspO1xuICAgIGxldCB0ZkZsYWdzID0gMDtcbiAgICB0ZkZsYWdzIHw9IDB4MDAwMDg7IC8vIERlZmF1bHQgc2FtcGxlIGR1cmF0aW9uIHByZXNlbnRcbiAgICB0ZkZsYWdzIHw9IDB4MDAwMTA7IC8vIERlZmF1bHQgc2FtcGxlIHNpemUgcHJlc2VudFxuICAgIHRmRmxhZ3MgfD0gMHgwMDAyMDsgLy8gRGVmYXVsdCBzYW1wbGUgZmxhZ3MgcHJlc2VudFxuICAgIHRmRmxhZ3MgfD0gMHgyMDAwMDsgLy8gRGVmYXVsdCBiYXNlIGlzIG1vb2ZcbiAgICAvLyBQcmVmZXIgdGhlIHNlY29uZCBzYW1wbGUgb3ZlciB0aGUgZmlyc3Qgb25lLCBhcyB0aGUgZmlyc3Qgb25lIGlzIGEgc3luYyBzYW1wbGUgYW5kIHRoZXJlZm9yZSB0aGUgXCJvZGQgb25lIG91dFwiXG4gICAgY29uc3QgcmVmZXJlbmNlU2FtcGxlID0gdHJhY2tEYXRhLmN1cnJlbnRDaHVuay5zYW1wbGVzWzFdID8/IHRyYWNrRGF0YS5jdXJyZW50Q2h1bmsuc2FtcGxlc1swXTtcbiAgICBjb25zdCByZWZlcmVuY2VTYW1wbGVJbmZvID0ge1xuICAgICAgICBkdXJhdGlvbjogcmVmZXJlbmNlU2FtcGxlLnRpbWVzY2FsZVVuaXRzVG9OZXh0U2FtcGxlLFxuICAgICAgICBzaXplOiByZWZlcmVuY2VTYW1wbGUuc2l6ZSxcbiAgICAgICAgZmxhZ3M6IGZyYWdtZW50U2FtcGxlRmxhZ3MocmVmZXJlbmNlU2FtcGxlKSxcbiAgICB9O1xuICAgIHJldHVybiBmdWxsQm94KCd0ZmhkJywgMCwgdGZGbGFncywgW1xuICAgICAgICB1MzIodHJhY2tEYXRhLnRyYWNrLmlkKSwgLy8gVHJhY2sgSURcbiAgICAgICAgdTMyKHJlZmVyZW5jZVNhbXBsZUluZm8uZHVyYXRpb24pLCAvLyBEZWZhdWx0IHNhbXBsZSBkdXJhdGlvblxuICAgICAgICB1MzIocmVmZXJlbmNlU2FtcGxlSW5mby5zaXplKSwgLy8gRGVmYXVsdCBzYW1wbGUgc2l6ZVxuICAgICAgICB1MzIocmVmZXJlbmNlU2FtcGxlSW5mby5mbGFncyksIC8vIERlZmF1bHQgc2FtcGxlIGZsYWdzXG4gICAgXSk7XG59O1xuLyoqXG4gKiBUcmFjayBGcmFnbWVudCBEZWNvZGUgVGltZSBCb3g6IFByb3ZpZGVzIHRoZSBhYnNvbHV0ZSBkZWNvZGUgdGltZSBvZiB0aGUgZmlyc3Qgc2FtcGxlIG9mIHRoZSBmcmFnbWVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBwZXJmb3JtaW5nIHJhbmRvbSBhY2Nlc3Mgb24gdGhlIG1lZGlhIGZpbGUuXG4gKi9cbmV4cG9ydCBjb25zdCB0ZmR0ID0gKHRyYWNrRGF0YSkgPT4ge1xuICAgIGFzc2VydCh0cmFja0RhdGEuY3VycmVudENodW5rKTtcbiAgICByZXR1cm4gZnVsbEJveCgndGZkdCcsIDEsIDAsIFtcbiAgICAgICAgdTY0KGludG9UaW1lc2NhbGUodHJhY2tEYXRhLmN1cnJlbnRDaHVuay5zdGFydFRpbWVzdGFtcCwgdHJhY2tEYXRhLnRpbWVzY2FsZSkpLCAvLyBCYXNlIE1lZGlhIERlY29kZSBUaW1lXG4gICAgXSk7XG59O1xuLyoqIFRyYWNrIFJ1biBCb3g6IFNwZWNpZmllcyBhIHJ1biBvZiBjb250aWd1b3VzIHNhbXBsZXMgZm9yIGEgZ2l2ZW4gdHJhY2suICovXG5leHBvcnQgY29uc3QgdHJ1biA9ICh0cmFja0RhdGEpID0+IHtcbiAgICBhc3NlcnQodHJhY2tEYXRhLmN1cnJlbnRDaHVuayk7XG4gICAgY29uc3QgYWxsU2FtcGxlRHVyYXRpb25zID0gdHJhY2tEYXRhLmN1cnJlbnRDaHVuay5zYW1wbGVzLm1hcCh4ID0+IHgudGltZXNjYWxlVW5pdHNUb05leHRTYW1wbGUpO1xuICAgIGNvbnN0IGFsbFNhbXBsZVNpemVzID0gdHJhY2tEYXRhLmN1cnJlbnRDaHVuay5zYW1wbGVzLm1hcCh4ID0+IHguc2l6ZSk7XG4gICAgY29uc3QgYWxsU2FtcGxlRmxhZ3MgPSB0cmFja0RhdGEuY3VycmVudENodW5rLnNhbXBsZXMubWFwKGZyYWdtZW50U2FtcGxlRmxhZ3MpO1xuICAgIGNvbnN0IGFsbFNhbXBsZUNvbXBvc2l0aW9uVGltZU9mZnNldHMgPSB0cmFja0RhdGEuY3VycmVudENodW5rLnNhbXBsZXNcbiAgICAgICAgLm1hcCh4ID0+IGludG9UaW1lc2NhbGUoeC50aW1lc3RhbXAgLSB4LmRlY29kZVRpbWVzdGFtcCwgdHJhY2tEYXRhLnRpbWVzY2FsZSkpO1xuICAgIGNvbnN0IHVuaXF1ZVNhbXBsZUR1cmF0aW9ucyA9IG5ldyBTZXQoYWxsU2FtcGxlRHVyYXRpb25zKTtcbiAgICBjb25zdCB1bmlxdWVTYW1wbGVTaXplcyA9IG5ldyBTZXQoYWxsU2FtcGxlU2l6ZXMpO1xuICAgIGNvbnN0IHVuaXF1ZVNhbXBsZUZsYWdzID0gbmV3IFNldChhbGxTYW1wbGVGbGFncyk7XG4gICAgY29uc3QgdW5pcXVlU2FtcGxlQ29tcG9zaXRpb25UaW1lT2Zmc2V0cyA9IG5ldyBTZXQoYWxsU2FtcGxlQ29tcG9zaXRpb25UaW1lT2Zmc2V0cyk7XG4gICAgY29uc3QgZmlyc3RTYW1wbGVGbGFnc1ByZXNlbnQgPSB1bmlxdWVTYW1wbGVGbGFncy5zaXplID09PSAyICYmIGFsbFNhbXBsZUZsYWdzWzBdICE9PSBhbGxTYW1wbGVGbGFnc1sxXTtcbiAgICBjb25zdCBzYW1wbGVEdXJhdGlvblByZXNlbnQgPSB1bmlxdWVTYW1wbGVEdXJhdGlvbnMuc2l6ZSA+IDE7XG4gICAgY29uc3Qgc2FtcGxlU2l6ZVByZXNlbnQgPSB1bmlxdWVTYW1wbGVTaXplcy5zaXplID4gMTtcbiAgICBjb25zdCBzYW1wbGVGbGFnc1ByZXNlbnQgPSAhZmlyc3RTYW1wbGVGbGFnc1ByZXNlbnQgJiYgdW5pcXVlU2FtcGxlRmxhZ3Muc2l6ZSA+IDE7XG4gICAgY29uc3Qgc2FtcGxlQ29tcG9zaXRpb25UaW1lT2Zmc2V0c1ByZXNlbnQgPSB1bmlxdWVTYW1wbGVDb21wb3NpdGlvblRpbWVPZmZzZXRzLnNpemUgPiAxIHx8IFsuLi51bmlxdWVTYW1wbGVDb21wb3NpdGlvblRpbWVPZmZzZXRzXS5zb21lKHggPT4geCAhPT0gMCk7XG4gICAgbGV0IGZsYWdzID0gMDtcbiAgICBmbGFncyB8PSAweDAwMDE7IC8vIERhdGEgb2Zmc2V0IHByZXNlbnRcbiAgICBmbGFncyB8PSAweDAwMDQgKiArZmlyc3RTYW1wbGVGbGFnc1ByZXNlbnQ7IC8vIEZpcnN0IHNhbXBsZSBmbGFncyBwcmVzZW50XG4gICAgZmxhZ3MgfD0gMHgwMTAwICogK3NhbXBsZUR1cmF0aW9uUHJlc2VudDsgLy8gU2FtcGxlIGR1cmF0aW9uIHByZXNlbnRcbiAgICBmbGFncyB8PSAweDAyMDAgKiArc2FtcGxlU2l6ZVByZXNlbnQ7IC8vIFNhbXBsZSBzaXplIHByZXNlbnRcbiAgICBmbGFncyB8PSAweDA0MDAgKiArc2FtcGxlRmxhZ3NQcmVzZW50OyAvLyBTYW1wbGUgZmxhZ3MgcHJlc2VudFxuICAgIGZsYWdzIHw9IDB4MDgwMCAqICtzYW1wbGVDb21wb3NpdGlvblRpbWVPZmZzZXRzUHJlc2VudDsgLy8gU2FtcGxlIGNvbXBvc2l0aW9uIHRpbWUgb2Zmc2V0cyBwcmVzZW50XG4gICAgcmV0dXJuIGZ1bGxCb3goJ3RydW4nLCAxLCBmbGFncywgW1xuICAgICAgICB1MzIodHJhY2tEYXRhLmN1cnJlbnRDaHVuay5zYW1wbGVzLmxlbmd0aCksIC8vIFNhbXBsZSBjb3VudFxuICAgICAgICB1MzIodHJhY2tEYXRhLmN1cnJlbnRDaHVuay5vZmZzZXQgLSB0cmFja0RhdGEuY3VycmVudENodW5rLm1vb2ZPZmZzZXQgfHwgMCksIC8vIERhdGEgb2Zmc2V0XG4gICAgICAgIGZpcnN0U2FtcGxlRmxhZ3NQcmVzZW50ID8gdTMyKGFsbFNhbXBsZUZsYWdzWzBdKSA6IFtdLFxuICAgICAgICB0cmFja0RhdGEuY3VycmVudENodW5rLnNhbXBsZXMubWFwKChfLCBpKSA9PiBbXG4gICAgICAgICAgICBzYW1wbGVEdXJhdGlvblByZXNlbnQgPyB1MzIoYWxsU2FtcGxlRHVyYXRpb25zW2ldKSA6IFtdLCAvLyBTYW1wbGUgZHVyYXRpb25cbiAgICAgICAgICAgIHNhbXBsZVNpemVQcmVzZW50ID8gdTMyKGFsbFNhbXBsZVNpemVzW2ldKSA6IFtdLCAvLyBTYW1wbGUgc2l6ZVxuICAgICAgICAgICAgc2FtcGxlRmxhZ3NQcmVzZW50ID8gdTMyKGFsbFNhbXBsZUZsYWdzW2ldKSA6IFtdLCAvLyBTYW1wbGUgZmxhZ3NcbiAgICAgICAgICAgIC8vIFNhbXBsZSBjb21wb3NpdGlvbiB0aW1lIG9mZnNldHNcbiAgICAgICAgICAgIHNhbXBsZUNvbXBvc2l0aW9uVGltZU9mZnNldHNQcmVzZW50ID8gaTMyKGFsbFNhbXBsZUNvbXBvc2l0aW9uVGltZU9mZnNldHNbaV0pIDogW10sXG4gICAgICAgIF0pLFxuICAgIF0pO1xufTtcbi8qKlxuICogTW92aWUgRnJhZ21lbnQgUmFuZG9tIEFjY2VzcyBCb3g6IEZvciBlYWNoIHRyYWNrLCBwcm92aWRlcyBwb2ludGVycyB0byBzeW5jIHNhbXBsZXMgd2l0aGluIHRoZSBmaWxlXG4gKiBmb3IgcmFuZG9tIGFjY2Vzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IG1mcmEgPSAodHJhY2tEYXRhcykgPT4ge1xuICAgIHJldHVybiBib3goJ21mcmEnLCB1bmRlZmluZWQsIFtcbiAgICAgICAgLi4udHJhY2tEYXRhcy5tYXAodGZyYSksXG4gICAgICAgIG1mcm8oKSxcbiAgICBdKTtcbn07XG4vKiogVHJhY2sgRnJhZ21lbnQgUmFuZG9tIEFjY2VzcyBCb3g6IFByb3ZpZGVzIHBvaW50ZXJzIHRvIHN5bmMgc2FtcGxlcyB3aXRoaW4gdGhlIGZpbGUgZm9yIHJhbmRvbSBhY2Nlc3MuICovXG5leHBvcnQgY29uc3QgdGZyYSA9ICh0cmFja0RhdGEsIHRyYWNrSW5kZXgpID0+IHtcbiAgICBjb25zdCB2ZXJzaW9uID0gMTsgLy8gVXNpbmcgdGhpcyB2ZXJzaW9uIGFsbG93cyB1cyB0byB1c2UgNjQtYml0IHRpbWUgYW5kIG9mZnNldCB2YWx1ZXNcbiAgICByZXR1cm4gZnVsbEJveCgndGZyYScsIHZlcnNpb24sIDAsIFtcbiAgICAgICAgdTMyKHRyYWNrRGF0YS50cmFjay5pZCksIC8vIFRyYWNrIElEXG4gICAgICAgIHUzMigwYjExMTExMSksIC8vIFRoaXMgc3BlY2lmaWVzIHRoYXQgdHJhZiBudW1iZXIsIHRydW4gbnVtYmVyIGFuZCBzYW1wbGUgbnVtYmVyIGFyZSAzMi1iaXQgaW50c1xuICAgICAgICB1MzIodHJhY2tEYXRhLmZpbmFsaXplZENodW5rcy5sZW5ndGgpLCAvLyBOdW1iZXIgb2YgZW50cmllc1xuICAgICAgICB0cmFja0RhdGEuZmluYWxpemVkQ2h1bmtzLm1hcChjaHVuayA9PiBbXG4gICAgICAgICAgICB1NjQoaW50b1RpbWVzY2FsZShjaHVuay5zYW1wbGVzWzBdLnRpbWVzdGFtcCwgdHJhY2tEYXRhLnRpbWVzY2FsZSkpLCAvLyBUaW1lIChpbiBwcmVzZW50YXRpb24gdGltZSlcbiAgICAgICAgICAgIHU2NChjaHVuay5tb29mT2Zmc2V0KSwgLy8gbW9vZiBvZmZzZXRcbiAgICAgICAgICAgIHUzMih0cmFja0luZGV4ICsgMSksIC8vIHRyYWYgbnVtYmVyXG4gICAgICAgICAgICB1MzIoMSksIC8vIHRydW4gbnVtYmVyXG4gICAgICAgICAgICB1MzIoMSksIC8vIFNhbXBsZSBudW1iZXJcbiAgICAgICAgXSksXG4gICAgXSk7XG59O1xuLyoqXG4gKiBNb3ZpZSBGcmFnbWVudCBSYW5kb20gQWNjZXNzIE9mZnNldCBCb3g6IFByb3ZpZGVzIHRoZSBzaXplIG9mIHRoZSBlbmNsb3NpbmcgbWZyYSBib3guIFRoaXMgYm94IGNhbiBiZSB1c2VkIGJ5IHJlYWRlcnNcbiAqIHRvIHF1aWNrbHkgbG9jYXRlIHRoZSBtZnJhIGJveCBieSBzZWFyY2hpbmcgZnJvbSB0aGUgZW5kIG9mIHRoZSBmaWxlLlxuICovXG5leHBvcnQgY29uc3QgbWZybyA9ICgpID0+IHtcbiAgICByZXR1cm4gZnVsbEJveCgnbWZybycsIDAsIDAsIFtcbiAgICAgICAgLy8gVGhpcyB2YWx1ZSBuZWVkcyB0byBiZSBvdmVyd3JpdHRlbiBtYW51YWxseSBmcm9tIHRoZSBvdXRzaWRlLCB3aGVyZSB0aGUgYWN0dWFsIHNpemUgb2YgdGhlIGVuY2xvc2luZyBtZnJhIGJveFxuICAgICAgICAvLyBpcyBrbm93blxuICAgICAgICB1MzIoMCksIC8vIFNpemVcbiAgICBdKTtcbn07XG4vKiogVlRUIEVtcHR5IEN1ZSBCb3ggKi9cbmV4cG9ydCBjb25zdCB2dHRlID0gKCkgPT4gYm94KCd2dHRlJyk7XG4vKiogVlRUIEN1ZSBCb3ggKi9cbmV4cG9ydCBjb25zdCB2dHRjID0gKHBheWxvYWQsIHRpbWVzdGFtcCwgaWRlbnRpZmllciwgc2V0dGluZ3MsIHNvdXJjZUlkKSA9PiBib3goJ3Z0dGMnLCB1bmRlZmluZWQsIFtcbiAgICBzb3VyY2VJZCAhPT0gbnVsbCA/IGJveCgndnNpZCcsIFtpMzIoc291cmNlSWQpXSkgOiBudWxsLFxuICAgIGlkZW50aWZpZXIgIT09IG51bGwgPyBib3goJ2lkZW4nLCBbLi4udGV4dEVuY29kZXIuZW5jb2RlKGlkZW50aWZpZXIpXSkgOiBudWxsLFxuICAgIHRpbWVzdGFtcCAhPT0gbnVsbCA/IGJveCgnY3RpbScsIFsuLi50ZXh0RW5jb2Rlci5lbmNvZGUoZm9ybWF0U3VidGl0bGVUaW1lc3RhbXAodGltZXN0YW1wKSldKSA6IG51bGwsXG4gICAgc2V0dGluZ3MgIT09IG51bGwgPyBib3goJ3N0dGcnLCBbLi4udGV4dEVuY29kZXIuZW5jb2RlKHNldHRpbmdzKV0pIDogbnVsbCxcbiAgICBib3goJ3BheWwnLCBbLi4udGV4dEVuY29kZXIuZW5jb2RlKHBheWxvYWQpXSksXG5dKTtcbi8qKiBWVFQgQWRkaXRpb25hbCBUZXh0IEJveCAqL1xuZXhwb3J0IGNvbnN0IHZ0dGEgPSAobm90ZXMpID0+IGJveCgndnR0YScsIFsuLi50ZXh0RW5jb2Rlci5lbmNvZGUobm90ZXMpXSk7XG4vKiogVXNlciBEYXRhIEJveCAqL1xuY29uc3QgdWR0YSA9IChtdXhlcikgPT4ge1xuICAgIGNvbnN0IGJveGVzID0gW107XG4gICAgLy8gRGVwZW5kaW5nIG9uIHRoZSBmb3JtYXQsIG1ldGFkYXRhIHRhZ3MgYXJlIHdyaXR0ZW4gZGlmZmVyZW50bHlcbiAgICBpZiAobXV4ZXIuaXNRdWlja1RpbWUpIHtcbiAgICAgICAgYWRkUXVpY2tUaW1lTWV0YWRhdGFUYWdCb3hlcyhib3hlcywgbXV4ZXIub3V0cHV0Ll9tZXRhZGF0YVRhZ3MpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgbWV0YUJveCA9IG1ldGEobXV4ZXIub3V0cHV0Ll9tZXRhZGF0YVRhZ3MpO1xuICAgICAgICBpZiAobWV0YUJveCkge1xuICAgICAgICAgICAgYm94ZXMucHVzaChtZXRhQm94KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYm94ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gYm94KCd1ZHRhJywgdW5kZWZpbmVkLCBib3hlcyk7XG59O1xuY29uc3QgYWRkUXVpY2tUaW1lTWV0YWRhdGFUYWdCb3hlcyA9IChib3hlcywgdGFncykgPT4ge1xuICAgIC8vIGh0dHBzOi8vZXhpZnRvb2wub3JnL1RhZ05hbWVzL1F1aWNrVGltZS5odG1sIChRdWlja1RpbWUgVXNlckRhdGEgVGFncylcbiAgICAvLyBGb3IgUXVpY2tUaW1lIGZpbGVzLCBtZXRhZGF0YSB0YWdzIGFyZSBkdW1wZWQgaW50byB0aGUgdWR0YSBib3hcbiAgICBmb3IgKGNvbnN0IHsga2V5LCB2YWx1ZSB9IG9mIGtleVZhbHVlSXRlcmF0b3IodGFncykpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJveGVzLnB1c2gobWV0YWRhdGFUYWdTdHJpbmdCb3hTaG9ydCgnwqluYW0nLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkZXNjcmlwdGlvbic6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBib3hlcy5wdXNoKG1ldGFkYXRhVGFnU3RyaW5nQm94U2hvcnQoJ8KpZGVzJywgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYXJ0aXN0JzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJveGVzLnB1c2gobWV0YWRhdGFUYWdTdHJpbmdCb3hTaG9ydCgnwqlBUlQnLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbGJ1bSc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBib3hlcy5wdXNoKG1ldGFkYXRhVGFnU3RyaW5nQm94U2hvcnQoJ8KpYWxiJywgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYWxidW1BcnRpc3QnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYm94ZXMucHVzaChtZXRhZGF0YVRhZ1N0cmluZ0JveFNob3J0KCdhbGJyJywgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZ2VucmUnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYm94ZXMucHVzaChtZXRhZGF0YVRhZ1N0cmluZ0JveFNob3J0KCfCqWdlbicsIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYm94ZXMucHVzaChtZXRhZGF0YVRhZ1N0cmluZ0JveFNob3J0KCfCqWRheScsIHZhbHVlLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYm94ZXMucHVzaChtZXRhZGF0YVRhZ1N0cmluZ0JveFNob3J0KCfCqWNtdCcsIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2x5cmljcyc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBib3hlcy5wdXNoKG1ldGFkYXRhVGFnU3RyaW5nQm94U2hvcnQoJ8KpbHlyJywgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmF3JzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGlzY051bWJlcic6XG4gICAgICAgICAgICBjYXNlICdkaXNjc1RvdGFsJzpcbiAgICAgICAgICAgIGNhc2UgJ3RyYWNrTnVtYmVyJzpcbiAgICAgICAgICAgIGNhc2UgJ3RyYWNrc1RvdGFsJzpcbiAgICAgICAgICAgIGNhc2UgJ2ltYWdlcyc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAvLyBOb3Qgd3JpdHRlbiBmb3IgUXVpY2tUaW1lIChjb21tb24gQXBwbGUgTClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogYXNzZXJ0TmV2ZXIoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodGFncy5yYXcpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGFncy5yYXcpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGFncy5yYXdba2V5XTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IGtleS5sZW5ndGggIT09IDQgfHwgYm94ZXMuc29tZSh4ID0+IHgudHlwZSA9PT0ga2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBib3hlcy5wdXNoKG1ldGFkYXRhVGFnU3RyaW5nQm94U2hvcnQoa2V5LCB2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgYm94ZXMucHVzaChib3goa2V5LCBBcnJheS5mcm9tKHZhbHVlKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IG1ldGFkYXRhVGFnU3RyaW5nQm94U2hvcnQgPSAobmFtZSwgdmFsdWUpID0+IHtcbiAgICBjb25zdCBlbmNvZGVkID0gdGV4dEVuY29kZXIuZW5jb2RlKHZhbHVlKTtcbiAgICByZXR1cm4gYm94KG5hbWUsIFtcbiAgICAgICAgdTE2KGVuY29kZWQubGVuZ3RoKSxcbiAgICAgICAgdTE2KGdldExhbmd1YWdlQ29kZUludCgndW5kJykpLFxuICAgICAgICBBcnJheS5mcm9tKGVuY29kZWQpLFxuICAgIF0pO1xufTtcbmNvbnN0IERBVEFfQk9YX01JTUVfVFlQRV9NQVAgPSB7XG4gICAgJ2ltYWdlL2pwZWcnOiAxMyxcbiAgICAnaW1hZ2UvcG5nJzogMTQsXG4gICAgJ2ltYWdlL2JtcCc6IDI3LFxufTtcbi8qKiBNZXRhZGF0YSBCb3ggKi9cbmNvbnN0IG1ldGEgPSAodGFncykgPT4ge1xuICAgIGNvbnN0IGJveGVzID0gW107XG4gICAgLy8gaHR0cHM6Ly9leGlmdG9vbC5vcmcvVGFnTmFtZXMvUXVpY2tUaW1lLmh0bWwgKFF1aWNrVGltZSBJdGVtTGlzdCBUYWdzKVxuICAgIC8vIFRoaXMgaXMgdGhlIG1ldGFkYXRhIGZvcm1hdCB1c2VkIGZvciBNUDQgZmlsZXNcbiAgICBmb3IgKGNvbnN0IHsga2V5LCB2YWx1ZSB9IG9mIGtleVZhbHVlSXRlcmF0b3IodGFncykpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJveGVzLnB1c2gobWV0YWRhdGFUYWdTdHJpbmdCb3hMb25nKCfCqW5hbScsIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Rlc2NyaXB0aW9uJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJveGVzLnB1c2gobWV0YWRhdGFUYWdTdHJpbmdCb3hMb25nKCfCqWRlcycsIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FydGlzdCc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBib3hlcy5wdXNoKG1ldGFkYXRhVGFnU3RyaW5nQm94TG9uZygnwqlBUlQnLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbGJ1bSc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBib3hlcy5wdXNoKG1ldGFkYXRhVGFnU3RyaW5nQm94TG9uZygnwqlhbGInLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbGJ1bUFydGlzdCc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBib3hlcy5wdXNoKG1ldGFkYXRhVGFnU3RyaW5nQm94TG9uZygnYUFSVCcsIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYm94ZXMucHVzaChtZXRhZGF0YVRhZ1N0cmluZ0JveExvbmcoJ8KpY210JywgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZ2VucmUnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYm94ZXMucHVzaChtZXRhZGF0YVRhZ1N0cmluZ0JveExvbmcoJ8KpZ2VuJywgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbHlyaWNzJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJveGVzLnB1c2gobWV0YWRhdGFUYWdTdHJpbmdCb3hMb25nKCfCqWx5cicsIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYm94ZXMucHVzaChtZXRhZGF0YVRhZ1N0cmluZ0JveExvbmcoJ8KpZGF5JywgdmFsdWUudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaW1hZ2VzJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW1hZ2Ugb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZS5raW5kICE9PSAnY292ZXJGcm9udCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJveGVzLnB1c2goYm94KCdjb3ZyJywgdW5kZWZpbmVkLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94KCdkYXRhJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1MzIoREFUQV9CT1hfTUlNRV9UWVBFX01BUFtpbWFnZS5taW1lVHlwZV0gPz8gMCksIC8vIFR5cGUgaW5kaWNhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUzMigwKSwgLy8gTG9jYWxlIGluZGljYXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGltYWdlLmRhdGEpLCAvLyBLaW5kYSBzbG93LCBob3BlZnVsbHkgdGVtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RyYWNrTnVtYmVyJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJveGVzLnB1c2goYm94KCd0cmtuJywgdW5kZWZpbmVkLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBib3goJ2RhdGEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdTMyKDApLCAvLyA4IGJ5dGVzIGVtcHR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdTMyKDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUxNigwKSwgLy8gRW1wdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1MTYodmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUxNih0YWdzLnRyYWNrc1RvdGFsID8/IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUxNigwKSwgLy8gRW1wdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Rpc2NOdW1iZXInOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYm94ZXMucHVzaChib3goJ2Rpc2MnLCB1bmRlZmluZWQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveCgnZGF0YScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1MzIoMCksIC8vIDggYnl0ZXMgZW1wdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1MzIoMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdTE2KDApLCAvLyBFbXB0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUxNih2YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdTE2KHRhZ3MuZGlzY3NUb3RhbCA/PyAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1MTYoMCksIC8vIEVtcHR5XG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0cmFja3NUb3RhbCc6XG4gICAgICAgICAgICBjYXNlICdkaXNjc1RvdGFsJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGFyZSBpbmNsdWRlZCB3aXRoICd0cmFja051bWJlcicgYW5kICdkaXNjTnVtYmVyJyByZXNwZWN0aXZlbHlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmF3JzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogYXNzZXJ0TmV2ZXIoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodGFncy5yYXcpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGFncy5yYXcpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGFncy5yYXdba2V5XTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IGtleS5sZW5ndGggIT09IDQgfHwgYm94ZXMuc29tZSh4ID0+IHgudHlwZSA9PT0ga2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBib3hlcy5wdXNoKG1ldGFkYXRhVGFnU3RyaW5nQm94TG9uZyhrZXksIHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgICAgICBib3hlcy5wdXNoKGJveChrZXksIHVuZGVmaW5lZCwgW1xuICAgICAgICAgICAgICAgICAgICBib3goJ2RhdGEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICB1MzIoMCksIC8vIFR5cGUgaW5kaWNhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICB1MzIoMCksIC8vIExvY2FsZSBpbmRpY2F0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20odmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFJpY2hJbWFnZURhdGEpIHtcbiAgICAgICAgICAgICAgICBib3hlcy5wdXNoKGJveChrZXksIHVuZGVmaW5lZCwgW1xuICAgICAgICAgICAgICAgICAgICBib3goJ2RhdGEnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICB1MzIoREFUQV9CT1hfTUlNRV9UWVBFX01BUFt2YWx1ZS5taW1lVHlwZV0gPz8gMCksIC8vIFR5cGUgaW5kaWNhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICB1MzIoMCksIC8vIExvY2FsZSBpbmRpY2F0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20odmFsdWUuZGF0YSksIC8vIEtpbmRhIHNsb3csIGhvcGVmdWxseSB0ZW1wXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYm94ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZnVsbEJveCgnbWV0YScsIDAsIDAsIHVuZGVmaW5lZCwgW1xuICAgICAgICBoZGxyKGZhbHNlLCAnbWRpcicsICcnLCAnYXBwbCcpLFxuICAgICAgICBib3goJ2lsc3QnLCB1bmRlZmluZWQsIGJveGVzKSxcbiAgICBdKTtcbn07XG5jb25zdCBtZXRhZGF0YVRhZ1N0cmluZ0JveExvbmcgPSAobmFtZSwgdmFsdWUpID0+IHtcbiAgICByZXR1cm4gYm94KG5hbWUsIHVuZGVmaW5lZCwgW1xuICAgICAgICBib3goJ2RhdGEnLCBbXG4gICAgICAgICAgICB1MzIoMSksIC8vIFR5cGUgaW5kaWNhdG9yIChVVEYtOClcbiAgICAgICAgICAgIHUzMigwKSwgLy8gTG9jYWxlIGluZGljYXRvclxuICAgICAgICAgICAgLi4udGV4dEVuY29kZXIuZW5jb2RlKHZhbHVlKSxcbiAgICAgICAgXSksXG4gICAgXSk7XG59O1xuY29uc3QgVklERU9fQ09ERUNfVE9fQk9YX05BTUUgPSB7XG4gICAgYXZjOiAnYXZjMScsXG4gICAgaGV2YzogJ2h2YzEnLFxuICAgIHZwODogJ3ZwMDgnLFxuICAgIHZwOTogJ3ZwMDknLFxuICAgIGF2MTogJ2F2MDEnLFxufTtcbmNvbnN0IFZJREVPX0NPREVDX1RPX0NPTkZJR1VSQVRJT05fQk9YID0ge1xuICAgIGF2YzogYXZjQyxcbiAgICBoZXZjOiBodmNDLFxuICAgIHZwODogdnBjQyxcbiAgICB2cDk6IHZwY0MsXG4gICAgYXYxOiBhdjFDLFxufTtcbmNvbnN0IGF1ZGlvQ29kZWNUb0JveE5hbWUgPSAoY29kZWMsIGlzUXVpY2tUaW1lKSA9PiB7XG4gICAgc3dpdGNoIChjb2RlYykge1xuICAgICAgICBjYXNlICdhYWMnOiByZXR1cm4gJ21wNGEnO1xuICAgICAgICBjYXNlICdtcDMnOiByZXR1cm4gJ21wNGEnO1xuICAgICAgICBjYXNlICdvcHVzJzogcmV0dXJuICdPcHVzJztcbiAgICAgICAgY2FzZSAndm9yYmlzJzogcmV0dXJuICdtcDRhJztcbiAgICAgICAgY2FzZSAnZmxhYyc6IHJldHVybiAnZkxhQyc7XG4gICAgICAgIGNhc2UgJ3VsYXcnOiByZXR1cm4gJ3VsYXcnO1xuICAgICAgICBjYXNlICdhbGF3JzogcmV0dXJuICdhbGF3JztcbiAgICAgICAgY2FzZSAncGNtLXU4JzogcmV0dXJuICdyYXcgJztcbiAgICAgICAgY2FzZSAncGNtLXM4JzogcmV0dXJuICdzb3d0JztcbiAgICB9XG4gICAgLy8gTG9naWMgZGl2ZXJnZXMgaGVyZVxuICAgIGlmIChpc1F1aWNrVGltZSkge1xuICAgICAgICBzd2l0Y2ggKGNvZGVjKSB7XG4gICAgICAgICAgICBjYXNlICdwY20tczE2JzogcmV0dXJuICdzb3d0JztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1zMTZiZSc6IHJldHVybiAndHdvcyc7XG4gICAgICAgICAgICBjYXNlICdwY20tczI0JzogcmV0dXJuICdpbjI0JztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1zMjRiZSc6IHJldHVybiAnaW4yNCc7XG4gICAgICAgICAgICBjYXNlICdwY20tczMyJzogcmV0dXJuICdpbjMyJztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1zMzJiZSc6IHJldHVybiAnaW4zMic7XG4gICAgICAgICAgICBjYXNlICdwY20tZjMyJzogcmV0dXJuICdmbDMyJztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1mMzJiZSc6IHJldHVybiAnZmwzMic7XG4gICAgICAgICAgICBjYXNlICdwY20tZjY0JzogcmV0dXJuICdmbDY0JztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1mNjRiZSc6IHJldHVybiAnZmw2NCc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN3aXRjaCAoY29kZWMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1zMTYnOiByZXR1cm4gJ2lwY20nO1xuICAgICAgICAgICAgY2FzZSAncGNtLXMxNmJlJzogcmV0dXJuICdpcGNtJztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1zMjQnOiByZXR1cm4gJ2lwY20nO1xuICAgICAgICAgICAgY2FzZSAncGNtLXMyNGJlJzogcmV0dXJuICdpcGNtJztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1zMzInOiByZXR1cm4gJ2lwY20nO1xuICAgICAgICAgICAgY2FzZSAncGNtLXMzMmJlJzogcmV0dXJuICdpcGNtJztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1mMzInOiByZXR1cm4gJ2ZwY20nO1xuICAgICAgICAgICAgY2FzZSAncGNtLWYzMmJlJzogcmV0dXJuICdmcGNtJztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1mNjQnOiByZXR1cm4gJ2ZwY20nO1xuICAgICAgICAgICAgY2FzZSAncGNtLWY2NGJlJzogcmV0dXJuICdmcGNtJztcbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCBhdWRpb0NvZGVjVG9Db25maWd1cmF0aW9uQm94ID0gKGNvZGVjLCBpc1F1aWNrVGltZSkgPT4ge1xuICAgIHN3aXRjaCAoY29kZWMpIHtcbiAgICAgICAgY2FzZSAnYWFjJzogcmV0dXJuIGVzZHM7XG4gICAgICAgIGNhc2UgJ21wMyc6IHJldHVybiBlc2RzO1xuICAgICAgICBjYXNlICdvcHVzJzogcmV0dXJuIGRPcHM7XG4gICAgICAgIGNhc2UgJ3ZvcmJpcyc6IHJldHVybiBlc2RzO1xuICAgICAgICBjYXNlICdmbGFjJzogcmV0dXJuIGRmTGE7XG4gICAgfVxuICAgIC8vIExvZ2ljIGRpdmVyZ2VzIGhlcmVcbiAgICBpZiAoaXNRdWlja1RpbWUpIHtcbiAgICAgICAgc3dpdGNoIChjb2RlYykge1xuICAgICAgICAgICAgY2FzZSAncGNtLXMyNCc6IHJldHVybiB3YXZlO1xuICAgICAgICAgICAgY2FzZSAncGNtLXMyNGJlJzogcmV0dXJuIHdhdmU7XG4gICAgICAgICAgICBjYXNlICdwY20tczMyJzogcmV0dXJuIHdhdmU7XG4gICAgICAgICAgICBjYXNlICdwY20tczMyYmUnOiByZXR1cm4gd2F2ZTtcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1mMzInOiByZXR1cm4gd2F2ZTtcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1mMzJiZSc6IHJldHVybiB3YXZlO1xuICAgICAgICAgICAgY2FzZSAncGNtLWY2NCc6IHJldHVybiB3YXZlO1xuICAgICAgICAgICAgY2FzZSAncGNtLWY2NGJlJzogcmV0dXJuIHdhdmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN3aXRjaCAoY29kZWMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1zMTYnOiByZXR1cm4gcGNtQztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1zMTZiZSc6IHJldHVybiBwY21DO1xuICAgICAgICAgICAgY2FzZSAncGNtLXMyNCc6IHJldHVybiBwY21DO1xuICAgICAgICAgICAgY2FzZSAncGNtLXMyNGJlJzogcmV0dXJuIHBjbUM7XG4gICAgICAgICAgICBjYXNlICdwY20tczMyJzogcmV0dXJuIHBjbUM7XG4gICAgICAgICAgICBjYXNlICdwY20tczMyYmUnOiByZXR1cm4gcGNtQztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1mMzInOiByZXR1cm4gcGNtQztcbiAgICAgICAgICAgIGNhc2UgJ3BjbS1mMzJiZSc6IHJldHVybiBwY21DO1xuICAgICAgICAgICAgY2FzZSAncGNtLWY2NCc6IHJldHVybiBwY21DO1xuICAgICAgICAgICAgY2FzZSAncGNtLWY2NGJlJzogcmV0dXJuIHBjbUM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuY29uc3QgU1VCVElUTEVfQ09ERUNfVE9fQk9YX05BTUUgPSB7XG4gICAgd2VidnR0OiAnd3Z0dCcsXG59O1xuY29uc3QgU1VCVElUTEVfQ09ERUNfVE9fQ09ORklHVVJBVElPTl9CT1ggPSB7XG4gICAgd2VidnR0OiB2dHRDLFxufTtcbmNvbnN0IGdldExhbmd1YWdlQ29kZUludCA9IChjb2RlKSA9PiB7XG4gICAgYXNzZXJ0KGNvZGUubGVuZ3RoID09PSAzKTtcbiAgICA7XG4gICAgbGV0IGxhbmd1YWdlID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICBsYW5ndWFnZSA8PD0gNTtcbiAgICAgICAgbGFuZ3VhZ2UgKz0gY29kZS5jaGFyQ29kZUF0KGkpIC0gMHg2MDtcbiAgICB9XG4gICAgcmV0dXJuIGxhbmd1YWdlO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-boxes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-misc.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-misc.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildIsobmffMimeType: function() { return /* binding */ buildIsobmffMimeType; }\n/* harmony export */ });\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nconst buildIsobmffMimeType = (info) => {\n    const base = info.hasVideo\n        ? 'video/'\n        : info.hasAudio\n            ? 'audio/'\n            : 'application/';\n    let string = base + (info.isQuickTime ? 'quicktime' : 'mp4');\n    if (info.codecStrings.length > 0) {\n        const uniqueCodecMimeTypes = [...new Set(info.codecStrings)];\n        string += `; codecs=\"${uniqueCodecMimeTypes.join(', ')}\"`;\n    }\n    return string;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvaXNvYm1mZi9pc29ibWZmLW1pc2MuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFVBQVUsZ0NBQWdDO0FBQy9EO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVkaWFidW5ueS9kaXN0L21vZHVsZXMvc3JjL2lzb2JtZmYvaXNvYm1mZi1taXNjLmpzPzhlYmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUtcHJlc2VudCwgVmFuaWxhZ3kgYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwczovL21vemlsbGEub3JnL01QTC8yLjAvLlxuICovXG5leHBvcnQgY29uc3QgYnVpbGRJc29ibWZmTWltZVR5cGUgPSAoaW5mbykgPT4ge1xuICAgIGNvbnN0IGJhc2UgPSBpbmZvLmhhc1ZpZGVvXG4gICAgICAgID8gJ3ZpZGVvLydcbiAgICAgICAgOiBpbmZvLmhhc0F1ZGlvXG4gICAgICAgICAgICA/ICdhdWRpby8nXG4gICAgICAgICAgICA6ICdhcHBsaWNhdGlvbi8nO1xuICAgIGxldCBzdHJpbmcgPSBiYXNlICsgKGluZm8uaXNRdWlja1RpbWUgPyAncXVpY2t0aW1lJyA6ICdtcDQnKTtcbiAgICBpZiAoaW5mby5jb2RlY1N0cmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCB1bmlxdWVDb2RlY01pbWVUeXBlcyA9IFsuLi5uZXcgU2V0KGluZm8uY29kZWNTdHJpbmdzKV07XG4gICAgICAgIHN0cmluZyArPSBgOyBjb2RlY3M9XCIke3VuaXF1ZUNvZGVjTWltZVR5cGVzLmpvaW4oJywgJyl9XCJgO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-misc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-muxer.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-muxer.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GLOBAL_TIMESCALE: function() { return /* binding */ GLOBAL_TIMESCALE; },\n/* harmony export */   IsobmffMuxer: function() { return /* binding */ IsobmffMuxer; },\n/* harmony export */   getTrackMetadata: function() { return /* binding */ getTrackMetadata; },\n/* harmony export */   intoTimescale: function() { return /* binding */ intoTimescale; }\n/* harmony export */ });\n/* harmony import */ var _isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isobmff-boxes.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-boxes.js\");\n/* harmony import */ var _muxer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/muxer.js\");\n/* harmony import */ var _writer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../writer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/writer.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _output_format_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../output-format.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/output-format.js\");\n/* harmony import */ var _subtitles_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../subtitles.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/subtitles.js\");\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _target_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../target.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/target.js\");\n/* harmony import */ var _codec_data_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../codec-data.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec-data.js\");\n/* harmony import */ var _isobmff_misc_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isobmff-misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-misc.js\");\n/* harmony import */ var _isobmff_reader_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./isobmff-reader.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-reader.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n\n\n\n\n\n\nconst GLOBAL_TIMESCALE = 1000;\nconst TIMESTAMP_OFFSET = 2_082_844_800; // Seconds between Jan 1 1904 and Jan 1 1970\nconst getTrackMetadata = (trackData) => {\n    const metadata = {};\n    const track = trackData.track;\n    if (track.metadata.name !== undefined) {\n        metadata.name = track.metadata.name;\n    }\n    return metadata;\n};\nconst intoTimescale = (timeInSeconds, timescale, round = true) => {\n    const value = timeInSeconds * timescale;\n    return round ? Math.round(value) : value;\n};\nclass IsobmffMuxer extends _muxer_js__WEBPACK_IMPORTED_MODULE_0__.Muxer {\n    constructor(output, format) {\n        super(output);\n        this.auxTarget = new _target_js__WEBPACK_IMPORTED_MODULE_1__.BufferTarget();\n        this.auxWriter = this.auxTarget._createWriter();\n        this.auxBoxWriter = new _isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.IsobmffBoxWriter(this.auxWriter);\n        this.mdat = null;\n        this.trackDatas = [];\n        this.allTracksKnown = (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.promiseWithResolvers)();\n        this.creationTime = Math.floor(Date.now() / 1000) + TIMESTAMP_OFFSET;\n        this.finalizedChunks = [];\n        this.nextFragmentNumber = 1;\n        // Only relevant for fragmented files, to make sure new fragments start with the highest timestamp seen so far\n        this.maxWrittenTimestamp = -Infinity;\n        this.format = format;\n        this.writer = output._writer;\n        this.boxWriter = new _isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.IsobmffBoxWriter(this.writer);\n        this.isQuickTime = format instanceof _output_format_js__WEBPACK_IMPORTED_MODULE_4__.MovOutputFormat;\n        // If the fastStart option isn't defined, enable in-memory fast start if the target is an ArrayBuffer, as the\n        // memory usage remains identical\n        const fastStartDefault = this.writer instanceof _writer_js__WEBPACK_IMPORTED_MODULE_5__.BufferTargetWriter ? 'in-memory' : false;\n        this.fastStart = format._options.fastStart ?? fastStartDefault;\n        this.isFragmented = this.fastStart === 'fragmented';\n        if (this.fastStart === 'in-memory' || this.isFragmented) {\n            this.writer.ensureMonotonicity = true;\n        }\n        this.minimumFragmentDuration = format._options.minimumFragmentDuration ?? 1;\n    }\n    async start() {\n        const release = await this.mutex.acquire();\n        const holdsAvc = this.output._tracks.some(x => x.type === 'video' && x.source._codec === 'avc');\n        // Write the header\n        {\n            if (this.format._options.onFtyp) {\n                this.writer.startTrackingWrites();\n            }\n            this.boxWriter.writeBox((0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.ftyp)({\n                isQuickTime: this.isQuickTime,\n                holdsAvc: holdsAvc,\n                fragmented: this.isFragmented,\n            }));\n            if (this.format._options.onFtyp) {\n                const { data, start } = this.writer.stopTrackingWrites();\n                this.format._options.onFtyp(data, start);\n            }\n        }\n        if (this.fastStart === 'in-memory') {\n            this.mdat = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.mdat)(false);\n        }\n        else if (this.isFragmented) {\n            // We write the moov box once we write out the first fragment to make sure we get the decoder configs\n        }\n        else {\n            if (this.format._options.onMdat) {\n                this.writer.startTrackingWrites();\n            }\n            this.mdat = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.mdat)(true); // Reserve large size by default, can refine this when finalizing.\n            this.boxWriter.writeBox(this.mdat);\n        }\n        await this.writer.flush();\n        release();\n    }\n    allTracksAreKnown() {\n        for (const track of this.output._tracks) {\n            if (!track.source._closed && !this.trackDatas.some(x => x.track === track)) {\n                return false; // We haven't seen a sample from this open track yet\n            }\n        }\n        return true;\n    }\n    async getMimeType() {\n        await this.allTracksKnown.promise;\n        const codecStrings = this.trackDatas.map((trackData) => {\n            if (trackData.type === 'video') {\n                return trackData.info.decoderConfig.codec;\n            }\n            else if (trackData.type === 'audio') {\n                return trackData.info.decoderConfig.codec;\n            }\n            else {\n                const map = {\n                    webvtt: 'wvtt',\n                };\n                return map[trackData.track.source._codec];\n            }\n        });\n        return (0,_isobmff_misc_js__WEBPACK_IMPORTED_MODULE_6__.buildIsobmffMimeType)({\n            isQuickTime: this.isQuickTime,\n            hasVideo: this.trackDatas.some(x => x.type === 'video'),\n            hasAudio: this.trackDatas.some(x => x.type === 'audio'),\n            codecStrings,\n        });\n    }\n    getVideoTrackData(track, packet, meta) {\n        const existingTrackData = this.trackDatas.find(x => x.track === track);\n        if (existingTrackData) {\n            return existingTrackData;\n        }\n        (0,_codec_js__WEBPACK_IMPORTED_MODULE_7__.validateVideoChunkMetadata)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(meta.decoderConfig);\n        const decoderConfig = { ...meta.decoderConfig };\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(decoderConfig.codedWidth !== undefined);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(decoderConfig.codedHeight !== undefined);\n        let requiresAnnexBTransformation = false;\n        if (track.source._codec === 'avc' && !decoderConfig.description) {\n            // ISOBMFF can only hold AVC in the AVCC format, not in Annex B, but the missing description indicates\n            // Annex B. This means we'll need to do some converterino.\n            const decoderConfigurationRecord = (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_8__.extractAvcDecoderConfigurationRecord)(packet.data);\n            if (!decoderConfigurationRecord) {\n                throw new Error('Couldn\\'t extract an AVCDecoderConfigurationRecord from the AVC packet. Make sure the packets are'\n                    + ' in Annex B format (as specified in ITU-T-REC-H.264) when not providing a description, or'\n                    + ' provide a description (must be an AVCDecoderConfigurationRecord as specified in ISO 14496-15)'\n                    + ' and ensure the packets are in AVCC format.');\n            }\n            decoderConfig.description = (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_8__.serializeAvcDecoderConfigurationRecord)(decoderConfigurationRecord);\n            requiresAnnexBTransformation = true;\n        }\n        else if (track.source._codec === 'hevc' && !decoderConfig.description) {\n            // ISOBMFF can only hold HEVC in the HEVC format, not in Annex B, but the missing description indicates\n            // Annex B. This means we'll need to do some converterino.\n            const decoderConfigurationRecord = (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_8__.extractHevcDecoderConfigurationRecord)(packet.data);\n            if (!decoderConfigurationRecord) {\n                throw new Error('Couldn\\'t extract an HEVCDecoderConfigurationRecord from the HEVC packet. Make sure the packets'\n                    + ' are in Annex B format (as specified in ITU-T-REC-H.265) when not providing a description, or'\n                    + ' provide a description (must be an HEVCDecoderConfigurationRecord as specified in ISO 14496-15)'\n                    + ' and ensure the packets are in HEVC format.');\n            }\n            decoderConfig.description = (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_8__.serializeHevcDecoderConfigurationRecord)(decoderConfigurationRecord);\n            requiresAnnexBTransformation = true;\n        }\n        // The frame rate set by the user may not be an integer. Since timescale is an integer, we'll approximate the\n        // frame time (inverse of frame rate) with a rational number, then use that approximation's denominator\n        // as the timescale.\n        const timescale = (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.computeRationalApproximation)(1 / (track.metadata.frameRate ?? 57600), 1e6).denominator;\n        const newTrackData = {\n            muxer: this,\n            track,\n            type: 'video',\n            info: {\n                width: decoderConfig.codedWidth,\n                height: decoderConfig.codedHeight,\n                decoderConfig: decoderConfig,\n                requiresAnnexBTransformation,\n            },\n            timescale,\n            samples: [],\n            sampleQueue: [],\n            timestampProcessingQueue: [],\n            timeToSampleTable: [],\n            compositionTimeOffsetTable: [],\n            lastTimescaleUnits: null,\n            lastSample: null,\n            finalizedChunks: [],\n            currentChunk: null,\n            compactlyCodedChunkTable: [],\n        };\n        this.trackDatas.push(newTrackData);\n        this.trackDatas.sort((a, b) => a.track.id - b.track.id);\n        if (this.allTracksAreKnown()) {\n            this.allTracksKnown.resolve();\n        }\n        return newTrackData;\n    }\n    getAudioTrackData(track, meta) {\n        const existingTrackData = this.trackDatas.find(x => x.track === track);\n        if (existingTrackData) {\n            return existingTrackData;\n        }\n        (0,_codec_js__WEBPACK_IMPORTED_MODULE_7__.validateAudioChunkMetadata)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(meta.decoderConfig);\n        const newTrackData = {\n            muxer: this,\n            track,\n            type: 'audio',\n            info: {\n                numberOfChannels: meta.decoderConfig.numberOfChannels,\n                sampleRate: meta.decoderConfig.sampleRate,\n                decoderConfig: meta.decoderConfig,\n                requiresPcmTransformation: !this.isFragmented\n                    && _codec_js__WEBPACK_IMPORTED_MODULE_7__.PCM_AUDIO_CODECS.includes(track.source._codec),\n            },\n            timescale: meta.decoderConfig.sampleRate,\n            samples: [],\n            sampleQueue: [],\n            timestampProcessingQueue: [],\n            timeToSampleTable: [],\n            compositionTimeOffsetTable: [],\n            lastTimescaleUnits: null,\n            lastSample: null,\n            finalizedChunks: [],\n            currentChunk: null,\n            compactlyCodedChunkTable: [],\n        };\n        this.trackDatas.push(newTrackData);\n        this.trackDatas.sort((a, b) => a.track.id - b.track.id);\n        if (this.allTracksAreKnown()) {\n            this.allTracksKnown.resolve();\n        }\n        return newTrackData;\n    }\n    getSubtitleTrackData(track, meta) {\n        const existingTrackData = this.trackDatas.find(x => x.track === track);\n        if (existingTrackData) {\n            return existingTrackData;\n        }\n        (0,_codec_js__WEBPACK_IMPORTED_MODULE_7__.validateSubtitleMetadata)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(meta.config);\n        const newTrackData = {\n            muxer: this,\n            track,\n            type: 'subtitle',\n            info: {\n                config: meta.config,\n            },\n            timescale: 1000, // Reasonable\n            samples: [],\n            sampleQueue: [],\n            timestampProcessingQueue: [],\n            timeToSampleTable: [],\n            compositionTimeOffsetTable: [],\n            lastTimescaleUnits: null,\n            lastSample: null,\n            finalizedChunks: [],\n            currentChunk: null,\n            compactlyCodedChunkTable: [],\n            lastCueEndTimestamp: 0,\n            cueQueue: [],\n            nextSourceId: 0,\n            cueToSourceId: new WeakMap(),\n        };\n        this.trackDatas.push(newTrackData);\n        this.trackDatas.sort((a, b) => a.track.id - b.track.id);\n        if (this.allTracksAreKnown()) {\n            this.allTracksKnown.resolve();\n        }\n        return newTrackData;\n    }\n    async addEncodedVideoPacket(track, packet, meta) {\n        const release = await this.mutex.acquire();\n        try {\n            const trackData = this.getVideoTrackData(track, packet, meta);\n            let packetData = packet.data;\n            if (trackData.info.requiresAnnexBTransformation) {\n                const transformedData = (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_8__.transformAnnexBToLengthPrefixed)(packetData);\n                if (!transformedData) {\n                    throw new Error('Failed to transform packet data. Make sure all packets are provided in Annex B format, as'\n                        + ' specified in ITU-T-REC-H.264 and ITU-T-REC-H.265.');\n                }\n                packetData = transformedData;\n            }\n            const timestamp = this.validateAndNormalizeTimestamp(trackData.track, packet.timestamp, packet.type === 'key');\n            const internalSample = this.createSampleForTrack(trackData, packetData, timestamp, packet.duration, packet.type);\n            await this.registerSample(trackData, internalSample);\n        }\n        finally {\n            release();\n        }\n    }\n    async addEncodedAudioPacket(track, packet, meta) {\n        const release = await this.mutex.acquire();\n        try {\n            const trackData = this.getAudioTrackData(track, meta);\n            const timestamp = this.validateAndNormalizeTimestamp(trackData.track, packet.timestamp, packet.type === 'key');\n            const internalSample = this.createSampleForTrack(trackData, packet.data, timestamp, packet.duration, packet.type);\n            if (trackData.info.requiresPcmTransformation) {\n                await this.maybePadWithSilence(trackData, timestamp);\n            }\n            await this.registerSample(trackData, internalSample);\n        }\n        finally {\n            release();\n        }\n    }\n    async maybePadWithSilence(trackData, untilTimestamp) {\n        // The PCM transformation assumes that all samples are contiguous. This is not something that is enforced, so\n        // we need to pad the \"holes\" in between samples (and before the first sample) with additional\n        // \"silence samples\".\n        const lastSample = (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.last)(trackData.samples);\n        const lastEndTimestamp = lastSample\n            ? lastSample.timestamp + lastSample.duration\n            : 0;\n        const delta = untilTimestamp - lastEndTimestamp;\n        const deltaInTimescale = intoTimescale(delta, trackData.timescale);\n        if (deltaInTimescale > 0) {\n            const { sampleSize, silentValue } = (0,_codec_js__WEBPACK_IMPORTED_MODULE_7__.parsePcmCodec)(trackData.info.decoderConfig.codec);\n            const samplesNeeded = deltaInTimescale * trackData.info.numberOfChannels;\n            const data = new Uint8Array(sampleSize * samplesNeeded).fill(silentValue);\n            const paddingSample = this.createSampleForTrack(trackData, new Uint8Array(data.buffer), lastEndTimestamp, delta, 'key');\n            await this.registerSample(trackData, paddingSample);\n        }\n    }\n    async addSubtitleCue(track, cue, meta) {\n        const release = await this.mutex.acquire();\n        try {\n            const trackData = this.getSubtitleTrackData(track, meta);\n            this.validateAndNormalizeTimestamp(trackData.track, cue.timestamp, true);\n            if (track.source._codec === 'webvtt') {\n                trackData.cueQueue.push(cue);\n                await this.processWebVTTCues(trackData, cue.timestamp);\n            }\n            else {\n                // TODO\n            }\n        }\n        finally {\n            release();\n        }\n    }\n    async processWebVTTCues(trackData, until) {\n        // WebVTT cues need to undergo special processing as empty sections need to be padded out with samples, and\n        // overlapping samples require special logic. The algorithm produces the format specified in ISO 14496-30.\n        while (trackData.cueQueue.length > 0) {\n            const timestamps = new Set([]);\n            for (const cue of trackData.cueQueue) {\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(cue.timestamp <= until);\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(trackData.lastCueEndTimestamp <= cue.timestamp + cue.duration);\n                timestamps.add(Math.max(cue.timestamp, trackData.lastCueEndTimestamp)); // Start timestamp\n                timestamps.add(cue.timestamp + cue.duration); // End timestamp\n            }\n            const sortedTimestamps = [...timestamps].sort((a, b) => a - b);\n            // These are the timestamps of the next sample we'll create:\n            const sampleStart = sortedTimestamps[0];\n            const sampleEnd = sortedTimestamps[1] ?? sampleStart;\n            if (until < sampleEnd) {\n                break;\n            }\n            // We may need to pad out empty space with an vtte box\n            if (trackData.lastCueEndTimestamp < sampleStart) {\n                this.auxWriter.seek(0);\n                const box = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.vtte)();\n                this.auxBoxWriter.writeBox(box);\n                const body = this.auxWriter.getSlice(0, this.auxWriter.getPos());\n                const sample = this.createSampleForTrack(trackData, body, trackData.lastCueEndTimestamp, sampleStart - trackData.lastCueEndTimestamp, 'key');\n                await this.registerSample(trackData, sample);\n                trackData.lastCueEndTimestamp = sampleStart;\n            }\n            this.auxWriter.seek(0);\n            for (let i = 0; i < trackData.cueQueue.length; i++) {\n                const cue = trackData.cueQueue[i];\n                if (cue.timestamp >= sampleEnd) {\n                    break;\n                }\n                _subtitles_js__WEBPACK_IMPORTED_MODULE_9__.inlineTimestampRegex.lastIndex = 0;\n                const containsTimestamp = _subtitles_js__WEBPACK_IMPORTED_MODULE_9__.inlineTimestampRegex.test(cue.text);\n                const endTimestamp = cue.timestamp + cue.duration;\n                let sourceId = trackData.cueToSourceId.get(cue);\n                if (sourceId === undefined && sampleEnd < endTimestamp) {\n                    // We know this cue will appear in more than one sample, therefore we need to mark it with a\n                    // unique ID\n                    sourceId = trackData.nextSourceId++;\n                    trackData.cueToSourceId.set(cue, sourceId);\n                }\n                if (cue.notes) {\n                    // Any notes/comments are included in a special vtta box\n                    const box = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.vtta)(cue.notes);\n                    this.auxBoxWriter.writeBox(box);\n                }\n                const box = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.vttc)(cue.text, containsTimestamp ? sampleStart : null, cue.identifier ?? null, cue.settings ?? null, sourceId ?? null);\n                this.auxBoxWriter.writeBox(box);\n                if (endTimestamp === sampleEnd) {\n                    // The cue won't appear in any future sample, so we're done with it\n                    trackData.cueQueue.splice(i--, 1);\n                }\n            }\n            const body = this.auxWriter.getSlice(0, this.auxWriter.getPos());\n            const sample = this.createSampleForTrack(trackData, body, sampleStart, sampleEnd - sampleStart, 'key');\n            await this.registerSample(trackData, sample);\n            trackData.lastCueEndTimestamp = sampleEnd;\n        }\n    }\n    createSampleForTrack(trackData, data, timestamp, duration, type) {\n        const sample = {\n            timestamp,\n            decodeTimestamp: timestamp, // This may be refined later\n            duration,\n            data,\n            size: data.byteLength,\n            type,\n            timescaleUnitsToNextSample: intoTimescale(duration, trackData.timescale), // Will be refined\n        };\n        return sample;\n    }\n    processTimestamps(trackData, nextSample) {\n        if (trackData.timestampProcessingQueue.length === 0) {\n            return;\n        }\n        if (trackData.type === 'audio' && trackData.info.requiresPcmTransformation) {\n            let totalDuration = 0;\n            // Compute the total duration in the track timescale (which is equal to the amount of PCM audio samples)\n            // and simply say that's how many new samples there are.\n            for (let i = 0; i < trackData.timestampProcessingQueue.length; i++) {\n                const sample = trackData.timestampProcessingQueue[i];\n                const duration = intoTimescale(sample.duration, trackData.timescale);\n                totalDuration += duration;\n            }\n            if (trackData.timeToSampleTable.length === 0) {\n                trackData.timeToSampleTable.push({\n                    sampleCount: totalDuration,\n                    sampleDelta: 1,\n                });\n            }\n            else {\n                const lastEntry = (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.last)(trackData.timeToSampleTable);\n                lastEntry.sampleCount += totalDuration;\n            }\n            trackData.timestampProcessingQueue.length = 0;\n            return;\n        }\n        const sortedTimestamps = trackData.timestampProcessingQueue.map(x => x.timestamp).sort((a, b) => a - b);\n        for (let i = 0; i < trackData.timestampProcessingQueue.length; i++) {\n            const sample = trackData.timestampProcessingQueue[i];\n            // Since the user only supplies presentation time, but these may be out of order, we reverse-engineer from\n            // that a sensible decode timestamp. The notion of a decode timestamp doesn't really make sense\n            // (presentation timestamp & decode order are all you need), but it is a concept in ISOBMFF so we need to\n            // model it.\n            sample.decodeTimestamp = sortedTimestamps[i];\n            if (!this.isFragmented && trackData.lastTimescaleUnits === null) {\n                // In non-fragmented files, the first decode timestamp is always zero. If the first presentation\n                // timestamp isn't zero, we'll simply use the composition time offset to achieve it.\n                sample.decodeTimestamp = 0;\n            }\n            const sampleCompositionTimeOffset = intoTimescale(sample.timestamp - sample.decodeTimestamp, trackData.timescale);\n            const durationInTimescale = intoTimescale(sample.duration, trackData.timescale);\n            if (trackData.lastTimescaleUnits !== null) {\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(trackData.lastSample);\n                const timescaleUnits = intoTimescale(sample.decodeTimestamp, trackData.timescale, false);\n                const delta = Math.round(timescaleUnits - trackData.lastTimescaleUnits);\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(delta >= 0);\n                trackData.lastTimescaleUnits += delta;\n                trackData.lastSample.timescaleUnitsToNextSample = delta;\n                if (!this.isFragmented) {\n                    let lastTableEntry = (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.last)(trackData.timeToSampleTable);\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(lastTableEntry);\n                    if (lastTableEntry.sampleCount === 1) {\n                        lastTableEntry.sampleDelta = delta;\n                        const entryBefore = trackData.timeToSampleTable[trackData.timeToSampleTable.length - 2];\n                        if (entryBefore && entryBefore.sampleDelta === delta) {\n                            // If the delta is the same as the previous one, merge the two entries\n                            entryBefore.sampleCount++;\n                            trackData.timeToSampleTable.pop();\n                            lastTableEntry = entryBefore;\n                        }\n                    }\n                    else if (lastTableEntry.sampleDelta !== delta) {\n                        // The delta has changed, so we need a new entry to reach the current sample\n                        lastTableEntry.sampleCount--;\n                        trackData.timeToSampleTable.push(lastTableEntry = {\n                            sampleCount: 1,\n                            sampleDelta: delta,\n                        });\n                    }\n                    if (lastTableEntry.sampleDelta === durationInTimescale) {\n                        // The sample's duration matches the delta, so we can increment the count\n                        lastTableEntry.sampleCount++;\n                    }\n                    else {\n                        // Add a new entry in order to maintain the last sample's true duration\n                        trackData.timeToSampleTable.push({\n                            sampleCount: 1,\n                            sampleDelta: durationInTimescale,\n                        });\n                    }\n                    const lastCompositionTimeOffsetTableEntry = (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.last)(trackData.compositionTimeOffsetTable);\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(lastCompositionTimeOffsetTableEntry);\n                    if (lastCompositionTimeOffsetTableEntry.sampleCompositionTimeOffset === sampleCompositionTimeOffset) {\n                        // Simply increment the count\n                        lastCompositionTimeOffsetTableEntry.sampleCount++;\n                    }\n                    else {\n                        // The composition time offset has changed, so create a new entry with the new composition time\n                        // offset\n                        trackData.compositionTimeOffsetTable.push({\n                            sampleCount: 1,\n                            sampleCompositionTimeOffset: sampleCompositionTimeOffset,\n                        });\n                    }\n                }\n            }\n            else {\n                // Decode timestamp of the first sample\n                trackData.lastTimescaleUnits = intoTimescale(sample.decodeTimestamp, trackData.timescale, false);\n                if (!this.isFragmented) {\n                    trackData.timeToSampleTable.push({\n                        sampleCount: 1,\n                        sampleDelta: durationInTimescale,\n                    });\n                    trackData.compositionTimeOffsetTable.push({\n                        sampleCount: 1,\n                        sampleCompositionTimeOffset: sampleCompositionTimeOffset,\n                    });\n                }\n            }\n            trackData.lastSample = sample;\n        }\n        trackData.timestampProcessingQueue.length = 0;\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(trackData.lastSample);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(trackData.lastTimescaleUnits !== null);\n        if (nextSample !== undefined && trackData.lastSample.timescaleUnitsToNextSample === 0) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(nextSample.type === 'key');\n            // Given the next sample, we can make a guess about the duration of the last sample. This avoids having\n            // the last sample's duration in each fragment be \"0\" for fragmented files. The guess we make here is\n            // actually correct most of the time, since typically, no delta frame with a lower timestamp follows the key\n            // frame (although it can happen).\n            const timescaleUnits = intoTimescale(nextSample.timestamp, trackData.timescale, false);\n            const delta = Math.round(timescaleUnits - trackData.lastTimescaleUnits);\n            trackData.lastSample.timescaleUnitsToNextSample = delta;\n        }\n    }\n    async registerSample(trackData, sample) {\n        if (sample.type === 'key') {\n            this.processTimestamps(trackData, sample);\n        }\n        trackData.timestampProcessingQueue.push(sample);\n        if (this.isFragmented) {\n            trackData.sampleQueue.push(sample);\n            await this.interleaveSamples();\n        }\n        else {\n            await this.addSampleToTrack(trackData, sample);\n        }\n    }\n    async addSampleToTrack(trackData, sample) {\n        if (!this.isFragmented) {\n            trackData.samples.push(sample);\n        }\n        let beginNewChunk = false;\n        if (!trackData.currentChunk) {\n            beginNewChunk = true;\n        }\n        else {\n            // Timestamp don't need to be monotonic (think B-frames), so we may need to update the start timestamp of\n            // the chunk\n            trackData.currentChunk.startTimestamp = Math.min(trackData.currentChunk.startTimestamp, sample.timestamp);\n            const currentChunkDuration = sample.timestamp - trackData.currentChunk.startTimestamp;\n            if (this.isFragmented) {\n                // We can only finalize this fragment (and begin a new one) if we know that each track will be able to\n                // start the new one with a key frame.\n                const keyFrameQueuedEverywhere = this.trackDatas.every((otherTrackData) => {\n                    if (trackData === otherTrackData) {\n                        return sample.type === 'key';\n                    }\n                    const firstQueuedSample = otherTrackData.sampleQueue[0];\n                    if (firstQueuedSample) {\n                        return firstQueuedSample.type === 'key';\n                    }\n                    return otherTrackData.track.source._closed;\n                });\n                if (currentChunkDuration >= this.minimumFragmentDuration\n                    && keyFrameQueuedEverywhere\n                    && sample.timestamp > this.maxWrittenTimestamp) {\n                    beginNewChunk = true;\n                    await this.finalizeFragment();\n                }\n            }\n            else {\n                beginNewChunk = currentChunkDuration >= 0.5; // Chunk is long enough, we need a new one\n            }\n        }\n        if (beginNewChunk) {\n            if (trackData.currentChunk) {\n                await this.finalizeCurrentChunk(trackData);\n            }\n            trackData.currentChunk = {\n                startTimestamp: sample.timestamp,\n                samples: [],\n                offset: null,\n                moofOffset: null,\n            };\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(trackData.currentChunk);\n        trackData.currentChunk.samples.push(sample);\n        if (this.isFragmented) {\n            this.maxWrittenTimestamp = Math.max(this.maxWrittenTimestamp, sample.timestamp);\n        }\n    }\n    async finalizeCurrentChunk(trackData) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(!this.isFragmented);\n        if (!trackData.currentChunk)\n            return;\n        trackData.finalizedChunks.push(trackData.currentChunk);\n        this.finalizedChunks.push(trackData.currentChunk);\n        let sampleCount = trackData.currentChunk.samples.length;\n        if (trackData.type === 'audio' && trackData.info.requiresPcmTransformation) {\n            sampleCount = trackData.currentChunk.samples\n                .reduce((acc, sample) => acc + intoTimescale(sample.duration, trackData.timescale), 0);\n        }\n        if (trackData.compactlyCodedChunkTable.length === 0\n            || (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.last)(trackData.compactlyCodedChunkTable).samplesPerChunk !== sampleCount) {\n            trackData.compactlyCodedChunkTable.push({\n                firstChunk: trackData.finalizedChunks.length, // 1-indexed\n                samplesPerChunk: sampleCount,\n            });\n        }\n        if (this.fastStart === 'in-memory') {\n            trackData.currentChunk.offset = 0; // We'll compute the proper offset when finalizing\n            return;\n        }\n        // Write out the data\n        trackData.currentChunk.offset = this.writer.getPos();\n        for (const sample of trackData.currentChunk.samples) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(sample.data);\n            this.writer.write(sample.data);\n            sample.data = null; // Can be GC'd\n        }\n        await this.writer.flush();\n    }\n    async interleaveSamples(isFinalCall = false) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.isFragmented);\n        if (!isFinalCall) {\n            if (!this.allTracksAreKnown()) {\n                return; // We can't interleave yet as we don't yet know how many tracks we'll truly have\n            }\n        }\n        outer: while (true) {\n            let trackWithMinTimestamp = null;\n            let minTimestamp = Infinity;\n            for (const trackData of this.trackDatas) {\n                if (!isFinalCall && trackData.sampleQueue.length === 0 && !trackData.track.source._closed) {\n                    break outer;\n                }\n                if (trackData.sampleQueue.length > 0 && trackData.sampleQueue[0].timestamp < minTimestamp) {\n                    trackWithMinTimestamp = trackData;\n                    minTimestamp = trackData.sampleQueue[0].timestamp;\n                }\n            }\n            if (!trackWithMinTimestamp) {\n                break;\n            }\n            const sample = trackWithMinTimestamp.sampleQueue.shift();\n            await this.addSampleToTrack(trackWithMinTimestamp, sample);\n        }\n    }\n    async finalizeFragment(flushWriter = true) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.isFragmented);\n        const fragmentNumber = this.nextFragmentNumber++;\n        if (fragmentNumber === 1) {\n            if (this.format._options.onMoov) {\n                this.writer.startTrackingWrites();\n            }\n            // Write the moov box now that we have all decoder configs\n            const movieBox = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.moov)(this, true);\n            this.boxWriter.writeBox(movieBox);\n            if (this.format._options.onMoov) {\n                const { data, start } = this.writer.stopTrackingWrites();\n                this.format._options.onMoov(data, start);\n            }\n        }\n        // Not all tracks need to be present in every fragment\n        const tracksInFragment = this.trackDatas.filter(x => x.currentChunk);\n        // Create an initial moof box and measure it; we need this to know where the following mdat box will begin\n        const moofBox = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.moof)(fragmentNumber, tracksInFragment);\n        const moofOffset = this.writer.getPos();\n        const mdatStartPos = moofOffset + this.boxWriter.measureBox(moofBox);\n        let currentPos = mdatStartPos + _isobmff_reader_js__WEBPACK_IMPORTED_MODULE_10__.MIN_BOX_HEADER_SIZE;\n        let fragmentStartTimestamp = Infinity;\n        for (const trackData of tracksInFragment) {\n            trackData.currentChunk.offset = currentPos;\n            trackData.currentChunk.moofOffset = moofOffset;\n            for (const sample of trackData.currentChunk.samples) {\n                currentPos += sample.size;\n            }\n            fragmentStartTimestamp = Math.min(fragmentStartTimestamp, trackData.currentChunk.startTimestamp);\n        }\n        const mdatSize = currentPos - mdatStartPos;\n        const needsLargeMdatSize = mdatSize >= 2 ** 32;\n        if (needsLargeMdatSize) {\n            // Shift all offsets by 8. Previously, all chunks were shifted assuming the large box size, but due to what\n            // I suspect is a bug in WebKit, it failed in Safari (when livestreaming with MSE, not for static playback).\n            for (const trackData of tracksInFragment) {\n                trackData.currentChunk.offset += _isobmff_reader_js__WEBPACK_IMPORTED_MODULE_10__.MAX_BOX_HEADER_SIZE - _isobmff_reader_js__WEBPACK_IMPORTED_MODULE_10__.MIN_BOX_HEADER_SIZE;\n            }\n        }\n        if (this.format._options.onMoof) {\n            this.writer.startTrackingWrites();\n        }\n        const newMoofBox = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.moof)(fragmentNumber, tracksInFragment);\n        this.boxWriter.writeBox(newMoofBox);\n        if (this.format._options.onMoof) {\n            const { data, start } = this.writer.stopTrackingWrites();\n            this.format._options.onMoof(data, start, fragmentStartTimestamp);\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.writer.getPos() === mdatStartPos);\n        if (this.format._options.onMdat) {\n            this.writer.startTrackingWrites();\n        }\n        const mdatBox = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.mdat)(needsLargeMdatSize);\n        mdatBox.size = mdatSize;\n        this.boxWriter.writeBox(mdatBox);\n        this.writer.seek(mdatStartPos + (needsLargeMdatSize ? _isobmff_reader_js__WEBPACK_IMPORTED_MODULE_10__.MAX_BOX_HEADER_SIZE : _isobmff_reader_js__WEBPACK_IMPORTED_MODULE_10__.MIN_BOX_HEADER_SIZE));\n        // Write sample data\n        for (const trackData of tracksInFragment) {\n            for (const sample of trackData.currentChunk.samples) {\n                this.writer.write(sample.data);\n                sample.data = null; // Can be GC'd\n            }\n        }\n        if (this.format._options.onMdat) {\n            const { data, start } = this.writer.stopTrackingWrites();\n            this.format._options.onMdat(data, start);\n        }\n        for (const trackData of tracksInFragment) {\n            trackData.finalizedChunks.push(trackData.currentChunk);\n            this.finalizedChunks.push(trackData.currentChunk);\n            trackData.currentChunk = null;\n        }\n        if (flushWriter) {\n            await this.writer.flush();\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async onTrackClose(track) {\n        const release = await this.mutex.acquire();\n        if (track.type === 'subtitle' && track.source._codec === 'webvtt') {\n            const trackData = this.trackDatas.find(x => x.track === track);\n            if (trackData) {\n                await this.processWebVTTCues(trackData, Infinity);\n            }\n        }\n        if (this.allTracksAreKnown()) {\n            this.allTracksKnown.resolve();\n        }\n        if (this.isFragmented) {\n            // Since a track is now closed, we may be able to write out chunks that were previously waiting\n            await this.interleaveSamples();\n        }\n        release();\n    }\n    /** Finalizes the file, making it ready for use. Must be called after all video and audio chunks have been added. */\n    async finalize() {\n        const release = await this.mutex.acquire();\n        this.allTracksKnown.resolve();\n        for (const trackData of this.trackDatas) {\n            if (trackData.type === 'subtitle' && trackData.track.source._codec === 'webvtt') {\n                await this.processWebVTTCues(trackData, Infinity);\n            }\n        }\n        if (this.isFragmented) {\n            await this.interleaveSamples(true);\n            for (const trackData of this.trackDatas) {\n                this.processTimestamps(trackData);\n            }\n            await this.finalizeFragment(false); // Don't flush the last fragment as we will flush it with the mfra box\n        }\n        else {\n            for (const trackData of this.trackDatas) {\n                this.processTimestamps(trackData);\n                await this.finalizeCurrentChunk(trackData);\n            }\n        }\n        if (this.fastStart === 'in-memory') {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.mdat);\n            let mdatSize;\n            // We know how many chunks there are, but computing the chunk positions requires an iterative approach:\n            // In order to know where the first chunk should go, we first need to know the size of the moov box. But we\n            // cannot write a proper moov box without first knowing all chunk positions. So, we generate a tentative\n            // moov box with placeholder values (0) for the chunk offsets to be able to compute its size. If it then\n            // turns out that appending all chunks exceeds 4 GiB, we need to repeat this process, now with the co64 box\n            // being used in the moov box instead, which will make it larger. After that, we definitely know the final\n            // size of the moov box and can compute the proper chunk positions.\n            for (let i = 0; i < 2; i++) {\n                const movieBox = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.moov)(this);\n                const movieBoxSize = this.boxWriter.measureBox(movieBox);\n                mdatSize = this.boxWriter.measureBox(this.mdat);\n                let currentChunkPos = this.writer.getPos() + movieBoxSize + mdatSize;\n                for (const chunk of this.finalizedChunks) {\n                    chunk.offset = currentChunkPos;\n                    for (const { data } of chunk.samples) {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(data);\n                        currentChunkPos += data.byteLength;\n                        mdatSize += data.byteLength;\n                    }\n                }\n                if (currentChunkPos < 2 ** 32)\n                    break;\n                if (mdatSize >= 2 ** 32)\n                    this.mdat.largeSize = true;\n            }\n            if (this.format._options.onMoov) {\n                this.writer.startTrackingWrites();\n            }\n            const movieBox = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.moov)(this);\n            this.boxWriter.writeBox(movieBox);\n            if (this.format._options.onMoov) {\n                const { data, start } = this.writer.stopTrackingWrites();\n                this.format._options.onMoov(data, start);\n            }\n            if (this.format._options.onMdat) {\n                this.writer.startTrackingWrites();\n            }\n            this.mdat.size = mdatSize;\n            this.boxWriter.writeBox(this.mdat);\n            for (const chunk of this.finalizedChunks) {\n                for (const sample of chunk.samples) {\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(sample.data);\n                    this.writer.write(sample.data);\n                    sample.data = null;\n                }\n            }\n            if (this.format._options.onMdat) {\n                const { data, start } = this.writer.stopTrackingWrites();\n                this.format._options.onMdat(data, start);\n            }\n        }\n        else if (this.isFragmented) {\n            // Append the mfra box to the end of the file for better random access\n            const startPos = this.writer.getPos();\n            const mfraBox = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.mfra)(this.trackDatas);\n            this.boxWriter.writeBox(mfraBox);\n            // Patch the 'size' field of the mfro box at the end of the mfra box now that we know its actual size\n            const mfraBoxSize = this.writer.getPos() - startPos;\n            this.writer.seek(this.writer.getPos() - 4);\n            this.boxWriter.writeU32(mfraBoxSize);\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.mdat);\n            const mdatPos = this.boxWriter.offsets.get(this.mdat);\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(mdatPos !== undefined);\n            const mdatSize = this.writer.getPos() - mdatPos;\n            this.mdat.size = mdatSize;\n            this.mdat.largeSize = mdatSize >= 2 ** 32; // Only use the large size if we need it\n            this.boxWriter.patchBox(this.mdat);\n            if (this.format._options.onMdat) {\n                const { data, start } = this.writer.stopTrackingWrites();\n                this.format._options.onMdat(data, start);\n            }\n            if (this.format._options.onMoov) {\n                this.writer.startTrackingWrites();\n            }\n            const movieBox = (0,_isobmff_boxes_js__WEBPACK_IMPORTED_MODULE_2__.moov)(this);\n            this.boxWriter.writeBox(movieBox);\n            if (this.format._options.onMoov) {\n                const { data, start } = this.writer.stopTrackingWrites();\n                this.format._options.onMoov(data, start);\n            }\n        }\n        release();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-muxer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-reader.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-reader.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_BOX_HEADER_SIZE: function() { return /* binding */ MAX_BOX_HEADER_SIZE; },\n/* harmony export */   MIN_BOX_HEADER_SIZE: function() { return /* binding */ MIN_BOX_HEADER_SIZE; },\n/* harmony export */   readBoxHeader: function() { return /* binding */ readBoxHeader; },\n/* harmony export */   readDataBox: function() { return /* binding */ readDataBox; },\n/* harmony export */   readFixed_16_16: function() { return /* binding */ readFixed_16_16; },\n/* harmony export */   readFixed_2_30: function() { return /* binding */ readFixed_2_30; },\n/* harmony export */   readIsomVariableInteger: function() { return /* binding */ readIsomVariableInteger; },\n/* harmony export */   readMetadataStringShort: function() { return /* binding */ readMetadataStringShort; }\n/* harmony export */ });\n/* harmony import */ var _tags_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tags.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/tags.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _reader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reader.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/reader.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\nconst MIN_BOX_HEADER_SIZE = 8;\nconst MAX_BOX_HEADER_SIZE = 16;\nconst readBoxHeader = (slice) => {\n    let totalSize = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU32Be)(slice);\n    const name = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readAscii)(slice, 4);\n    let headerSize = 8;\n    const hasLargeSize = totalSize === 1;\n    if (hasLargeSize) {\n        totalSize = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU64Be)(slice);\n        headerSize = 16;\n    }\n    const contentSize = totalSize - headerSize;\n    if (contentSize < 0) {\n        return null; // Hardly a box is it\n    }\n    return { name, totalSize, headerSize, contentSize };\n};\nconst readFixed_16_16 = (slice) => {\n    return (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readI32Be)(slice) / 0x10000;\n};\nconst readFixed_2_30 = (slice) => {\n    return (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readI32Be)(slice) / 0x40000000;\n};\nconst readIsomVariableInteger = (slice) => {\n    let result = 0;\n    for (let i = 0; i < 4; i++) {\n        result <<= 7;\n        const nextByte = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU8)(slice);\n        result |= nextByte & 0x7f;\n        if ((nextByte & 0x80) === 0) {\n            break;\n        }\n    }\n    return result;\n};\nconst readMetadataStringShort = (slice) => {\n    const stringLength = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU16Be)(slice);\n    slice.skip(2); // Language\n    return _misc_js__WEBPACK_IMPORTED_MODULE_1__.textDecoder.decode((0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readBytes)(slice, stringLength));\n};\nconst readDataBox = (slice) => {\n    const header = readBoxHeader(slice);\n    if (!header || header.name !== 'data') {\n        return null;\n    }\n    const typeIndicator = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU32Be)(slice);\n    slice.skip(4); // Locale indicator\n    const data = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readBytes)(slice, header.contentSize - 8);\n    switch (typeIndicator) {\n        case 1: return _misc_js__WEBPACK_IMPORTED_MODULE_1__.textDecoder.decode(data); // UTF-8\n        case 2: return new TextDecoder('utf-16be').decode(data); // UTF-16-BE\n        case 13: return new _tags_js__WEBPACK_IMPORTED_MODULE_2__.RichImageData(data, 'image/jpeg');\n        case 14: return new _tags_js__WEBPACK_IMPORTED_MODULE_2__.RichImageData(data, 'image/png');\n        case 27: return new _tags_js__WEBPACK_IMPORTED_MODULE_2__.RichImageData(data, 'image/bmp');\n        default: return data;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvaXNvYm1mZi9pc29ibWZmLXJlYWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzJDO0FBQ0Y7QUFDK0Q7QUFDakc7QUFDQTtBQUNBO0FBQ1Asb0JBQW9CLHFEQUFTO0FBQzdCLGlCQUFpQixxREFBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscURBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxhQUFhO0FBQ2I7QUFDTztBQUNQLFdBQVcscURBQVM7QUFDcEI7QUFDTztBQUNQLFdBQVcscURBQVM7QUFDcEI7QUFDTztBQUNQO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQSx5QkFBeUIsa0RBQU07QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLHlCQUF5QixxREFBUztBQUNsQyxtQkFBbUI7QUFDbkIsV0FBVyxpREFBVyxRQUFRLHFEQUFTO0FBQ3ZDO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxREFBUztBQUNuQyxtQkFBbUI7QUFDbkIsaUJBQWlCLHFEQUFTO0FBQzFCO0FBQ0EsdUJBQXVCLGlEQUFXLGVBQWU7QUFDakQsaUVBQWlFO0FBQ2pFLDRCQUE0QixtREFBYTtBQUN6Qyw0QkFBNEIsbURBQWE7QUFDekMsNEJBQTRCLG1EQUFhO0FBQ3pDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVkaWFidW5ueS9kaXN0L21vZHVsZXMvc3JjL2lzb2JtZmYvaXNvYm1mZi1yZWFkZXIuanM/MWM0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyNS1wcmVzZW50LCBWYW5pbGFneSBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHBzOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG4gKi9cbmltcG9ydCB7IFJpY2hJbWFnZURhdGEgfSBmcm9tICcuLi90YWdzLmpzJztcbmltcG9ydCB7IHRleHREZWNvZGVyIH0gZnJvbSAnLi4vbWlzYy5qcyc7XG5pbXBvcnQgeyByZWFkQXNjaWksIHJlYWRCeXRlcywgcmVhZEkzMkJlLCByZWFkVTE2QmUsIHJlYWRVMzJCZSwgcmVhZFU2NEJlLCByZWFkVTggfSBmcm9tICcuLi9yZWFkZXIuanMnO1xuZXhwb3J0IGNvbnN0IE1JTl9CT1hfSEVBREVSX1NJWkUgPSA4O1xuZXhwb3J0IGNvbnN0IE1BWF9CT1hfSEVBREVSX1NJWkUgPSAxNjtcbmV4cG9ydCBjb25zdCByZWFkQm94SGVhZGVyID0gKHNsaWNlKSA9PiB7XG4gICAgbGV0IHRvdGFsU2l6ZSA9IHJlYWRVMzJCZShzbGljZSk7XG4gICAgY29uc3QgbmFtZSA9IHJlYWRBc2NpaShzbGljZSwgNCk7XG4gICAgbGV0IGhlYWRlclNpemUgPSA4O1xuICAgIGNvbnN0IGhhc0xhcmdlU2l6ZSA9IHRvdGFsU2l6ZSA9PT0gMTtcbiAgICBpZiAoaGFzTGFyZ2VTaXplKSB7XG4gICAgICAgIHRvdGFsU2l6ZSA9IHJlYWRVNjRCZShzbGljZSk7XG4gICAgICAgIGhlYWRlclNpemUgPSAxNjtcbiAgICB9XG4gICAgY29uc3QgY29udGVudFNpemUgPSB0b3RhbFNpemUgLSBoZWFkZXJTaXplO1xuICAgIGlmIChjb250ZW50U2l6ZSA8IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIEhhcmRseSBhIGJveCBpcyBpdFxuICAgIH1cbiAgICByZXR1cm4geyBuYW1lLCB0b3RhbFNpemUsIGhlYWRlclNpemUsIGNvbnRlbnRTaXplIH07XG59O1xuZXhwb3J0IGNvbnN0IHJlYWRGaXhlZF8xNl8xNiA9IChzbGljZSkgPT4ge1xuICAgIHJldHVybiByZWFkSTMyQmUoc2xpY2UpIC8gMHgxMDAwMDtcbn07XG5leHBvcnQgY29uc3QgcmVhZEZpeGVkXzJfMzAgPSAoc2xpY2UpID0+IHtcbiAgICByZXR1cm4gcmVhZEkzMkJlKHNsaWNlKSAvIDB4NDAwMDAwMDA7XG59O1xuZXhwb3J0IGNvbnN0IHJlYWRJc29tVmFyaWFibGVJbnRlZ2VyID0gKHNsaWNlKSA9PiB7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgcmVzdWx0IDw8PSA3O1xuICAgICAgICBjb25zdCBuZXh0Qnl0ZSA9IHJlYWRVOChzbGljZSk7XG4gICAgICAgIHJlc3VsdCB8PSBuZXh0Qnl0ZSAmIDB4N2Y7XG4gICAgICAgIGlmICgobmV4dEJ5dGUgJiAweDgwKSA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgY29uc3QgcmVhZE1ldGFkYXRhU3RyaW5nU2hvcnQgPSAoc2xpY2UpID0+IHtcbiAgICBjb25zdCBzdHJpbmdMZW5ndGggPSByZWFkVTE2QmUoc2xpY2UpO1xuICAgIHNsaWNlLnNraXAoMik7IC8vIExhbmd1YWdlXG4gICAgcmV0dXJuIHRleHREZWNvZGVyLmRlY29kZShyZWFkQnl0ZXMoc2xpY2UsIHN0cmluZ0xlbmd0aCkpO1xufTtcbmV4cG9ydCBjb25zdCByZWFkRGF0YUJveCA9IChzbGljZSkgPT4ge1xuICAgIGNvbnN0IGhlYWRlciA9IHJlYWRCb3hIZWFkZXIoc2xpY2UpO1xuICAgIGlmICghaGVhZGVyIHx8IGhlYWRlci5uYW1lICE9PSAnZGF0YScpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHR5cGVJbmRpY2F0b3IgPSByZWFkVTMyQmUoc2xpY2UpO1xuICAgIHNsaWNlLnNraXAoNCk7IC8vIExvY2FsZSBpbmRpY2F0b3JcbiAgICBjb25zdCBkYXRhID0gcmVhZEJ5dGVzKHNsaWNlLCBoZWFkZXIuY29udGVudFNpemUgLSA4KTtcbiAgICBzd2l0Y2ggKHR5cGVJbmRpY2F0b3IpIHtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gdGV4dERlY29kZXIuZGVjb2RlKGRhdGEpOyAvLyBVVEYtOFxuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNmJlJykuZGVjb2RlKGRhdGEpOyAvLyBVVEYtMTYtQkVcbiAgICAgICAgY2FzZSAxMzogcmV0dXJuIG5ldyBSaWNoSW1hZ2VEYXRhKGRhdGEsICdpbWFnZS9qcGVnJyk7XG4gICAgICAgIGNhc2UgMTQ6IHJldHVybiBuZXcgUmljaEltYWdlRGF0YShkYXRhLCAnaW1hZ2UvcG5nJyk7XG4gICAgICAgIGNhc2UgMjc6IHJldHVybiBuZXcgUmljaEltYWdlRGF0YShkYXRhLCAnaW1hZ2UvYm1wJyk7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiBkYXRhO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-reader.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/matroska/ebml.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/matroska/ebml.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CODEC_STRING_MAP: function() { return /* binding */ CODEC_STRING_MAP; },\n/* harmony export */   EBMLFloat32: function() { return /* binding */ EBMLFloat32; },\n/* harmony export */   EBMLFloat64: function() { return /* binding */ EBMLFloat64; },\n/* harmony export */   EBMLId: function() { return /* binding */ EBMLId; },\n/* harmony export */   EBMLSignedInt: function() { return /* binding */ EBMLSignedInt; },\n/* harmony export */   EBMLUnicodeString: function() { return /* binding */ EBMLUnicodeString; },\n/* harmony export */   EBMLWriter: function() { return /* binding */ EBMLWriter; },\n/* harmony export */   LEVEL_0_AND_1_EBML_IDS: function() { return /* binding */ LEVEL_0_AND_1_EBML_IDS; },\n/* harmony export */   LEVEL_0_EBML_IDS: function() { return /* binding */ LEVEL_0_EBML_IDS; },\n/* harmony export */   LEVEL_1_EBML_IDS: function() { return /* binding */ LEVEL_1_EBML_IDS; },\n/* harmony export */   MAX_HEADER_SIZE: function() { return /* binding */ MAX_HEADER_SIZE; },\n/* harmony export */   MAX_VAR_INT_SIZE: function() { return /* binding */ MAX_VAR_INT_SIZE; },\n/* harmony export */   MIN_HEADER_SIZE: function() { return /* binding */ MIN_HEADER_SIZE; },\n/* harmony export */   assertDefinedSize: function() { return /* binding */ assertDefinedSize; },\n/* harmony export */   measureSignedInt: function() { return /* binding */ measureSignedInt; },\n/* harmony export */   measureUnsignedInt: function() { return /* binding */ measureUnsignedInt; },\n/* harmony export */   measureVarInt: function() { return /* binding */ measureVarInt; },\n/* harmony export */   readAsciiString: function() { return /* binding */ readAsciiString; },\n/* harmony export */   readElementHeader: function() { return /* binding */ readElementHeader; },\n/* harmony export */   readElementId: function() { return /* binding */ readElementId; },\n/* harmony export */   readElementSize: function() { return /* binding */ readElementSize; },\n/* harmony export */   readFloat: function() { return /* binding */ readFloat; },\n/* harmony export */   readSignedInt: function() { return /* binding */ readSignedInt; },\n/* harmony export */   readUnicodeString: function() { return /* binding */ readUnicodeString; },\n/* harmony export */   readUnsignedInt: function() { return /* binding */ readUnsignedInt; },\n/* harmony export */   readVarInt: function() { return /* binding */ readVarInt; },\n/* harmony export */   readVarIntSize: function() { return /* binding */ readVarIntSize; },\n/* harmony export */   resync: function() { return /* binding */ resync; },\n/* harmony export */   searchForNextElementId: function() { return /* binding */ searchForNextElementId; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _reader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reader.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/reader.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n/** Wrapper around a number to be able to differentiate it in the writer. */\nclass EBMLFloat32 {\n    constructor(value) {\n        this.value = value;\n    }\n}\n/** Wrapper around a number to be able to differentiate it in the writer. */\nclass EBMLFloat64 {\n    constructor(value) {\n        this.value = value;\n    }\n}\n/** Wrapper around a number to be able to differentiate it in the writer. */\nclass EBMLSignedInt {\n    constructor(value) {\n        this.value = value;\n    }\n}\nclass EBMLUnicodeString {\n    constructor(value) {\n        this.value = value;\n    }\n}\n/** Defines some of the EBML IDs used by Matroska files. */\nvar EBMLId;\n(function (EBMLId) {\n    EBMLId[EBMLId[\"EBML\"] = 440786851] = \"EBML\";\n    EBMLId[EBMLId[\"EBMLVersion\"] = 17030] = \"EBMLVersion\";\n    EBMLId[EBMLId[\"EBMLReadVersion\"] = 17143] = \"EBMLReadVersion\";\n    EBMLId[EBMLId[\"EBMLMaxIDLength\"] = 17138] = \"EBMLMaxIDLength\";\n    EBMLId[EBMLId[\"EBMLMaxSizeLength\"] = 17139] = \"EBMLMaxSizeLength\";\n    EBMLId[EBMLId[\"DocType\"] = 17026] = \"DocType\";\n    EBMLId[EBMLId[\"DocTypeVersion\"] = 17031] = \"DocTypeVersion\";\n    EBMLId[EBMLId[\"DocTypeReadVersion\"] = 17029] = \"DocTypeReadVersion\";\n    EBMLId[EBMLId[\"Void\"] = 236] = \"Void\";\n    EBMLId[EBMLId[\"Segment\"] = 408125543] = \"Segment\";\n    EBMLId[EBMLId[\"SeekHead\"] = 290298740] = \"SeekHead\";\n    EBMLId[EBMLId[\"Seek\"] = 19899] = \"Seek\";\n    EBMLId[EBMLId[\"SeekID\"] = 21419] = \"SeekID\";\n    EBMLId[EBMLId[\"SeekPosition\"] = 21420] = \"SeekPosition\";\n    EBMLId[EBMLId[\"Duration\"] = 17545] = \"Duration\";\n    EBMLId[EBMLId[\"Info\"] = 357149030] = \"Info\";\n    EBMLId[EBMLId[\"TimestampScale\"] = 2807729] = \"TimestampScale\";\n    EBMLId[EBMLId[\"MuxingApp\"] = 19840] = \"MuxingApp\";\n    EBMLId[EBMLId[\"WritingApp\"] = 22337] = \"WritingApp\";\n    EBMLId[EBMLId[\"Tracks\"] = 374648427] = \"Tracks\";\n    EBMLId[EBMLId[\"TrackEntry\"] = 174] = \"TrackEntry\";\n    EBMLId[EBMLId[\"TrackNumber\"] = 215] = \"TrackNumber\";\n    EBMLId[EBMLId[\"TrackUID\"] = 29637] = \"TrackUID\";\n    EBMLId[EBMLId[\"TrackType\"] = 131] = \"TrackType\";\n    EBMLId[EBMLId[\"FlagEnabled\"] = 185] = \"FlagEnabled\";\n    EBMLId[EBMLId[\"FlagDefault\"] = 136] = \"FlagDefault\";\n    EBMLId[EBMLId[\"FlagForced\"] = 21930] = \"FlagForced\";\n    EBMLId[EBMLId[\"FlagLacing\"] = 156] = \"FlagLacing\";\n    EBMLId[EBMLId[\"Name\"] = 21358] = \"Name\";\n    EBMLId[EBMLId[\"Language\"] = 2274716] = \"Language\";\n    EBMLId[EBMLId[\"LanguageBCP47\"] = 2274717] = \"LanguageBCP47\";\n    EBMLId[EBMLId[\"CodecID\"] = 134] = \"CodecID\";\n    EBMLId[EBMLId[\"CodecPrivate\"] = 25506] = \"CodecPrivate\";\n    EBMLId[EBMLId[\"CodecDelay\"] = 22186] = \"CodecDelay\";\n    EBMLId[EBMLId[\"SeekPreRoll\"] = 22203] = \"SeekPreRoll\";\n    EBMLId[EBMLId[\"DefaultDuration\"] = 2352003] = \"DefaultDuration\";\n    EBMLId[EBMLId[\"Video\"] = 224] = \"Video\";\n    EBMLId[EBMLId[\"PixelWidth\"] = 176] = \"PixelWidth\";\n    EBMLId[EBMLId[\"PixelHeight\"] = 186] = \"PixelHeight\";\n    EBMLId[EBMLId[\"Audio\"] = 225] = \"Audio\";\n    EBMLId[EBMLId[\"SamplingFrequency\"] = 181] = \"SamplingFrequency\";\n    EBMLId[EBMLId[\"Channels\"] = 159] = \"Channels\";\n    EBMLId[EBMLId[\"BitDepth\"] = 25188] = \"BitDepth\";\n    EBMLId[EBMLId[\"SimpleBlock\"] = 163] = \"SimpleBlock\";\n    EBMLId[EBMLId[\"BlockGroup\"] = 160] = \"BlockGroup\";\n    EBMLId[EBMLId[\"Block\"] = 161] = \"Block\";\n    EBMLId[EBMLId[\"BlockAdditions\"] = 30113] = \"BlockAdditions\";\n    EBMLId[EBMLId[\"BlockMore\"] = 166] = \"BlockMore\";\n    EBMLId[EBMLId[\"BlockAdditional\"] = 165] = \"BlockAdditional\";\n    EBMLId[EBMLId[\"BlockAddID\"] = 238] = \"BlockAddID\";\n    EBMLId[EBMLId[\"BlockDuration\"] = 155] = \"BlockDuration\";\n    EBMLId[EBMLId[\"ReferenceBlock\"] = 251] = \"ReferenceBlock\";\n    EBMLId[EBMLId[\"Cluster\"] = 524531317] = \"Cluster\";\n    EBMLId[EBMLId[\"Timestamp\"] = 231] = \"Timestamp\";\n    EBMLId[EBMLId[\"Cues\"] = 475249515] = \"Cues\";\n    EBMLId[EBMLId[\"CuePoint\"] = 187] = \"CuePoint\";\n    EBMLId[EBMLId[\"CueTime\"] = 179] = \"CueTime\";\n    EBMLId[EBMLId[\"CueTrackPositions\"] = 183] = \"CueTrackPositions\";\n    EBMLId[EBMLId[\"CueTrack\"] = 247] = \"CueTrack\";\n    EBMLId[EBMLId[\"CueClusterPosition\"] = 241] = \"CueClusterPosition\";\n    EBMLId[EBMLId[\"Colour\"] = 21936] = \"Colour\";\n    EBMLId[EBMLId[\"MatrixCoefficients\"] = 21937] = \"MatrixCoefficients\";\n    EBMLId[EBMLId[\"TransferCharacteristics\"] = 21946] = \"TransferCharacteristics\";\n    EBMLId[EBMLId[\"Primaries\"] = 21947] = \"Primaries\";\n    EBMLId[EBMLId[\"Range\"] = 21945] = \"Range\";\n    EBMLId[EBMLId[\"Projection\"] = 30320] = \"Projection\";\n    EBMLId[EBMLId[\"ProjectionType\"] = 30321] = \"ProjectionType\";\n    EBMLId[EBMLId[\"ProjectionPoseRoll\"] = 30325] = \"ProjectionPoseRoll\";\n    EBMLId[EBMLId[\"Attachments\"] = 423732329] = \"Attachments\";\n    EBMLId[EBMLId[\"AttachedFile\"] = 24999] = \"AttachedFile\";\n    EBMLId[EBMLId[\"FileDescription\"] = 18046] = \"FileDescription\";\n    EBMLId[EBMLId[\"FileName\"] = 18030] = \"FileName\";\n    EBMLId[EBMLId[\"FileMediaType\"] = 18016] = \"FileMediaType\";\n    EBMLId[EBMLId[\"FileData\"] = 18012] = \"FileData\";\n    EBMLId[EBMLId[\"FileUID\"] = 18094] = \"FileUID\";\n    EBMLId[EBMLId[\"Chapters\"] = 272869232] = \"Chapters\";\n    EBMLId[EBMLId[\"Tags\"] = 307544935] = \"Tags\";\n    EBMLId[EBMLId[\"Tag\"] = 29555] = \"Tag\";\n    EBMLId[EBMLId[\"Targets\"] = 25536] = \"Targets\";\n    EBMLId[EBMLId[\"TargetTypeValue\"] = 26826] = \"TargetTypeValue\";\n    EBMLId[EBMLId[\"TargetType\"] = 25546] = \"TargetType\";\n    EBMLId[EBMLId[\"TagTrackUID\"] = 25541] = \"TagTrackUID\";\n    EBMLId[EBMLId[\"TagEditionUID\"] = 25545] = \"TagEditionUID\";\n    EBMLId[EBMLId[\"TagChapterUID\"] = 25540] = \"TagChapterUID\";\n    EBMLId[EBMLId[\"TagAttachmentUID\"] = 25542] = \"TagAttachmentUID\";\n    EBMLId[EBMLId[\"SimpleTag\"] = 26568] = \"SimpleTag\";\n    EBMLId[EBMLId[\"TagName\"] = 17827] = \"TagName\";\n    EBMLId[EBMLId[\"TagLanguage\"] = 17530] = \"TagLanguage\";\n    EBMLId[EBMLId[\"TagString\"] = 17543] = \"TagString\";\n    EBMLId[EBMLId[\"TagBinary\"] = 17541] = \"TagBinary\";\n})(EBMLId || (EBMLId = {}));\nconst LEVEL_0_EBML_IDS = [\n    EBMLId.EBML,\n    EBMLId.Segment,\n];\n// All the stuff that can appear in a segment, basically\nconst LEVEL_1_EBML_IDS = [\n    EBMLId.SeekHead,\n    EBMLId.Info,\n    EBMLId.Cluster,\n    EBMLId.Tracks,\n    EBMLId.Cues,\n    EBMLId.Attachments,\n    EBMLId.Chapters,\n    EBMLId.Tags,\n];\nconst LEVEL_0_AND_1_EBML_IDS = [\n    ...LEVEL_0_EBML_IDS,\n    ...LEVEL_1_EBML_IDS,\n];\nconst measureUnsignedInt = (value) => {\n    if (value < (1 << 8)) {\n        return 1;\n    }\n    else if (value < (1 << 16)) {\n        return 2;\n    }\n    else if (value < (1 << 24)) {\n        return 3;\n    }\n    else if (value < 2 ** 32) {\n        return 4;\n    }\n    else if (value < 2 ** 40) {\n        return 5;\n    }\n    else {\n        return 6;\n    }\n};\nconst measureSignedInt = (value) => {\n    if (value >= -(1 << 6) && value < (1 << 6)) {\n        return 1;\n    }\n    else if (value >= -(1 << 13) && value < (1 << 13)) {\n        return 2;\n    }\n    else if (value >= -(1 << 20) && value < (1 << 20)) {\n        return 3;\n    }\n    else if (value >= -(1 << 27) && value < (1 << 27)) {\n        return 4;\n    }\n    else if (value >= -(2 ** 34) && value < 2 ** 34) {\n        return 5;\n    }\n    else {\n        return 6;\n    }\n};\nconst measureVarInt = (value) => {\n    if (value < (1 << 7) - 1) {\n        /** Top bit is set, leaving 7 bits to hold the integer, but we can't store\n         * 127 because \"all bits set to one\" is a reserved value. Same thing for the\n         * other cases below:\n         */\n        return 1;\n    }\n    else if (value < (1 << 14) - 1) {\n        return 2;\n    }\n    else if (value < (1 << 21) - 1) {\n        return 3;\n    }\n    else if (value < (1 << 28) - 1) {\n        return 4;\n    }\n    else if (value < 2 ** 35 - 1) {\n        return 5;\n    }\n    else if (value < 2 ** 42 - 1) {\n        return 6;\n    }\n    else {\n        throw new Error('EBML varint size not supported ' + value);\n    }\n};\nclass EBMLWriter {\n    constructor(writer) {\n        this.writer = writer;\n        this.helper = new Uint8Array(8);\n        this.helperView = new DataView(this.helper.buffer);\n        /**\n         * Stores the position from the start of the file to where EBML elements have been written. This is used to\n         * rewrite/edit elements that were already added before, and to measure sizes of things.\n         */\n        this.offsets = new WeakMap();\n        /** Same as offsets, but stores position where the element's data starts (after ID and size fields). */\n        this.dataOffsets = new WeakMap();\n    }\n    writeByte(value) {\n        this.helperView.setUint8(0, value);\n        this.writer.write(this.helper.subarray(0, 1));\n    }\n    writeFloat32(value) {\n        this.helperView.setFloat32(0, value, false);\n        this.writer.write(this.helper.subarray(0, 4));\n    }\n    writeFloat64(value) {\n        this.helperView.setFloat64(0, value, false);\n        this.writer.write(this.helper);\n    }\n    writeUnsignedInt(value, width = measureUnsignedInt(value)) {\n        let pos = 0;\n        // Each case falls through:\n        switch (width) {\n            case 6:\n                // Need to use division to access >32 bits of floating point var\n                this.helperView.setUint8(pos++, (value / 2 ** 40) | 0);\n            // eslint-disable-next-line no-fallthrough\n            case 5:\n                this.helperView.setUint8(pos++, (value / 2 ** 32) | 0);\n            // eslint-disable-next-line no-fallthrough\n            case 4:\n                this.helperView.setUint8(pos++, value >> 24);\n            // eslint-disable-next-line no-fallthrough\n            case 3:\n                this.helperView.setUint8(pos++, value >> 16);\n            // eslint-disable-next-line no-fallthrough\n            case 2:\n                this.helperView.setUint8(pos++, value >> 8);\n            // eslint-disable-next-line no-fallthrough\n            case 1:\n                this.helperView.setUint8(pos++, value);\n                break;\n            default:\n                throw new Error('Bad unsigned int size ' + width);\n        }\n        this.writer.write(this.helper.subarray(0, pos));\n    }\n    writeSignedInt(value, width = measureSignedInt(value)) {\n        if (value < 0) {\n            // Two's complement stuff\n            value += 2 ** (width * 8);\n        }\n        this.writeUnsignedInt(value, width);\n    }\n    writeVarInt(value, width = measureVarInt(value)) {\n        let pos = 0;\n        switch (width) {\n            case 1:\n                this.helperView.setUint8(pos++, (1 << 7) | value);\n                break;\n            case 2:\n                this.helperView.setUint8(pos++, (1 << 6) | (value >> 8));\n                this.helperView.setUint8(pos++, value);\n                break;\n            case 3:\n                this.helperView.setUint8(pos++, (1 << 5) | (value >> 16));\n                this.helperView.setUint8(pos++, value >> 8);\n                this.helperView.setUint8(pos++, value);\n                break;\n            case 4:\n                this.helperView.setUint8(pos++, (1 << 4) | (value >> 24));\n                this.helperView.setUint8(pos++, value >> 16);\n                this.helperView.setUint8(pos++, value >> 8);\n                this.helperView.setUint8(pos++, value);\n                break;\n            case 5:\n                /**\n                 * JavaScript converts its doubles to 32-bit integers for bitwise\n                 * operations, so we need to do a division by 2^32 instead of a\n                 * right-shift of 32 to retain those top 3 bits\n                 */\n                this.helperView.setUint8(pos++, (1 << 3) | ((value / 2 ** 32) & 0x7));\n                this.helperView.setUint8(pos++, value >> 24);\n                this.helperView.setUint8(pos++, value >> 16);\n                this.helperView.setUint8(pos++, value >> 8);\n                this.helperView.setUint8(pos++, value);\n                break;\n            case 6:\n                this.helperView.setUint8(pos++, (1 << 2) | ((value / 2 ** 40) & 0x3));\n                this.helperView.setUint8(pos++, (value / 2 ** 32) | 0);\n                this.helperView.setUint8(pos++, value >> 24);\n                this.helperView.setUint8(pos++, value >> 16);\n                this.helperView.setUint8(pos++, value >> 8);\n                this.helperView.setUint8(pos++, value);\n                break;\n            default:\n                throw new Error('Bad EBML varint size ' + width);\n        }\n        this.writer.write(this.helper.subarray(0, pos));\n    }\n    writeAsciiString(str) {\n        this.writer.write(new Uint8Array(str.split('').map(x => x.charCodeAt(0))));\n    }\n    writeEBML(data) {\n        if (data === null)\n            return;\n        if (data instanceof Uint8Array) {\n            this.writer.write(data);\n        }\n        else if (Array.isArray(data)) {\n            for (const elem of data) {\n                this.writeEBML(elem);\n            }\n        }\n        else {\n            this.offsets.set(data, this.writer.getPos());\n            this.writeUnsignedInt(data.id); // ID field\n            if (Array.isArray(data.data)) {\n                const sizePos = this.writer.getPos();\n                const sizeSize = data.size === -1 ? 1 : (data.size ?? 4);\n                if (data.size === -1) {\n                    // Write the reserved all-one-bits marker for unknown/unbounded size.\n                    this.writeByte(0xff);\n                }\n                else {\n                    this.writer.seek(this.writer.getPos() + sizeSize);\n                }\n                const startPos = this.writer.getPos();\n                this.dataOffsets.set(data, startPos);\n                this.writeEBML(data.data);\n                if (data.size !== -1) {\n                    const size = this.writer.getPos() - startPos;\n                    const endPos = this.writer.getPos();\n                    this.writer.seek(sizePos);\n                    this.writeVarInt(size, sizeSize);\n                    this.writer.seek(endPos);\n                }\n            }\n            else if (typeof data.data === 'number') {\n                const size = data.size ?? measureUnsignedInt(data.data);\n                this.writeVarInt(size);\n                this.writeUnsignedInt(data.data, size);\n            }\n            else if (typeof data.data === 'string') {\n                this.writeVarInt(data.data.length);\n                this.writeAsciiString(data.data);\n            }\n            else if (data.data instanceof Uint8Array) {\n                this.writeVarInt(data.data.byteLength, data.size);\n                this.writer.write(data.data);\n            }\n            else if (data.data instanceof EBMLFloat32) {\n                this.writeVarInt(4);\n                this.writeFloat32(data.data.value);\n            }\n            else if (data.data instanceof EBMLFloat64) {\n                this.writeVarInt(8);\n                this.writeFloat64(data.data.value);\n            }\n            else if (data.data instanceof EBMLSignedInt) {\n                const size = data.size ?? measureSignedInt(data.data.value);\n                this.writeVarInt(size);\n                this.writeSignedInt(data.data.value, size);\n            }\n            else if (data.data instanceof EBMLUnicodeString) {\n                const bytes = _misc_js__WEBPACK_IMPORTED_MODULE_0__.textEncoder.encode(data.data.value);\n                this.writeVarInt(bytes.length);\n                this.writer.write(bytes);\n            }\n            else {\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assertNever)(data.data);\n            }\n        }\n    }\n}\nconst MAX_VAR_INT_SIZE = 8;\nconst MIN_HEADER_SIZE = 2; // 1-byte ID and 1-byte size\nconst MAX_HEADER_SIZE = 2 * MAX_VAR_INT_SIZE; // 8-byte ID and 8-byte size\nconst readVarIntSize = (slice) => {\n    const firstByte = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU8)(slice);\n    slice.skip(-1);\n    if (firstByte === 0) {\n        return null; // Invalid VINT\n    }\n    let width = 1;\n    let mask = 0x80;\n    while ((firstByte & mask) === 0) {\n        width++;\n        mask >>= 1;\n    }\n    return width;\n};\nconst readVarInt = (slice) => {\n    // Read the first byte to determine the width of the variable-length integer\n    const firstByte = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU8)(slice);\n    if (firstByte === 0) {\n        return null; // Invalid VINT\n    }\n    // Find the position of VINT_MARKER, which determines the width\n    let width = 1;\n    let mask = 1 << 7;\n    while ((firstByte & mask) === 0) {\n        width++;\n        mask >>= 1;\n    }\n    // First byte's value needs the marker bit cleared\n    let value = firstByte & (mask - 1);\n    // Read remaining bytes\n    for (let i = 1; i < width; i++) {\n        value *= 1 << 8;\n        value += (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU8)(slice);\n    }\n    return value;\n};\nconst readUnsignedInt = (slice, width) => {\n    if (width < 1 || width > 8) {\n        throw new Error('Bad unsigned int size ' + width);\n    }\n    let value = 0;\n    // Read bytes from most significant to least significant\n    for (let i = 0; i < width; i++) {\n        value *= 1 << 8;\n        value += (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU8)(slice);\n    }\n    return value;\n};\nconst readSignedInt = (slice, width) => {\n    let value = readUnsignedInt(slice, width);\n    // If the highest bit is set, convert from two's complement\n    if (value & (1 << (width * 8 - 1))) {\n        value -= 2 ** (width * 8);\n    }\n    return value;\n};\nconst readElementId = (slice) => {\n    const size = readVarIntSize(slice);\n    if (size === null) {\n        return null;\n    }\n    const id = readUnsignedInt(slice, size);\n    return id;\n};\nconst readElementSize = (slice) => {\n    let size = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU8)(slice);\n    if (size === 0xff) {\n        size = null;\n    }\n    else {\n        slice.skip(-1);\n        size = readVarInt(slice);\n        // In some (livestreamed) files, this is the value of the size field. While this technically is just a very\n        // large number, it is intended to behave like the reserved size 0xFF, meaning the size is undefined. We\n        // catch the number here. Note that it cannot be perfectly represented as a double, but the comparison works\n        // nonetheless.\n        // eslint-disable-next-line no-loss-of-precision\n        if (size === 0x00ffffffffffffff) {\n            size = null;\n        }\n    }\n    return size;\n};\nconst readElementHeader = (slice) => {\n    const id = readElementId(slice);\n    if (id === null) {\n        return null;\n    }\n    const size = readElementSize(slice);\n    return { id, size };\n};\nconst readAsciiString = (slice, length) => {\n    const bytes = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readBytes)(slice, length);\n    // Actual string length might be shorter due to null terminators\n    let strLength = 0;\n    while (strLength < length && bytes[strLength] !== 0) {\n        strLength += 1;\n    }\n    return String.fromCharCode(...bytes.subarray(0, strLength));\n};\nconst readUnicodeString = (slice, length) => {\n    const bytes = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readBytes)(slice, length);\n    // Actual string length might be shorter due to null terminators\n    let strLength = 0;\n    while (strLength < length && bytes[strLength] !== 0) {\n        strLength += 1;\n    }\n    return _misc_js__WEBPACK_IMPORTED_MODULE_0__.textDecoder.decode(bytes.subarray(0, strLength));\n};\nconst readFloat = (slice, width) => {\n    if (width === 0) {\n        return 0;\n    }\n    if (width !== 4 && width !== 8) {\n        throw new Error('Bad float size ' + width);\n    }\n    return width === 4 ? (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readF32Be)(slice) : (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readF64Be)(slice);\n};\n/** Returns the byte offset in the file of the next element with a matching ID. */\nconst searchForNextElementId = async (reader, startPos, ids, until) => {\n    const idsSet = new Set(ids);\n    let currentPos = startPos;\n    while (until === null || currentPos < until) {\n        let slice = reader.requestSliceRange(currentPos, MIN_HEADER_SIZE, MAX_HEADER_SIZE);\n        if (slice instanceof Promise)\n            slice = await slice;\n        if (!slice)\n            break;\n        const elementHeader = readElementHeader(slice);\n        if (!elementHeader) {\n            break;\n        }\n        if (idsSet.has(elementHeader.id)) {\n            return { pos: currentPos, found: true };\n        }\n        assertDefinedSize(elementHeader.size);\n        currentPos = slice.filePos + elementHeader.size;\n    }\n    return { pos: (until !== null && until > currentPos) ? until : currentPos, found: false };\n};\n/** Searches for the next occurrence of an element ID using a naive byte-wise search. */\nconst resync = async (reader, startPos, ids, until) => {\n    const CHUNK_SIZE = 2 ** 16; // So we don't need to grab thousands of slices\n    const idsSet = new Set(ids);\n    let currentPos = startPos;\n    while (currentPos < until) {\n        let slice = reader.requestSliceRange(currentPos, 0, Math.min(CHUNK_SIZE, until - currentPos));\n        if (slice instanceof Promise)\n            slice = await slice;\n        if (!slice)\n            break;\n        if (slice.length < MAX_VAR_INT_SIZE)\n            break;\n        for (let i = 0; i < slice.length - MAX_VAR_INT_SIZE; i++) {\n            slice.filePos = currentPos;\n            const elementId = readElementId(slice);\n            if (elementId !== null && idsSet.has(elementId)) {\n                return currentPos;\n            }\n            currentPos++;\n        }\n    }\n    return null;\n};\nconst CODEC_STRING_MAP = {\n    'avc': 'V_MPEG4/ISO/AVC',\n    'hevc': 'V_MPEGH/ISO/HEVC',\n    'vp8': 'V_VP8',\n    'vp9': 'V_VP9',\n    'av1': 'V_AV1',\n    'aac': 'A_AAC',\n    'mp3': 'A_MPEG/L3',\n    'opus': 'A_OPUS',\n    'vorbis': 'A_VORBIS',\n    'flac': 'A_FLAC',\n    'pcm-u8': 'A_PCM/INT/LIT',\n    'pcm-s16': 'A_PCM/INT/LIT',\n    'pcm-s16be': 'A_PCM/INT/BIG',\n    'pcm-s24': 'A_PCM/INT/LIT',\n    'pcm-s24be': 'A_PCM/INT/BIG',\n    'pcm-s32': 'A_PCM/INT/LIT',\n    'pcm-s32be': 'A_PCM/INT/BIG',\n    'pcm-f32': 'A_PCM/FLOAT/IEEE',\n    'pcm-f64': 'A_PCM/FLOAT/IEEE',\n    'webvtt': 'S_TEXT/WEBVTT',\n};\nfunction assertDefinedSize(size) {\n    if (size === null) {\n        throw new Error('Undefined element size is used in a place where it is not supported.');\n    }\n}\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/matroska/ebml.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/matroska/matroska-misc.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/matroska/matroska-misc.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildMatroskaMimeType: function() { return /* binding */ buildMatroskaMimeType; }\n/* harmony export */ });\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nconst buildMatroskaMimeType = (info) => {\n    const base = info.hasVideo\n        ? 'video/'\n        : info.hasAudio\n            ? 'audio/'\n            : 'application/';\n    let string = base + (info.isWebM ? 'webm' : 'x-matroska');\n    if (info.codecStrings.length > 0) {\n        const uniqueCodecMimeTypes = [...new Set(info.codecStrings.filter(Boolean))];\n        string += `; codecs=\"${uniqueCodecMimeTypes.join(', ')}\"`;\n    }\n    return string;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvbWF0cm9za2EvbWF0cm9za2EtbWlzYy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsVUFBVSxnQ0FBZ0M7QUFDL0Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvbWF0cm9za2EvbWF0cm9za2EtbWlzYy5qcz80M2RmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDI1LXByZXNlbnQsIFZhbmlsYWd5IGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cbiAqL1xuZXhwb3J0IGNvbnN0IGJ1aWxkTWF0cm9za2FNaW1lVHlwZSA9IChpbmZvKSA9PiB7XG4gICAgY29uc3QgYmFzZSA9IGluZm8uaGFzVmlkZW9cbiAgICAgICAgPyAndmlkZW8vJ1xuICAgICAgICA6IGluZm8uaGFzQXVkaW9cbiAgICAgICAgICAgID8gJ2F1ZGlvLydcbiAgICAgICAgICAgIDogJ2FwcGxpY2F0aW9uLyc7XG4gICAgbGV0IHN0cmluZyA9IGJhc2UgKyAoaW5mby5pc1dlYk0gPyAnd2VibScgOiAneC1tYXRyb3NrYScpO1xuICAgIGlmIChpbmZvLmNvZGVjU3RyaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHVuaXF1ZUNvZGVjTWltZVR5cGVzID0gWy4uLm5ldyBTZXQoaW5mby5jb2RlY1N0cmluZ3MuZmlsdGVyKEJvb2xlYW4pKV07XG4gICAgICAgIHN0cmluZyArPSBgOyBjb2RlY3M9XCIke3VuaXF1ZUNvZGVjTWltZVR5cGVzLmpvaW4oJywgJyl9XCJgO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/matroska/matroska-misc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/matroska/matroska-muxer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/matroska/matroska-muxer.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MatroskaMuxer: function() { return /* binding */ MatroskaMuxer; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _ebml_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ebml.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/matroska/ebml.js\");\n/* harmony import */ var _matroska_misc_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./matroska-misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/matroska/matroska-misc.js\");\n/* harmony import */ var _output_format_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../output-format.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/output-format.js\");\n/* harmony import */ var _subtitles_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../subtitles.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/subtitles.js\");\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _muxer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/muxer.js\");\n/* harmony import */ var _codec_data_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../codec-data.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec-data.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n\n\n\nconst MIN_CLUSTER_TIMESTAMP_MS = -(2 ** 15);\nconst MAX_CLUSTER_TIMESTAMP_MS = 2 ** 15 - 1;\nconst APP_NAME = 'Mediabunny';\nconst SEGMENT_SIZE_BYTES = 6;\nconst CLUSTER_SIZE_BYTES = 5;\nconst TRACK_TYPE_MAP = {\n    video: 1,\n    audio: 2,\n    subtitle: 17,\n};\nclass MatroskaMuxer extends _muxer_js__WEBPACK_IMPORTED_MODULE_0__.Muxer {\n    constructor(output, format) {\n        super(output);\n        this.trackDatas = [];\n        this.allTracksKnown = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.promiseWithResolvers)();\n        this.segment = null;\n        this.segmentInfo = null;\n        this.seekHead = null;\n        this.tracksElement = null;\n        this.tagsElement = null;\n        this.attachmentsElement = null;\n        this.segmentDuration = null;\n        this.cues = null;\n        this.currentCluster = null;\n        this.currentClusterStartMsTimestamp = null;\n        this.currentClusterMaxMsTimestamp = null;\n        this.trackDatasInCurrentCluster = new Map();\n        this.duration = 0;\n        this.writer = output._writer;\n        this.format = format;\n        this.ebmlWriter = new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLWriter(this.writer);\n        if (this.format._options.appendOnly) {\n            this.writer.ensureMonotonicity = true;\n        }\n    }\n    async start() {\n        const release = await this.mutex.acquire();\n        this.writeEBMLHeader();\n        this.createSegmentInfo();\n        this.createCues();\n        await this.writer.flush();\n        release();\n    }\n    writeEBMLHeader() {\n        if (this.format._options.onEbmlHeader) {\n            this.writer.startTrackingWrites();\n        }\n        const ebmlHeader = { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.EBML, data: [\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.EBMLVersion, data: 1 },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.EBMLReadVersion, data: 1 },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.EBMLMaxIDLength, data: 4 },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.EBMLMaxSizeLength, data: 8 },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.DocType, data: this.format instanceof _output_format_js__WEBPACK_IMPORTED_MODULE_3__.WebMOutputFormat ? 'webm' : 'matroska' },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.DocTypeVersion, data: 2 },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.DocTypeReadVersion, data: 2 },\n            ] };\n        this.ebmlWriter.writeEBML(ebmlHeader);\n        if (this.format._options.onEbmlHeader) {\n            const { data, start } = this.writer.stopTrackingWrites(); // start should be 0\n            this.format._options.onEbmlHeader(data, start);\n        }\n    }\n    /**\n     * Creates a SeekHead element which is positioned near the start of the file and allows the media player to seek to\n     * relevant sections more easily. Since we don't know the positions of those sections yet, we'll set them later.\n     */\n    maybeCreateSeekHead(writeOffsets) {\n        if (this.format._options.appendOnly) {\n            return;\n        }\n        const kaxCues = new Uint8Array([0x1c, 0x53, 0xbb, 0x6b]);\n        const kaxInfo = new Uint8Array([0x15, 0x49, 0xa9, 0x66]);\n        const kaxTracks = new Uint8Array([0x16, 0x54, 0xae, 0x6b]);\n        const kaxAttachments = new Uint8Array([0x19, 0x41, 0xa4, 0x69]);\n        const kaxTags = new Uint8Array([0x12, 0x54, 0xc3, 0x67]);\n        const seekHead = { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekHead, data: [\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Seek, data: [\n                        { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekID, data: kaxCues },\n                        {\n                            id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekPosition,\n                            size: 5,\n                            data: writeOffsets\n                                ? this.ebmlWriter.offsets.get(this.cues) - this.segmentDataOffset\n                                : 0,\n                        },\n                    ] },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Seek, data: [\n                        { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekID, data: kaxInfo },\n                        {\n                            id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekPosition,\n                            size: 5,\n                            data: writeOffsets\n                                ? this.ebmlWriter.offsets.get(this.segmentInfo) - this.segmentDataOffset\n                                : 0,\n                        },\n                    ] },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Seek, data: [\n                        { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekID, data: kaxTracks },\n                        {\n                            id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekPosition,\n                            size: 5,\n                            data: writeOffsets\n                                ? this.ebmlWriter.offsets.get(this.tracksElement) - this.segmentDataOffset\n                                : 0,\n                        },\n                    ] },\n                this.attachmentsElement\n                    ? { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Seek, data: [\n                            { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekID, data: kaxAttachments },\n                            {\n                                id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekPosition,\n                                size: 5,\n                                data: writeOffsets\n                                    ? this.ebmlWriter.offsets.get(this.attachmentsElement) - this.segmentDataOffset\n                                    : 0,\n                            },\n                        ] }\n                    : null,\n                this.tagsElement\n                    ? { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Seek, data: [\n                            { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekID, data: kaxTags },\n                            {\n                                id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekPosition,\n                                size: 5,\n                                data: writeOffsets\n                                    ? this.ebmlWriter.offsets.get(this.tagsElement) - this.segmentDataOffset\n                                    : 0,\n                            },\n                        ] }\n                    : null,\n            ] };\n        this.seekHead = seekHead;\n    }\n    createSegmentInfo() {\n        const segmentDuration = { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Duration, data: new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLFloat64(0) };\n        this.segmentDuration = segmentDuration;\n        const segmentInfo = { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Info, data: [\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TimestampScale, data: 1e6 },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.MuxingApp, data: APP_NAME },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.WritingApp, data: APP_NAME },\n                !this.format._options.appendOnly ? segmentDuration : null,\n            ] };\n        this.segmentInfo = segmentInfo;\n    }\n    createTracks() {\n        const tracksElement = { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Tracks, data: [] };\n        this.tracksElement = tracksElement;\n        for (const trackData of this.trackDatas) {\n            const codecId = _ebml_js__WEBPACK_IMPORTED_MODULE_2__.CODEC_STRING_MAP[trackData.track.source._codec];\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(codecId);\n            let seekPreRollNs = 0;\n            if (trackData.type === 'audio' && trackData.track.source._codec === 'opus') {\n                seekPreRollNs = 1e6 * 80; // In \"Matroska ticks\" (nanoseconds)\n                const description = trackData.info.decoderConfig.description;\n                if (description) {\n                    const bytes = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(description);\n                    const header = (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_4__.parseOpusIdentificationHeader)(bytes);\n                    // Use the preSkip value from the header\n                    seekPreRollNs = Math.round(1e9 * (header.preSkip / _codec_js__WEBPACK_IMPORTED_MODULE_5__.OPUS_SAMPLE_RATE));\n                }\n            }\n            tracksElement.data.push({ id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TrackEntry, data: [\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TrackNumber, data: trackData.track.id },\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TrackUID, data: trackData.track.id },\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TrackType, data: TRACK_TYPE_MAP[trackData.type] },\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.FlagLacing, data: 0 },\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Language, data: trackData.track.metadata.languageCode ?? _misc_js__WEBPACK_IMPORTED_MODULE_1__.UNDETERMINED_LANGUAGE },\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.CodecID, data: codecId },\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.CodecDelay, data: 0 },\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SeekPreRoll, data: seekPreRollNs },\n                    trackData.track.metadata.name !== undefined\n                        ? { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Name, data: new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLUnicodeString(trackData.track.metadata.name) }\n                        : null,\n                    (trackData.type === 'video' ? this.videoSpecificTrackInfo(trackData) : null),\n                    (trackData.type === 'audio' ? this.audioSpecificTrackInfo(trackData) : null),\n                    (trackData.type === 'subtitle' ? this.subtitleSpecificTrackInfo(trackData) : null),\n                ] });\n        }\n    }\n    videoSpecificTrackInfo(trackData) {\n        const { frameRate, rotation } = trackData.track.metadata;\n        const elements = [\n            (trackData.info.decoderConfig.description\n                ? {\n                    id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.CodecPrivate,\n                    data: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(trackData.info.decoderConfig.description),\n                }\n                : null),\n            (frameRate\n                ? {\n                    id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.DefaultDuration,\n                    data: 1e9 / frameRate,\n                }\n                : null),\n        ];\n        // Convert from clockwise to counter-clockwise\n        const flippedRotation = rotation ? (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.normalizeRotation)(-rotation) : 0;\n        const colorSpace = trackData.info.decoderConfig.colorSpace;\n        const videoElement = { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Video, data: [\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.PixelWidth, data: trackData.info.width },\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.PixelHeight, data: trackData.info.height },\n                ((0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.colorSpaceIsComplete)(colorSpace)\n                    ? {\n                        id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Colour,\n                        data: [\n                            {\n                                id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.MatrixCoefficients,\n                                data: _misc_js__WEBPACK_IMPORTED_MODULE_1__.MATRIX_COEFFICIENTS_MAP[colorSpace.matrix],\n                            },\n                            {\n                                id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TransferCharacteristics,\n                                data: _misc_js__WEBPACK_IMPORTED_MODULE_1__.TRANSFER_CHARACTERISTICS_MAP[colorSpace.transfer],\n                            },\n                            {\n                                id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Primaries,\n                                data: _misc_js__WEBPACK_IMPORTED_MODULE_1__.COLOR_PRIMARIES_MAP[colorSpace.primaries],\n                            },\n                            {\n                                id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Range,\n                                data: colorSpace.fullRange ? 2 : 1,\n                            },\n                        ],\n                    }\n                    : null),\n                (flippedRotation\n                    ? {\n                        id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Projection,\n                        data: [\n                            {\n                                id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.ProjectionType,\n                                data: 0, // rectangular\n                            },\n                            {\n                                id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.ProjectionPoseRoll,\n                                data: new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLFloat32((flippedRotation + 180) % 360 - 180), // [0, 270] -> [-180, 90]\n                            },\n                        ],\n                    }\n                    : null),\n            ] };\n        elements.push(videoElement);\n        return elements;\n    }\n    audioSpecificTrackInfo(trackData) {\n        const pcmInfo = _codec_js__WEBPACK_IMPORTED_MODULE_5__.PCM_AUDIO_CODECS.includes(trackData.track.source._codec)\n            ? (0,_codec_js__WEBPACK_IMPORTED_MODULE_5__.parsePcmCodec)(trackData.track.source._codec)\n            : null;\n        return [\n            (trackData.info.decoderConfig.description\n                ? {\n                    id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.CodecPrivate,\n                    data: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(trackData.info.decoderConfig.description),\n                }\n                : null),\n            { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Audio, data: [\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SamplingFrequency, data: new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLFloat32(trackData.info.sampleRate) },\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Channels, data: trackData.info.numberOfChannels },\n                    pcmInfo ? { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.BitDepth, data: 8 * pcmInfo.sampleSize } : null,\n                ] },\n        ];\n    }\n    subtitleSpecificTrackInfo(trackData) {\n        return [\n            { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.CodecPrivate, data: _misc_js__WEBPACK_IMPORTED_MODULE_1__.textEncoder.encode(trackData.info.config.description) },\n        ];\n    }\n    maybeCreateTags() {\n        const simpleTags = [];\n        const addSimpleTag = (key, value) => {\n            simpleTags.push({ id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SimpleTag, data: [\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TagName, data: new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLUnicodeString(key) },\n                    typeof value === 'string'\n                        ? { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TagString, data: new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLUnicodeString(value) }\n                        : { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TagBinary, data: value },\n                ] });\n        };\n        const metadataTags = this.output._metadataTags;\n        const writtenTags = new Set();\n        for (const { key, value } of (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.keyValueIterator)(metadataTags)) {\n            switch (key) {\n                case 'title':\n                    {\n                        addSimpleTag('TITLE', value);\n                        writtenTags.add('TITLE');\n                    }\n                    ;\n                    break;\n                case 'description':\n                    {\n                        addSimpleTag('DESCRIPTION', value);\n                        writtenTags.add('DESCRIPTION');\n                    }\n                    ;\n                    break;\n                case 'artist':\n                    {\n                        addSimpleTag('ARTIST', value);\n                        writtenTags.add('ARTIST');\n                    }\n                    ;\n                    break;\n                case 'album':\n                    {\n                        addSimpleTag('ALBUM', value);\n                        writtenTags.add('ALBUM');\n                    }\n                    ;\n                    break;\n                case 'albumArtist':\n                    {\n                        addSimpleTag('ALBUM_ARTIST', value);\n                        writtenTags.add('ALBUM_ARTIST');\n                    }\n                    ;\n                    break;\n                case 'genre':\n                    {\n                        addSimpleTag('GENRE', value);\n                        writtenTags.add('GENRE');\n                    }\n                    ;\n                    break;\n                case 'comment':\n                    {\n                        addSimpleTag('COMMENT', value);\n                        writtenTags.add('COMMENT');\n                    }\n                    ;\n                    break;\n                case 'lyrics':\n                    {\n                        addSimpleTag('LYRICS', value);\n                        writtenTags.add('LYRICS');\n                    }\n                    ;\n                    break;\n                case 'date':\n                    {\n                        addSimpleTag('DATE', value.toISOString().slice(0, 10));\n                        writtenTags.add('DATE');\n                    }\n                    ;\n                    break;\n                case 'trackNumber':\n                    {\n                        const string = metadataTags.tracksTotal !== undefined\n                            ? `${value}/${metadataTags.tracksTotal}`\n                            : value.toString();\n                        addSimpleTag('PART_NUMBER', string);\n                        writtenTags.add('PART_NUMBER');\n                    }\n                    ;\n                    break;\n                case 'discNumber':\n                    {\n                        const string = metadataTags.discsTotal !== undefined\n                            ? `${value}/${metadataTags.discsTotal}`\n                            : value.toString();\n                        addSimpleTag('DISC', string);\n                        writtenTags.add('DISC');\n                    }\n                    ;\n                    break;\n                case 'tracksTotal':\n                case 'discsTotal':\n                    {\n                        // Handled with trackNumber and discNumber respectively\n                    }\n                    ;\n                    break;\n                case 'images':\n                case 'raw':\n                    {\n                        // Handled elsewhere\n                    }\n                    ;\n                    break;\n                default: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assertNever)(key);\n            }\n        }\n        if (metadataTags.raw) {\n            for (const key in metadataTags.raw) {\n                const value = metadataTags.raw[key];\n                if (value == null || writtenTags.has(key)) {\n                    continue;\n                }\n                if (typeof value === 'string' || value instanceof Uint8Array) {\n                    addSimpleTag(key, value);\n                }\n            }\n        }\n        if (simpleTags.length === 0) {\n            return;\n        }\n        this.tagsElement = {\n            id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Tags,\n            data: [{ id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Tag, data: [\n                        { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Targets, data: [\n                                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TargetTypeValue, data: 50 },\n                                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.TargetType, data: 'MOVIE' },\n                            ] },\n                        ...simpleTags,\n                    ] }],\n        };\n    }\n    maybeCreateAttachments() {\n        const metadataTags = this.output._metadataTags;\n        if (!metadataTags.images || metadataTags.images.length === 0) {\n            return;\n        }\n        const existingFileUids = new Set();\n        this.attachmentsElement = { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Attachments, data: metadataTags.images.map((image) => {\n                let imageName = image.name;\n                if (imageName === undefined) {\n                    const baseName = image.kind === 'coverFront' ? 'cover' : image.kind === 'coverBack' ? 'back' : 'image';\n                    imageName = baseName + ((0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.imageMimeTypeToExtension)(image.mimeType) ?? '');\n                }\n                let fileUid;\n                while (true) {\n                    fileUid = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n                    if (fileUid !== 0 && !existingFileUids.has(fileUid)) {\n                        break;\n                    }\n                }\n                existingFileUids.add(fileUid);\n                return {\n                    id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.AttachedFile,\n                    data: [\n                        image.description !== undefined\n                            ? { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.FileDescription, data: new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLUnicodeString(image.description) }\n                            : null,\n                        { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.FileName, data: new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLUnicodeString(imageName) },\n                        { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.FileMediaType, data: image.mimeType },\n                        { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.FileData, data: image.data },\n                        { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.FileUID, data: fileUid },\n                    ],\n                };\n            }) };\n    }\n    createSegment() {\n        this.createTracks();\n        this.maybeCreateTags();\n        this.maybeCreateAttachments();\n        this.maybeCreateSeekHead(false);\n        const segment = {\n            id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Segment,\n            size: this.format._options.appendOnly ? -1 : SEGMENT_SIZE_BYTES,\n            data: [\n                this.seekHead, // null if append-only\n                this.segmentInfo,\n                this.tracksElement,\n                // Matroska spec says put this at the end of the file, but I think placing it before the first cluster\n                // makes more sense, and FFmpeg agrees (argumentum ad ffmpegum fallacy)\n                this.attachmentsElement,\n                this.tagsElement,\n            ],\n        };\n        this.segment = segment;\n        if (this.format._options.onSegmentHeader) {\n            this.writer.startTrackingWrites();\n        }\n        this.ebmlWriter.writeEBML(segment);\n        if (this.format._options.onSegmentHeader) {\n            const { data, start } = this.writer.stopTrackingWrites();\n            this.format._options.onSegmentHeader(data, start);\n        }\n    }\n    createCues() {\n        this.cues = { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Cues, data: [] };\n    }\n    get segmentDataOffset() {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.segment);\n        return this.ebmlWriter.dataOffsets.get(this.segment);\n    }\n    allTracksAreKnown() {\n        for (const track of this.output._tracks) {\n            if (!track.source._closed && !this.trackDatas.some(x => x.track === track)) {\n                return false; // We haven't seen a sample from this open track yet\n            }\n        }\n        return true;\n    }\n    async getMimeType() {\n        await this.allTracksKnown.promise;\n        const codecStrings = this.trackDatas.map((trackData) => {\n            if (trackData.type === 'video') {\n                return trackData.info.decoderConfig.codec;\n            }\n            else if (trackData.type === 'audio') {\n                return trackData.info.decoderConfig.codec;\n            }\n            else {\n                const map = {\n                    webvtt: 'wvtt',\n                };\n                return map[trackData.track.source._codec];\n            }\n        });\n        return (0,_matroska_misc_js__WEBPACK_IMPORTED_MODULE_6__.buildMatroskaMimeType)({\n            isWebM: this.format instanceof _output_format_js__WEBPACK_IMPORTED_MODULE_3__.WebMOutputFormat,\n            hasVideo: this.trackDatas.some(x => x.type === 'video'),\n            hasAudio: this.trackDatas.some(x => x.type === 'audio'),\n            codecStrings,\n        });\n    }\n    getVideoTrackData(track, meta) {\n        const existingTrackData = this.trackDatas.find(x => x.track === track);\n        if (existingTrackData) {\n            return existingTrackData;\n        }\n        (0,_codec_js__WEBPACK_IMPORTED_MODULE_5__.validateVideoChunkMetadata)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta.decoderConfig);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta.decoderConfig.codedWidth !== undefined);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta.decoderConfig.codedHeight !== undefined);\n        const newTrackData = {\n            track,\n            type: 'video',\n            info: {\n                width: meta.decoderConfig.codedWidth,\n                height: meta.decoderConfig.codedHeight,\n                decoderConfig: meta.decoderConfig,\n            },\n            chunkQueue: [],\n            lastWrittenMsTimestamp: null,\n        };\n        if (track.source._codec === 'vp9') {\n            // https://www.webmproject.org/docs/container specifies that VP9 \"SHOULD\" make use of the CodecPrivate\n            // field. Since WebCodecs makes no use of the description field for VP9, we need to derive it ourselves:\n            newTrackData.info.decoderConfig = {\n                ...newTrackData.info.decoderConfig,\n                description: new Uint8Array((0,_codec_js__WEBPACK_IMPORTED_MODULE_5__.generateVp9CodecConfigurationFromCodecString)(newTrackData.info.decoderConfig.codec)),\n            };\n        }\n        else if (track.source._codec === 'av1') {\n            // Per https://github.com/ietf-wg-cellar/matroska-specification/blob/master/codec/av1.md, AV1 requires\n            // CodecPrivate to be set, but WebCodecs makes no use of the description field for AV1. Thus, let's derive\n            // it ourselves:\n            newTrackData.info.decoderConfig = {\n                ...newTrackData.info.decoderConfig,\n                description: new Uint8Array((0,_codec_js__WEBPACK_IMPORTED_MODULE_5__.generateAv1CodecConfigurationFromCodecString)(newTrackData.info.decoderConfig.codec)),\n            };\n        }\n        this.trackDatas.push(newTrackData);\n        this.trackDatas.sort((a, b) => a.track.id - b.track.id);\n        if (this.allTracksAreKnown()) {\n            this.allTracksKnown.resolve();\n        }\n        return newTrackData;\n    }\n    getAudioTrackData(track, meta) {\n        const existingTrackData = this.trackDatas.find(x => x.track === track);\n        if (existingTrackData) {\n            return existingTrackData;\n        }\n        (0,_codec_js__WEBPACK_IMPORTED_MODULE_5__.validateAudioChunkMetadata)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta.decoderConfig);\n        const newTrackData = {\n            track,\n            type: 'audio',\n            info: {\n                numberOfChannels: meta.decoderConfig.numberOfChannels,\n                sampleRate: meta.decoderConfig.sampleRate,\n                decoderConfig: meta.decoderConfig,\n            },\n            chunkQueue: [],\n            lastWrittenMsTimestamp: null,\n        };\n        this.trackDatas.push(newTrackData);\n        this.trackDatas.sort((a, b) => a.track.id - b.track.id);\n        if (this.allTracksAreKnown()) {\n            this.allTracksKnown.resolve();\n        }\n        return newTrackData;\n    }\n    getSubtitleTrackData(track, meta) {\n        const existingTrackData = this.trackDatas.find(x => x.track === track);\n        if (existingTrackData) {\n            return existingTrackData;\n        }\n        (0,_codec_js__WEBPACK_IMPORTED_MODULE_5__.validateSubtitleMetadata)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta.config);\n        const newTrackData = {\n            track,\n            type: 'subtitle',\n            info: {\n                config: meta.config,\n            },\n            chunkQueue: [],\n            lastWrittenMsTimestamp: null,\n        };\n        this.trackDatas.push(newTrackData);\n        this.trackDatas.sort((a, b) => a.track.id - b.track.id);\n        if (this.allTracksAreKnown()) {\n            this.allTracksKnown.resolve();\n        }\n        return newTrackData;\n    }\n    async addEncodedVideoPacket(track, packet, meta) {\n        const release = await this.mutex.acquire();\n        try {\n            const trackData = this.getVideoTrackData(track, meta);\n            const isKeyFrame = packet.type === 'key';\n            let timestamp = this.validateAndNormalizeTimestamp(trackData.track, packet.timestamp, isKeyFrame);\n            let duration = packet.duration;\n            if (track.metadata.frameRate !== undefined) {\n                // Constrain the time values to the frame rate\n                timestamp = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.roundToMultiple)(timestamp, 1 / track.metadata.frameRate);\n                duration = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.roundToMultiple)(duration, 1 / track.metadata.frameRate);\n            }\n            const videoChunk = this.createInternalChunk(packet.data, timestamp, duration, packet.type);\n            if (track.source._codec === 'vp9')\n                this.fixVP9ColorSpace(trackData, videoChunk);\n            trackData.chunkQueue.push(videoChunk);\n            await this.interleaveChunks();\n        }\n        finally {\n            release();\n        }\n    }\n    async addEncodedAudioPacket(track, packet, meta) {\n        const release = await this.mutex.acquire();\n        try {\n            const trackData = this.getAudioTrackData(track, meta);\n            const isKeyFrame = packet.type === 'key';\n            const timestamp = this.validateAndNormalizeTimestamp(trackData.track, packet.timestamp, isKeyFrame);\n            const audioChunk = this.createInternalChunk(packet.data, timestamp, packet.duration, packet.type);\n            trackData.chunkQueue.push(audioChunk);\n            await this.interleaveChunks();\n        }\n        finally {\n            release();\n        }\n    }\n    async addSubtitleCue(track, cue, meta) {\n        const release = await this.mutex.acquire();\n        try {\n            const trackData = this.getSubtitleTrackData(track, meta);\n            const timestamp = this.validateAndNormalizeTimestamp(trackData.track, cue.timestamp, true);\n            let bodyText = cue.text;\n            const timestampMs = Math.round(timestamp * 1000);\n            // Replace in-body timestamps so that they're relative to the cue start time\n            _subtitles_js__WEBPACK_IMPORTED_MODULE_7__.inlineTimestampRegex.lastIndex = 0;\n            bodyText = bodyText.replace(_subtitles_js__WEBPACK_IMPORTED_MODULE_7__.inlineTimestampRegex, (match) => {\n                const time = (0,_subtitles_js__WEBPACK_IMPORTED_MODULE_7__.parseSubtitleTimestamp)(match.slice(1, -1));\n                const offsetTime = time - timestampMs;\n                return `<${(0,_subtitles_js__WEBPACK_IMPORTED_MODULE_7__.formatSubtitleTimestamp)(offsetTime)}>`;\n            });\n            const body = _misc_js__WEBPACK_IMPORTED_MODULE_1__.textEncoder.encode(bodyText);\n            const additions = `${cue.settings ?? ''}\\n${cue.identifier ?? ''}\\n${cue.notes ?? ''}`;\n            const subtitleChunk = this.createInternalChunk(body, timestamp, cue.duration, 'key', additions.trim() ? _misc_js__WEBPACK_IMPORTED_MODULE_1__.textEncoder.encode(additions) : null);\n            trackData.chunkQueue.push(subtitleChunk);\n            await this.interleaveChunks();\n        }\n        finally {\n            release();\n        }\n    }\n    async interleaveChunks(isFinalCall = false) {\n        if (!isFinalCall) {\n            if (!this.allTracksAreKnown()) {\n                return; // We can't interleave yet as we don't yet know how many tracks we'll truly have\n            }\n        }\n        outer: while (true) {\n            let trackWithMinTimestamp = null;\n            let minTimestamp = Infinity;\n            for (const trackData of this.trackDatas) {\n                if (!isFinalCall && trackData.chunkQueue.length === 0 && !trackData.track.source._closed) {\n                    break outer;\n                }\n                if (trackData.chunkQueue.length > 0 && trackData.chunkQueue[0].timestamp < minTimestamp) {\n                    trackWithMinTimestamp = trackData;\n                    minTimestamp = trackData.chunkQueue[0].timestamp;\n                }\n            }\n            if (!trackWithMinTimestamp) {\n                break;\n            }\n            const chunk = trackWithMinTimestamp.chunkQueue.shift();\n            this.writeBlock(trackWithMinTimestamp, chunk);\n        }\n        if (!isFinalCall) {\n            await this.writer.flush();\n        }\n    }\n    /**\n     * Due to [a bug in Chromium](https://bugs.chromium.org/p/chromium/issues/detail?id=1377842), VP9 streams often\n     * lack color space information. This method patches in that information.\n     */\n    fixVP9ColorSpace(trackData, chunk) {\n        // http://downloads.webmproject.org/docs/vp9/vp9-bitstream_superframe-and-uncompressed-header_v1.0.pdf\n        if (chunk.type !== 'key')\n            return;\n        if (!trackData.info.decoderConfig.colorSpace || !trackData.info.decoderConfig.colorSpace.matrix)\n            return;\n        const bitstream = new _misc_js__WEBPACK_IMPORTED_MODULE_1__.Bitstream(chunk.data);\n        bitstream.skipBits(2);\n        const profileLowBit = bitstream.readBits(1);\n        const profileHighBit = bitstream.readBits(1);\n        const profile = (profileHighBit << 1) + profileLowBit;\n        if (profile === 3)\n            bitstream.skipBits(1);\n        const showExistingFrame = bitstream.readBits(1);\n        if (showExistingFrame)\n            return;\n        const frameType = bitstream.readBits(1);\n        if (frameType !== 0)\n            return; // Just to be sure\n        bitstream.skipBits(2);\n        const syncCode = bitstream.readBits(24);\n        if (syncCode !== 0x498342)\n            return;\n        if (profile >= 2)\n            bitstream.skipBits(1);\n        const colorSpaceID = {\n            rgb: 7,\n            bt709: 2,\n            bt470bg: 1,\n            smpte170m: 3,\n        }[trackData.info.decoderConfig.colorSpace.matrix];\n        // The bitstream position is now at the start of the color space bits.\n        // We can use the global writeBits function here as requested.\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.writeBits)(chunk.data, bitstream.pos, bitstream.pos + 3, colorSpaceID);\n    }\n    /** Converts a read-only external chunk into an internal one for easier use. */\n    createInternalChunk(data, timestamp, duration, type, additions = null) {\n        const internalChunk = {\n            data,\n            type,\n            timestamp,\n            duration,\n            additions,\n        };\n        return internalChunk;\n    }\n    /** Writes a block containing media data to the file. */\n    writeBlock(trackData, chunk) {\n        // Due to the interlacing algorithm, this code will be run once we've seen one chunk from every media track.\n        if (!this.segment) {\n            this.createSegment();\n        }\n        const msTimestamp = Math.round(1000 * chunk.timestamp);\n        // We wanna only finalize this cluster (and begin a new one) if we know that each track will be able to\n        // start the new one with a key frame.\n        const keyFrameQueuedEverywhere = this.trackDatas.every((otherTrackData) => {\n            if (trackData === otherTrackData) {\n                return chunk.type === 'key';\n            }\n            const firstQueuedSample = otherTrackData.chunkQueue[0];\n            if (firstQueuedSample) {\n                return firstQueuedSample.type === 'key';\n            }\n            return otherTrackData.track.source._closed;\n        });\n        let shouldCreateNewCluster = false;\n        if (!this.currentCluster) {\n            shouldCreateNewCluster = true;\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.currentClusterStartMsTimestamp !== null);\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.currentClusterMaxMsTimestamp !== null);\n            const relativeTimestamp = msTimestamp - this.currentClusterStartMsTimestamp;\n            shouldCreateNewCluster = (keyFrameQueuedEverywhere\n                // This check is required because that means there is already a block with this timestamp in the\n                // CURRENT chunk, meaning that starting the next cluster at the same timestamp is forbidden (since\n                // the already-written block would belong into it instead).\n                && msTimestamp > this.currentClusterMaxMsTimestamp\n                && relativeTimestamp >= 1000 * (this.format._options.minimumClusterDuration ?? 1))\n                // The cluster would exceed its maximum allowed length. This puts us in an unfortunate position and forces\n                // us to begin the next cluster with a delta frame. Although this is undesirable, it is not forbidden by the\n                // spec and is supported by players.\n                || relativeTimestamp > MAX_CLUSTER_TIMESTAMP_MS;\n        }\n        if (shouldCreateNewCluster) {\n            this.createNewCluster(msTimestamp);\n        }\n        const relativeTimestamp = msTimestamp - this.currentClusterStartMsTimestamp;\n        if (relativeTimestamp < MIN_CLUSTER_TIMESTAMP_MS) {\n            // The block lies too far in the past, it's not representable within this cluster\n            return;\n        }\n        const prelude = new Uint8Array(4);\n        const view = new DataView(prelude.buffer);\n        // 0x80 to indicate it's the last byte of a multi-byte number\n        view.setUint8(0, 0x80 | trackData.track.id);\n        view.setInt16(1, relativeTimestamp, false);\n        const msDuration = Math.round(1000 * chunk.duration);\n        if (!chunk.additions) {\n            // No additions, we can write out a SimpleBlock\n            view.setUint8(3, Number(chunk.type === 'key') << 7); // Flags (keyframe flag only present for SimpleBlock)\n            const simpleBlock = { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.SimpleBlock, data: [\n                    prelude,\n                    chunk.data,\n                ] };\n            this.ebmlWriter.writeEBML(simpleBlock);\n        }\n        else {\n            const blockGroup = { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.BlockGroup, data: [\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Block, data: [\n                            prelude,\n                            chunk.data,\n                        ] },\n                    chunk.type === 'delta'\n                        ? {\n                            id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.ReferenceBlock,\n                            data: new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLSignedInt(trackData.lastWrittenMsTimestamp - msTimestamp),\n                        }\n                        : null,\n                    chunk.additions\n                        ? { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.BlockAdditions, data: [\n                                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.BlockMore, data: [\n                                        { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.BlockAdditional, data: chunk.additions },\n                                        { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.BlockAddID, data: 1 },\n                                    ] },\n                            ] }\n                        : null,\n                    msDuration > 0 ? { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.BlockDuration, data: msDuration } : null,\n                ] };\n            this.ebmlWriter.writeEBML(blockGroup);\n        }\n        this.duration = Math.max(this.duration, msTimestamp + msDuration);\n        trackData.lastWrittenMsTimestamp = msTimestamp;\n        if (!this.trackDatasInCurrentCluster.has(trackData)) {\n            this.trackDatasInCurrentCluster.set(trackData, {\n                firstMsTimestamp: msTimestamp,\n            });\n        }\n        this.currentClusterMaxMsTimestamp = Math.max(this.currentClusterMaxMsTimestamp, msTimestamp);\n    }\n    /** Creates a new Cluster element to contain media chunks. */\n    createNewCluster(msTimestamp) {\n        if (this.currentCluster) {\n            this.finalizeCurrentCluster();\n        }\n        if (this.format._options.onCluster) {\n            this.writer.startTrackingWrites();\n        }\n        this.currentCluster = {\n            id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Cluster,\n            size: this.format._options.appendOnly ? -1 : CLUSTER_SIZE_BYTES,\n            data: [\n                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.Timestamp, data: msTimestamp },\n            ],\n        };\n        this.ebmlWriter.writeEBML(this.currentCluster);\n        this.currentClusterStartMsTimestamp = msTimestamp;\n        this.currentClusterMaxMsTimestamp = msTimestamp;\n        this.trackDatasInCurrentCluster.clear();\n    }\n    finalizeCurrentCluster() {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.currentCluster);\n        if (!this.format._options.appendOnly) {\n            const clusterSize = this.writer.getPos() - this.ebmlWriter.dataOffsets.get(this.currentCluster);\n            const endPos = this.writer.getPos();\n            // Write the size now that we know it\n            this.writer.seek(this.ebmlWriter.offsets.get(this.currentCluster) + 4);\n            this.ebmlWriter.writeVarInt(clusterSize, CLUSTER_SIZE_BYTES);\n            this.writer.seek(endPos);\n        }\n        if (this.format._options.onCluster) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.currentClusterStartMsTimestamp !== null);\n            const { data, start } = this.writer.stopTrackingWrites();\n            this.format._options.onCluster(data, start, this.currentClusterStartMsTimestamp / 1000);\n        }\n        const clusterOffsetFromSegment = this.ebmlWriter.offsets.get(this.currentCluster) - this.segmentDataOffset;\n        // Group tracks by their first timestamp and create a CuePoint for each unique timestamp\n        const groupedByTimestamp = new Map();\n        for (const [trackData, { firstMsTimestamp }] of this.trackDatasInCurrentCluster) {\n            if (!groupedByTimestamp.has(firstMsTimestamp)) {\n                groupedByTimestamp.set(firstMsTimestamp, []);\n            }\n            groupedByTimestamp.get(firstMsTimestamp).push(trackData);\n        }\n        const groupedAndSortedByTimestamp = [...groupedByTimestamp.entries()].sort((a, b) => a[0] - b[0]);\n        // Add CuePoints to the Cues element for better seeking\n        for (const [msTimestamp, trackDatas] of groupedAndSortedByTimestamp) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.cues);\n            this.cues.data.push({ id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.CuePoint, data: [\n                    { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.CueTime, data: msTimestamp },\n                    // Create CueTrackPositions for each track that starts at this timestamp\n                    ...trackDatas.map((trackData) => {\n                        return { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.CueTrackPositions, data: [\n                                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.CueTrack, data: trackData.track.id },\n                                { id: _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLId.CueClusterPosition, data: clusterOffsetFromSegment },\n                            ] };\n                    }),\n                ] });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async onTrackClose() {\n        const release = await this.mutex.acquire();\n        if (this.allTracksAreKnown()) {\n            this.allTracksKnown.resolve();\n        }\n        // Since a track is now closed, we may be able to write out chunks that were previously waiting\n        await this.interleaveChunks();\n        release();\n    }\n    /** Finalizes the file, making it ready for use. Must be called after all media chunks have been added. */\n    async finalize() {\n        const release = await this.mutex.acquire();\n        this.allTracksKnown.resolve();\n        if (!this.segment) {\n            this.createSegment();\n        }\n        // Flush any remaining queued chunks to the file\n        await this.interleaveChunks(true);\n        if (this.currentCluster) {\n            this.finalizeCurrentCluster();\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.cues);\n        this.ebmlWriter.writeEBML(this.cues);\n        if (!this.format._options.appendOnly) {\n            const endPos = this.writer.getPos();\n            // Write the Segment size\n            const segmentSize = this.writer.getPos() - this.segmentDataOffset;\n            this.writer.seek(this.ebmlWriter.offsets.get(this.segment) + 4);\n            this.ebmlWriter.writeVarInt(segmentSize, SEGMENT_SIZE_BYTES);\n            // Write the duration of the media to the Segment\n            this.segmentDuration.data = new _ebml_js__WEBPACK_IMPORTED_MODULE_2__.EBMLFloat64(this.duration);\n            this.writer.seek(this.ebmlWriter.offsets.get(this.segmentDuration));\n            this.ebmlWriter.writeEBML(this.segmentDuration);\n            // Fill in SeekHead position data and write it again\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.seekHead);\n            this.writer.seek(this.ebmlWriter.offsets.get(this.seekHead));\n            this.maybeCreateSeekHead(true);\n            this.ebmlWriter.writeEBML(this.seekHead);\n            this.writer.seek(endPos);\n        }\n        release();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/matroska/matroska-muxer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/media-sink.js":
/*!****************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/media-sink.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioBufferSink: function() { return /* binding */ AudioBufferSink; },\n/* harmony export */   AudioSampleSink: function() { return /* binding */ AudioSampleSink; },\n/* harmony export */   BaseMediaSampleSink: function() { return /* binding */ BaseMediaSampleSink; },\n/* harmony export */   CanvasSink: function() { return /* binding */ CanvasSink; },\n/* harmony export */   EncodedPacketSink: function() { return /* binding */ EncodedPacketSink; },\n/* harmony export */   VideoSampleSink: function() { return /* binding */ VideoSampleSink; }\n/* harmony export */ });\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _codec_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./codec-data.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec-data.js\");\n/* harmony import */ var _custom_coder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./custom-coder.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/custom-coder.js\");\n/* harmony import */ var _input_track_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input-track.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/input-track.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _packet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packet.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/packet.js\");\n/* harmony import */ var _pcm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pcm.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/pcm.js\");\n/* harmony import */ var _sample_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sample.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/sample.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n\n\n\nconst validatePacketRetrievalOptions = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new TypeError('options must be an object.');\n    }\n    if (options.metadataOnly !== undefined && typeof options.metadataOnly !== 'boolean') {\n        throw new TypeError('options.metadataOnly, when defined, must be a boolean.');\n    }\n    if (options.verifyKeyPackets !== undefined && typeof options.verifyKeyPackets !== 'boolean') {\n        throw new TypeError('options.verifyKeyPackets, when defined, must be a boolean.');\n    }\n    if (options.verifyKeyPackets && options.metadataOnly) {\n        throw new TypeError('options.verifyKeyPackets and options.metadataOnly cannot be enabled together.');\n    }\n};\nconst validateTimestamp = (timestamp) => {\n    if (typeof timestamp !== 'number' || Number.isNaN(timestamp)) {\n        throw new TypeError('timestamp must be a number.'); // It can be non-finite, that's fine\n    }\n};\nconst maybeFixPacketType = (track, promise, options) => {\n    if (options.verifyKeyPackets) {\n        return promise.then(async (packet) => {\n            if (!packet || packet.type === 'delta') {\n                return packet;\n            }\n            const determinedType = await track.determinePacketType(packet);\n            if (determinedType) {\n                // @ts-expect-error Technically readonly\n                packet.type = determinedType;\n            }\n            return packet;\n        });\n    }\n    else {\n        return promise;\n    }\n};\n/**\n * Sink for retrieving encoded packets from an input track.\n * @group Media sinks\n * @public\n */\nclass EncodedPacketSink {\n    /** Creates a new {@link EncodedPacketSink} for the given {@link InputTrack}. */\n    constructor(track) {\n        if (!(track instanceof _input_track_js__WEBPACK_IMPORTED_MODULE_0__.InputTrack)) {\n            throw new TypeError('track must be an InputTrack.');\n        }\n        this._track = track;\n    }\n    /**\n     * Retrieves the track's first packet (in decode order), or null if it has no packets. The first packet is very\n     * likely to be a key packet.\n     */\n    getFirstPacket(options = {}) {\n        validatePacketRetrievalOptions(options);\n        return maybeFixPacketType(this._track, this._track._backing.getFirstPacket(options), options);\n    }\n    /**\n     * Retrieves the packet corresponding to the given timestamp, in seconds. More specifically, returns the last packet\n     * (in presentation order) with a start timestamp less than or equal to the given timestamp. This method can be\n     * used to retrieve a track's last packet using `getPacket(Infinity)`. The method returns null if the timestamp\n     * is before the first packet in the track.\n     *\n     * @param timestamp - The timestamp used for retrieval, in seconds.\n     */\n    getPacket(timestamp, options = {}) {\n        validateTimestamp(timestamp);\n        validatePacketRetrievalOptions(options);\n        return maybeFixPacketType(this._track, this._track._backing.getPacket(timestamp, options), options);\n    }\n    /**\n     * Retrieves the packet following the given packet (in decode order), or null if the given packet is the\n     * last packet.\n     */\n    getNextPacket(packet, options = {}) {\n        if (!(packet instanceof _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket)) {\n            throw new TypeError('packet must be an EncodedPacket.');\n        }\n        validatePacketRetrievalOptions(options);\n        return maybeFixPacketType(this._track, this._track._backing.getNextPacket(packet, options), options);\n    }\n    /**\n     * Retrieves the key packet corresponding to the given timestamp, in seconds. More specifically, returns the last\n     * key packet (in presentation order) with a start timestamp less than or equal to the given timestamp. A key packet\n     * is a packet that doesn't require previous packets to be decoded. This method can be used to retrieve a track's\n     * last key packet using `getKeyPacket(Infinity)`. The method returns null if the timestamp is before the first\n     * key packet in the track.\n     *\n     * To ensure that the returned packet is guaranteed to be a real key frame, enable `options.verifyKeyPackets`.\n     *\n     * @param timestamp - The timestamp used for retrieval, in seconds.\n     */\n    async getKeyPacket(timestamp, options = {}) {\n        validateTimestamp(timestamp);\n        validatePacketRetrievalOptions(options);\n        if (!options.verifyKeyPackets) {\n            return this._track._backing.getKeyPacket(timestamp, options);\n        }\n        const packet = await this._track._backing.getKeyPacket(timestamp, options);\n        if (!packet || packet.type === 'delta') {\n            return packet;\n        }\n        const determinedType = await this._track.determinePacketType(packet);\n        if (determinedType === 'delta') {\n            // Try returning the previous key packet (in hopes that it's actually a key packet)\n            return this.getKeyPacket(packet.timestamp - 1 / this._track.timeResolution, options);\n        }\n        return packet;\n    }\n    /**\n     * Retrieves the key packet following the given packet (in decode order), or null if the given packet is the last\n     * key packet.\n     *\n     * To ensure that the returned packet is guaranteed to be a real key frame, enable `options.verifyKeyPackets`.\n     */\n    async getNextKeyPacket(packet, options = {}) {\n        if (!(packet instanceof _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket)) {\n            throw new TypeError('packet must be an EncodedPacket.');\n        }\n        validatePacketRetrievalOptions(options);\n        if (!options.verifyKeyPackets) {\n            return this._track._backing.getNextKeyPacket(packet, options);\n        }\n        const nextPacket = await this._track._backing.getNextKeyPacket(packet, options);\n        if (!nextPacket || nextPacket.type === 'delta') {\n            return nextPacket;\n        }\n        const determinedType = await this._track.determinePacketType(nextPacket);\n        if (determinedType === 'delta') {\n            // Try returning the next key packet (in hopes that it's actually a key packet)\n            return this.getNextKeyPacket(nextPacket, options);\n        }\n        return nextPacket;\n    }\n    /**\n     * Creates an async iterator that yields the packets in this track in decode order. To enable fast iteration, this\n     * method will intelligently preload packets based on the speed of the consumer.\n     *\n     * @param startPacket - (optional) The packet from which iteration should begin. This packet will also be yielded.\n     * @param endTimestamp - (optional) The timestamp at which iteration should end. This packet will _not_ be yielded.\n     */\n    packets(startPacket, endPacket, options = {}) {\n        if (startPacket !== undefined && !(startPacket instanceof _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket)) {\n            throw new TypeError('startPacket must be an EncodedPacket.');\n        }\n        if (startPacket !== undefined && startPacket.isMetadataOnly && !options?.metadataOnly) {\n            throw new TypeError('startPacket can only be metadata-only if options.metadataOnly is enabled.');\n        }\n        if (endPacket !== undefined && !(endPacket instanceof _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket)) {\n            throw new TypeError('endPacket must be an EncodedPacket.');\n        }\n        validatePacketRetrievalOptions(options);\n        const packetQueue = [];\n        let { promise: queueNotEmpty, resolve: onQueueNotEmpty } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)();\n        let { promise: queueDequeue, resolve: onQueueDequeue } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)();\n        let ended = false;\n        let terminated = false;\n        // This stores errors that are \"out of band\" in the sense that they didn't occur in the normal flow of this\n        // method but instead in a different context. This error should not go unnoticed and must be bubbled up to\n        // the consumer.\n        let outOfBandError = null;\n        const timestamps = [];\n        // The queue should always be big enough to hold 1 second worth of packets\n        const maxQueueSize = () => Math.max(2, timestamps.length);\n        // The following is the \"pump\" process that keeps pumping packets into the queue\n        (async () => {\n            let packet = startPacket ?? await this.getFirstPacket(options);\n            while (packet && !terminated) {\n                if (endPacket && packet.sequenceNumber >= endPacket?.sequenceNumber) {\n                    break;\n                }\n                if (packetQueue.length > maxQueueSize()) {\n                    ({ promise: queueDequeue, resolve: onQueueDequeue } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)());\n                    await queueDequeue;\n                    continue;\n                }\n                packetQueue.push(packet);\n                onQueueNotEmpty();\n                ({ promise: queueNotEmpty, resolve: onQueueNotEmpty } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)());\n                packet = await this.getNextPacket(packet, options);\n            }\n            ended = true;\n            onQueueNotEmpty();\n        })().catch((error) => {\n            if (!outOfBandError) {\n                outOfBandError = error;\n                onQueueNotEmpty();\n            }\n        });\n        return {\n            async next() {\n                while (true) {\n                    if (terminated) {\n                        return { value: undefined, done: true };\n                    }\n                    else if (outOfBandError) {\n                        throw outOfBandError;\n                    }\n                    else if (packetQueue.length > 0) {\n                        const value = packetQueue.shift();\n                        const now = performance.now();\n                        timestamps.push(now);\n                        while (timestamps.length > 0 && now - timestamps[0] >= 1000) {\n                            timestamps.shift();\n                        }\n                        onQueueDequeue();\n                        return { value, done: false };\n                    }\n                    else if (ended) {\n                        return { value: undefined, done: true };\n                    }\n                    else {\n                        await queueNotEmpty;\n                    }\n                }\n            },\n            async return() {\n                terminated = true;\n                onQueueDequeue();\n                onQueueNotEmpty();\n                return { value: undefined, done: true };\n            },\n            async throw(error) {\n                throw error;\n            },\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n        };\n    }\n}\nclass DecoderWrapper {\n    constructor(onSample, onError) {\n        this.onSample = onSample;\n        this.onError = onError;\n    }\n}\n/**\n * Base class for decoded media sample sinks.\n * @group Media sinks\n * @public\n */\nclass BaseMediaSampleSink {\n    /** @internal */\n    mediaSamplesInRange(startTimestamp = 0, endTimestamp = Infinity) {\n        validateTimestamp(startTimestamp);\n        validateTimestamp(endTimestamp);\n        const sampleQueue = [];\n        let firstSampleQueued = false;\n        let lastSample = null;\n        let { promise: queueNotEmpty, resolve: onQueueNotEmpty } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)();\n        let { promise: queueDequeue, resolve: onQueueDequeue } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)();\n        let decoderIsFlushed = false;\n        let ended = false;\n        let terminated = false;\n        // This stores errors that are \"out of band\" in the sense that they didn't occur in the normal flow of this\n        // method but instead in a different context. This error should not go unnoticed and must be bubbled up to\n        // the consumer.\n        let outOfBandError = null;\n        // The following is the \"pump\" process that keeps pumping packets into the decoder\n        (async () => {\n            const decoderError = new Error();\n            const decoder = await this._createDecoder((sample) => {\n                onQueueDequeue();\n                if (sample.timestamp >= endTimestamp) {\n                    ended = true;\n                }\n                if (ended) {\n                    sample.close();\n                    return;\n                }\n                if (lastSample) {\n                    if (sample.timestamp > startTimestamp) {\n                        // We don't know ahead of time what the first first is. This is because the first first is the\n                        // last first whose timestamp is less than or equal to the start timestamp. Therefore we need to\n                        // wait for the first first after the start timestamp, and then we'll know that the previous\n                        // first was the first first.\n                        sampleQueue.push(lastSample);\n                        firstSampleQueued = true;\n                    }\n                    else {\n                        lastSample.close();\n                    }\n                }\n                if (sample.timestamp >= startTimestamp) {\n                    sampleQueue.push(sample);\n                    firstSampleQueued = true;\n                }\n                lastSample = firstSampleQueued ? null : sample;\n                if (sampleQueue.length > 0) {\n                    onQueueNotEmpty();\n                    ({ promise: queueNotEmpty, resolve: onQueueNotEmpty } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)());\n                }\n            }, (error) => {\n                if (!outOfBandError) {\n                    error.stack = decoderError.stack; // Provide a more useful stack trace\n                    outOfBandError = error;\n                    onQueueNotEmpty();\n                }\n            });\n            const packetSink = this._createPacketSink();\n            const keyPacket = await packetSink.getKeyPacket(startTimestamp, { verifyKeyPackets: true })\n                ?? await packetSink.getFirstPacket();\n            if (!keyPacket) {\n                return;\n            }\n            let currentPacket = keyPacket;\n            let endPacket = undefined;\n            if (endTimestamp < Infinity) {\n                // When an end timestamp is set, we cannot simply use that for the packet iterator due to out-of-order\n                // frames (B-frames). Instead, we'll need to keep decoding packets until we get a frame that exceeds\n                // this end time. However, we can still put a bound on it: Since key frames are by definition never\n                // out of order, we can stop at the first key frame after the end timestamp.\n                const packet = await packetSink.getPacket(endTimestamp);\n                const keyPacket = !packet\n                    ? null\n                    : packet.type === 'key' && packet.timestamp === endTimestamp\n                        ? packet\n                        : await packetSink.getNextKeyPacket(packet, { verifyKeyPackets: true });\n                if (keyPacket) {\n                    endPacket = keyPacket;\n                }\n            }\n            const packets = packetSink.packets(keyPacket, endPacket);\n            await packets.next(); // Skip the start packet as we already have it\n            while (currentPacket && !ended) {\n                const maxQueueSize = computeMaxQueueSize(sampleQueue.length);\n                if (sampleQueue.length + decoder.getDecodeQueueSize() > maxQueueSize) {\n                    ({ promise: queueDequeue, resolve: onQueueDequeue } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)());\n                    await queueDequeue;\n                    continue;\n                }\n                decoder.decode(currentPacket);\n                const packetResult = await packets.next();\n                if (packetResult.done) {\n                    break;\n                }\n                currentPacket = packetResult.value;\n            }\n            await packets.return();\n            if (!terminated)\n                await decoder.flush();\n            decoder.close();\n            if (!firstSampleQueued && lastSample) {\n                sampleQueue.push(lastSample);\n            }\n            decoderIsFlushed = true;\n            onQueueNotEmpty(); // To unstuck the generator\n        })().catch((error) => {\n            if (!outOfBandError) {\n                outOfBandError = error;\n                onQueueNotEmpty();\n            }\n        });\n        return {\n            async next() {\n                while (true) {\n                    if (terminated) {\n                        return { value: undefined, done: true };\n                    }\n                    else if (outOfBandError) {\n                        throw outOfBandError;\n                    }\n                    else if (sampleQueue.length > 0) {\n                        const value = sampleQueue.shift();\n                        onQueueDequeue();\n                        return { value, done: false };\n                    }\n                    else if (!decoderIsFlushed) {\n                        await queueNotEmpty;\n                    }\n                    else {\n                        return { value: undefined, done: true };\n                    }\n                }\n            },\n            async return() {\n                terminated = true;\n                ended = true;\n                onQueueDequeue();\n                onQueueNotEmpty();\n                lastSample?.close();\n                for (const sample of sampleQueue) {\n                    sample.close();\n                }\n                return { value: undefined, done: true };\n            },\n            async throw(error) {\n                throw error;\n            },\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n        };\n    }\n    /** @internal */\n    mediaSamplesAtTimestamps(timestamps) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.validateAnyIterable)(timestamps);\n        const timestampIterator = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.toAsyncIterator)(timestamps);\n        const timestampsOfInterest = [];\n        const sampleQueue = [];\n        let { promise: queueNotEmpty, resolve: onQueueNotEmpty } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)();\n        let { promise: queueDequeue, resolve: onQueueDequeue } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)();\n        let decoderIsFlushed = false;\n        let terminated = false;\n        // This stores errors that are \"out of band\" in the sense that they didn't occur in the normal flow of this\n        // method but instead in a different context. This error should not go unnoticed and must be bubbled up to\n        // the consumer.\n        let outOfBandError = null;\n        const pushToQueue = (sample) => {\n            sampleQueue.push(sample);\n            onQueueNotEmpty();\n            ({ promise: queueNotEmpty, resolve: onQueueNotEmpty } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)());\n        };\n        // The following is the \"pump\" process that keeps pumping packets into the decoder\n        (async () => {\n            const decoderError = new Error();\n            const decoder = await this._createDecoder((sample) => {\n                onQueueDequeue();\n                if (terminated) {\n                    sample.close();\n                    return;\n                }\n                let sampleUses = 0;\n                while (timestampsOfInterest.length > 0\n                    && sample.timestamp - timestampsOfInterest[0] > -1e-10 // Give it a little epsilon\n                ) {\n                    sampleUses++;\n                    timestampsOfInterest.shift();\n                }\n                if (sampleUses > 0) {\n                    for (let i = 0; i < sampleUses; i++) {\n                        // Clone the sample if we need to emit it multiple times\n                        pushToQueue((i < sampleUses - 1 ? sample.clone() : sample));\n                    }\n                }\n                else {\n                    sample.close();\n                }\n            }, (error) => {\n                if (!outOfBandError) {\n                    error.stack = decoderError.stack; // Provide a more useful stack trace\n                    outOfBandError = error;\n                    onQueueNotEmpty();\n                }\n            });\n            const packetSink = this._createPacketSink();\n            let lastPacket = null;\n            let lastKeyPacket = null;\n            // The end sequence number (inclusive) in the next batch of packets that will be decoded. The batch starts\n            // at the last key frame and goes until this sequence number.\n            let maxSequenceNumber = -1;\n            const decodePackets = async () => {\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(lastKeyPacket);\n                // Start at the current key packet\n                let currentPacket = lastKeyPacket;\n                decoder.decode(currentPacket);\n                while (currentPacket.sequenceNumber < maxSequenceNumber) {\n                    const maxQueueSize = computeMaxQueueSize(sampleQueue.length);\n                    while (sampleQueue.length + decoder.getDecodeQueueSize() > maxQueueSize && !terminated) {\n                        ({ promise: queueDequeue, resolve: onQueueDequeue } = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)());\n                        await queueDequeue;\n                    }\n                    if (terminated) {\n                        break;\n                    }\n                    const nextPacket = await packetSink.getNextPacket(currentPacket);\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(nextPacket);\n                    decoder.decode(nextPacket);\n                    currentPacket = nextPacket;\n                }\n                maxSequenceNumber = -1;\n            };\n            const flushDecoder = async () => {\n                await decoder.flush();\n                // We don't expect this list to have any elements in it anymore, but in case it does, let's emit\n                // nulls for every remaining element, then clear it.\n                for (let i = 0; i < timestampsOfInterest.length; i++) {\n                    pushToQueue(null);\n                }\n                timestampsOfInterest.length = 0;\n            };\n            for await (const timestamp of timestampIterator) {\n                validateTimestamp(timestamp);\n                if (terminated) {\n                    break;\n                }\n                const targetPacket = await packetSink.getPacket(timestamp);\n                const keyPacket = targetPacket && await packetSink.getKeyPacket(timestamp, { verifyKeyPackets: true });\n                if (!keyPacket) {\n                    if (maxSequenceNumber !== -1) {\n                        await decodePackets();\n                        await flushDecoder();\n                    }\n                    pushToQueue(null);\n                    lastPacket = null;\n                    continue;\n                }\n                // Check if the key packet has changed or if we're going back in time\n                if (lastPacket\n                    && (keyPacket.sequenceNumber !== lastKeyPacket.sequenceNumber\n                        || targetPacket.timestamp < lastPacket.timestamp)) {\n                    await decodePackets();\n                    await flushDecoder(); // Always flush here, improves decoder compatibility\n                }\n                timestampsOfInterest.push(targetPacket.timestamp);\n                maxSequenceNumber = Math.max(targetPacket.sequenceNumber, maxSequenceNumber);\n                lastPacket = targetPacket;\n                lastKeyPacket = keyPacket;\n            }\n            if (!terminated) {\n                if (maxSequenceNumber !== -1) {\n                    // We still need to decode packets\n                    await decodePackets();\n                }\n                await flushDecoder();\n            }\n            decoder.close();\n            decoderIsFlushed = true;\n            onQueueNotEmpty(); // To unstuck the generator\n        })().catch((error) => {\n            if (!outOfBandError) {\n                outOfBandError = error;\n                onQueueNotEmpty();\n            }\n        });\n        return {\n            async next() {\n                while (true) {\n                    if (terminated) {\n                        return { value: undefined, done: true };\n                    }\n                    else if (outOfBandError) {\n                        throw outOfBandError;\n                    }\n                    else if (sampleQueue.length > 0) {\n                        const value = sampleQueue.shift();\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(value !== undefined);\n                        onQueueDequeue();\n                        return { value, done: false };\n                    }\n                    else if (!decoderIsFlushed) {\n                        await queueNotEmpty;\n                    }\n                    else {\n                        return { value: undefined, done: true };\n                    }\n                }\n            },\n            async return() {\n                terminated = true;\n                onQueueDequeue();\n                onQueueNotEmpty();\n                for (const sample of sampleQueue) {\n                    sample?.close();\n                }\n                return { value: undefined, done: true };\n            },\n            async throw(error) {\n                throw error;\n            },\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n        };\n    }\n}\nconst computeMaxQueueSize = (decodedSampleQueueSize) => {\n    // If we have decoded samples lying around, limit the total queue size to a small value (decoded samples can use up\n    // a lot of memory). If not, we're fine with a much bigger queue of encoded packets waiting to be decoded. In fact,\n    // some decoders only start flushing out decoded chunks when the packet queue is large enough.\n    return decodedSampleQueueSize === 0 ? 40 : 8;\n};\nclass VideoDecoderWrapper extends DecoderWrapper {\n    constructor(onSample, onError, codec, decoderConfig, rotation, timeResolution) {\n        super(onSample, onError);\n        this.codec = codec;\n        this.decoderConfig = decoderConfig;\n        this.rotation = rotation;\n        this.timeResolution = timeResolution;\n        this.decoder = null;\n        this.customDecoder = null;\n        this.customDecoderCallSerializer = new _misc_js__WEBPACK_IMPORTED_MODULE_2__.CallSerializer();\n        this.customDecoderQueueSize = 0;\n        this.inputTimestamps = []; // Timestamps input into the decoder, sorted.\n        this.sampleQueue = []; // Safari-specific thing, check usage.\n        this.currentPacketIndex = 0;\n        this.raslSkipped = false; // For HEVC stuff\n        const MatchingCustomDecoder = _custom_coder_js__WEBPACK_IMPORTED_MODULE_3__.customVideoDecoders.find(x => x.supports(codec, decoderConfig));\n        if (MatchingCustomDecoder) {\n            // @ts-expect-error \"Can't create instance of abstract class 🤓\"\n            this.customDecoder = new MatchingCustomDecoder();\n            // @ts-expect-error It's technically readonly\n            this.customDecoder.codec = codec;\n            // @ts-expect-error It's technically readonly\n            this.customDecoder.config = decoderConfig;\n            // @ts-expect-error It's technically readonly\n            this.customDecoder.onSample = (sample) => {\n                if (!(sample instanceof _sample_js__WEBPACK_IMPORTED_MODULE_4__.VideoSample)) {\n                    throw new TypeError('The argument passed to onSample must be a VideoSample.');\n                }\n                this.finalizeAndEmitSample(sample);\n            };\n            void this.customDecoderCallSerializer.call(() => this.customDecoder.init());\n        }\n        else {\n            // Specific handler for the WebCodecs VideoDecoder to iron out browser differences\n            const sampleHandler = (sample) => {\n                if ((0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.isSafari)()) {\n                    // For correct B-frame handling, we don't just hand over the frames directly but instead add them to\n                    // a queue, because we want to ensure frames are emitted in presentation order. We flush the queue\n                    // each time we receive a frame with a timestamp larger than the highest we've seen so far, as we\n                    // can sure that is not a B-frame. Typically, WebCodecs automatically guarantees that frames are\n                    // emitted in presentation order, but Safari doesn't always follow this rule.\n                    if (this.sampleQueue.length > 0 && (sample.timestamp >= (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.last)(this.sampleQueue).timestamp)) {\n                        for (const sample of this.sampleQueue) {\n                            this.finalizeAndEmitSample(sample);\n                        }\n                        this.sampleQueue.length = 0;\n                    }\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.insertSorted)(this.sampleQueue, sample, x => x.timestamp);\n                }\n                else {\n                    // Assign it the next earliest timestamp from the input. We do this because browsers, by spec, are\n                    // required to emit decoded frames in presentation order *while* retaining the timestamp of their\n                    // originating EncodedVideoChunk. For files with B-frames but no out-of-order timestamps (like a\n                    // missing ctts box, for example), this causes a mismatch. We therefore fix the timestamps and\n                    // ensure they are sorted by doing this.\n                    const timestamp = this.inputTimestamps.shift();\n                    // There's no way we'd have more decoded frames than encoded packets we passed in. Actually, the\n                    // correspondence should be 1:1.\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(timestamp !== undefined);\n                    sample.setTimestamp(timestamp);\n                    this.finalizeAndEmitSample(sample);\n                }\n            };\n            this.decoder = new VideoDecoder({\n                output: frame => sampleHandler(new _sample_js__WEBPACK_IMPORTED_MODULE_4__.VideoSample(frame)),\n                error: onError,\n            });\n            this.decoder.configure(decoderConfig);\n        }\n    }\n    finalizeAndEmitSample(sample) {\n        // Round the timestamps to the time resolution\n        sample.setTimestamp(Math.round(sample.timestamp * this.timeResolution) / this.timeResolution);\n        sample.setDuration(Math.round(sample.duration * this.timeResolution) / this.timeResolution);\n        sample.setRotation(this.rotation);\n        this.onSample(sample);\n    }\n    getDecodeQueueSize() {\n        if (this.customDecoder) {\n            return this.customDecoderQueueSize;\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.decoder);\n            return this.decoder.decodeQueueSize;\n        }\n    }\n    decode(packet) {\n        if (this.codec === 'hevc' && this.currentPacketIndex > 0 && !this.raslSkipped) {\n            // If we're using HEVC, we need to make sure to skip any RASL slices that follow a non-IDR key frame such as\n            // CRA_NUT. This is because RASL slices cannot be decoded without data before the CRA_NUT. Browsers behave\n            // differently here: Chromium drops the packets, Safari throws a decoder error. Either way, it's not good\n            // and causes bugs upstream. So, let's take the dropping into our own hands.\n            const nalUnits = (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_5__.extractHevcNalUnits)(packet.data, this.decoderConfig);\n            const hasRaslPicture = nalUnits.some((x) => {\n                const type = (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_5__.extractNalUnitTypeForHevc)(x);\n                return type === _codec_data_js__WEBPACK_IMPORTED_MODULE_5__.HevcNalUnitType.RASL_N || type === _codec_data_js__WEBPACK_IMPORTED_MODULE_5__.HevcNalUnitType.RASL_R;\n            });\n            if (hasRaslPicture) {\n                return; // Drop\n            }\n            this.raslSkipped = true;\n        }\n        this.currentPacketIndex++;\n        if (this.customDecoder) {\n            this.customDecoderQueueSize++;\n            void this.customDecoderCallSerializer\n                .call(() => this.customDecoder.decode(packet))\n                .then(() => this.customDecoderQueueSize--);\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.decoder);\n            if (!(0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.isSafari)()) {\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.insertSorted)(this.inputTimestamps, packet.timestamp, x => x);\n            }\n            this.decoder.decode(packet.toEncodedVideoChunk());\n        }\n    }\n    async flush() {\n        if (this.customDecoder) {\n            await this.customDecoderCallSerializer.call(() => this.customDecoder.flush());\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.decoder);\n            await this.decoder.flush();\n        }\n        if ((0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.isSafari)()) {\n            for (const sample of this.sampleQueue) {\n                this.finalizeAndEmitSample(sample);\n            }\n            this.sampleQueue.length = 0;\n        }\n        this.currentPacketIndex = 0;\n        this.raslSkipped = false;\n    }\n    close() {\n        if (this.customDecoder) {\n            void this.customDecoderCallSerializer.call(() => this.customDecoder.close());\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.decoder);\n            this.decoder.close();\n        }\n        for (const sample of this.sampleQueue) {\n            sample.close();\n        }\n        this.sampleQueue.length = 0;\n    }\n}\n/**\n * A sink that retrieves decoded video samples (video frames) from a video track.\n * @group Media sinks\n * @public\n */\nclass VideoSampleSink extends BaseMediaSampleSink {\n    /** Creates a new {@link VideoSampleSink} for the given {@link InputVideoTrack}. */\n    constructor(videoTrack) {\n        if (!(videoTrack instanceof _input_track_js__WEBPACK_IMPORTED_MODULE_0__.InputVideoTrack)) {\n            throw new TypeError('videoTrack must be an InputVideoTrack.');\n        }\n        super();\n        this._videoTrack = videoTrack;\n    }\n    /** @internal */\n    async _createDecoder(onSample, onError) {\n        if (!(await this._videoTrack.canDecode())) {\n            throw new Error('This video track cannot be decoded by this browser. Make sure to check decodability before using'\n                + ' a track.');\n        }\n        const codec = this._videoTrack.codec;\n        const rotation = this._videoTrack.rotation;\n        const decoderConfig = await this._videoTrack.getDecoderConfig();\n        const timeResolution = this._videoTrack.timeResolution;\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(codec && decoderConfig);\n        return new VideoDecoderWrapper(onSample, onError, codec, decoderConfig, rotation, timeResolution);\n    }\n    /** @internal */\n    _createPacketSink() {\n        return new EncodedPacketSink(this._videoTrack);\n    }\n    /**\n     * Retrieves the video sample (frame) corresponding to the given timestamp, in seconds. More specifically, returns\n     * the last video sample (in presentation order) with a start timestamp less than or equal to the given timestamp.\n     * Returns null if the timestamp is before the track's first timestamp.\n     *\n     * @param timestamp - The timestamp used for retrieval, in seconds.\n     */\n    async getSample(timestamp) {\n        validateTimestamp(timestamp);\n        for await (const sample of this.mediaSamplesAtTimestamps([timestamp])) {\n            return sample;\n        }\n        throw new Error('Internal error: Iterator returned nothing.');\n    }\n    /**\n     * Creates an async iterator that yields the video samples (frames) of this track in presentation order. This method\n     * will intelligently pre-decode a few frames ahead to enable fast iteration.\n     *\n     * @param startTimestamp - The timestamp in seconds at which to start yielding samples (inclusive).\n     * @param endTimestamp - The timestamp in seconds at which to stop yielding samples (exclusive).\n     */\n    samples(startTimestamp = 0, endTimestamp = Infinity) {\n        return this.mediaSamplesInRange(startTimestamp, endTimestamp);\n    }\n    /**\n     * Creates an async iterator that yields a video sample (frame) for each timestamp in the argument. This method\n     * uses an optimized decoding pipeline if these timestamps are monotonically sorted, decoding each packet at most\n     * once, and is therefore more efficient than manually getting the sample for every timestamp. The iterator may\n     * yield null if no frame is available for a given timestamp.\n     *\n     * @param timestamps - An iterable or async iterable of timestamps in seconds.\n     */\n    samplesAtTimestamps(timestamps) {\n        return this.mediaSamplesAtTimestamps(timestamps);\n    }\n}\n/**\n * A sink that renders video samples (frames) of the given video track to canvases. This is often more useful than\n * directly retrieving frames, as it comes with common preprocessing steps such as resizing or applying rotation\n * metadata.\n *\n * This sink will yield `HTMLCanvasElement`s when in a DOM context, and `OffscreenCanvas`es otherwise.\n *\n * @group Media sinks\n * @public\n */\nclass CanvasSink {\n    /** Creates a new {@link CanvasSink} for the given {@link InputVideoTrack}. */\n    constructor(videoTrack, options = {}) {\n        /** @internal */\n        this._nextCanvasIndex = 0;\n        if (!(videoTrack instanceof _input_track_js__WEBPACK_IMPORTED_MODULE_0__.InputVideoTrack)) {\n            throw new TypeError('videoTrack must be an InputVideoTrack.');\n        }\n        if (options && typeof options !== 'object') {\n            throw new TypeError('options must be an object.');\n        }\n        if (options.width !== undefined && (!Number.isInteger(options.width) || options.width <= 0)) {\n            throw new TypeError('options.width, when defined, must be a positive integer.');\n        }\n        if (options.height !== undefined && (!Number.isInteger(options.height) || options.height <= 0)) {\n            throw new TypeError('options.height, when defined, must be a positive integer.');\n        }\n        if (options.fit !== undefined && !['fill', 'contain', 'cover'].includes(options.fit)) {\n            throw new TypeError('options.fit, when provided, must be one of \"fill\", \"contain\", or \"cover\".');\n        }\n        if (options.width !== undefined\n            && options.height !== undefined\n            && options.fit === undefined) {\n            throw new TypeError('When both options.width and options.height are provided, options.fit must also be provided.');\n        }\n        if (options.rotation !== undefined && ![0, 90, 180, 270].includes(options.rotation)) {\n            throw new TypeError('options.rotation, when provided, must be 0, 90, 180 or 270.');\n        }\n        if (options.poolSize !== undefined\n            && (typeof options.poolSize !== 'number' || !Number.isInteger(options.poolSize) || options.poolSize < 0)) {\n            throw new TypeError('poolSize must be a non-negative integer.');\n        }\n        const rotation = options.rotation ?? videoTrack.rotation;\n        let [width, height] = rotation % 180 === 0\n            ? [videoTrack.codedWidth, videoTrack.codedHeight]\n            : [videoTrack.codedHeight, videoTrack.codedWidth];\n        const originalAspectRatio = width / height;\n        // If width and height aren't defined together, deduce the missing value using the aspect ratio\n        if (options.width !== undefined && options.height === undefined) {\n            width = options.width;\n            height = Math.round(width / originalAspectRatio);\n        }\n        else if (options.width === undefined && options.height !== undefined) {\n            height = options.height;\n            width = Math.round(height * originalAspectRatio);\n        }\n        else if (options.width !== undefined && options.height !== undefined) {\n            width = options.width;\n            height = options.height;\n        }\n        this._videoTrack = videoTrack;\n        this._width = width;\n        this._height = height;\n        this._rotation = rotation;\n        this._fit = options.fit ?? 'fill';\n        this._videoSampleSink = new VideoSampleSink(videoTrack);\n        this._canvasPool = Array.from({ length: options.poolSize ?? 0 }, () => null);\n    }\n    /** @internal */\n    _videoSampleToWrappedCanvas(sample) {\n        let canvas = this._canvasPool[this._nextCanvasIndex];\n        let canvasIsNew = false;\n        if (!canvas) {\n            if (typeof document !== 'undefined') {\n                // Prefer an HTMLCanvasElement\n                canvas = document.createElement('canvas');\n                canvas.width = this._width;\n                canvas.height = this._height;\n            }\n            else {\n                canvas = new OffscreenCanvas(this._width, this._height);\n            }\n            if (this._canvasPool.length > 0) {\n                this._canvasPool[this._nextCanvasIndex] = canvas;\n            }\n            canvasIsNew = true;\n        }\n        if (this._canvasPool.length > 0) {\n            this._nextCanvasIndex = (this._nextCanvasIndex + 1) % this._canvasPool.length;\n        }\n        const context = canvas.getContext('2d', { alpha: false });\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(context);\n        context.resetTransform();\n        if (!canvasIsNew) {\n            context.clearRect(0, 0, this._width, this._height);\n        }\n        sample.drawWithFit(context, {\n            fit: this._fit,\n            rotation: this._rotation,\n        });\n        const result = {\n            canvas,\n            timestamp: sample.timestamp,\n            duration: sample.duration,\n        };\n        sample.close();\n        return result;\n    }\n    /**\n     * Retrieves a canvas with the video frame corresponding to the given timestamp, in seconds. More specifically,\n     * returns the last video frame (in presentation order) with a start timestamp less than or equal to the given\n     * timestamp. Returns null if the timestamp is before the track's first timestamp.\n     *\n     * @param timestamp - The timestamp used for retrieval, in seconds.\n     */\n    async getCanvas(timestamp) {\n        validateTimestamp(timestamp);\n        const sample = await this._videoSampleSink.getSample(timestamp);\n        return sample && this._videoSampleToWrappedCanvas(sample);\n    }\n    /**\n     * Creates an async iterator that yields canvases with the video frames of this track in presentation order. This\n     * method will intelligently pre-decode a few frames ahead to enable fast iteration.\n     *\n     * @param startTimestamp - The timestamp in seconds at which to start yielding canvases (inclusive).\n     * @param endTimestamp - The timestamp in seconds at which to stop yielding canvases (exclusive).\n     */\n    canvases(startTimestamp = 0, endTimestamp = Infinity) {\n        return (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.mapAsyncGenerator)(this._videoSampleSink.samples(startTimestamp, endTimestamp), sample => this._videoSampleToWrappedCanvas(sample));\n    }\n    /**\n     * Creates an async iterator that yields a canvas for each timestamp in the argument. This method uses an optimized\n     * decoding pipeline if these timestamps are monotonically sorted, decoding each packet at most once, and is\n     * therefore more efficient than manually getting the canvas for every timestamp. The iterator may yield null if\n     * no frame is available for a given timestamp.\n     *\n     * @param timestamps - An iterable or async iterable of timestamps in seconds.\n     */\n    canvasesAtTimestamps(timestamps) {\n        return (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.mapAsyncGenerator)(this._videoSampleSink.samplesAtTimestamps(timestamps), sample => sample && this._videoSampleToWrappedCanvas(sample));\n    }\n}\nclass AudioDecoderWrapper extends DecoderWrapper {\n    constructor(onSample, onError, codec, decoderConfig) {\n        super(onSample, onError);\n        this.decoder = null;\n        this.customDecoder = null;\n        this.customDecoderCallSerializer = new _misc_js__WEBPACK_IMPORTED_MODULE_2__.CallSerializer();\n        this.customDecoderQueueSize = 0;\n        // Internal state to accumulate a precise current timestamp based on audio durations, not the (potentially\n        // inaccurate) packet timestamps.\n        this.currentTimestamp = null;\n        const sampleHandler = (sample) => {\n            if (this.currentTimestamp === null\n                || Math.abs(sample.timestamp - this.currentTimestamp) >= sample.duration) {\n                // We need to sync with the sample timestamp again\n                this.currentTimestamp = sample.timestamp;\n            }\n            const preciseTimestamp = this.currentTimestamp;\n            this.currentTimestamp += sample.duration;\n            if (sample.numberOfFrames === 0) {\n                // We skip zero-data (empty) AudioSamples. These are sometimes emitted, for example, by Firefox when it\n                // decodes Vorbis (at the start).\n                sample.close();\n                return;\n            }\n            // Round the timestamp to the sample rate\n            const sampleRate = decoderConfig.sampleRate;\n            sample.setTimestamp(Math.round(preciseTimestamp * sampleRate) / sampleRate);\n            onSample(sample);\n        };\n        const MatchingCustomDecoder = _custom_coder_js__WEBPACK_IMPORTED_MODULE_3__.customAudioDecoders.find(x => x.supports(codec, decoderConfig));\n        if (MatchingCustomDecoder) {\n            // @ts-expect-error \"Can't create instance of abstract class 🤓\"\n            this.customDecoder = new MatchingCustomDecoder();\n            // @ts-expect-error It's technically readonly\n            this.customDecoder.codec = codec;\n            // @ts-expect-error It's technically readonly\n            this.customDecoder.config = decoderConfig;\n            // @ts-expect-error It's technically readonly\n            this.customDecoder.onSample = (sample) => {\n                if (!(sample instanceof _sample_js__WEBPACK_IMPORTED_MODULE_4__.AudioSample)) {\n                    throw new TypeError('The argument passed to onSample must be an AudioSample.');\n                }\n                sampleHandler(sample);\n            };\n            void this.customDecoderCallSerializer.call(() => this.customDecoder.init());\n        }\n        else {\n            this.decoder = new AudioDecoder({\n                output: data => sampleHandler(new _sample_js__WEBPACK_IMPORTED_MODULE_4__.AudioSample(data)),\n                error: onError,\n            });\n            this.decoder.configure(decoderConfig);\n        }\n    }\n    getDecodeQueueSize() {\n        if (this.customDecoder) {\n            return this.customDecoderQueueSize;\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.decoder);\n            return this.decoder.decodeQueueSize;\n        }\n    }\n    decode(packet) {\n        if (this.customDecoder) {\n            this.customDecoderQueueSize++;\n            void this.customDecoderCallSerializer\n                .call(() => this.customDecoder.decode(packet))\n                .then(() => this.customDecoderQueueSize--);\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.decoder);\n            this.decoder.decode(packet.toEncodedAudioChunk());\n        }\n    }\n    flush() {\n        if (this.customDecoder) {\n            return this.customDecoderCallSerializer.call(() => this.customDecoder.flush());\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.decoder);\n            return this.decoder.flush();\n        }\n    }\n    close() {\n        if (this.customDecoder) {\n            void this.customDecoderCallSerializer.call(() => this.customDecoder.close());\n        }\n        else {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.decoder);\n            this.decoder.close();\n        }\n    }\n}\n// There are a lot of PCM variants not natively supported by the browser and by AudioData. Therefore we need a simple\n// decoder that maps any input PCM format into a PCM format supported by the browser.\nclass PcmAudioDecoderWrapper extends DecoderWrapper {\n    constructor(onSample, onError, decoderConfig) {\n        super(onSample, onError);\n        this.decoderConfig = decoderConfig;\n        // Internal state to accumulate a precise current timestamp based on audio durations, not the (potentially\n        // inaccurate) packet timestamps.\n        this.currentTimestamp = null;\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(_codec_js__WEBPACK_IMPORTED_MODULE_6__.PCM_AUDIO_CODECS.includes(decoderConfig.codec));\n        this.codec = decoderConfig.codec;\n        const { dataType, sampleSize, littleEndian } = (0,_codec_js__WEBPACK_IMPORTED_MODULE_6__.parsePcmCodec)(this.codec);\n        this.inputSampleSize = sampleSize;\n        switch (sampleSize) {\n            case 1:\n                {\n                    if (dataType === 'unsigned') {\n                        this.readInputValue = (view, byteOffset) => view.getUint8(byteOffset) - 2 ** 7;\n                    }\n                    else if (dataType === 'signed') {\n                        this.readInputValue = (view, byteOffset) => view.getInt8(byteOffset);\n                    }\n                    else if (dataType === 'ulaw') {\n                        this.readInputValue = (view, byteOffset) => (0,_pcm_js__WEBPACK_IMPORTED_MODULE_7__.fromUlaw)(view.getUint8(byteOffset));\n                    }\n                    else if (dataType === 'alaw') {\n                        this.readInputValue = (view, byteOffset) => (0,_pcm_js__WEBPACK_IMPORTED_MODULE_7__.fromAlaw)(view.getUint8(byteOffset));\n                    }\n                    else {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                    }\n                }\n                ;\n                break;\n            case 2:\n                {\n                    if (dataType === 'unsigned') {\n                        this.readInputValue = (view, byteOffset) => view.getUint16(byteOffset, littleEndian) - 2 ** 15;\n                    }\n                    else if (dataType === 'signed') {\n                        this.readInputValue = (view, byteOffset) => view.getInt16(byteOffset, littleEndian);\n                    }\n                    else {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                    }\n                }\n                ;\n                break;\n            case 3:\n                {\n                    if (dataType === 'unsigned') {\n                        this.readInputValue = (view, byteOffset) => (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.getUint24)(view, byteOffset, littleEndian) - 2 ** 23;\n                    }\n                    else if (dataType === 'signed') {\n                        this.readInputValue = (view, byteOffset) => (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.getInt24)(view, byteOffset, littleEndian);\n                    }\n                    else {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                    }\n                }\n                ;\n                break;\n            case 4:\n                {\n                    if (dataType === 'unsigned') {\n                        this.readInputValue = (view, byteOffset) => view.getUint32(byteOffset, littleEndian) - 2 ** 31;\n                    }\n                    else if (dataType === 'signed') {\n                        this.readInputValue = (view, byteOffset) => view.getInt32(byteOffset, littleEndian);\n                    }\n                    else if (dataType === 'float') {\n                        this.readInputValue = (view, byteOffset) => view.getFloat32(byteOffset, littleEndian);\n                    }\n                    else {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                    }\n                }\n                ;\n                break;\n            case 8:\n                {\n                    if (dataType === 'float') {\n                        this.readInputValue = (view, byteOffset) => view.getFloat64(byteOffset, littleEndian);\n                    }\n                    else {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                    }\n                }\n                ;\n                break;\n            default:\n                {\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assertNever)(sampleSize);\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                }\n                ;\n        }\n        switch (sampleSize) {\n            case 1:\n                {\n                    if (dataType === 'ulaw' || dataType === 'alaw') {\n                        this.outputSampleSize = 2;\n                        this.outputFormat = 's16';\n                        this.writeOutputValue = (view, byteOffset, value) => view.setInt16(byteOffset, value, true);\n                    }\n                    else {\n                        this.outputSampleSize = 1;\n                        this.outputFormat = 'u8';\n                        this.writeOutputValue = (view, byteOffset, value) => view.setUint8(byteOffset, value + 2 ** 7);\n                    }\n                }\n                ;\n                break;\n            case 2:\n                {\n                    this.outputSampleSize = 2;\n                    this.outputFormat = 's16';\n                    this.writeOutputValue = (view, byteOffset, value) => view.setInt16(byteOffset, value, true);\n                }\n                ;\n                break;\n            case 3:\n                {\n                    this.outputSampleSize = 4;\n                    this.outputFormat = 's32';\n                    // From https://www.w3.org/TR/webcodecs:\n                    // AudioData containing 24-bit samples SHOULD store those samples in s32 or f32. When samples are\n                    // stored in s32, each sample MUST be left-shifted by 8 bits.\n                    this.writeOutputValue = (view, byteOffset, value) => view.setInt32(byteOffset, value << 8, true);\n                }\n                ;\n                break;\n            case 4:\n                {\n                    this.outputSampleSize = 4;\n                    if (dataType === 'float') {\n                        this.outputFormat = 'f32';\n                        this.writeOutputValue = (view, byteOffset, value) => view.setFloat32(byteOffset, value, true);\n                    }\n                    else {\n                        this.outputFormat = 's32';\n                        this.writeOutputValue = (view, byteOffset, value) => view.setInt32(byteOffset, value, true);\n                    }\n                }\n                ;\n                break;\n            case 8:\n                {\n                    this.outputSampleSize = 4;\n                    this.outputFormat = 'f32';\n                    this.writeOutputValue = (view, byteOffset, value) => view.setFloat32(byteOffset, value, true);\n                }\n                ;\n                break;\n            default:\n                {\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assertNever)(sampleSize);\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                }\n                ;\n        }\n        ;\n    }\n    getDecodeQueueSize() {\n        return 0;\n    }\n    decode(packet) {\n        const inputView = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.toDataView)(packet.data);\n        const numberOfFrames = packet.byteLength / this.decoderConfig.numberOfChannels / this.inputSampleSize;\n        const outputBufferSize = numberOfFrames * this.decoderConfig.numberOfChannels * this.outputSampleSize;\n        const outputBuffer = new ArrayBuffer(outputBufferSize);\n        const outputView = new DataView(outputBuffer);\n        for (let i = 0; i < numberOfFrames * this.decoderConfig.numberOfChannels; i++) {\n            const inputIndex = i * this.inputSampleSize;\n            const outputIndex = i * this.outputSampleSize;\n            const value = this.readInputValue(inputView, inputIndex);\n            this.writeOutputValue(outputView, outputIndex, value);\n        }\n        const preciseDuration = numberOfFrames / this.decoderConfig.sampleRate;\n        if (this.currentTimestamp === null || Math.abs(packet.timestamp - this.currentTimestamp) >= preciseDuration) {\n            // We need to sync with the packet timestamp again\n            this.currentTimestamp = packet.timestamp;\n        }\n        const preciseTimestamp = this.currentTimestamp;\n        this.currentTimestamp += preciseDuration;\n        const audioSample = new _sample_js__WEBPACK_IMPORTED_MODULE_4__.AudioSample({\n            format: this.outputFormat,\n            data: outputBuffer,\n            numberOfChannels: this.decoderConfig.numberOfChannels,\n            sampleRate: this.decoderConfig.sampleRate,\n            numberOfFrames,\n            timestamp: preciseTimestamp,\n        });\n        this.onSample(audioSample);\n    }\n    async flush() {\n        // Do nothing\n    }\n    close() {\n        // Do nothing\n    }\n}\n/**\n * Sink for retrieving decoded audio samples from an audio track.\n * @group Media sinks\n * @public\n */\nclass AudioSampleSink extends BaseMediaSampleSink {\n    /** Creates a new {@link AudioSampleSink} for the given {@link InputAudioTrack}. */\n    constructor(audioTrack) {\n        if (!(audioTrack instanceof _input_track_js__WEBPACK_IMPORTED_MODULE_0__.InputAudioTrack)) {\n            throw new TypeError('audioTrack must be an InputAudioTrack.');\n        }\n        super();\n        this._audioTrack = audioTrack;\n    }\n    /** @internal */\n    async _createDecoder(onSample, onError) {\n        if (!(await this._audioTrack.canDecode())) {\n            throw new Error('This audio track cannot be decoded by this browser. Make sure to check decodability before using'\n                + ' a track.');\n        }\n        const codec = this._audioTrack.codec;\n        const decoderConfig = await this._audioTrack.getDecoderConfig();\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(codec && decoderConfig);\n        if (_codec_js__WEBPACK_IMPORTED_MODULE_6__.PCM_AUDIO_CODECS.includes(decoderConfig.codec)) {\n            return new PcmAudioDecoderWrapper(onSample, onError, decoderConfig);\n        }\n        else {\n            return new AudioDecoderWrapper(onSample, onError, codec, decoderConfig);\n        }\n    }\n    /** @internal */\n    _createPacketSink() {\n        return new EncodedPacketSink(this._audioTrack);\n    }\n    /**\n     * Retrieves the audio sample corresponding to the given timestamp, in seconds. More specifically, returns\n     * the last audio sample (in presentation order) with a start timestamp less than or equal to the given timestamp.\n     * Returns null if the timestamp is before the track's first timestamp.\n     *\n     * @param timestamp - The timestamp used for retrieval, in seconds.\n     */\n    async getSample(timestamp) {\n        validateTimestamp(timestamp);\n        for await (const sample of this.mediaSamplesAtTimestamps([timestamp])) {\n            return sample;\n        }\n        throw new Error('Internal error: Iterator returned nothing.');\n    }\n    /**\n     * Creates an async iterator that yields the audio samples of this track in presentation order. This method\n     * will intelligently pre-decode a few samples ahead to enable fast iteration.\n     *\n     * @param startTimestamp - The timestamp in seconds at which to start yielding samples (inclusive).\n     * @param endTimestamp - The timestamp in seconds at which to stop yielding samples (exclusive).\n     */\n    samples(startTimestamp = 0, endTimestamp = Infinity) {\n        return this.mediaSamplesInRange(startTimestamp, endTimestamp);\n    }\n    /**\n     * Creates an async iterator that yields an audio sample for each timestamp in the argument. This method\n     * uses an optimized decoding pipeline if these timestamps are monotonically sorted, decoding each packet at most\n     * once, and is therefore more efficient than manually getting the sample for every timestamp. The iterator may\n     * yield null if no sample is available for a given timestamp.\n     *\n     * @param timestamps - An iterable or async iterable of timestamps in seconds.\n     */\n    samplesAtTimestamps(timestamps) {\n        return this.mediaSamplesAtTimestamps(timestamps);\n    }\n}\n/**\n * A sink that retrieves decoded audio samples from an audio track and converts them to `AudioBuffer` instances. This is\n * often more useful than directly retrieving audio samples, as audio buffers can be directly used with the\n * Web Audio API.\n * @group Media sinks\n * @public\n */\nclass AudioBufferSink {\n    /** Creates a new {@link AudioBufferSink} for the given {@link InputAudioTrack}. */\n    constructor(audioTrack) {\n        if (!(audioTrack instanceof _input_track_js__WEBPACK_IMPORTED_MODULE_0__.InputAudioTrack)) {\n            throw new TypeError('audioTrack must be an InputAudioTrack.');\n        }\n        this._audioSampleSink = new AudioSampleSink(audioTrack);\n    }\n    /** @internal */\n    _audioSampleToWrappedArrayBuffer(sample) {\n        return {\n            buffer: sample.toAudioBuffer(),\n            timestamp: sample.timestamp,\n            duration: sample.duration,\n        };\n    }\n    /**\n     * Retrieves the audio buffer corresponding to the given timestamp, in seconds. More specifically, returns\n     * the last audio buffer (in presentation order) with a start timestamp less than or equal to the given timestamp.\n     * Returns null if the timestamp is before the track's first timestamp.\n     *\n     * @param timestamp - The timestamp used for retrieval, in seconds.\n     */\n    async getBuffer(timestamp) {\n        validateTimestamp(timestamp);\n        const data = await this._audioSampleSink.getSample(timestamp);\n        return data && this._audioSampleToWrappedArrayBuffer(data);\n    }\n    /**\n     * Creates an async iterator that yields audio buffers of this track in presentation order. This method\n     * will intelligently pre-decode a few buffers ahead to enable fast iteration.\n     *\n     * @param startTimestamp - The timestamp in seconds at which to start yielding buffers (inclusive).\n     * @param endTimestamp - The timestamp in seconds at which to stop yielding buffers (exclusive).\n     */\n    buffers(startTimestamp = 0, endTimestamp = Infinity) {\n        return (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.mapAsyncGenerator)(this._audioSampleSink.samples(startTimestamp, endTimestamp), data => this._audioSampleToWrappedArrayBuffer(data));\n    }\n    /**\n     * Creates an async iterator that yields an audio buffer for each timestamp in the argument. This method\n     * uses an optimized decoding pipeline if these timestamps are monotonically sorted, decoding each packet at most\n     * once, and is therefore more efficient than manually getting the buffer for every timestamp. The iterator may\n     * yield null if no buffer is available for a given timestamp.\n     *\n     * @param timestamps - An iterable or async iterable of timestamps in seconds.\n     */\n    buffersAtTimestamps(timestamps) {\n        return (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.mapAsyncGenerator)(this._audioSampleSink.samplesAtTimestamps(timestamps), data => data && this._audioSampleToWrappedArrayBuffer(data));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/media-sink.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/media-source.js":
/*!******************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/media-source.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioBufferSource: function() { return /* binding */ AudioBufferSource; },\n/* harmony export */   AudioSampleSource: function() { return /* binding */ AudioSampleSource; },\n/* harmony export */   AudioSource: function() { return /* binding */ AudioSource; },\n/* harmony export */   CanvasSource: function() { return /* binding */ CanvasSource; },\n/* harmony export */   EncodedAudioPacketSource: function() { return /* binding */ EncodedAudioPacketSource; },\n/* harmony export */   EncodedVideoPacketSource: function() { return /* binding */ EncodedVideoPacketSource; },\n/* harmony export */   MediaSource: function() { return /* binding */ MediaSource; },\n/* harmony export */   MediaStreamAudioTrackSource: function() { return /* binding */ MediaStreamAudioTrackSource; },\n/* harmony export */   MediaStreamVideoTrackSource: function() { return /* binding */ MediaStreamVideoTrackSource; },\n/* harmony export */   SubtitleSource: function() { return /* binding */ SubtitleSource; },\n/* harmony export */   TextSubtitleSource: function() { return /* binding */ TextSubtitleSource; },\n/* harmony export */   VideoSampleSource: function() { return /* binding */ VideoSampleSource; },\n/* harmony export */   VideoSource: function() { return /* binding */ VideoSource; }\n/* harmony export */ });\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _subtitles_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./subtitles.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/subtitles.js\");\n/* harmony import */ var _pcm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pcm.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/pcm.js\");\n/* harmony import */ var _custom_coder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./custom-coder.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/custom-coder.js\");\n/* harmony import */ var _packet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packet.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/packet.js\");\n/* harmony import */ var _sample_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sample.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/sample.js\");\n/* harmony import */ var _encode_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./encode.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/encode.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n\n\n\n/**\n * Base class for media sources. Media sources are used to add media samples to an output file.\n * @group Media sources\n * @public\n */\nclass MediaSource {\n    constructor() {\n        /** @internal */\n        this._connectedTrack = null;\n        /** @internal */\n        this._closingPromise = null;\n        /** @internal */\n        this._closed = false;\n        /**\n         * @internal\n         * A time offset in seconds that is added to all timestamps generated by this source.\n         */\n        this._timestampOffset = 0;\n    }\n    /** @internal */\n    _ensureValidAdd() {\n        if (!this._connectedTrack) {\n            throw new Error('Source is not connected to an output track.');\n        }\n        if (this._connectedTrack.output.state === 'canceled') {\n            throw new Error('Output has been canceled.');\n        }\n        if (this._connectedTrack.output.state === 'finalizing' || this._connectedTrack.output.state === 'finalized') {\n            throw new Error('Output has been finalized.');\n        }\n        if (this._connectedTrack.output.state === 'pending') {\n            throw new Error('Output has not started.');\n        }\n        if (this._closed) {\n            throw new Error('Source is closed.');\n        }\n    }\n    /** @internal */\n    async _start() { }\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async _flushAndClose(forceClose) { }\n    /**\n     * Closes this source. This prevents future samples from being added and signals to the output file that no further\n     * samples will come in for this track. Calling `.close()` is optional but recommended after adding the\n     * last sample - for improved performance and reduced memory usage.\n     */\n    close() {\n        if (this._closingPromise) {\n            return;\n        }\n        const connectedTrack = this._connectedTrack;\n        if (!connectedTrack) {\n            throw new Error('Cannot call close without connecting the source to an output track.');\n        }\n        if (connectedTrack.output.state === 'pending') {\n            throw new Error('Cannot call close before output has been started.');\n        }\n        this._closingPromise = (async () => {\n            await this._flushAndClose(false);\n            this._closed = true;\n            if (connectedTrack.output.state === 'finalizing' || connectedTrack.output.state === 'finalized') {\n                return;\n            }\n            connectedTrack.output._muxer.onTrackClose(connectedTrack);\n        })();\n    }\n    /** @internal */\n    async _flushOrWaitForOngoingClose(forceClose) {\n        if (this._closingPromise) {\n            // Since closing also flushes, we don't want to do it twice\n            return this._closingPromise;\n        }\n        else {\n            return this._flushAndClose(forceClose);\n        }\n    }\n}\n/**\n * Base class for video sources - sources for video tracks.\n * @group Media sources\n * @public\n */\nclass VideoSource extends MediaSource {\n    /** Internal constructor. */\n    constructor(codec) {\n        super();\n        /** @internal */\n        this._connectedTrack = null;\n        if (!_codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS.includes(codec)) {\n            throw new TypeError(`Invalid video codec '${codec}'. Must be one of: ${_codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS.join(', ')}.`);\n        }\n        this._codec = codec;\n    }\n}\n/**\n * The most basic video source; can be used to directly pipe encoded packets into the output file.\n * @group Media sources\n * @public\n */\nclass EncodedVideoPacketSource extends VideoSource {\n    /** Creates a new {@link EncodedVideoPacketSource} whose packets are encoded using `codec`. */\n    constructor(codec) {\n        super(codec);\n    }\n    /**\n     * Adds an encoded packet to the output video track. Packets must be added in *decode order*, while a packet's\n     * timestamp must be its *presentation timestamp*. B-frames are handled automatically.\n     *\n     * @param meta - Additional metadata from the encoder. You should pass this for the first call, including a valid\n     * decoder config.\n     *\n     * @returns A Promise that resolves once the output is ready to receive more samples. You should await this Promise\n     * to respect writer and encoder backpressure.\n     */\n    add(packet, meta) {\n        if (!(packet instanceof _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket)) {\n            throw new TypeError('packet must be an EncodedPacket.');\n        }\n        if (packet.isMetadataOnly) {\n            throw new TypeError('Metadata-only packets cannot be added.');\n        }\n        if (meta !== undefined && (!meta || typeof meta !== 'object')) {\n            throw new TypeError('meta, when provided, must be an object.');\n        }\n        this._ensureValidAdd();\n        return this._connectedTrack.output._muxer.addEncodedVideoPacket(this._connectedTrack, packet, meta);\n    }\n}\nclass VideoEncoderWrapper {\n    constructor(source, encodingConfig) {\n        this.source = source;\n        this.encodingConfig = encodingConfig;\n        this.ensureEncoderPromise = null;\n        this.encoderInitialized = false;\n        this.encoder = null;\n        this.muxer = null;\n        this.lastMultipleOfKeyFrameInterval = -1;\n        this.codedWidth = null;\n        this.codedHeight = null;\n        this.resizeCanvas = null;\n        this.customEncoder = null;\n        this.customEncoderCallSerializer = new _misc_js__WEBPACK_IMPORTED_MODULE_2__.CallSerializer();\n        this.customEncoderQueueSize = 0;\n        /**\n         * Encoders typically throw their errors \"out of band\", meaning asynchronously in some other execution context.\n         * However, we want to surface these errors to the user within the normal control flow, so they don't go uncaught.\n         * So, we keep track of the encoder error and throw it as soon as we get the chance.\n         */\n        this.encoderError = null;\n    }\n    async add(videoSample, shouldClose, encodeOptions) {\n        try {\n            this.checkForEncoderError();\n            this.source._ensureValidAdd();\n            // Ensure video sample size remains constant\n            if (this.codedWidth !== null && this.codedHeight !== null) {\n                if (videoSample.codedWidth !== this.codedWidth || videoSample.codedHeight !== this.codedHeight) {\n                    const sizeChangeBehavior = this.encodingConfig.sizeChangeBehavior ?? 'deny';\n                    if (sizeChangeBehavior === 'passThrough') {\n                        // Do nada\n                    }\n                    else if (sizeChangeBehavior === 'deny') {\n                        throw new Error(`Video sample size must remain constant. Expected ${this.codedWidth}x${this.codedHeight},`\n                            + ` got ${videoSample.codedWidth}x${videoSample.codedHeight}. To allow the sample size to`\n                            + ` change over time, set \\`sizeChangeBehavior\\` to a value other than 'strict' in the`\n                            + ` encoding options.`);\n                    }\n                    else {\n                        let canvasIsNew = false;\n                        if (!this.resizeCanvas) {\n                            if (typeof document !== 'undefined') {\n                                // Prefer an HTMLCanvasElement\n                                this.resizeCanvas = document.createElement('canvas');\n                                this.resizeCanvas.width = this.codedWidth;\n                                this.resizeCanvas.height = this.codedHeight;\n                            }\n                            else {\n                                this.resizeCanvas = new OffscreenCanvas(this.codedWidth, this.codedHeight);\n                            }\n                            canvasIsNew = true;\n                        }\n                        const context = this.resizeCanvas.getContext('2d', { alpha: false });\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(context);\n                        if (!canvasIsNew) {\n                            context.clearRect(0, 0, this.codedWidth, this.codedHeight);\n                        }\n                        videoSample.drawWithFit(context, { fit: sizeChangeBehavior });\n                        if (shouldClose) {\n                            videoSample.close();\n                        }\n                        videoSample = new _sample_js__WEBPACK_IMPORTED_MODULE_3__.VideoSample(this.resizeCanvas, {\n                            timestamp: videoSample.timestamp,\n                            duration: videoSample.duration,\n                            rotation: videoSample.rotation,\n                        });\n                        shouldClose = true;\n                    }\n                }\n            }\n            else {\n                this.codedWidth = videoSample.codedWidth;\n                this.codedHeight = videoSample.codedHeight;\n            }\n            if (!this.encoderInitialized) {\n                if (!this.ensureEncoderPromise) {\n                    void this.ensureEncoder(videoSample);\n                }\n                // No, this \"if\" statement is not useless. Sometimes, the above call to `ensureEncoder` might have\n                // synchronously completed and the encoder is already initialized. In this case, we don't need to await\n                // the promise anymore. This also fixes nasty async race condition bugs when multiple code paths are\n                // calling this method: It's important that the call that initialized the encoder go through this\n                // code first.\n                if (!this.encoderInitialized) {\n                    await this.ensureEncoderPromise;\n                }\n            }\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.encoderInitialized);\n            const keyFrameInterval = this.encodingConfig.keyFrameInterval ?? 5;\n            const multipleOfKeyFrameInterval = Math.floor(videoSample.timestamp / keyFrameInterval);\n            // Ensure a key frame every keyFrameInterval seconds. It is important that all video tracks follow the same\n            // \"key frame\" rhythm, because aligned key frames are required to start new fragments in ISOBMFF or clusters\n            // in Matroska (or at least desirable).\n            const finalEncodeOptions = {\n                ...encodeOptions,\n                keyFrame: encodeOptions?.keyFrame\n                    || keyFrameInterval === 0\n                    || multipleOfKeyFrameInterval !== this.lastMultipleOfKeyFrameInterval,\n            };\n            this.lastMultipleOfKeyFrameInterval = multipleOfKeyFrameInterval;\n            if (this.customEncoder) {\n                this.customEncoderQueueSize++;\n                // We clone the sample so it cannot be closed on us from the outside before it reaches the encoder\n                const clonedSample = videoSample.clone();\n                const promise = this.customEncoderCallSerializer\n                    .call(() => this.customEncoder.encode(clonedSample, finalEncodeOptions))\n                    .then(() => this.customEncoderQueueSize--)\n                    .catch((error) => this.encoderError ??= error)\n                    .finally(() => {\n                    clonedSample.close();\n                    // `videoSample` gets closed in the finally block at the end of the method\n                });\n                if (this.customEncoderQueueSize >= 4) {\n                    await promise;\n                }\n            }\n            else {\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.encoder);\n                const videoFrame = videoSample.toVideoFrame();\n                this.encoder.encode(videoFrame, finalEncodeOptions);\n                videoFrame.close();\n                if (shouldClose) {\n                    videoSample.close();\n                }\n                // We need to do this after sending the frame to the encoder as the frame otherwise might be closed\n                if (this.encoder.encodeQueueSize >= 4) {\n                    await new Promise(resolve => this.encoder.addEventListener('dequeue', resolve, { once: true }));\n                }\n            }\n            await this.muxer.mutex.currentPromise; // Allow the writer to apply backpressure\n        }\n        finally {\n            if (shouldClose) {\n                // Make sure it's always closed, even if there was an error\n                videoSample.close();\n            }\n        }\n    }\n    async ensureEncoder(videoSample) {\n        if (this.encoder) {\n            return;\n        }\n        const encoderError = new Error();\n        return this.ensureEncoderPromise = (async () => {\n            const encoderConfig = (0,_encode_js__WEBPACK_IMPORTED_MODULE_4__.buildVideoEncoderConfig)({\n                width: videoSample.codedWidth,\n                height: videoSample.codedHeight,\n                ...this.encodingConfig,\n                framerate: this.source._connectedTrack?.metadata.frameRate,\n            });\n            this.encodingConfig.onEncoderConfig?.(encoderConfig);\n            const MatchingCustomEncoder = _custom_coder_js__WEBPACK_IMPORTED_MODULE_5__.customVideoEncoders.find(x => x.supports(this.encodingConfig.codec, encoderConfig));\n            if (MatchingCustomEncoder) {\n                // @ts-expect-error \"Can't create instance of abstract class 🤓\"\n                this.customEncoder = new MatchingCustomEncoder();\n                // @ts-expect-error It's technically readonly\n                this.customEncoder.codec = this.encodingConfig.codec;\n                // @ts-expect-error It's technically readonly\n                this.customEncoder.config = encoderConfig;\n                // @ts-expect-error It's technically readonly\n                this.customEncoder.onPacket = (packet, meta) => {\n                    if (!(packet instanceof _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket)) {\n                        throw new TypeError('The first argument passed to onPacket must be an EncodedPacket.');\n                    }\n                    if (meta !== undefined && (!meta || typeof meta !== 'object')) {\n                        throw new TypeError('The second argument passed to onPacket must be an object or undefined.');\n                    }\n                    this.encodingConfig.onEncodedPacket?.(packet, meta);\n                    void this.muxer.addEncodedVideoPacket(this.source._connectedTrack, packet, meta);\n                };\n                await this.customEncoder.init();\n            }\n            else {\n                if (typeof VideoEncoder === 'undefined') {\n                    throw new Error('VideoEncoder is not supported by this browser.');\n                }\n                const support = await VideoEncoder.isConfigSupported(encoderConfig);\n                if (!support.supported) {\n                    throw new Error(`This specific encoder configuration (${encoderConfig.codec}, ${encoderConfig.bitrate} bps,`\n                        + ` ${encoderConfig.width}x${encoderConfig.height}, hardware acceleration:`\n                        + ` ${encoderConfig.hardwareAcceleration ?? 'no-preference'}) is not supported by this browser.`\n                        + ` Consider using another codec or changing your video parameters.`);\n                }\n                this.encoder = new VideoEncoder({\n                    output: (chunk, meta) => {\n                        const packet = _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket.fromEncodedChunk(chunk);\n                        this.encodingConfig.onEncodedPacket?.(packet, meta);\n                        void this.muxer.addEncodedVideoPacket(this.source._connectedTrack, packet, meta);\n                    },\n                    error: (error) => {\n                        error.stack = encoderError.stack; // Provide a more useful stack trace\n                        this.encoderError ??= error;\n                    },\n                });\n                this.encoder.configure(encoderConfig);\n            }\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.source._connectedTrack);\n            this.muxer = this.source._connectedTrack.output._muxer;\n            this.encoderInitialized = true;\n        })();\n    }\n    async flushAndClose(forceClose) {\n        if (!forceClose)\n            this.checkForEncoderError();\n        if (this.customEncoder) {\n            if (!forceClose) {\n                void this.customEncoderCallSerializer.call(() => this.customEncoder.flush());\n            }\n            await this.customEncoderCallSerializer.call(() => this.customEncoder.close());\n        }\n        else if (this.encoder) {\n            if (!forceClose) {\n                await this.encoder.flush();\n            }\n            if (this.encoder.state !== 'closed') {\n                this.encoder.close();\n            }\n        }\n        if (!forceClose)\n            this.checkForEncoderError();\n    }\n    getQueueSize() {\n        if (this.customEncoder) {\n            return this.customEncoderQueueSize;\n        }\n        else {\n            return this.encoder?.encodeQueueSize ?? 0;\n        }\n    }\n    checkForEncoderError() {\n        if (this.encoderError) {\n            this.encoderError.stack = new Error().stack; // Provide an even more useful stack trace\n            throw this.encoderError;\n        }\n    }\n}\n/**\n * This source can be used to add raw, unencoded video samples (frames) to an output video track. These frames will\n * automatically be encoded and then piped into the output.\n * @group Media sources\n * @public\n */\nclass VideoSampleSource extends VideoSource {\n    /**\n     * Creates a new {@link VideoSampleSource} whose samples are encoded according to the specified\n     * {@link VideoEncodingConfig}.\n     */\n    constructor(encodingConfig) {\n        (0,_encode_js__WEBPACK_IMPORTED_MODULE_4__.validateVideoEncodingConfig)(encodingConfig);\n        super(encodingConfig.codec);\n        this._encoder = new VideoEncoderWrapper(this, encodingConfig);\n    }\n    /**\n     * Encodes a video sample (frame) and then adds it to the output.\n     *\n     * @returns A Promise that resolves once the output is ready to receive more samples. You should await this Promise\n     * to respect writer and encoder backpressure.\n     */\n    add(videoSample, encodeOptions) {\n        if (!(videoSample instanceof _sample_js__WEBPACK_IMPORTED_MODULE_3__.VideoSample)) {\n            throw new TypeError('videoSample must be a VideoSample.');\n        }\n        return this._encoder.add(videoSample, false, encodeOptions);\n    }\n    /** @internal */\n    _flushAndClose(forceClose) {\n        return this._encoder.flushAndClose(forceClose);\n    }\n}\n/**\n * This source can be used to add video frames to the output track from a fixed canvas element. Since canvases are often\n * used for rendering, this source provides a convenient wrapper around {@link VideoSampleSource}.\n * @group Media sources\n * @public\n */\nclass CanvasSource extends VideoSource {\n    /**\n     * Creates a new {@link CanvasSource} from a canvas element or `OffscreenCanvas` whose samples are encoded\n     * according to the specified {@link VideoEncodingConfig}.\n     */\n    constructor(canvas, encodingConfig) {\n        if (!(typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement)\n            && !(typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n            throw new TypeError('canvas must be an HTMLCanvasElement or OffscreenCanvas.');\n        }\n        (0,_encode_js__WEBPACK_IMPORTED_MODULE_4__.validateVideoEncodingConfig)(encodingConfig);\n        super(encodingConfig.codec);\n        this._encoder = new VideoEncoderWrapper(this, encodingConfig);\n        this._canvas = canvas;\n    }\n    /**\n     * Captures the current canvas state as a video sample (frame), encodes it and adds it to the output.\n     *\n     * @param timestamp - The timestamp of the sample, in seconds.\n     * @param duration - The duration of the sample, in seconds.\n     *\n     * @returns A Promise that resolves once the output is ready to receive more samples. You should await this Promise\n     * to respect writer and encoder backpressure.\n     */\n    add(timestamp, duration = 0, encodeOptions) {\n        if (!Number.isFinite(timestamp) || timestamp < 0) {\n            throw new TypeError('timestamp must be a non-negative number.');\n        }\n        if (!Number.isFinite(duration) || duration < 0) {\n            throw new TypeError('duration must be a non-negative number.');\n        }\n        const sample = new _sample_js__WEBPACK_IMPORTED_MODULE_3__.VideoSample(this._canvas, { timestamp, duration });\n        return this._encoder.add(sample, true, encodeOptions);\n    }\n    /** @internal */\n    _flushAndClose(forceClose) {\n        return this._encoder.flushAndClose(forceClose);\n    }\n}\n/**\n * Video source that encodes the frames of a\n * [`MediaStreamVideoTrack`](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) and pipes them into the\n * output. This is useful for capturing live or real-time data such as webcams or screen captures. Frames will\n * automatically start being captured once the connected {@link Output} is started, and will keep being captured until\n * the {@link Output} is finalized or this source is closed.\n * @group Media sources\n * @public\n */\nclass MediaStreamVideoTrackSource extends VideoSource {\n    /** A promise that rejects upon any error within this source. This promise never resolves. */\n    get errorPromise() {\n        this._errorPromiseAccessed = true;\n        return this._promiseWithResolvers.promise;\n    }\n    /**\n     * Creates a new {@link MediaStreamVideoTrackSource} from a\n     * [`MediaStreamVideoTrack`](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack), which will pull\n     * video samples from the stream in real time and encode them according to {@link VideoEncodingConfig}.\n     */\n    constructor(track, encodingConfig) {\n        if (!(track instanceof MediaStreamTrack) || track.kind !== 'video') {\n            throw new TypeError('track must be a video MediaStreamTrack.');\n        }\n        (0,_encode_js__WEBPACK_IMPORTED_MODULE_4__.validateVideoEncodingConfig)(encodingConfig);\n        encodingConfig = {\n            ...encodingConfig,\n            latencyMode: 'realtime',\n        };\n        super(encodingConfig.codec);\n        /** @internal */\n        this._abortController = null;\n        /** @internal */\n        this._workerTrackId = null;\n        /** @internal */\n        this._workerListener = null;\n        /** @internal */\n        this._promiseWithResolvers = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)();\n        /** @internal */\n        this._errorPromiseAccessed = false;\n        this._encoder = new VideoEncoderWrapper(this, encodingConfig);\n        this._track = track;\n    }\n    /** @internal */\n    async _start() {\n        if (!this._errorPromiseAccessed) {\n            console.warn('Make sure not to ignore the `errorPromise` field on MediaStreamVideoTrackSource, so that any internal'\n                + ' errors get bubbled up properly.');\n        }\n        this._abortController = new AbortController();\n        let firstVideoFrameTimestamp = null;\n        let errored = false;\n        const onVideoFrame = (videoFrame) => {\n            if (errored) {\n                videoFrame.close();\n                return;\n            }\n            if (firstVideoFrameTimestamp === null) {\n                firstVideoFrameTimestamp = videoFrame.timestamp / 1e6;\n                const muxer = this._connectedTrack.output._muxer;\n                if (muxer.firstMediaStreamTimestamp === null) {\n                    muxer.firstMediaStreamTimestamp = performance.now() / 1000;\n                    this._timestampOffset = -firstVideoFrameTimestamp;\n                }\n                else {\n                    this._timestampOffset = (performance.now() / 1000 - muxer.firstMediaStreamTimestamp)\n                        - firstVideoFrameTimestamp;\n                }\n            }\n            if (this._encoder.getQueueSize() >= 4) {\n                // Drop frames if the encoder is overloaded\n                videoFrame.close();\n                return;\n            }\n            void this._encoder.add(new _sample_js__WEBPACK_IMPORTED_MODULE_3__.VideoSample(videoFrame), true)\n                .catch((error) => {\n                errored = true;\n                this._abortController?.abort();\n                this._promiseWithResolvers.reject(error);\n                if (this._workerTrackId !== null) {\n                    // Tell the worker to stop the track\n                    sendMessageToMediaStreamTrackProcessorWorker({\n                        type: 'stopTrack',\n                        trackId: this._workerTrackId,\n                    });\n                }\n            });\n        };\n        if (typeof MediaStreamTrackProcessor !== 'undefined') {\n            // We can do it here directly, perfect\n            const processor = new MediaStreamTrackProcessor({ track: this._track });\n            const consumer = new WritableStream({ write: onVideoFrame });\n            processor.readable.pipeTo(consumer, {\n                signal: this._abortController.signal,\n            }).catch((error) => {\n                // Handle AbortError silently\n                if (error instanceof DOMException && error.name === 'AbortError')\n                    return;\n                this._promiseWithResolvers.reject(error);\n            });\n        }\n        else {\n            // It might still be supported in a worker, so let's check that\n            const supportedInWorker = await mediaStreamTrackProcessorIsSupportedInWorker();\n            if (supportedInWorker) {\n                this._workerTrackId = nextMediaStreamTrackProcessorWorkerId++;\n                sendMessageToMediaStreamTrackProcessorWorker({\n                    type: 'videoTrack',\n                    trackId: this._workerTrackId,\n                    track: this._track,\n                }, [this._track]);\n                this._workerListener = (event) => {\n                    const message = event.data;\n                    if (message.type === 'videoFrame' && message.trackId === this._workerTrackId) {\n                        onVideoFrame(message.videoFrame);\n                    }\n                    else if (message.type === 'error' && message.trackId === this._workerTrackId) {\n                        this._promiseWithResolvers.reject(message.error);\n                    }\n                };\n                mediaStreamTrackProcessorWorker.addEventListener('message', this._workerListener);\n            }\n            else {\n                throw new Error('MediaStreamTrackProcessor is required but not supported by this browser.');\n            }\n        }\n    }\n    /** @internal */\n    async _flushAndClose(forceClose) {\n        if (this._abortController) {\n            this._abortController.abort();\n            this._abortController = null;\n        }\n        if (this._workerTrackId !== null) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this._workerListener);\n            sendMessageToMediaStreamTrackProcessorWorker({\n                type: 'stopTrack',\n                trackId: this._workerTrackId,\n            });\n            // Wait for the worker to stop the track\n            await new Promise((resolve) => {\n                const listener = (event) => {\n                    const message = event.data;\n                    if (message.type === 'trackStopped' && message.trackId === this._workerTrackId) {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this._workerListener);\n                        mediaStreamTrackProcessorWorker.removeEventListener('message', this._workerListener);\n                        mediaStreamTrackProcessorWorker.removeEventListener('message', listener);\n                        resolve();\n                    }\n                };\n                mediaStreamTrackProcessorWorker.addEventListener('message', listener);\n            });\n        }\n        await this._encoder.flushAndClose(forceClose);\n    }\n}\n/**\n * Base class for audio sources - sources for audio tracks.\n * @group Media sources\n * @public\n */\nclass AudioSource extends MediaSource {\n    /** Internal constructor. */\n    constructor(codec) {\n        super();\n        /** @internal */\n        this._connectedTrack = null;\n        if (!_codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS.includes(codec)) {\n            throw new TypeError(`Invalid audio codec '${codec}'. Must be one of: ${_codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS.join(', ')}.`);\n        }\n        this._codec = codec;\n    }\n}\n/**\n * The most basic audio source; can be used to directly pipe encoded packets into the output file.\n * @group Media sources\n * @public\n */\nclass EncodedAudioPacketSource extends AudioSource {\n    /** Creates a new {@link EncodedAudioPacketSource} whose packets are encoded using `codec`. */\n    constructor(codec) {\n        super(codec);\n    }\n    /**\n     * Adds an encoded packet to the output audio track. Packets must be added in *decode order*.\n     *\n     * @param meta - Additional metadata from the encoder. You should pass this for the first call, including a valid\n     * decoder config.\n     *\n     * @returns A Promise that resolves once the output is ready to receive more samples. You should await this Promise\n     * to respect writer and encoder backpressure.\n     */\n    add(packet, meta) {\n        if (!(packet instanceof _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket)) {\n            throw new TypeError('packet must be an EncodedPacket.');\n        }\n        if (packet.isMetadataOnly) {\n            throw new TypeError('Metadata-only packets cannot be added.');\n        }\n        if (meta !== undefined && (!meta || typeof meta !== 'object')) {\n            throw new TypeError('meta, when provided, must be an object.');\n        }\n        this._ensureValidAdd();\n        return this._connectedTrack.output._muxer.addEncodedAudioPacket(this._connectedTrack, packet, meta);\n    }\n}\nclass AudioEncoderWrapper {\n    constructor(source, encodingConfig) {\n        this.source = source;\n        this.encodingConfig = encodingConfig;\n        this.ensureEncoderPromise = null;\n        this.encoderInitialized = false;\n        this.encoder = null;\n        this.muxer = null;\n        this.lastNumberOfChannels = null;\n        this.lastSampleRate = null;\n        this.isPcmEncoder = false;\n        this.outputSampleSize = null;\n        this.writeOutputValue = null;\n        this.customEncoder = null;\n        this.customEncoderCallSerializer = new _misc_js__WEBPACK_IMPORTED_MODULE_2__.CallSerializer();\n        this.customEncoderQueueSize = 0;\n        /**\n         * Encoders typically throw their errors \"out of band\", meaning asynchronously in some other execution context.\n         * However, we want to surface these errors to the user within the normal control flow, so they don't go uncaught.\n         * So, we keep track of the encoder error and throw it as soon as we get the chance.\n         */\n        this.encoderError = null;\n    }\n    async add(audioSample, shouldClose) {\n        try {\n            this.checkForEncoderError();\n            this.source._ensureValidAdd();\n            // Ensure audio parameters remain constant\n            if (this.lastNumberOfChannels !== null && this.lastSampleRate !== null) {\n                if (audioSample.numberOfChannels !== this.lastNumberOfChannels\n                    || audioSample.sampleRate !== this.lastSampleRate) {\n                    throw new Error(`Audio parameters must remain constant. Expected ${this.lastNumberOfChannels} channels at`\n                        + ` ${this.lastSampleRate} Hz, got ${audioSample.numberOfChannels} channels at`\n                        + ` ${audioSample.sampleRate} Hz.`);\n                }\n            }\n            else {\n                this.lastNumberOfChannels = audioSample.numberOfChannels;\n                this.lastSampleRate = audioSample.sampleRate;\n            }\n            if (!this.encoderInitialized) {\n                if (!this.ensureEncoderPromise) {\n                    void this.ensureEncoder(audioSample);\n                }\n                // No, this \"if\" statement is not useless. Sometimes, the above call to `ensureEncoder` might have\n                // synchronously completed and the encoder is already initialized. In this case, we don't need to await\n                // the promise anymore. This also fixes nasty async race condition bugs when multiple code paths are\n                // calling this method: It's important that the call that initialized the encoder go through this\n                // code first.\n                if (!this.encoderInitialized) {\n                    await this.ensureEncoderPromise;\n                }\n            }\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.encoderInitialized);\n            if (this.customEncoder) {\n                this.customEncoderQueueSize++;\n                // We clone the sample so it cannot be closed on us from the outside before it reaches the encoder\n                const clonedSample = audioSample.clone();\n                const promise = this.customEncoderCallSerializer\n                    .call(() => this.customEncoder.encode(clonedSample))\n                    .then(() => this.customEncoderQueueSize--)\n                    .catch((error) => this.encoderError ??= error)\n                    .finally(() => {\n                    clonedSample.close();\n                    // `audioSample` gets closed in the finally block at the end of the method\n                });\n                if (this.customEncoderQueueSize >= 4) {\n                    await promise;\n                }\n                await this.muxer.mutex.currentPromise; // Allow the writer to apply backpressure\n            }\n            else if (this.isPcmEncoder) {\n                await this.doPcmEncoding(audioSample, shouldClose);\n            }\n            else {\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.encoder);\n                const audioData = audioSample.toAudioData();\n                this.encoder.encode(audioData);\n                audioData.close();\n                if (shouldClose) {\n                    audioSample.close();\n                }\n                if (this.encoder.encodeQueueSize >= 4) {\n                    await new Promise(resolve => this.encoder.addEventListener('dequeue', resolve, { once: true }));\n                }\n                await this.muxer.mutex.currentPromise; // Allow the writer to apply backpressure\n            }\n        }\n        finally {\n            if (shouldClose) {\n                // Make sure it's always closed, even if there was an error\n                audioSample.close();\n            }\n        }\n    }\n    async doPcmEncoding(audioSample, shouldClose) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.outputSampleSize);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.writeOutputValue);\n        // Need to extract data from the audio data before we close it\n        const { numberOfChannels, numberOfFrames, sampleRate, timestamp } = audioSample;\n        const CHUNK_SIZE = 2048;\n        const outputs = [];\n        // Prepare all of the output buffers, each being bounded by CHUNK_SIZE so we don't generate huge packets\n        for (let frame = 0; frame < numberOfFrames; frame += CHUNK_SIZE) {\n            const frameCount = Math.min(CHUNK_SIZE, audioSample.numberOfFrames - frame);\n            const outputSize = frameCount * numberOfChannels * this.outputSampleSize;\n            const outputBuffer = new ArrayBuffer(outputSize);\n            const outputView = new DataView(outputBuffer);\n            outputs.push({ frameCount, view: outputView });\n        }\n        const allocationSize = audioSample.allocationSize(({ planeIndex: 0, format: 'f32-planar' }));\n        const floats = new Float32Array(allocationSize / Float32Array.BYTES_PER_ELEMENT);\n        for (let i = 0; i < numberOfChannels; i++) {\n            audioSample.copyTo(floats, { planeIndex: i, format: 'f32-planar' });\n            for (let j = 0; j < outputs.length; j++) {\n                const { frameCount, view } = outputs[j];\n                for (let k = 0; k < frameCount; k++) {\n                    this.writeOutputValue(view, (k * numberOfChannels + i) * this.outputSampleSize, floats[j * CHUNK_SIZE + k]);\n                }\n            }\n        }\n        if (shouldClose) {\n            audioSample.close();\n        }\n        const meta = {\n            decoderConfig: {\n                codec: this.encodingConfig.codec,\n                numberOfChannels,\n                sampleRate,\n            },\n        };\n        for (let i = 0; i < outputs.length; i++) {\n            const { frameCount, view } = outputs[i];\n            const outputBuffer = view.buffer;\n            const startFrame = i * CHUNK_SIZE;\n            const packet = new _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket(new Uint8Array(outputBuffer), 'key', timestamp + startFrame / sampleRate, frameCount / sampleRate);\n            this.encodingConfig.onEncodedPacket?.(packet, meta);\n            await this.muxer.addEncodedAudioPacket(this.source._connectedTrack, packet, meta); // With backpressure\n        }\n    }\n    ensureEncoder(audioSample) {\n        if (this.encoderInitialized) {\n            return;\n        }\n        const encoderError = new Error();\n        return this.ensureEncoderPromise = (async () => {\n            const { numberOfChannels, sampleRate } = audioSample;\n            const encoderConfig = (0,_encode_js__WEBPACK_IMPORTED_MODULE_4__.buildAudioEncoderConfig)({\n                numberOfChannels,\n                sampleRate,\n                ...this.encodingConfig,\n            });\n            this.encodingConfig.onEncoderConfig?.(encoderConfig);\n            const MatchingCustomEncoder = _custom_coder_js__WEBPACK_IMPORTED_MODULE_5__.customAudioEncoders.find(x => x.supports(this.encodingConfig.codec, encoderConfig));\n            if (MatchingCustomEncoder) {\n                // @ts-expect-error \"Can't create instance of abstract class 🤓\"\n                this.customEncoder = new MatchingCustomEncoder();\n                // @ts-expect-error It's technically readonly\n                this.customEncoder.codec = this.encodingConfig.codec;\n                // @ts-expect-error It's technically readonly\n                this.customEncoder.config = encoderConfig;\n                // @ts-expect-error It's technically readonly\n                this.customEncoder.onPacket = (packet, meta) => {\n                    if (!(packet instanceof _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket)) {\n                        throw new TypeError('The first argument passed to onPacket must be an EncodedPacket.');\n                    }\n                    if (meta !== undefined && (!meta || typeof meta !== 'object')) {\n                        throw new TypeError('The second argument passed to onPacket must be an object or undefined.');\n                    }\n                    this.encodingConfig.onEncodedPacket?.(packet, meta);\n                    void this.muxer.addEncodedAudioPacket(this.source._connectedTrack, packet, meta);\n                };\n                await this.customEncoder.init();\n            }\n            else if (_codec_js__WEBPACK_IMPORTED_MODULE_0__.PCM_AUDIO_CODECS.includes(this.encodingConfig.codec)) {\n                this.initPcmEncoder();\n            }\n            else {\n                if (typeof AudioEncoder === 'undefined') {\n                    throw new Error('AudioEncoder is not supported by this browser.');\n                }\n                const support = await AudioEncoder.isConfigSupported(encoderConfig);\n                if (!support.supported) {\n                    throw new Error(`This specific encoder configuration (${encoderConfig.codec}, ${encoderConfig.bitrate} bps,`\n                        + ` ${encoderConfig.numberOfChannels} channels, ${encoderConfig.sampleRate} Hz) is not`\n                        + ` supported by this browser. Consider using another codec or changing your audio parameters.`);\n                }\n                this.encoder = new AudioEncoder({\n                    output: (chunk, meta) => {\n                        const packet = _packet_js__WEBPACK_IMPORTED_MODULE_1__.EncodedPacket.fromEncodedChunk(chunk);\n                        this.encodingConfig.onEncodedPacket?.(packet, meta);\n                        void this.muxer.addEncodedAudioPacket(this.source._connectedTrack, packet, meta);\n                    },\n                    error: (error) => {\n                        error.stack = encoderError.stack; // Provide a more useful stack trace\n                        this.encoderError ??= error;\n                    },\n                });\n                this.encoder.configure(encoderConfig);\n            }\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this.source._connectedTrack);\n            this.muxer = this.source._connectedTrack.output._muxer;\n            this.encoderInitialized = true;\n        })();\n    }\n    initPcmEncoder() {\n        this.isPcmEncoder = true;\n        const codec = this.encodingConfig.codec;\n        const { dataType, sampleSize, littleEndian } = (0,_codec_js__WEBPACK_IMPORTED_MODULE_0__.parsePcmCodec)(codec);\n        this.outputSampleSize = sampleSize;\n        // All these functions receive a float sample as input and map it into the desired format\n        switch (sampleSize) {\n            case 1:\n                {\n                    if (dataType === 'unsigned') {\n                        this.writeOutputValue = (view, byteOffset, value) => view.setUint8(byteOffset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.clamp)((value + 1) * 127.5, 0, 255));\n                    }\n                    else if (dataType === 'signed') {\n                        this.writeOutputValue = (view, byteOffset, value) => {\n                            view.setInt8(byteOffset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.clamp)(Math.round(value * 128), -128, 127));\n                        };\n                    }\n                    else if (dataType === 'ulaw') {\n                        this.writeOutputValue = (view, byteOffset, value) => {\n                            const int16 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.clamp)(Math.floor(value * 32767), -32768, 32767);\n                            view.setUint8(byteOffset, (0,_pcm_js__WEBPACK_IMPORTED_MODULE_6__.toUlaw)(int16));\n                        };\n                    }\n                    else if (dataType === 'alaw') {\n                        this.writeOutputValue = (view, byteOffset, value) => {\n                            const int16 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.clamp)(Math.floor(value * 32767), -32768, 32767);\n                            view.setUint8(byteOffset, (0,_pcm_js__WEBPACK_IMPORTED_MODULE_6__.toAlaw)(int16));\n                        };\n                    }\n                    else {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                    }\n                }\n                ;\n                break;\n            case 2:\n                {\n                    if (dataType === 'unsigned') {\n                        this.writeOutputValue = (view, byteOffset, value) => view.setUint16(byteOffset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.clamp)((value + 1) * 32767.5, 0, 65535), littleEndian);\n                    }\n                    else if (dataType === 'signed') {\n                        this.writeOutputValue = (view, byteOffset, value) => view.setInt16(byteOffset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.clamp)(Math.round(value * 32767), -32768, 32767), littleEndian);\n                    }\n                    else {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                    }\n                }\n                ;\n                break;\n            case 3:\n                {\n                    if (dataType === 'unsigned') {\n                        this.writeOutputValue = (view, byteOffset, value) => (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.setUint24)(view, byteOffset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.clamp)((value + 1) * 8388607.5, 0, 16777215), littleEndian);\n                    }\n                    else if (dataType === 'signed') {\n                        this.writeOutputValue = (view, byteOffset, value) => (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.setInt24)(view, byteOffset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.clamp)(Math.round(value * 8388607), -8388608, 8388607), littleEndian);\n                    }\n                    else {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                    }\n                }\n                ;\n                break;\n            case 4:\n                {\n                    if (dataType === 'unsigned') {\n                        this.writeOutputValue = (view, byteOffset, value) => view.setUint32(byteOffset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.clamp)((value + 1) * 2147483647.5, 0, 4294967295), littleEndian);\n                    }\n                    else if (dataType === 'signed') {\n                        this.writeOutputValue = (view, byteOffset, value) => view.setInt32(byteOffset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.clamp)(Math.round(value * 2147483647), -2147483648, 2147483647), littleEndian);\n                    }\n                    else if (dataType === 'float') {\n                        this.writeOutputValue = (view, byteOffset, value) => view.setFloat32(byteOffset, value, littleEndian);\n                    }\n                    else {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                    }\n                }\n                ;\n                break;\n            case 8:\n                {\n                    if (dataType === 'float') {\n                        this.writeOutputValue = (view, byteOffset, value) => view.setFloat64(byteOffset, value, littleEndian);\n                    }\n                    else {\n                        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                    }\n                }\n                ;\n                break;\n            default:\n                {\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assertNever)(sampleSize);\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(false);\n                }\n                ;\n        }\n    }\n    async flushAndClose(forceClose) {\n        if (!forceClose)\n            this.checkForEncoderError();\n        if (this.customEncoder) {\n            if (!forceClose) {\n                void this.customEncoderCallSerializer.call(() => this.customEncoder.flush());\n            }\n            await this.customEncoderCallSerializer.call(() => this.customEncoder.close());\n        }\n        else if (this.encoder) {\n            if (!forceClose) {\n                await this.encoder.flush();\n            }\n            if (this.encoder.state !== 'closed') {\n                this.encoder.close();\n            }\n        }\n        if (!forceClose)\n            this.checkForEncoderError();\n    }\n    getQueueSize() {\n        if (this.customEncoder) {\n            return this.customEncoderQueueSize;\n        }\n        else if (this.isPcmEncoder) {\n            return 0;\n        }\n        else {\n            return this.encoder?.encodeQueueSize ?? 0;\n        }\n    }\n    checkForEncoderError() {\n        if (this.encoderError) {\n            this.encoderError.stack = new Error().stack; // Provide an even more useful stack trace\n            throw this.encoderError;\n        }\n    }\n}\n/**\n * This source can be used to add raw, unencoded audio samples to an output audio track. These samples will\n * automatically be encoded and then piped into the output.\n * @group Media sources\n * @public\n */\nclass AudioSampleSource extends AudioSource {\n    /**\n     * Creates a new {@link AudioSampleSource} whose samples are encoded according to the specified\n     * {@link AudioEncodingConfig}.\n     */\n    constructor(encodingConfig) {\n        (0,_encode_js__WEBPACK_IMPORTED_MODULE_4__.validateAudioEncodingConfig)(encodingConfig);\n        super(encodingConfig.codec);\n        this._encoder = new AudioEncoderWrapper(this, encodingConfig);\n    }\n    /**\n     * Encodes an audio sample and then adds it to the output.\n     *\n     * @returns A Promise that resolves once the output is ready to receive more samples. You should await this Promise\n     * to respect writer and encoder backpressure.\n     */\n    add(audioSample) {\n        if (!(audioSample instanceof _sample_js__WEBPACK_IMPORTED_MODULE_3__.AudioSample)) {\n            throw new TypeError('audioSample must be an AudioSample.');\n        }\n        return this._encoder.add(audioSample, false);\n    }\n    /** @internal */\n    _flushAndClose(forceClose) {\n        return this._encoder.flushAndClose(forceClose);\n    }\n}\n/**\n * This source can be used to add audio data from an AudioBuffer to the output track. This is useful when working with\n * the Web Audio API.\n * @group Media sources\n * @public\n */\nclass AudioBufferSource extends AudioSource {\n    /**\n     * Creates a new {@link AudioBufferSource} whose `AudioBuffer` instances are encoded according to the specified\n     * {@link AudioEncodingConfig}.\n     */\n    constructor(encodingConfig) {\n        (0,_encode_js__WEBPACK_IMPORTED_MODULE_4__.validateAudioEncodingConfig)(encodingConfig);\n        super(encodingConfig.codec);\n        /** @internal */\n        this._accumulatedTime = 0;\n        this._encoder = new AudioEncoderWrapper(this, encodingConfig);\n    }\n    /**\n     * Converts an AudioBuffer to audio samples, encodes them and adds them to the output. The first AudioBuffer will\n     * be played at timestamp 0, and any subsequent AudioBuffer will have a timestamp equal to the total duration of\n     * all previous AudioBuffers.\n     *\n     * @returns A Promise that resolves once the output is ready to receive more samples. You should await this Promise\n     * to respect writer and encoder backpressure.\n     */\n    async add(audioBuffer) {\n        if (!(audioBuffer instanceof AudioBuffer)) {\n            throw new TypeError('audioBuffer must be an AudioBuffer.');\n        }\n        const iterator = _sample_js__WEBPACK_IMPORTED_MODULE_3__.AudioSample._fromAudioBuffer(audioBuffer, this._accumulatedTime);\n        this._accumulatedTime += audioBuffer.duration;\n        for (const audioSample of iterator) {\n            await this._encoder.add(audioSample, true);\n        }\n    }\n    /** @internal */\n    _flushAndClose(forceClose) {\n        return this._encoder.flushAndClose(forceClose);\n    }\n}\n/**\n * Audio source that encodes the data of a\n * [`MediaStreamAudioTrack`](https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack) and pipes it into the\n * output. This is useful for capturing live or real-time audio such as microphones or audio from other media elements.\n * Audio will automatically start being captured once the connected {@link Output} is started, and will keep being\n * captured until the {@link Output} is finalized or this source is closed.\n * @group Media sources\n * @public\n */\nclass MediaStreamAudioTrackSource extends AudioSource {\n    /** A promise that rejects upon any error within this source. This promise never resolves. */\n    get errorPromise() {\n        this._errorPromiseAccessed = true;\n        return this._promiseWithResolvers.promise;\n    }\n    /**\n     * Creates a new {@link MediaStreamAudioTrackSource} from a `MediaStreamAudioTrack`, which will pull audio samples\n     * from the stream in real time and encode them according to {@link AudioEncodingConfig}.\n     */\n    constructor(track, encodingConfig) {\n        if (!(track instanceof MediaStreamTrack) || track.kind !== 'audio') {\n            throw new TypeError('track must be an audio MediaStreamTrack.');\n        }\n        (0,_encode_js__WEBPACK_IMPORTED_MODULE_4__.validateAudioEncodingConfig)(encodingConfig);\n        super(encodingConfig.codec);\n        /** @internal */\n        this._abortController = null;\n        /** @internal */\n        this._audioContext = null;\n        /** @internal */\n        this._scriptProcessorNode = null; // Deprecated but goated\n        /** @internal */\n        this._promiseWithResolvers = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.promiseWithResolvers)();\n        /** @internal */\n        this._errorPromiseAccessed = false;\n        this._encoder = new AudioEncoderWrapper(this, encodingConfig);\n        this._track = track;\n    }\n    /** @internal */\n    async _start() {\n        if (!this._errorPromiseAccessed) {\n            console.warn('Make sure not to ignore the `errorPromise` field on MediaStreamVideoTrackSource, so that any internal'\n                + ' errors get bubbled up properly.');\n        }\n        this._abortController = new AbortController();\n        if (typeof MediaStreamTrackProcessor !== 'undefined') {\n            // Great, MediaStreamTrackProcessor is supported, this is the preferred way of doing things\n            let firstAudioDataTimestamp = null;\n            const processor = new MediaStreamTrackProcessor({ track: this._track });\n            const consumer = new WritableStream({\n                write: (audioData) => {\n                    if (firstAudioDataTimestamp === null) {\n                        firstAudioDataTimestamp = audioData.timestamp / 1e6;\n                        const muxer = this._connectedTrack.output._muxer;\n                        if (muxer.firstMediaStreamTimestamp === null) {\n                            muxer.firstMediaStreamTimestamp = performance.now() / 1000;\n                            this._timestampOffset = -firstAudioDataTimestamp;\n                        }\n                        else {\n                            this._timestampOffset = (performance.now() / 1000 - muxer.firstMediaStreamTimestamp)\n                                - firstAudioDataTimestamp;\n                        }\n                    }\n                    if (this._encoder.getQueueSize() >= 4) {\n                        // Drop data if the encoder is overloaded\n                        audioData.close();\n                        return;\n                    }\n                    void this._encoder.add(new _sample_js__WEBPACK_IMPORTED_MODULE_3__.AudioSample(audioData), true)\n                        .catch((error) => {\n                        this._abortController?.abort();\n                        this._promiseWithResolvers.reject(error);\n                    });\n                },\n            });\n            processor.readable.pipeTo(consumer, {\n                signal: this._abortController.signal,\n            }).catch((error) => {\n                // Handle AbortError silently\n                if (error instanceof DOMException && error.name === 'AbortError')\n                    return;\n                this._promiseWithResolvers.reject(error);\n            });\n        }\n        else {\n            // Let's fall back to an AudioContext approach\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n            const AudioContext = window.AudioContext || window.webkitAudioContext;\n            this._audioContext = new AudioContext({ sampleRate: this._track.getSettings().sampleRate });\n            const sourceNode = this._audioContext.createMediaStreamSource(new MediaStream([this._track]));\n            this._scriptProcessorNode = this._audioContext.createScriptProcessor(4096);\n            if (this._audioContext.state === 'suspended') {\n                await this._audioContext.resume();\n            }\n            sourceNode.connect(this._scriptProcessorNode);\n            this._scriptProcessorNode.connect(this._audioContext.destination);\n            let audioReceived = false;\n            let totalDuration = 0;\n            this._scriptProcessorNode.onaudioprocess = (event) => {\n                const iterator = _sample_js__WEBPACK_IMPORTED_MODULE_3__.AudioSample._fromAudioBuffer(event.inputBuffer, totalDuration);\n                totalDuration += event.inputBuffer.duration;\n                for (const audioSample of iterator) {\n                    if (!audioReceived) {\n                        audioReceived = true;\n                        const muxer = this._connectedTrack.output._muxer;\n                        if (muxer.firstMediaStreamTimestamp === null) {\n                            muxer.firstMediaStreamTimestamp = performance.now() / 1000;\n                        }\n                        else {\n                            this._timestampOffset = performance.now() / 1000 - muxer.firstMediaStreamTimestamp;\n                        }\n                    }\n                    if (this._encoder.getQueueSize() >= 4) {\n                        // Drop data if the encoder is overloaded\n                        audioSample.close();\n                        continue;\n                    }\n                    void this._encoder.add(audioSample, true)\n                        .catch((error) => {\n                        void this._audioContext.suspend();\n                        this._promiseWithResolvers.reject(error);\n                    });\n                }\n            };\n        }\n    }\n    /** @internal */\n    async _flushAndClose(forceClose) {\n        if (this._abortController) {\n            this._abortController.abort();\n            this._abortController = null;\n        }\n        if (this._audioContext) {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(this._scriptProcessorNode);\n            this._scriptProcessorNode.disconnect();\n            await this._audioContext.suspend();\n        }\n        await this._encoder.flushAndClose(forceClose);\n    }\n}\nconst mediaStreamTrackProcessorWorkerCode = () => {\n    const sendMessage = (message, transfer) => {\n        if (transfer) {\n            self.postMessage(message, { transfer });\n        }\n        else {\n            self.postMessage(message);\n        }\n    };\n    // Immediately send a message to the main thread, letting them know of the support\n    sendMessage({\n        type: 'support',\n        supported: typeof MediaStreamTrackProcessor !== 'undefined',\n    });\n    const abortControllers = new Map();\n    const stoppedTracks = new Set();\n    self.addEventListener('message', (event) => {\n        const message = event.data;\n        switch (message.type) {\n            case 'videoTrack':\n                {\n                    const processor = new MediaStreamTrackProcessor({ track: message.track });\n                    const consumer = new WritableStream({\n                        write: (videoFrame) => {\n                            if (stoppedTracks.has(message.trackId)) {\n                                videoFrame.close();\n                                return;\n                            }\n                            // Send it to the main thread\n                            sendMessage({\n                                type: 'videoFrame',\n                                trackId: message.trackId,\n                                videoFrame,\n                            }, [videoFrame]);\n                        },\n                    });\n                    const abortController = new AbortController();\n                    abortControllers.set(message.trackId, abortController);\n                    processor.readable.pipeTo(consumer, {\n                        signal: abortController.signal,\n                    }).catch((error) => {\n                        // Handle AbortError silently\n                        if (error instanceof DOMException && error.name === 'AbortError')\n                            return;\n                        sendMessage({\n                            type: 'error',\n                            trackId: message.trackId,\n                            error,\n                        });\n                    });\n                }\n                ;\n                break;\n            case 'stopTrack':\n                {\n                    const abortController = abortControllers.get(message.trackId);\n                    if (abortController) {\n                        abortController.abort();\n                        abortControllers.delete(message.trackId);\n                    }\n                    stoppedTracks.add(message.trackId);\n                    sendMessage({\n                        type: 'trackStopped',\n                        trackId: message.trackId,\n                    });\n                }\n                ;\n                break;\n            default: (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assertNever)(message);\n        }\n    });\n};\nlet nextMediaStreamTrackProcessorWorkerId = 0;\nlet mediaStreamTrackProcessorWorker = null;\nconst initMediaStreamTrackProcessorWorker = () => {\n    const blob = new Blob([`(${mediaStreamTrackProcessorWorkerCode.toString()})()`], { type: 'application/javascript' });\n    const url = URL.createObjectURL(blob);\n    mediaStreamTrackProcessorWorker = new Worker(url);\n};\nlet mediaStreamTrackProcessorIsSupportedInWorkerCache = null;\nconst mediaStreamTrackProcessorIsSupportedInWorker = async () => {\n    if (mediaStreamTrackProcessorIsSupportedInWorkerCache !== null) {\n        return mediaStreamTrackProcessorIsSupportedInWorkerCache;\n    }\n    if (!mediaStreamTrackProcessorWorker) {\n        initMediaStreamTrackProcessorWorker();\n    }\n    return new Promise((resolve) => {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(mediaStreamTrackProcessorWorker);\n        const listener = (event) => {\n            const message = event.data;\n            if (message.type === 'support') {\n                mediaStreamTrackProcessorIsSupportedInWorkerCache = message.supported;\n                mediaStreamTrackProcessorWorker.removeEventListener('message', listener);\n                resolve(message.supported);\n            }\n        };\n        mediaStreamTrackProcessorWorker.addEventListener('message', listener);\n    });\n};\nconst sendMessageToMediaStreamTrackProcessorWorker = (message, transfer) => {\n    (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.assert)(mediaStreamTrackProcessorWorker);\n    if (transfer) {\n        mediaStreamTrackProcessorWorker.postMessage(message, transfer);\n    }\n    else {\n        mediaStreamTrackProcessorWorker.postMessage(message);\n    }\n};\n/**\n * Base class for subtitle sources - sources for subtitle tracks.\n * @group Media sources\n * @public\n */\nclass SubtitleSource extends MediaSource {\n    /** Internal constructor. */\n    constructor(codec) {\n        super();\n        /** @internal */\n        this._connectedTrack = null;\n        if (!_codec_js__WEBPACK_IMPORTED_MODULE_0__.SUBTITLE_CODECS.includes(codec)) {\n            throw new TypeError(`Invalid subtitle codec '${codec}'. Must be one of: ${_codec_js__WEBPACK_IMPORTED_MODULE_0__.SUBTITLE_CODECS.join(', ')}.`);\n        }\n        this._codec = codec;\n    }\n}\n/**\n * This source can be used to add subtitles from a subtitle text file.\n * @group Media sources\n * @public\n */\nclass TextSubtitleSource extends SubtitleSource {\n    /** Creates a new {@link TextSubtitleSource} where added text chunks are in the specified `codec`. */\n    constructor(codec) {\n        super(codec);\n        this._parser = new _subtitles_js__WEBPACK_IMPORTED_MODULE_7__.SubtitleParser({\n            codec,\n            output: (cue, metadata) => this._connectedTrack?.output._muxer.addSubtitleCue(this._connectedTrack, cue, metadata),\n        });\n    }\n    /**\n     * Parses the subtitle text according to the specified codec and adds it to the output track. You don't have to\n     * add the entire subtitle file at once here; you can provide it in chunks.\n     *\n     * @returns A Promise that resolves once the output is ready to receive more samples. You should await this Promise\n     * to respect writer and encoder backpressure.\n     */\n    add(text) {\n        if (typeof text !== 'string') {\n            throw new TypeError('text must be a string.');\n        }\n        this._ensureValidAdd();\n        this._parser.parse(text);\n        return this._connectedTrack.output._muxer.mutex.currentPromise;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/media-source.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js":
/*!**********************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/misc.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncMutex: function() { return /* binding */ AsyncMutex; },\n/* harmony export */   Bitstream: function() { return /* binding */ Bitstream; },\n/* harmony export */   COLOR_PRIMARIES_MAP: function() { return /* binding */ COLOR_PRIMARIES_MAP; },\n/* harmony export */   COLOR_PRIMARIES_MAP_INVERSE: function() { return /* binding */ COLOR_PRIMARIES_MAP_INVERSE; },\n/* harmony export */   CallSerializer: function() { return /* binding */ CallSerializer; },\n/* harmony export */   MATRIX_COEFFICIENTS_MAP: function() { return /* binding */ MATRIX_COEFFICIENTS_MAP; },\n/* harmony export */   MATRIX_COEFFICIENTS_MAP_INVERSE: function() { return /* binding */ MATRIX_COEFFICIENTS_MAP_INVERSE; },\n/* harmony export */   SECOND_TO_MICROSECOND_FACTOR: function() { return /* binding */ SECOND_TO_MICROSECOND_FACTOR; },\n/* harmony export */   TRANSFER_CHARACTERISTICS_MAP: function() { return /* binding */ TRANSFER_CHARACTERISTICS_MAP; },\n/* harmony export */   TRANSFER_CHARACTERISTICS_MAP_INVERSE: function() { return /* binding */ TRANSFER_CHARACTERISTICS_MAP_INVERSE; },\n/* harmony export */   UNDETERMINED_LANGUAGE: function() { return /* binding */ UNDETERMINED_LANGUAGE; },\n/* harmony export */   assert: function() { return /* binding */ assert; },\n/* harmony export */   assertNever: function() { return /* binding */ assertNever; },\n/* harmony export */   base64ToBytes: function() { return /* binding */ base64ToBytes; },\n/* harmony export */   binarySearchExact: function() { return /* binding */ binarySearchExact; },\n/* harmony export */   binarySearchLessOrEqual: function() { return /* binding */ binarySearchLessOrEqual; },\n/* harmony export */   bytesToBase64: function() { return /* binding */ bytesToBase64; },\n/* harmony export */   bytesToHexString: function() { return /* binding */ bytesToHexString; },\n/* harmony export */   clamp: function() { return /* binding */ clamp; },\n/* harmony export */   closedIntervalsOverlap: function() { return /* binding */ closedIntervalsOverlap; },\n/* harmony export */   coalesceIndex: function() { return /* binding */ coalesceIndex; },\n/* harmony export */   colorSpaceIsComplete: function() { return /* binding */ colorSpaceIsComplete; },\n/* harmony export */   computeRationalApproximation: function() { return /* binding */ computeRationalApproximation; },\n/* harmony export */   findLast: function() { return /* binding */ findLast; },\n/* harmony export */   findLastIndex: function() { return /* binding */ findLastIndex; },\n/* harmony export */   getInt24: function() { return /* binding */ getInt24; },\n/* harmony export */   getUint24: function() { return /* binding */ getUint24; },\n/* harmony export */   ilog: function() { return /* binding */ ilog; },\n/* harmony export */   imageMimeTypeToExtension: function() { return /* binding */ imageMimeTypeToExtension; },\n/* harmony export */   insertSorted: function() { return /* binding */ insertSorted; },\n/* harmony export */   isAllowSharedBufferSource: function() { return /* binding */ isAllowSharedBufferSource; },\n/* harmony export */   isIso639Dash2LanguageCode: function() { return /* binding */ isIso639Dash2LanguageCode; },\n/* harmony export */   isIso88591Compatible: function() { return /* binding */ isIso88591Compatible; },\n/* harmony export */   isSafari: function() { return /* binding */ isSafari; },\n/* harmony export */   isU32: function() { return /* binding */ isU32; },\n/* harmony export */   keyValueIterator: function() { return /* binding */ keyValueIterator; },\n/* harmony export */   last: function() { return /* binding */ last; },\n/* harmony export */   mapAsyncGenerator: function() { return /* binding */ mapAsyncGenerator; },\n/* harmony export */   mergeObjectsDeeply: function() { return /* binding */ mergeObjectsDeeply; },\n/* harmony export */   normalizeRotation: function() { return /* binding */ normalizeRotation; },\n/* harmony export */   promiseWithResolvers: function() { return /* binding */ promiseWithResolvers; },\n/* harmony export */   readExpGolomb: function() { return /* binding */ readExpGolomb; },\n/* harmony export */   readSignedExpGolomb: function() { return /* binding */ readSignedExpGolomb; },\n/* harmony export */   removeItem: function() { return /* binding */ removeItem; },\n/* harmony export */   retriedFetch: function() { return /* binding */ retriedFetch; },\n/* harmony export */   reverseBitsU32: function() { return /* binding */ reverseBitsU32; },\n/* harmony export */   roundToMultiple: function() { return /* binding */ roundToMultiple; },\n/* harmony export */   roundToPrecision: function() { return /* binding */ roundToPrecision; },\n/* harmony export */   setInt24: function() { return /* binding */ setInt24; },\n/* harmony export */   setInt64: function() { return /* binding */ setInt64; },\n/* harmony export */   setUint24: function() { return /* binding */ setUint24; },\n/* harmony export */   textDecoder: function() { return /* binding */ textDecoder; },\n/* harmony export */   textEncoder: function() { return /* binding */ textEncoder; },\n/* harmony export */   toAsyncIterator: function() { return /* binding */ toAsyncIterator; },\n/* harmony export */   toDataView: function() { return /* binding */ toDataView; },\n/* harmony export */   toUint8Array: function() { return /* binding */ toUint8Array; },\n/* harmony export */   validateAnyIterable: function() { return /* binding */ validateAnyIterable; },\n/* harmony export */   writeBits: function() { return /* binding */ writeBits; }\n/* harmony export */ });\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nfunction assert(x) {\n    if (!x) {\n        throw new Error('Assertion failed.');\n    }\n}\nconst normalizeRotation = (rotation) => {\n    const mappedRotation = (rotation % 360 + 360) % 360;\n    if (mappedRotation === 0 || mappedRotation === 90 || mappedRotation === 180 || mappedRotation === 270) {\n        return mappedRotation;\n    }\n    else {\n        throw new Error(`Invalid rotation ${rotation}.`);\n    }\n};\nconst last = (arr) => {\n    return arr && arr[arr.length - 1];\n};\nconst isU32 = (value) => {\n    return value >= 0 && value < 2 ** 32;\n};\nclass Bitstream {\n    constructor(bytes) {\n        this.bytes = bytes;\n        /** Current offset in bits. */\n        this.pos = 0;\n    }\n    seekToByte(byteOffset) {\n        this.pos = 8 * byteOffset;\n    }\n    readBit() {\n        const byteIndex = Math.floor(this.pos / 8);\n        const byte = this.bytes[byteIndex] ?? 0;\n        const bitIndex = 0b111 - (this.pos & 0b111);\n        const bit = (byte & (1 << bitIndex)) >> bitIndex;\n        this.pos++;\n        return bit;\n    }\n    readBits(n) {\n        if (n === 1) {\n            return this.readBit();\n        }\n        let result = 0;\n        for (let i = 0; i < n; i++) {\n            result <<= 1;\n            result |= this.readBit();\n        }\n        return result;\n    }\n    writeBits(n, value) {\n        const end = this.pos + n;\n        for (let i = this.pos; i < end; i++) {\n            const byteIndex = Math.floor(i / 8);\n            let byte = this.bytes[byteIndex];\n            const bitIndex = 0b111 - (i & 0b111);\n            byte &= ~(1 << bitIndex);\n            byte |= ((value & (1 << (end - i - 1))) >> (end - i - 1)) << bitIndex;\n            this.bytes[byteIndex] = byte;\n        }\n        this.pos = end;\n    }\n    ;\n    readAlignedByte() {\n        // Ensure we're byte-aligned\n        if (this.pos % 8 !== 0) {\n            throw new Error('Bitstream is not byte-aligned.');\n        }\n        const byteIndex = this.pos / 8;\n        const byte = this.bytes[byteIndex] ?? 0;\n        this.pos += 8;\n        return byte;\n    }\n    skipBits(n) {\n        this.pos += n;\n    }\n    getBitsLeft() {\n        return this.bytes.length * 8 - this.pos;\n    }\n    clone() {\n        const clone = new Bitstream(this.bytes);\n        clone.pos = this.pos;\n        return clone;\n    }\n}\n/** Reads an exponential-Golomb universal code from a Bitstream.  */\nconst readExpGolomb = (bitstream) => {\n    let leadingZeroBits = 0;\n    while (bitstream.readBits(1) === 0 && leadingZeroBits < 32) {\n        leadingZeroBits++;\n    }\n    if (leadingZeroBits >= 32) {\n        throw new Error('Invalid exponential-Golomb code.');\n    }\n    const result = (1 << leadingZeroBits) - 1 + bitstream.readBits(leadingZeroBits);\n    return result;\n};\n/** Reads a signed exponential-Golomb universal code from a Bitstream. */\nconst readSignedExpGolomb = (bitstream) => {\n    const codeNum = readExpGolomb(bitstream);\n    return ((codeNum & 1) === 0)\n        ? -(codeNum >> 1)\n        : ((codeNum + 1) >> 1);\n};\nconst writeBits = (bytes, start, end, value) => {\n    for (let i = start; i < end; i++) {\n        const byteIndex = Math.floor(i / 8);\n        let byte = bytes[byteIndex];\n        const bitIndex = 0b111 - (i & 0b111);\n        byte &= ~(1 << bitIndex);\n        byte |= ((value & (1 << (end - i - 1))) >> (end - i - 1)) << bitIndex;\n        bytes[byteIndex] = byte;\n    }\n};\nconst toUint8Array = (source) => {\n    if (source instanceof Uint8Array) {\n        return source;\n    }\n    else if (source instanceof ArrayBuffer) {\n        return new Uint8Array(source);\n    }\n    else {\n        return new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    }\n};\nconst toDataView = (source) => {\n    if (source instanceof DataView) {\n        return source;\n    }\n    else if (source instanceof ArrayBuffer) {\n        return new DataView(source);\n    }\n    else {\n        return new DataView(source.buffer, source.byteOffset, source.byteLength);\n    }\n};\nconst textDecoder = new TextDecoder();\nconst textEncoder = new TextEncoder();\nconst isIso88591Compatible = (text) => {\n    for (let i = 0; i < text.length; i++) {\n        const code = text.charCodeAt(i);\n        if (code > 255) {\n            return false;\n        }\n    }\n    return true;\n};\nconst invertObject = (object) => {\n    return Object.fromEntries(Object.entries(object).map(([key, value]) => [value, key]));\n};\n// For the color space mappings, see Rec. ITU-T H.273.\nconst COLOR_PRIMARIES_MAP = {\n    bt709: 1, // ITU-R BT.709\n    bt470bg: 5, // ITU-R BT.470BG\n    smpte170m: 6, // ITU-R BT.601 525 - SMPTE 170M\n    bt2020: 9, // ITU-R BT.202\n    smpte432: 12, // SMPTE EG 432-1\n};\nconst COLOR_PRIMARIES_MAP_INVERSE = invertObject(COLOR_PRIMARIES_MAP);\nconst TRANSFER_CHARACTERISTICS_MAP = {\n    'bt709': 1, // ITU-R BT.709\n    'smpte170m': 6, // SMPTE 170M\n    'linear': 8, // Linear transfer characteristics\n    'iec61966-2-1': 13, // IEC 61966-2-1\n    'pg': 16, // Rec. ITU-R BT.2100-2 perceptual quantization (PQ) system\n    'hlg': 18, // Rec. ITU-R BT.2100-2 hybrid loggamma (HLG) system\n};\nconst TRANSFER_CHARACTERISTICS_MAP_INVERSE = invertObject(TRANSFER_CHARACTERISTICS_MAP);\nconst MATRIX_COEFFICIENTS_MAP = {\n    'rgb': 0, // Identity\n    'bt709': 1, // ITU-R BT.709\n    'bt470bg': 5, // ITU-R BT.470BG\n    'smpte170m': 6, // SMPTE 170M\n    'bt2020-ncl': 9, // ITU-R BT.2020-2 (non-constant luminance)\n};\nconst MATRIX_COEFFICIENTS_MAP_INVERSE = invertObject(MATRIX_COEFFICIENTS_MAP);\nconst colorSpaceIsComplete = (colorSpace) => {\n    return (!!colorSpace\n        && !!colorSpace.primaries\n        && !!colorSpace.transfer\n        && !!colorSpace.matrix\n        && colorSpace.fullRange !== undefined);\n};\nconst isAllowSharedBufferSource = (x) => {\n    return (x instanceof ArrayBuffer\n        || (typeof SharedArrayBuffer !== 'undefined' && x instanceof SharedArrayBuffer)\n        || ArrayBuffer.isView(x));\n};\nclass AsyncMutex {\n    constructor() {\n        this.currentPromise = Promise.resolve();\n    }\n    async acquire() {\n        let resolver;\n        const nextPromise = new Promise((resolve) => {\n            resolver = resolve;\n        });\n        const currentPromiseAlias = this.currentPromise;\n        this.currentPromise = nextPromise;\n        await currentPromiseAlias;\n        return resolver;\n    }\n}\nconst bytesToHexString = (bytes) => {\n    return [...bytes].map(x => x.toString(16).padStart(2, '0')).join('');\n};\nconst reverseBitsU32 = (x) => {\n    x = ((x >> 1) & 0x55555555) | ((x & 0x55555555) << 1);\n    x = ((x >> 2) & 0x33333333) | ((x & 0x33333333) << 2);\n    x = ((x >> 4) & 0x0f0f0f0f) | ((x & 0x0f0f0f0f) << 4);\n    x = ((x >> 8) & 0x00ff00ff) | ((x & 0x00ff00ff) << 8);\n    x = ((x >> 16) & 0x0000ffff) | ((x & 0x0000ffff) << 16);\n    return x >>> 0; // Ensure it's treated as an unsigned 32-bit integer\n};\n/** Returns the smallest index i such that val[i] === key, or -1 if no such index exists. */\nconst binarySearchExact = (arr, key, valueGetter) => {\n    let low = 0;\n    let high = arr.length - 1;\n    let ans = -1;\n    while (low <= high) {\n        const mid = (low + high) >> 1;\n        const midVal = valueGetter(arr[mid]);\n        if (midVal === key) {\n            ans = mid;\n            high = mid - 1; // Continue searching left to find the lowest index\n        }\n        else if (midVal < key) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n};\n/** Returns the largest index i such that val[i] <= key, or -1 if no such index exists. */\nconst binarySearchLessOrEqual = (arr, key, valueGetter) => {\n    let low = 0;\n    let high = arr.length - 1;\n    let ans = -1;\n    while (low <= high) {\n        const mid = (low + (high - low + 1) / 2) | 0;\n        const midVal = valueGetter(arr[mid]);\n        if (midVal <= key) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n};\n/** Assumes the array is already sorted. */\nconst insertSorted = (arr, item, valueGetter) => {\n    const insertionIndex = binarySearchLessOrEqual(arr, valueGetter(item), valueGetter);\n    arr.splice(insertionIndex + 1, 0, item); // This even behaves correctly for the -1 case\n};\nconst promiseWithResolvers = () => {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    return { promise, resolve: resolve, reject: reject };\n};\nconst removeItem = (arr, item) => {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n};\nconst findLast = (arr, predicate) => {\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (predicate(arr[i])) {\n            return arr[i];\n        }\n    }\n    return undefined;\n};\nconst findLastIndex = (arr, predicate) => {\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (predicate(arr[i])) {\n            return i;\n        }\n    }\n    return -1;\n};\nconst toAsyncIterator = async function* (source) {\n    if (Symbol.iterator in source) {\n        // @ts-expect-error Trust me\n        yield* source[Symbol.iterator]();\n    }\n    else {\n        // @ts-expect-error Trust me\n        yield* source[Symbol.asyncIterator]();\n    }\n};\nconst validateAnyIterable = (iterable) => {\n    if (!(Symbol.iterator in iterable) && !(Symbol.asyncIterator in iterable)) {\n        throw new TypeError('Argument must be an iterable or async iterable.');\n    }\n};\nconst assertNever = (x) => {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    throw new Error(`Unexpected value: ${x}`);\n};\nconst getUint24 = (view, byteOffset, littleEndian) => {\n    const byte1 = view.getUint8(byteOffset);\n    const byte2 = view.getUint8(byteOffset + 1);\n    const byte3 = view.getUint8(byteOffset + 2);\n    if (littleEndian) {\n        return byte1 | (byte2 << 8) | (byte3 << 16);\n    }\n    else {\n        return (byte1 << 16) | (byte2 << 8) | byte3;\n    }\n};\nconst getInt24 = (view, byteOffset, littleEndian) => {\n    // The left shift pushes the most significant bit into the sign bit region, and the subsequent right shift\n    // then correctly interprets the sign bit.\n    return getUint24(view, byteOffset, littleEndian) << 8 >> 8;\n};\nconst setUint24 = (view, byteOffset, value, littleEndian) => {\n    // Ensure the value is within 24-bit unsigned range (0 to 16777215)\n    value = value >>> 0; // Convert to unsigned 32-bit\n    value = value & 0xFFFFFF; // Mask to 24 bits\n    if (littleEndian) {\n        view.setUint8(byteOffset, value & 0xFF);\n        view.setUint8(byteOffset + 1, (value >>> 8) & 0xFF);\n        view.setUint8(byteOffset + 2, (value >>> 16) & 0xFF);\n    }\n    else {\n        view.setUint8(byteOffset, (value >>> 16) & 0xFF);\n        view.setUint8(byteOffset + 1, (value >>> 8) & 0xFF);\n        view.setUint8(byteOffset + 2, value & 0xFF);\n    }\n};\nconst setInt24 = (view, byteOffset, value, littleEndian) => {\n    // Ensure the value is within 24-bit signed range (-8388608 to 8388607)\n    value = clamp(value, -8388608, 8388607);\n    // Convert negative values to their 24-bit representation\n    if (value < 0) {\n        value = (value + 0x1000000) & 0xFFFFFF;\n    }\n    setUint24(view, byteOffset, value, littleEndian);\n};\nconst setInt64 = (view, byteOffset, value, littleEndian) => {\n    if (littleEndian) {\n        view.setUint32(byteOffset + 0, value, true);\n        view.setInt32(byteOffset + 4, Math.floor(value / 2 ** 32), true);\n    }\n    else {\n        view.setInt32(byteOffset + 0, Math.floor(value / 2 ** 32), true);\n        view.setUint32(byteOffset + 4, value, true);\n    }\n};\n/**\n * Calls a function on each value spat out by an async generator. The reason for writing this manually instead of\n * using a generator function is that the generator function queues return() calls - here, we forward them immediately.\n */\nconst mapAsyncGenerator = (generator, map) => {\n    return {\n        async next() {\n            const result = await generator.next();\n            if (result.done) {\n                return { value: undefined, done: true };\n            }\n            else {\n                return { value: map(result.value), done: false };\n            }\n        },\n        return() {\n            return generator.return();\n        },\n        throw(error) {\n            return generator.throw(error);\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n};\nconst clamp = (value, min, max) => {\n    return Math.max(min, Math.min(max, value));\n};\nconst UNDETERMINED_LANGUAGE = 'und';\nconst roundToPrecision = (value, digits) => {\n    const factor = 10 ** digits;\n    return Math.round(value * factor) / factor;\n};\nconst roundToMultiple = (value, multiple) => {\n    return Math.round(value / multiple) * multiple;\n};\nconst ilog = (x) => {\n    let ret = 0;\n    while (x) {\n        ret++;\n        x >>= 1;\n    }\n    return ret;\n};\nconst ISO_639_2_REGEX = /^[a-z]{3}$/;\nconst isIso639Dash2LanguageCode = (x) => {\n    return ISO_639_2_REGEX.test(x);\n};\n// Since the result will be truncated, add a bit of eps to compensate for floating point errors\nconst SECOND_TO_MICROSECOND_FACTOR = 1e6 * (1 + Number.EPSILON);\nconst mergeObjectsDeeply = (a, b) => {\n    const result = { ...a };\n    for (const key in b) {\n        if (typeof a[key] === 'object'\n            && a[key] !== null\n            && typeof b[key] === 'object'\n            && b[key] !== null) {\n            result[key] = mergeObjectsDeeply(a[key], b[key]);\n        }\n        else {\n            result[key] = b[key];\n        }\n    }\n    return result;\n};\nconst retriedFetch = async (url, requestInit, getRetryDelay) => {\n    let attempts = 0;\n    while (true) {\n        try {\n            return await fetch(url, requestInit);\n        }\n        catch (error) {\n            attempts++;\n            const retryDelayInSeconds = getRetryDelay(attempts);\n            if (retryDelayInSeconds === null) {\n                throw error;\n            }\n            console.error('Retrying failed fetch. Error:', error);\n            if (!Number.isFinite(retryDelayInSeconds) || retryDelayInSeconds < 0) {\n                throw new TypeError('Retry delay must be a non-negative finite number.');\n            }\n            if (retryDelayInSeconds > 0) {\n                await new Promise(resolve => setTimeout(resolve, 1000 * retryDelayInSeconds));\n            }\n        }\n    }\n};\nconst computeRationalApproximation = (x, maxDenominator) => {\n    // Handle negative numbers\n    const sign = x < 0 ? -1 : 1;\n    x = Math.abs(x);\n    let prevNumerator = 0, prevDenominator = 1;\n    let currNumerator = 1, currDenominator = 0;\n    // Continued fraction algorithm\n    let remainder = x;\n    while (true) {\n        const integer = Math.floor(remainder);\n        // Calculate next convergent\n        const nextNumerator = integer * currNumerator + prevNumerator;\n        const nextDenominator = integer * currDenominator + prevDenominator;\n        if (nextDenominator > maxDenominator) {\n            return {\n                numerator: sign * currNumerator,\n                denominator: currDenominator,\n            };\n        }\n        prevNumerator = currNumerator;\n        prevDenominator = currDenominator;\n        currNumerator = nextNumerator;\n        currDenominator = nextDenominator;\n        remainder = 1 / (remainder - integer);\n        // Guard against precision issues\n        if (!isFinite(remainder)) {\n            break;\n        }\n    }\n    return {\n        numerator: sign * currNumerator,\n        denominator: currDenominator,\n    };\n};\nclass CallSerializer {\n    constructor() {\n        this.currentPromise = Promise.resolve();\n    }\n    call(fn) {\n        return this.currentPromise = this.currentPromise.then(fn);\n    }\n}\nlet isSafariCache = null;\nconst isSafari = () => {\n    if (isSafariCache !== null) {\n        return isSafariCache;\n    }\n    const result = !!(typeof navigator !== 'undefined'\n        && navigator.vendor?.match(/apple/i)\n        && !navigator.userAgent?.match(/crios/i)\n        && !navigator.userAgent?.match(/fxios/i)\n        && !navigator.userAgent?.match(/Opera|OPT\\//));\n    isSafariCache = result;\n    return result;\n};\n/** Acts like `??` except the condition is -1 and not null/undefined. */\nconst coalesceIndex = (a, b) => {\n    return a !== -1 ? a : b;\n};\nconst closedIntervalsOverlap = (startA, endA, startB, endB) => {\n    return startA <= endB && startB <= endA;\n};\nconst keyValueIterator = function* (object) {\n    for (const key in object) {\n        const value = object[key];\n        if (value === undefined) {\n            continue;\n        }\n        yield { key, value };\n    }\n};\nconst imageMimeTypeToExtension = (mimeType) => {\n    switch (mimeType.toLowerCase()) {\n        case 'image/jpeg':\n        case 'image/jpg':\n            return '.jpg';\n        case 'image/png':\n            return '.png';\n        case 'image/gif':\n            return '.gif';\n        case 'image/webp':\n            return '.webp';\n        case 'image/bmp':\n            return '.bmp';\n        case 'image/svg+xml':\n            return '.svg';\n        case 'image/tiff':\n            return '.tiff';\n        case 'image/avif':\n            return '.avif';\n        case 'image/x-icon':\n        case 'image/vnd.microsoft.icon':\n            return '.ico';\n        default:\n            return null;\n    }\n};\nconst base64ToBytes = (base64) => {\n    const decoded = atob(base64);\n    const bytes = new Uint8Array(decoded.length);\n    for (let i = 0; i < decoded.length; i++) {\n        bytes[i] = decoded.charCodeAt(i);\n    }\n    return bytes;\n};\nconst bytesToBase64 = (bytes) => {\n    let string = '';\n    for (let i = 0; i < bytes.length; i++) {\n        string += String.fromCharCode(bytes[i]);\n    }\n    return btoa(string);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/mp3/mp3-muxer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/mp3/mp3-muxer.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mp3Muxer: function() { return /* binding */ Mp3Muxer; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _tags_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tags.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/tags.js\");\n/* harmony import */ var _muxer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/muxer.js\");\n/* harmony import */ var _shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/mp3-misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/shared/mp3-misc.js\");\n/* harmony import */ var _mp3_writer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mp3-writer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/mp3/mp3-writer.js\");\n/* harmony import */ var _mp3_reader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mp3-reader.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/mp3/mp3-reader.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n\nclass Mp3Muxer extends _muxer_js__WEBPACK_IMPORTED_MODULE_0__.Muxer {\n    constructor(output, format) {\n        super(output);\n        this.xingFrameData = null;\n        this.frameCount = 0;\n        this.framePositions = [];\n        this.xingFramePos = null;\n        this.format = format;\n        this.writer = output._writer;\n        this.mp3Writer = new _mp3_writer_js__WEBPACK_IMPORTED_MODULE_1__.Mp3Writer(output._writer);\n    }\n    async start() {\n        if (!(0,_tags_js__WEBPACK_IMPORTED_MODULE_2__.metadataTagsAreEmpty)(this.output._metadataTags)) {\n            this.writeId3v2Tag(this.output._metadataTags);\n        }\n    }\n    async getMimeType() {\n        return 'audio/mpeg';\n    }\n    async addEncodedVideoPacket() {\n        throw new Error('MP3 does not support video.');\n    }\n    async addEncodedAudioPacket(track, packet) {\n        const release = await this.mutex.acquire();\n        try {\n            const writeXingHeader = this.format._options.xingHeader !== false;\n            if (!this.xingFrameData && writeXingHeader) {\n                const view = (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.toDataView)(packet.data);\n                if (view.byteLength < 4) {\n                    throw new Error('Invalid MP3 header in sample.');\n                }\n                const word = view.getUint32(0, false);\n                const header = (0,_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_4__.readFrameHeader)(word, null).header;\n                if (!header) {\n                    throw new Error('Invalid MP3 header in sample.');\n                }\n                const xingOffset = (0,_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_4__.getXingOffset)(header.mpegVersionId, header.channel);\n                if (view.byteLength >= xingOffset + 4) {\n                    const word = view.getUint32(xingOffset, false);\n                    const isXing = word === _shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_4__.XING || word === _shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_4__.INFO;\n                    if (isXing) {\n                        // This is not a data frame, so let's completely ignore this sample\n                        return;\n                    }\n                }\n                this.xingFrameData = {\n                    mpegVersionId: header.mpegVersionId,\n                    layer: header.layer,\n                    frequencyIndex: header.frequencyIndex,\n                    channel: header.channel,\n                    modeExtension: header.modeExtension,\n                    copyright: header.copyright,\n                    original: header.original,\n                    emphasis: header.emphasis,\n                    frameCount: null,\n                    fileSize: null,\n                    toc: null,\n                };\n                // Write a Xing frame because this muxer doesn't make any bitrate constraints, meaning we don't know if\n                // this will be a constant or variable bitrate file. Therefore, always write the Xing frame.\n                this.xingFramePos = this.writer.getPos();\n                this.mp3Writer.writeXingFrame(this.xingFrameData);\n                this.frameCount++;\n            }\n            this.validateAndNormalizeTimestamp(track, packet.timestamp, packet.type === 'key');\n            this.writer.write(packet.data);\n            this.frameCount++;\n            await this.writer.flush();\n            if (writeXingHeader) {\n                this.framePositions.push(this.writer.getPos());\n            }\n        }\n        finally {\n            release();\n        }\n    }\n    async addSubtitleCue() {\n        throw new Error('MP3 does not support subtitles.');\n    }\n    writeId3v2Tag(tags) {\n        this.mp3Writer.writeAscii('ID3');\n        this.mp3Writer.writeU8(0x04); // Version 2.4\n        this.mp3Writer.writeU8(0x00); // Revision 0\n        this.mp3Writer.writeU8(0x00); // Flags\n        this.mp3Writer.writeSynchsafeU32(0); // Size placeholder\n        const startPos = this.writer.getPos();\n        const writtenTags = new Set();\n        for (const { key, value } of (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.keyValueIterator)(tags)) {\n            switch (key) {\n                case 'title':\n                    {\n                        this.mp3Writer.writeId3V2TextFrame('TIT2', value);\n                        writtenTags.add('TIT2');\n                    }\n                    ;\n                    break;\n                case 'description':\n                    {\n                        this.mp3Writer.writeId3V2TextFrame('TIT3', value);\n                        writtenTags.add('TIT3');\n                    }\n                    ;\n                    break;\n                case 'artist':\n                    {\n                        this.mp3Writer.writeId3V2TextFrame('TPE1', value);\n                        writtenTags.add('TPE1');\n                    }\n                    ;\n                    break;\n                case 'album':\n                    {\n                        this.mp3Writer.writeId3V2TextFrame('TALB', value);\n                        writtenTags.add('TALB');\n                    }\n                    ;\n                    break;\n                case 'albumArtist':\n                    {\n                        this.mp3Writer.writeId3V2TextFrame('TPE2', value);\n                        writtenTags.add('TPE2');\n                    }\n                    ;\n                    break;\n                case 'trackNumber':\n                    {\n                        const string = tags.tracksTotal !== undefined\n                            ? `${value}/${tags.tracksTotal}`\n                            : value.toString();\n                        this.mp3Writer.writeId3V2TextFrame('TRCK', string);\n                        writtenTags.add('TRCK');\n                    }\n                    ;\n                    break;\n                case 'discNumber':\n                    {\n                        const string = tags.discsTotal !== undefined\n                            ? `${value}/${tags.discsTotal}`\n                            : value.toString();\n                        this.mp3Writer.writeId3V2TextFrame('TPOS', string);\n                        writtenTags.add('TPOS');\n                    }\n                    ;\n                    break;\n                case 'genre':\n                    {\n                        this.mp3Writer.writeId3V2TextFrame('TCON', value);\n                        writtenTags.add('TCON');\n                    }\n                    ;\n                    break;\n                case 'date':\n                    {\n                        this.mp3Writer.writeId3V2TextFrame('TDRC', value.toISOString().slice(0, 10));\n                        writtenTags.add('TDRC');\n                    }\n                    ;\n                    break;\n                case 'lyrics':\n                    {\n                        this.mp3Writer.writeId3V2LyricsFrame(value);\n                        writtenTags.add('USLT');\n                    }\n                    ;\n                    break;\n                case 'comment':\n                    {\n                        this.mp3Writer.writeId3V2CommentFrame(value);\n                        writtenTags.add('COMM');\n                    }\n                    ;\n                    break;\n                case 'images':\n                    {\n                        const pictureTypeMap = { coverFront: 0x03, coverBack: 0x04, unknown: 0x00 };\n                        for (const image of value) {\n                            const pictureType = pictureTypeMap[image.kind];\n                            const description = image.description ?? '';\n                            this.mp3Writer.writeId3V2ApicFrame(image.mimeType, pictureType, description, image.data);\n                        }\n                    }\n                    ;\n                    break;\n                case 'tracksTotal':\n                case 'discsTotal':\n                    {\n                        // Handled with trackNumber and discNumber respectively\n                    }\n                    ;\n                    break;\n                case 'raw':\n                    {\n                        // Handled later\n                    }\n                    ;\n                    break;\n                default: (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assertNever)(key);\n            }\n        }\n        if (tags.raw) {\n            for (const key in tags.raw) {\n                const value = tags.raw[key];\n                if (value == null || key.length !== 4 || writtenTags.has(key)) {\n                    continue;\n                }\n                let bytes;\n                if (typeof value === 'string') {\n                    const encoded = _misc_js__WEBPACK_IMPORTED_MODULE_3__.textEncoder.encode(value);\n                    bytes = new Uint8Array(encoded.byteLength + 2);\n                    bytes[0] = _mp3_reader_js__WEBPACK_IMPORTED_MODULE_5__.Id3V2TextEncoding.UTF_8;\n                    bytes.set(encoded, 1);\n                    // Last byte is the null terminator\n                }\n                else if (value instanceof Uint8Array) {\n                    bytes = value;\n                }\n                else {\n                    continue;\n                }\n                this.mp3Writer.writeAscii(key);\n                this.mp3Writer.writeSynchsafeU32(bytes.byteLength);\n                this.mp3Writer.writeU16(0x0000);\n                this.writer.write(bytes);\n            }\n        }\n        const endPos = this.writer.getPos();\n        const framesSize = endPos - startPos;\n        this.writer.seek(6);\n        this.mp3Writer.writeSynchsafeU32(framesSize);\n        this.writer.seek(endPos);\n    }\n    async finalize() {\n        if (!this.xingFrameData || this.xingFramePos === null) {\n            return;\n        }\n        const release = await this.mutex.acquire();\n        const endPos = this.writer.getPos();\n        this.writer.seek(this.xingFramePos);\n        const toc = new Uint8Array(100);\n        for (let i = 0; i < 100; i++) {\n            const index = Math.floor(this.framePositions.length * (i / 100));\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(index !== -1 && index < this.framePositions.length);\n            const byteOffset = this.framePositions[index];\n            toc[i] = 256 * (byteOffset / endPos);\n        }\n        this.xingFrameData.frameCount = this.frameCount;\n        this.xingFrameData.fileSize = endPos;\n        this.xingFrameData.toc = toc;\n        if (this.format._options.onXingFrame) {\n            this.writer.startTrackingWrites();\n        }\n        this.mp3Writer.writeXingFrame(this.xingFrameData);\n        if (this.format._options.onXingFrame) {\n            const { data, start } = this.writer.stopTrackingWrites();\n            this.format._options.onXingFrame(data, start);\n        }\n        this.writer.seek(endPos);\n        release();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvbXAzL21wMy1tdXhlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNEY7QUFDMUM7QUFDZDtBQUNrRDtBQUMxQztBQUNRO0FBQzdDLHVCQUF1Qiw0Q0FBSztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHFEQUFTO0FBQ3RDO0FBQ0E7QUFDQSxhQUFhLDhEQUFvQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9EQUFVO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLG9FQUFlO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxrRUFBYTtBQUNoRDtBQUNBO0FBQ0EsNENBQTRDLHFEQUFJLGFBQWEscURBQUk7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QyxzQ0FBc0M7QUFDdEMsc0NBQXNDO0FBQ3RDLDZDQUE2QztBQUM3QztBQUNBO0FBQ0EscUJBQXFCLGFBQWEsR0FBRywwREFBZ0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLE1BQU0sR0FBRyxpQkFBaUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLE1BQU0sR0FBRyxnQkFBZ0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixxREFBVztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxpREFBVztBQUMvQztBQUNBLCtCQUErQiw2REFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixTQUFTO0FBQ2pDO0FBQ0EsWUFBWSxnREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvbXAzL21wMy1tdXhlci5qcz8zMjgwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDI1LXByZXNlbnQsIFZhbmlsYWd5IGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cbiAqL1xuaW1wb3J0IHsgYXNzZXJ0LCBhc3NlcnROZXZlciwga2V5VmFsdWVJdGVyYXRvciwgdGV4dEVuY29kZXIsIHRvRGF0YVZpZXcgfSBmcm9tICcuLi9taXNjLmpzJztcbmltcG9ydCB7IG1ldGFkYXRhVGFnc0FyZUVtcHR5IH0gZnJvbSAnLi4vdGFncy5qcyc7XG5pbXBvcnQgeyBNdXhlciB9IGZyb20gJy4uL211eGVyLmpzJztcbmltcG9ydCB7IGdldFhpbmdPZmZzZXQsIElORk8sIHJlYWRGcmFtZUhlYWRlciwgWElORyB9IGZyb20gJy4uLy4uL3NoYXJlZC9tcDMtbWlzYy5qcyc7XG5pbXBvcnQgeyBNcDNXcml0ZXIgfSBmcm9tICcuL21wMy13cml0ZXIuanMnO1xuaW1wb3J0IHsgSWQzVjJUZXh0RW5jb2RpbmcgfSBmcm9tICcuL21wMy1yZWFkZXIuanMnO1xuZXhwb3J0IGNsYXNzIE1wM011eGVyIGV4dGVuZHMgTXV4ZXIge1xuICAgIGNvbnN0cnVjdG9yKG91dHB1dCwgZm9ybWF0KSB7XG4gICAgICAgIHN1cGVyKG91dHB1dCk7XG4gICAgICAgIHRoaXMueGluZ0ZyYW1lRGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuZnJhbWVDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuZnJhbWVQb3NpdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy54aW5nRnJhbWVQb3MgPSBudWxsO1xuICAgICAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdDtcbiAgICAgICAgdGhpcy53cml0ZXIgPSBvdXRwdXQuX3dyaXRlcjtcbiAgICAgICAgdGhpcy5tcDNXcml0ZXIgPSBuZXcgTXAzV3JpdGVyKG91dHB1dC5fd3JpdGVyKTtcbiAgICB9XG4gICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgIGlmICghbWV0YWRhdGFUYWdzQXJlRW1wdHkodGhpcy5vdXRwdXQuX21ldGFkYXRhVGFncykpIHtcbiAgICAgICAgICAgIHRoaXMud3JpdGVJZDN2MlRhZyh0aGlzLm91dHB1dC5fbWV0YWRhdGFUYWdzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXRNaW1lVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuICdhdWRpby9tcGVnJztcbiAgICB9XG4gICAgYXN5bmMgYWRkRW5jb2RlZFZpZGVvUGFja2V0KCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01QMyBkb2VzIG5vdCBzdXBwb3J0IHZpZGVvLicpO1xuICAgIH1cbiAgICBhc3luYyBhZGRFbmNvZGVkQXVkaW9QYWNrZXQodHJhY2ssIHBhY2tldCkge1xuICAgICAgICBjb25zdCByZWxlYXNlID0gYXdhaXQgdGhpcy5tdXRleC5hY3F1aXJlKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB3cml0ZVhpbmdIZWFkZXIgPSB0aGlzLmZvcm1hdC5fb3B0aW9ucy54aW5nSGVhZGVyICE9PSBmYWxzZTtcbiAgICAgICAgICAgIGlmICghdGhpcy54aW5nRnJhbWVEYXRhICYmIHdyaXRlWGluZ0hlYWRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB0b0RhdGFWaWV3KHBhY2tldC5kYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAodmlldy5ieXRlTGVuZ3RoIDwgNCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTVAzIGhlYWRlciBpbiBzYW1wbGUuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHdvcmQgPSB2aWV3LmdldFVpbnQzMigwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gcmVhZEZyYW1lSGVhZGVyKHdvcmQsIG51bGwpLmhlYWRlcjtcbiAgICAgICAgICAgICAgICBpZiAoIWhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTVAzIGhlYWRlciBpbiBzYW1wbGUuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHhpbmdPZmZzZXQgPSBnZXRYaW5nT2Zmc2V0KGhlYWRlci5tcGVnVmVyc2lvbklkLCBoZWFkZXIuY2hhbm5lbCk7XG4gICAgICAgICAgICAgICAgaWYgKHZpZXcuYnl0ZUxlbmd0aCA+PSB4aW5nT2Zmc2V0ICsgNCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkID0gdmlldy5nZXRVaW50MzIoeGluZ09mZnNldCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1hpbmcgPSB3b3JkID09PSBYSU5HIHx8IHdvcmQgPT09IElORk87XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1hpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgbm90IGEgZGF0YSBmcmFtZSwgc28gbGV0J3MgY29tcGxldGVseSBpZ25vcmUgdGhpcyBzYW1wbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnhpbmdGcmFtZURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1wZWdWZXJzaW9uSWQ6IGhlYWRlci5tcGVnVmVyc2lvbklkLFxuICAgICAgICAgICAgICAgICAgICBsYXllcjogaGVhZGVyLmxheWVyLFxuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3lJbmRleDogaGVhZGVyLmZyZXF1ZW5jeUluZGV4LFxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsOiBoZWFkZXIuY2hhbm5lbCxcbiAgICAgICAgICAgICAgICAgICAgbW9kZUV4dGVuc2lvbjogaGVhZGVyLm1vZGVFeHRlbnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGNvcHlyaWdodDogaGVhZGVyLmNvcHlyaWdodCxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWw6IGhlYWRlci5vcmlnaW5hbCxcbiAgICAgICAgICAgICAgICAgICAgZW1waGFzaXM6IGhlYWRlci5lbXBoYXNpcyxcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDb3VudDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZmlsZVNpemU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRvYzogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIFdyaXRlIGEgWGluZyBmcmFtZSBiZWNhdXNlIHRoaXMgbXV4ZXIgZG9lc24ndCBtYWtlIGFueSBiaXRyYXRlIGNvbnN0cmFpbnRzLCBtZWFuaW5nIHdlIGRvbid0IGtub3cgaWZcbiAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgYmUgYSBjb25zdGFudCBvciB2YXJpYWJsZSBiaXRyYXRlIGZpbGUuIFRoZXJlZm9yZSwgYWx3YXlzIHdyaXRlIHRoZSBYaW5nIGZyYW1lLlxuICAgICAgICAgICAgICAgIHRoaXMueGluZ0ZyYW1lUG9zID0gdGhpcy53cml0ZXIuZ2V0UG9zKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tcDNXcml0ZXIud3JpdGVYaW5nRnJhbWUodGhpcy54aW5nRnJhbWVEYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVBbmROb3JtYWxpemVUaW1lc3RhbXAodHJhY2ssIHBhY2tldC50aW1lc3RhbXAsIHBhY2tldC50eXBlID09PSAna2V5Jyk7XG4gICAgICAgICAgICB0aGlzLndyaXRlci53cml0ZShwYWNrZXQuZGF0YSk7XG4gICAgICAgICAgICB0aGlzLmZyYW1lQ291bnQrKztcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud3JpdGVyLmZsdXNoKCk7XG4gICAgICAgICAgICBpZiAod3JpdGVYaW5nSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZVBvc2l0aW9ucy5wdXNoKHRoaXMud3JpdGVyLmdldFBvcygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHJlbGVhc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBhZGRTdWJ0aXRsZUN1ZSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNUDMgZG9lcyBub3Qgc3VwcG9ydCBzdWJ0aXRsZXMuJyk7XG4gICAgfVxuICAgIHdyaXRlSWQzdjJUYWcodGFncykge1xuICAgICAgICB0aGlzLm1wM1dyaXRlci53cml0ZUFzY2lpKCdJRDMnKTtcbiAgICAgICAgdGhpcy5tcDNXcml0ZXIud3JpdGVVOCgweDA0KTsgLy8gVmVyc2lvbiAyLjRcbiAgICAgICAgdGhpcy5tcDNXcml0ZXIud3JpdGVVOCgweDAwKTsgLy8gUmV2aXNpb24gMFxuICAgICAgICB0aGlzLm1wM1dyaXRlci53cml0ZVU4KDB4MDApOyAvLyBGbGFnc1xuICAgICAgICB0aGlzLm1wM1dyaXRlci53cml0ZVN5bmNoc2FmZVUzMigwKTsgLy8gU2l6ZSBwbGFjZWhvbGRlclxuICAgICAgICBjb25zdCBzdGFydFBvcyA9IHRoaXMud3JpdGVyLmdldFBvcygpO1xuICAgICAgICBjb25zdCB3cml0dGVuVGFncyA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCB7IGtleSwgdmFsdWUgfSBvZiBrZXlWYWx1ZUl0ZXJhdG9yKHRhZ3MpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tcDNXcml0ZXIud3JpdGVJZDNWMlRleHRGcmFtZSgnVElUMicsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXR0ZW5UYWdzLmFkZCgnVElUMicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGVzY3JpcHRpb24nOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1wM1dyaXRlci53cml0ZUlkM1YyVGV4dEZyYW1lKCdUSVQzJywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdHRlblRhZ3MuYWRkKCdUSVQzJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdhcnRpc3QnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1wM1dyaXRlci53cml0ZUlkM1YyVGV4dEZyYW1lKCdUUEUxJywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdHRlblRhZ3MuYWRkKCdUUEUxJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdhbGJ1bSc6XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXAzV3JpdGVyLndyaXRlSWQzVjJUZXh0RnJhbWUoJ1RBTEInLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0dGVuVGFncy5hZGQoJ1RBTEInKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FsYnVtQXJ0aXN0JzpcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tcDNXcml0ZXIud3JpdGVJZDNWMlRleHRGcmFtZSgnVFBFMicsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXR0ZW5UYWdzLmFkZCgnVFBFMicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndHJhY2tOdW1iZXInOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmcgPSB0YWdzLnRyYWNrc1RvdGFsICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGAke3ZhbHVlfS8ke3RhZ3MudHJhY2tzVG90YWx9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXAzV3JpdGVyLndyaXRlSWQzVjJUZXh0RnJhbWUoJ1RSQ0snLCBzdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdHRlblRhZ3MuYWRkKCdUUkNLJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkaXNjTnVtYmVyJzpcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nID0gdGFncy5kaXNjc1RvdGFsICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGAke3ZhbHVlfS8ke3RhZ3MuZGlzY3NUb3RhbH1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tcDNXcml0ZXIud3JpdGVJZDNWMlRleHRGcmFtZSgnVFBPUycsIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0dGVuVGFncy5hZGQoJ1RQT1MnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2dlbnJlJzpcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tcDNXcml0ZXIud3JpdGVJZDNWMlRleHRGcmFtZSgnVENPTicsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXR0ZW5UYWdzLmFkZCgnVENPTicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXAzV3JpdGVyLndyaXRlSWQzVjJUZXh0RnJhbWUoJ1REUkMnLCB2YWx1ZS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0dGVuVGFncy5hZGQoJ1REUkMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2x5cmljcyc6XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXAzV3JpdGVyLndyaXRlSWQzVjJMeXJpY3NGcmFtZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0dGVuVGFncy5hZGQoJ1VTTFQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1wM1dyaXRlci53cml0ZUlkM1YyQ29tbWVudEZyYW1lKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXR0ZW5UYWdzLmFkZCgnQ09NTScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW1hZ2VzJzpcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGljdHVyZVR5cGVNYXAgPSB7IGNvdmVyRnJvbnQ6IDB4MDMsIGNvdmVyQmFjazogMHgwNCwgdW5rbm93bjogMHgwMCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbWFnZSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBpY3R1cmVUeXBlID0gcGljdHVyZVR5cGVNYXBbaW1hZ2Uua2luZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBpbWFnZS5kZXNjcmlwdGlvbiA/PyAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1wM1dyaXRlci53cml0ZUlkM1YyQXBpY0ZyYW1lKGltYWdlLm1pbWVUeXBlLCBwaWN0dXJlVHlwZSwgZGVzY3JpcHRpb24sIGltYWdlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndHJhY2tzVG90YWwnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rpc2NzVG90YWwnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGVkIHdpdGggdHJhY2tOdW1iZXIgYW5kIGRpc2NOdW1iZXIgcmVzcGVjdGl2ZWx5XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyYXcnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGVkIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBhc3NlcnROZXZlcihrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0YWdzLnJhdykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGFncy5yYXcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRhZ3MucmF3W2tleV07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwga2V5Lmxlbmd0aCAhPT0gNCB8fCB3cml0dGVuVGFncy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGJ5dGVzO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZWQgPSB0ZXh0RW5jb2Rlci5lbmNvZGUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQuYnl0ZUxlbmd0aCArIDIpO1xuICAgICAgICAgICAgICAgICAgICBieXRlc1swXSA9IElkM1YyVGV4dEVuY29kaW5nLlVURl84O1xuICAgICAgICAgICAgICAgICAgICBieXRlcy5zZXQoZW5jb2RlZCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIExhc3QgYnl0ZSBpcyB0aGUgbnVsbCB0ZXJtaW5hdG9yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBieXRlcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubXAzV3JpdGVyLndyaXRlQXNjaWkoa2V5KTtcbiAgICAgICAgICAgICAgICB0aGlzLm1wM1dyaXRlci53cml0ZVN5bmNoc2FmZVUzMihieXRlcy5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1wM1dyaXRlci53cml0ZVUxNigweDAwMDApO1xuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVyLndyaXRlKGJ5dGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbmRQb3MgPSB0aGlzLndyaXRlci5nZXRQb3MoKTtcbiAgICAgICAgY29uc3QgZnJhbWVzU2l6ZSA9IGVuZFBvcyAtIHN0YXJ0UG9zO1xuICAgICAgICB0aGlzLndyaXRlci5zZWVrKDYpO1xuICAgICAgICB0aGlzLm1wM1dyaXRlci53cml0ZVN5bmNoc2FmZVUzMihmcmFtZXNTaXplKTtcbiAgICAgICAgdGhpcy53cml0ZXIuc2VlayhlbmRQb3MpO1xuICAgIH1cbiAgICBhc3luYyBmaW5hbGl6ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnhpbmdGcmFtZURhdGEgfHwgdGhpcy54aW5nRnJhbWVQb3MgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWxlYXNlID0gYXdhaXQgdGhpcy5tdXRleC5hY3F1aXJlKCk7XG4gICAgICAgIGNvbnN0IGVuZFBvcyA9IHRoaXMud3JpdGVyLmdldFBvcygpO1xuICAgICAgICB0aGlzLndyaXRlci5zZWVrKHRoaXMueGluZ0ZyYW1lUG9zKTtcbiAgICAgICAgY29uc3QgdG9jID0gbmV3IFVpbnQ4QXJyYXkoMTAwKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBNYXRoLmZsb29yKHRoaXMuZnJhbWVQb3NpdGlvbnMubGVuZ3RoICogKGkgLyAxMDApKTtcbiAgICAgICAgICAgIGFzc2VydChpbmRleCAhPT0gLTEgJiYgaW5kZXggPCB0aGlzLmZyYW1lUG9zaXRpb25zLmxlbmd0aCk7XG4gICAgICAgICAgICBjb25zdCBieXRlT2Zmc2V0ID0gdGhpcy5mcmFtZVBvc2l0aW9uc1tpbmRleF07XG4gICAgICAgICAgICB0b2NbaV0gPSAyNTYgKiAoYnl0ZU9mZnNldCAvIGVuZFBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy54aW5nRnJhbWVEYXRhLmZyYW1lQ291bnQgPSB0aGlzLmZyYW1lQ291bnQ7XG4gICAgICAgIHRoaXMueGluZ0ZyYW1lRGF0YS5maWxlU2l6ZSA9IGVuZFBvcztcbiAgICAgICAgdGhpcy54aW5nRnJhbWVEYXRhLnRvYyA9IHRvYztcbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0Ll9vcHRpb25zLm9uWGluZ0ZyYW1lKSB7XG4gICAgICAgICAgICB0aGlzLndyaXRlci5zdGFydFRyYWNraW5nV3JpdGVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tcDNXcml0ZXIud3JpdGVYaW5nRnJhbWUodGhpcy54aW5nRnJhbWVEYXRhKTtcbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0Ll9vcHRpb25zLm9uWGluZ0ZyYW1lKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIHN0YXJ0IH0gPSB0aGlzLndyaXRlci5zdG9wVHJhY2tpbmdXcml0ZXMoKTtcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0Ll9vcHRpb25zLm9uWGluZ0ZyYW1lKGRhdGEsIHN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndyaXRlci5zZWVrKGVuZFBvcyk7XG4gICAgICAgIHJlbGVhc2UoKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/mp3/mp3-muxer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/mp3/mp3-reader.js":
/*!********************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/mp3/mp3-reader.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ID3_V1_GENRES: function() { return /* binding */ ID3_V1_GENRES; },\n/* harmony export */   ID3_V1_TAG_SIZE: function() { return /* binding */ ID3_V1_TAG_SIZE; },\n/* harmony export */   ID3_V2_HEADER_SIZE: function() { return /* binding */ ID3_V2_HEADER_SIZE; },\n/* harmony export */   Id3V2HeaderFlags: function() { return /* binding */ Id3V2HeaderFlags; },\n/* harmony export */   Id3V2Reader: function() { return /* binding */ Id3V2Reader; },\n/* harmony export */   Id3V2TextEncoding: function() { return /* binding */ Id3V2TextEncoding; },\n/* harmony export */   parseId3V1Tag: function() { return /* binding */ parseId3V1Tag; },\n/* harmony export */   parseId3V2Tag: function() { return /* binding */ parseId3V2Tag; },\n/* harmony export */   readId3V1String: function() { return /* binding */ readId3V1String; },\n/* harmony export */   readId3V2Header: function() { return /* binding */ readId3V2Header; },\n/* harmony export */   readNextFrameHeader: function() { return /* binding */ readNextFrameHeader; }\n/* harmony export */ });\n/* harmony import */ var _shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/mp3-misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/shared/mp3-misc.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _reader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reader.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/reader.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\nvar Id3V2HeaderFlags;\n(function (Id3V2HeaderFlags) {\n    Id3V2HeaderFlags[Id3V2HeaderFlags[\"Unsynchronisation\"] = 128] = \"Unsynchronisation\";\n    Id3V2HeaderFlags[Id3V2HeaderFlags[\"ExtendedHeader\"] = 64] = \"ExtendedHeader\";\n    Id3V2HeaderFlags[Id3V2HeaderFlags[\"ExperimentalIndicator\"] = 32] = \"ExperimentalIndicator\";\n    Id3V2HeaderFlags[Id3V2HeaderFlags[\"Footer\"] = 16] = \"Footer\";\n})(Id3V2HeaderFlags || (Id3V2HeaderFlags = {}));\nvar Id3V2TextEncoding;\n(function (Id3V2TextEncoding) {\n    Id3V2TextEncoding[Id3V2TextEncoding[\"ISO_8859_1\"] = 0] = \"ISO_8859_1\";\n    Id3V2TextEncoding[Id3V2TextEncoding[\"UTF_16_WITH_BOM\"] = 1] = \"UTF_16_WITH_BOM\";\n    Id3V2TextEncoding[Id3V2TextEncoding[\"UTF_16_BE_NO_BOM\"] = 2] = \"UTF_16_BE_NO_BOM\";\n    Id3V2TextEncoding[Id3V2TextEncoding[\"UTF_8\"] = 3] = \"UTF_8\";\n})(Id3V2TextEncoding || (Id3V2TextEncoding = {}));\nconst ID3_V1_TAG_SIZE = 128;\nconst ID3_V2_HEADER_SIZE = 10;\nconst ID3_V1_GENRES = [\n    'Blues', 'Classic rock', 'Country', 'Dance', 'Disco', 'Funk', 'Grunge', 'Hip-hop', 'Jazz',\n    'Metal', 'New age', 'Oldies', 'Other', 'Pop', 'Rhythm and blues', 'Rap', 'Reggae', 'Rock',\n    'Techno', 'Industrial', 'Alternative', 'Ska', 'Death metal', 'Pranks', 'Soundtrack',\n    'Euro-techno', 'Ambient', 'Trip-hop', 'Vocal', 'Jazz & funk', 'Fusion', 'Trance', 'Classical',\n    'Instrumental', 'Acid', 'House', 'Game', 'Sound clip', 'Gospel', 'Noise', 'Alternative rock',\n    'Bass', 'Soul', 'Punk', 'Space', 'Meditative', 'Instrumental pop', 'Instrumental rock',\n    'Ethnic', 'Gothic', 'Darkwave', 'Techno-industrial', 'Electronic', 'Pop-folk', 'Eurodance',\n    'Dream', 'Southern rock', 'Comedy', 'Cult', 'Gangsta', 'Top 40', 'Christian rap', 'Pop/funk',\n    'Jungle music', 'Native US', 'Cabaret', 'New wave', 'Psychedelic', 'Rave', 'Showtunes',\n    'Trailer', 'Lo-fi', 'Tribal', 'Acid punk', 'Acid jazz', 'Polka', 'Retro', 'Musical',\n    'Rock \\'n\\' roll', 'Hard rock', 'Folk', 'Folk rock', 'National folk', 'Swing', 'Fast fusion',\n    'Bebop', 'Latin', 'Revival', 'Celtic', 'Bluegrass', 'Avantgarde', 'Gothic rock',\n    'Progressive rock', 'Psychedelic rock', 'Symphonic rock', 'Slow rock', 'Big band', 'Chorus',\n    'Easy listening', 'Acoustic', 'Humour', 'Speech', 'Chanson', 'Opera', 'Chamber music',\n    'Sonata', 'Symphony', 'Booty bass', 'Primus', 'Porn groove', 'Satire', 'Slow jam', 'Club',\n    'Tango', 'Samba', 'Folklore', 'Ballad', 'Power ballad', 'Rhythmic Soul', 'Freestyle', 'Duet',\n    'Punk rock', 'Drum solo', 'A cappella', 'Euro-house', 'Dance hall', 'Goa music', 'Drum & bass',\n    'Club-house', 'Hardcore techno', 'Terror', 'Indie', 'Britpop', 'Negerpunk', 'Polsk punk',\n    'Beat', 'Christian gangsta rap', 'Heavy metal', 'Black metal', 'Crossover',\n    'Contemporary Christian', 'Christian rock', 'Merengue', 'Salsa', 'Thrash metal', 'Anime',\n    'Jpop', 'Synthpop', 'Christmas', 'Art rock', 'Baroque', 'Bhangra', 'Big beat', 'Breakbeat',\n    'Chillout', 'Downtempo', 'Dub', 'EBM', 'Eclectic', 'Electro', 'Electroclash', 'Emo',\n    'Experimental', 'Garage', 'Global', 'IDM', 'Illbient', 'Industro-Goth', 'Jam Band',\n    'Krautrock', 'Leftfield', 'Lounge', 'Math rock', 'New romantic', 'Nu-breakz', 'Post-punk',\n    'Post-rock', 'Psytrance', 'Shoegaze', 'Space rock', 'Trop rock', 'World music', 'Neoclassical',\n    'Audiobook', 'Audio theatre', 'Neue Deutsche Welle', 'Podcast', 'Indie rock', 'G-Funk',\n    'Dubstep', 'Garage rock', 'Psybient',\n];\nconst readNextFrameHeader = async (reader, startPos, until) => {\n    let currentPos = startPos;\n    while (until === null || currentPos < until) {\n        let slice = reader.requestSlice(currentPos, _shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.FRAME_HEADER_SIZE);\n        if (slice instanceof Promise)\n            slice = await slice;\n        if (!slice)\n            break;\n        const word = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU32Be)(slice);\n        const result = (0,_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.readFrameHeader)(word, reader.fileSize !== null ? reader.fileSize - currentPos : null);\n        if (result.header) {\n            return { header: result.header, startPos: currentPos };\n        }\n        currentPos += result.bytesAdvanced;\n    }\n    return null;\n};\nconst parseId3V1Tag = (slice, tags) => {\n    const startPos = slice.filePos;\n    tags.raw ??= {};\n    tags.raw['TAG'] ??= (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readBytes)(slice, ID3_V1_TAG_SIZE - 3); // Dump the whole tag into the raw metadata\n    slice.filePos = startPos;\n    const title = readId3V1String(slice, 30);\n    if (title)\n        tags.title ??= title;\n    const artist = readId3V1String(slice, 30);\n    if (artist)\n        tags.artist ??= artist;\n    const album = readId3V1String(slice, 30);\n    if (album)\n        tags.album ??= album;\n    const yearText = readId3V1String(slice, 4);\n    const year = Number.parseInt(yearText, 10);\n    if (Number.isInteger(year) && year > 0) {\n        tags.date ??= new Date(year, 0, 1);\n    }\n    const commentBytes = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readBytes)(slice, 30);\n    let comment;\n    // Check for the ID3v1.1 track number format:\n    // The 29th byte (index 28) is a null terminator, and the 30th byte is the track number.\n    if (commentBytes[28] === 0 && commentBytes[29] !== 0) {\n        const trackNum = commentBytes[29];\n        if (trackNum > 0) {\n            tags.trackNumber ??= trackNum;\n        }\n        slice.skip(-30);\n        comment = readId3V1String(slice, 28);\n        slice.skip(2);\n    }\n    else {\n        slice.skip(-30);\n        comment = readId3V1String(slice, 30);\n    }\n    if (comment)\n        tags.comment ??= comment;\n    const genreIndex = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU8)(slice);\n    if (genreIndex < ID3_V1_GENRES.length) {\n        tags.genre ??= ID3_V1_GENRES[genreIndex];\n    }\n};\nconst readId3V1String = (slice, length) => {\n    const bytes = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readBytes)(slice, length);\n    const endIndex = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.coalesceIndex)(bytes.indexOf(0), bytes.length);\n    const relevantBytes = bytes.subarray(0, endIndex);\n    // Decode as ISO-8859-1\n    let str = '';\n    for (let i = 0; i < relevantBytes.length; i++) {\n        str += String.fromCharCode(relevantBytes[i]);\n    }\n    return str.trimEnd(); // String also may be padded with spaces\n};\nconst readId3V2Header = (slice) => {\n    const startPos = slice.filePos;\n    const tag = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readAscii)(slice, 3);\n    const majorVersion = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU8)(slice);\n    const revision = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU8)(slice);\n    const flags = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU8)(slice);\n    const sizeRaw = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readU32Be)(slice);\n    if (tag !== 'ID3' || majorVersion === 0xff || revision === 0xff || (sizeRaw & 0x80808080) !== 0) {\n        slice.filePos = startPos;\n        return null;\n    }\n    const size = (0,_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.decodeSynchsafe)(sizeRaw);\n    return { majorVersion, revision, flags, size };\n};\nconst parseId3V2Tag = (slice, header, tags) => {\n    // https://id3.org/id3v2.3.0\n    if (![2, 3, 4].includes(header.majorVersion)) {\n        console.warn(`Unsupported ID3v2 major version: ${header.majorVersion}`);\n        return;\n    }\n    const bytes = (0,_reader_js__WEBPACK_IMPORTED_MODULE_1__.readBytes)(slice, header.size);\n    const reader = new Id3V2Reader(header, bytes);\n    if (header.flags & Id3V2HeaderFlags.Footer) {\n        reader.removeFooter();\n    }\n    if ((header.flags & Id3V2HeaderFlags.Unsynchronisation) && header.majorVersion === 3) {\n        reader.ununsynchronizeAll();\n    }\n    if (header.flags & Id3V2HeaderFlags.ExtendedHeader) {\n        const extendedHeaderSize = reader.readU32();\n        if (header.majorVersion === 3) {\n            reader.pos += extendedHeaderSize; // The extended header size excludes itself\n        }\n        else {\n            reader.pos += extendedHeaderSize - 4; // The extended header size includes itself\n        }\n    }\n    while (reader.pos <= reader.bytes.length - reader.frameHeaderSize()) {\n        const frame = reader.readId3V2Frame();\n        if (!frame) {\n            break;\n        }\n        const frameStartPos = reader.pos;\n        const frameEndPos = reader.pos + frame.size;\n        let frameEncrypted = false;\n        let frameCompressed = false;\n        let frameUnsynchronized = false;\n        if (header.majorVersion === 3) {\n            frameEncrypted = !!(frame.flags & (1 << 6));\n            frameCompressed = !!(frame.flags & (1 << 7));\n        }\n        else if (header.majorVersion === 4) {\n            frameEncrypted = !!(frame.flags & (1 << 2));\n            frameCompressed = !!(frame.flags & (1 << 3));\n            frameUnsynchronized = !!(frame.flags & (1 << 1))\n                || !!(header.flags & Id3V2HeaderFlags.Unsynchronisation);\n        }\n        if (frameEncrypted) {\n            console.warn(`Skipping encrypted ID3v2 frame ${frame.id}`);\n            reader.pos = frameEndPos;\n            continue;\n        }\n        if (frameCompressed) {\n            console.warn(`Skipping compressed ID3v2 frame ${frame.id}`); // Maybe someday? Idk\n            reader.pos = frameEndPos;\n            continue;\n        }\n        if (frameUnsynchronized) {\n            reader.ununsynchronizeRegion(reader.pos, frameEndPos);\n        }\n        tags.raw ??= {};\n        if (frame.id[0] === 'T') {\n            // It's a text frame, let's decode as text\n            tags.raw[frame.id] ??= reader.readId3V2EncodingAndText(frameEndPos);\n        }\n        else {\n            // For the others, let's just get the bytes\n            tags.raw[frame.id] ??= reader.readBytes(frame.size);\n        }\n        reader.pos = frameStartPos;\n        switch (frame.id) {\n            case 'TIT2':\n            case 'TT2':\n                {\n                    tags.title ??= reader.readId3V2EncodingAndText(frameEndPos);\n                }\n                ;\n                break;\n            case 'TIT3':\n            case 'TT3':\n                {\n                    tags.description ??= reader.readId3V2EncodingAndText(frameEndPos);\n                }\n                ;\n                break;\n            case 'TPE1':\n            case 'TP1':\n                {\n                    tags.artist ??= reader.readId3V2EncodingAndText(frameEndPos);\n                }\n                ;\n                break;\n            case 'TALB':\n            case 'TAL':\n                {\n                    tags.album ??= reader.readId3V2EncodingAndText(frameEndPos);\n                }\n                ;\n                break;\n            case 'TPE2':\n            case 'TP2':\n                {\n                    tags.albumArtist ??= reader.readId3V2EncodingAndText(frameEndPos);\n                }\n                ;\n                break;\n            case 'TRCK':\n            case 'TRK':\n                {\n                    const trackText = reader.readId3V2EncodingAndText(frameEndPos);\n                    const parts = trackText.split('/');\n                    const trackNum = Number.parseInt(parts[0], 10);\n                    const tracksTotal = parts[1] && Number.parseInt(parts[1], 10);\n                    if (Number.isInteger(trackNum) && trackNum > 0) {\n                        tags.trackNumber ??= trackNum;\n                    }\n                    if (tracksTotal && Number.isInteger(tracksTotal) && tracksTotal > 0) {\n                        tags.tracksTotal ??= tracksTotal;\n                    }\n                }\n                ;\n                break;\n            case 'TPOS':\n            case 'TPA':\n                {\n                    const discText = reader.readId3V2EncodingAndText(frameEndPos);\n                    const parts = discText.split('/');\n                    const discNum = Number.parseInt(parts[0], 10);\n                    const discsTotal = parts[1] && Number.parseInt(parts[1], 10);\n                    if (Number.isInteger(discNum) && discNum > 0) {\n                        tags.discNumber ??= discNum;\n                    }\n                    if (discsTotal && Number.isInteger(discsTotal) && discsTotal > 0) {\n                        tags.discsTotal ??= discsTotal;\n                    }\n                }\n                ;\n                break;\n            case 'TCON':\n            case 'TCO':\n                {\n                    const genreText = reader.readId3V2EncodingAndText(frameEndPos);\n                    let match = /^\\((\\d+)\\)/.exec(genreText);\n                    if (match) {\n                        const genreNumber = Number.parseInt(match[1]);\n                        if (ID3_V1_GENRES[genreNumber] !== undefined) {\n                            tags.genre ??= ID3_V1_GENRES[genreNumber];\n                            break;\n                        }\n                    }\n                    match = /^\\d+$/.exec(genreText);\n                    if (match) {\n                        const genreNumber = Number.parseInt(match[0]);\n                        if (ID3_V1_GENRES[genreNumber] !== undefined) {\n                            tags.genre ??= ID3_V1_GENRES[genreNumber];\n                            break;\n                        }\n                    }\n                    tags.genre ??= genreText;\n                }\n                ;\n                break;\n            case 'TDRC':\n            case 'TDAT':\n                {\n                    const dateText = reader.readId3V2EncodingAndText(frameEndPos);\n                    const date = new Date(dateText);\n                    if (!Number.isNaN(date.getTime())) {\n                        tags.date ??= date;\n                    }\n                }\n                ;\n                break;\n            case 'TYER':\n            case 'TYE':\n                {\n                    const yearText = reader.readId3V2EncodingAndText(frameEndPos);\n                    const year = Number.parseInt(yearText, 10);\n                    if (Number.isInteger(year)) {\n                        tags.date ??= new Date(year, 0, 1);\n                    }\n                }\n                ;\n                break;\n            case 'USLT':\n            case 'ULT':\n                {\n                    const encoding = reader.readU8();\n                    reader.pos += 3; // Skip language\n                    reader.readId3V2Text(encoding, frameEndPos); // Short content description\n                    tags.lyrics ??= reader.readId3V2Text(encoding, frameEndPos);\n                }\n                ;\n                break;\n            case 'COMM':\n            case 'COM':\n                {\n                    const encoding = reader.readU8();\n                    reader.pos += 3; // Skip language\n                    reader.readId3V2Text(encoding, frameEndPos); // Short content description\n                    tags.comment ??= reader.readId3V2Text(encoding, frameEndPos);\n                }\n                ;\n                break;\n            case 'APIC':\n            case 'PIC':\n                {\n                    const encoding = reader.readId3V2TextEncoding();\n                    let mimeType;\n                    if (header.majorVersion === 2) {\n                        const imageFormat = reader.readAscii(3);\n                        mimeType = imageFormat === 'PNG'\n                            ? 'image/png'\n                            : imageFormat === 'JPG'\n                                ? 'image/jpeg'\n                                : 'image/*';\n                    }\n                    else {\n                        mimeType = reader.readId3V2Text(encoding, frameEndPos);\n                    }\n                    const pictureType = reader.readU8();\n                    const description = reader.readId3V2Text(encoding, frameEndPos).trimEnd(); // Trim ending spaces\n                    const imageDataSize = frameEndPos - reader.pos;\n                    if (imageDataSize >= 0) {\n                        const imageData = reader.readBytes(imageDataSize);\n                        if (!tags.images)\n                            tags.images = [];\n                        tags.images.push({\n                            data: imageData,\n                            mimeType,\n                            kind: pictureType === 3\n                                ? 'coverFront'\n                                : pictureType === 4\n                                    ? 'coverBack'\n                                    : 'unknown',\n                            description,\n                        });\n                    }\n                }\n                ;\n                break;\n            default:\n                {\n                    reader.pos += frame.size;\n                }\n                ;\n                break;\n        }\n        reader.pos = frameEndPos;\n    }\n};\n// https://id3.org/id3v2.3.0\nclass Id3V2Reader {\n    constructor(header, bytes) {\n        this.header = header;\n        this.bytes = bytes;\n        this.pos = 0;\n        this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    }\n    frameHeaderSize() {\n        return this.header.majorVersion === 2 ? 6 : 10;\n    }\n    ununsynchronizeAll() {\n        const newBytes = [];\n        for (let i = 0; i < this.bytes.length; i++) {\n            const value1 = this.bytes[i];\n            newBytes.push(value1);\n            if (value1 === 0xff && i !== this.bytes.length - 1) {\n                const value2 = this.bytes[i];\n                if (value2 === 0x00) {\n                    i++;\n                }\n            }\n        }\n        this.bytes = new Uint8Array(newBytes);\n        this.view = new DataView(this.bytes.buffer);\n    }\n    ununsynchronizeRegion(start, end) {\n        const newBytes = [];\n        for (let i = start; i < end; i++) {\n            const value1 = this.bytes[i];\n            newBytes.push(value1);\n            if (value1 === 0xff && i !== end - 1) {\n                const value2 = this.bytes[i + 1];\n                if (value2 === 0x00) {\n                    i++;\n                }\n            }\n        }\n        const before = this.bytes.subarray(0, start);\n        const after = this.bytes.subarray(end);\n        this.bytes = new Uint8Array(before.length + newBytes.length + after.length);\n        this.bytes.set(before, 0);\n        this.bytes.set(newBytes, before.length);\n        this.bytes.set(after, before.length + newBytes.length);\n        this.view = new DataView(this.bytes.buffer);\n    }\n    removeFooter() {\n        this.bytes = this.bytes.subarray(0, this.bytes.length - ID3_V2_HEADER_SIZE);\n        this.view = new DataView(this.bytes.buffer);\n    }\n    readBytes(length) {\n        const slice = this.bytes.subarray(this.pos, this.pos + length);\n        this.pos += length;\n        return slice;\n    }\n    readU8() {\n        const value = this.view.getUint8(this.pos);\n        this.pos += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.view.getUint16(this.pos, false);\n        this.pos += 2;\n        return value;\n    }\n    readU24() {\n        const high = this.view.getUint16(this.pos, false);\n        const low = this.view.getUint8(this.pos + 1);\n        this.pos += 3;\n        return high * 0x100 + low;\n    }\n    readU32() {\n        const value = this.view.getUint32(this.pos, false);\n        this.pos += 4;\n        return value;\n    }\n    readAscii(length) {\n        let str = '';\n        for (let i = 0; i < length; i++) {\n            str += String.fromCharCode(this.view.getUint8(this.pos + i));\n        }\n        this.pos += length;\n        return str;\n    }\n    readId3V2Frame() {\n        if (this.header.majorVersion === 2) {\n            const id = this.readAscii(3);\n            if (id === '\\x00\\x00\\x00') {\n                return null;\n            }\n            const size = this.readU24();\n            return { id, size, flags: 0 };\n        }\n        else {\n            const id = this.readAscii(4);\n            if (id === '\\x00\\x00\\x00\\x00') {\n                // We've landed in the padding section\n                return null;\n            }\n            const sizeRaw = this.readU32();\n            let size = this.header.majorVersion === 4\n                ? (0,_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.decodeSynchsafe)(sizeRaw)\n                : sizeRaw;\n            const flags = this.readU16();\n            const headerEndPos = this.pos;\n            // Some files may have incorrectly synchsafed/unsynchsafed sizes. To validate which interpretation is valid,\n            // we validate a size by skipping ahead and seeing if we land at a valid frame header (or at the end of the\n            // tag.\n            const isSizeValid = (size) => {\n                const nextPos = this.pos + size;\n                if (nextPos > this.bytes.length) {\n                    return false;\n                }\n                if (nextPos <= this.bytes.length - this.frameHeaderSize()) {\n                    this.pos += size;\n                    const nextId = this.readAscii(4);\n                    if (nextId !== '\\x00\\x00\\x00\\x00' && !/[0-9A-Z]{4}/.test(nextId)) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            if (!isSizeValid(size)) {\n                // Flip the synchsafing, and try if this one makes more sense\n                const otherSize = this.header.majorVersion === 4\n                    ? sizeRaw\n                    : (0,_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.decodeSynchsafe)(sizeRaw);\n                if (isSizeValid(otherSize)) {\n                    size = otherSize;\n                }\n            }\n            this.pos = headerEndPos;\n            return { id, size, flags };\n        }\n    }\n    readId3V2TextEncoding() {\n        const number = this.readU8();\n        if (number > 3) {\n            throw new Error(`Unsupported text encoding: ${number}`);\n        }\n        return number;\n    }\n    readId3V2Text(encoding, until) {\n        const startPos = this.pos;\n        const data = this.readBytes(until);\n        switch (encoding) {\n            case Id3V2TextEncoding.ISO_8859_1: {\n                let str = '';\n                for (let i = 0; i < data.length; i++) {\n                    const value = data[i];\n                    if (value === 0) {\n                        this.pos = startPos + i + 1;\n                        break;\n                    }\n                    str += String.fromCharCode(value);\n                }\n                return str;\n            }\n            case Id3V2TextEncoding.UTF_16_WITH_BOM: {\n                if (data[0] === 0xff && data[1] === 0xfe) {\n                    const decoder = new TextDecoder('utf-16le');\n                    const endIndex = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.coalesceIndex)(data.findIndex((x, i) => x === 0 && data[i + 1] === 0 && i % 2 === 0), data.length);\n                    this.pos = startPos + Math.min(endIndex + 2, data.length);\n                    return decoder.decode(data.subarray(2, endIndex));\n                }\n                else if (data[0] === 0xfe && data[1] === 0xff) {\n                    const decoder = new TextDecoder('utf-16be');\n                    const endIndex = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.coalesceIndex)(data.findIndex((x, i) => x === 0 && data[i + 1] === 0 && i % 2 === 0), data.length);\n                    this.pos = startPos + Math.min(endIndex + 2, data.length);\n                    return decoder.decode(data.subarray(2, endIndex));\n                }\n                else {\n                    // Treat it like UTF-8, some files do this\n                    const endIndex = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.coalesceIndex)(data.findIndex(x => x === 0), data.length);\n                    this.pos = startPos + Math.min(endIndex + 1, data.length);\n                    return _misc_js__WEBPACK_IMPORTED_MODULE_2__.textDecoder.decode(data.subarray(0, endIndex));\n                }\n            }\n            case Id3V2TextEncoding.UTF_16_BE_NO_BOM: {\n                const decoder = new TextDecoder('utf-16be');\n                const endIndex = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.coalesceIndex)(data.findIndex((x, i) => x === 0 && data[i + 1] === 0 && i % 2 === 0), data.length);\n                this.pos = startPos + Math.min(endIndex + 2, data.length);\n                return decoder.decode(data.subarray(0, endIndex));\n            }\n            case Id3V2TextEncoding.UTF_8: {\n                const endIndex = (0,_misc_js__WEBPACK_IMPORTED_MODULE_2__.coalesceIndex)(data.findIndex(x => x === 0), data.length);\n                this.pos = startPos + Math.min(endIndex + 1, data.length);\n                return _misc_js__WEBPACK_IMPORTED_MODULE_2__.textDecoder.decode(data.subarray(0, endIndex));\n            }\n        }\n    }\n    readId3V2EncodingAndText(until) {\n        if (this.pos >= until) {\n            return '';\n        }\n        const encoding = this.readId3V2TextEncoding();\n        return this.readId3V2Text(encoding, until);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/mp3/mp3-reader.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/mp3/mp3-writer.js":
/*!********************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/mp3/mp3-writer.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mp3Writer: function() { return /* binding */ Mp3Writer; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/mp3-misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/shared/mp3-misc.js\");\n/* harmony import */ var _mp3_reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mp3-reader.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/mp3/mp3-reader.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\nclass Mp3Writer {\n    constructor(writer) {\n        this.writer = writer;\n        this.helper = new Uint8Array(8);\n        this.helperView = new DataView(this.helper.buffer);\n    }\n    writeU8(value) {\n        this.helper[0] = value;\n        this.writer.write(this.helper.subarray(0, 1));\n    }\n    writeU16(value) {\n        this.helperView.setUint16(0, value, false);\n        this.writer.write(this.helper.subarray(0, 2));\n    }\n    writeU32(value) {\n        this.helperView.setUint32(0, value, false);\n        this.writer.write(this.helper.subarray(0, 4));\n    }\n    writeAscii(text) {\n        for (let i = 0; i < text.length; i++) {\n            this.helper[i] = text.charCodeAt(i);\n        }\n        this.writer.write(this.helper.subarray(0, text.length));\n    }\n    writeSynchsafeU32(value) {\n        this.writeU32((0,_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.encodeSynchsafe)(value));\n    }\n    writeIsoString(text) {\n        const bytes = new Uint8Array(text.length + 1);\n        for (let i = 0; i < text.length; i++) {\n            bytes[i] = text.charCodeAt(i);\n        }\n        bytes[text.length] = 0x00;\n        this.writer.write(bytes);\n    }\n    writeUtf8String(text) {\n        const utf8Data = _misc_js__WEBPACK_IMPORTED_MODULE_1__.textEncoder.encode(text);\n        this.writer.write(utf8Data);\n        this.writeU8(0x00);\n    }\n    writeId3V2TextFrame(frameId, text) {\n        const useIso88591 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.isIso88591Compatible)(text);\n        const textDataLength = useIso88591 ? text.length : _misc_js__WEBPACK_IMPORTED_MODULE_1__.textEncoder.encode(text).byteLength;\n        const frameSize = 1 + textDataLength + 1;\n        this.writeAscii(frameId);\n        this.writeSynchsafeU32(frameSize);\n        this.writeU16(0x0000);\n        this.writeU8(useIso88591 ? _mp3_reader_js__WEBPACK_IMPORTED_MODULE_2__.Id3V2TextEncoding.ISO_8859_1 : _mp3_reader_js__WEBPACK_IMPORTED_MODULE_2__.Id3V2TextEncoding.UTF_8);\n        if (useIso88591) {\n            this.writeIsoString(text);\n        }\n        else {\n            this.writeUtf8String(text);\n        }\n    }\n    writeId3V2LyricsFrame(lyrics) {\n        const useIso88591 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.isIso88591Compatible)(lyrics);\n        const shortDescription = '';\n        const frameSize = 1 + 3 + shortDescription.length + 1 + lyrics.length + 1;\n        this.writeAscii('USLT');\n        this.writeSynchsafeU32(frameSize);\n        this.writeU16(0x0000);\n        this.writeU8(useIso88591 ? _mp3_reader_js__WEBPACK_IMPORTED_MODULE_2__.Id3V2TextEncoding.ISO_8859_1 : _mp3_reader_js__WEBPACK_IMPORTED_MODULE_2__.Id3V2TextEncoding.UTF_8);\n        this.writeAscii('und');\n        if (useIso88591) {\n            this.writeIsoString(shortDescription);\n            this.writeIsoString(lyrics);\n        }\n        else {\n            this.writeUtf8String(shortDescription);\n            this.writeUtf8String(lyrics);\n        }\n    }\n    writeId3V2CommentFrame(comment) {\n        const useIso88591 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.isIso88591Compatible)(comment);\n        const textDataLength = useIso88591 ? comment.length : _misc_js__WEBPACK_IMPORTED_MODULE_1__.textEncoder.encode(comment).byteLength;\n        const shortDescription = '';\n        const frameSize = 1 + 3 + shortDescription.length + 1 + textDataLength + 1;\n        this.writeAscii('COMM');\n        this.writeSynchsafeU32(frameSize);\n        this.writeU16(0x0000);\n        this.writeU8(useIso88591 ? _mp3_reader_js__WEBPACK_IMPORTED_MODULE_2__.Id3V2TextEncoding.ISO_8859_1 : _mp3_reader_js__WEBPACK_IMPORTED_MODULE_2__.Id3V2TextEncoding.UTF_8);\n        this.writeU8(0x75); // 'u'\n        this.writeU8(0x6E); // 'n'\n        this.writeU8(0x64); // 'd'\n        if (useIso88591) {\n            this.writeIsoString(shortDescription);\n            this.writeIsoString(comment);\n        }\n        else {\n            this.writeUtf8String(shortDescription);\n            this.writeUtf8String(comment);\n        }\n    }\n    writeId3V2ApicFrame(mimeType, pictureType, description, imageData) {\n        const useIso88591 = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.isIso88591Compatible)(mimeType) && (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.isIso88591Compatible)(description);\n        const descriptionDataLength = useIso88591 ? description.length : _misc_js__WEBPACK_IMPORTED_MODULE_1__.textEncoder.encode(description).byteLength;\n        const frameSize = 1 + mimeType.length + 1 + 1 + descriptionDataLength + 1 + imageData.byteLength;\n        this.writeAscii('APIC');\n        this.writeSynchsafeU32(frameSize);\n        this.writeU16(0x0000);\n        this.writeU8(useIso88591 ? _mp3_reader_js__WEBPACK_IMPORTED_MODULE_2__.Id3V2TextEncoding.ISO_8859_1 : _mp3_reader_js__WEBPACK_IMPORTED_MODULE_2__.Id3V2TextEncoding.UTF_8);\n        if (useIso88591) {\n            this.writeIsoString(mimeType);\n        }\n        else {\n            this.writeUtf8String(mimeType);\n        }\n        this.writeU8(pictureType);\n        if (useIso88591) {\n            this.writeIsoString(description);\n        }\n        else {\n            this.writeUtf8String(description);\n        }\n        this.writer.write(imageData);\n    }\n    writeXingFrame(data) {\n        const startPos = this.writer.getPos();\n        const firstByte = 0xff;\n        const secondByte = 0xe0 | (data.mpegVersionId << 3) | (data.layer << 1);\n        const bitrateGroup = data.mpegVersionId === 3 ? _shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.MPEG_V1_BITRATES : _shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.MPEG_V2_BITRATES;\n        const bitrates = bitrateGroup?.[data.layer];\n        if (!bitrates) {\n            throw new Error('Invalid MPEG version and layer combination.');\n        }\n        const sampleRate = _shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.SAMPLING_RATES[data.mpegVersionId]?.[data.frequencyIndex];\n        if (!sampleRate || sampleRate === -1) {\n            throw new Error('Invalid MPEG version and frequency index combination.');\n        }\n        const padding = 0;\n        const neededBytes = 155;\n        // Let's find the lowest bitrate for which the frame size is sufficiently large to fit all the data\n        const bitrateIndex = bitrates.findIndex((kbr) => {\n            return (0,_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.computeMp3FrameSize)(data.layer, 1000 * kbr, sampleRate, padding) >= neededBytes;\n        });\n        if (bitrateIndex === -1) {\n            throw new Error('No suitable bitrate found.');\n        }\n        const thirdByte = (bitrateIndex << 4) | (data.frequencyIndex << 2) | padding << 1;\n        const fourthByte = (data.channel << 6)\n            | (data.modeExtension << 4)\n            | (data.copyright << 3)\n            | (data.original << 2)\n            | data.emphasis;\n        this.helper[0] = firstByte;\n        this.helper[1] = secondByte;\n        this.helper[2] = thirdByte;\n        this.helper[3] = fourthByte;\n        this.writer.write(this.helper.subarray(0, 4));\n        const xingOffset = (0,_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.getXingOffset)(data.mpegVersionId, data.channel);\n        this.writer.seek(startPos + xingOffset);\n        this.writeU32(_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.XING);\n        let flags = 0;\n        if (data.frameCount !== null) {\n            flags |= 1;\n        }\n        if (data.fileSize !== null) {\n            flags |= 2;\n        }\n        if (data.toc !== null) {\n            flags |= 4;\n        }\n        this.writeU32(flags);\n        this.writeU32(data.frameCount ?? 0);\n        this.writeU32(data.fileSize ?? 0);\n        this.writer.write(data.toc ?? new Uint8Array(100));\n        const frameSize = (0,_shared_mp3_misc_js__WEBPACK_IMPORTED_MODULE_0__.computeMp3FrameSize)(data.layer, 1000 * bitrates[bitrateIndex], sampleRate, padding);\n        this.writer.seek(startPos + frameSize);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/mp3/mp3-writer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/muxer.js":
/*!***********************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/muxer.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Muxer: function() { return /* binding */ Muxer; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\nclass Muxer {\n    constructor(output) {\n        this.mutex = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.AsyncMutex();\n        /**\n         * This field is used to synchronize multiple MediaStreamTracks. They use the same time coordinate system across\n         * tracks, and to ensure correct audio-video sync, we must use the same offset for all of them. The reason an offset\n         * is needed at all is because the timestamps typically don't start at zero.\n         */\n        this.firstMediaStreamTimestamp = null;\n        this.trackTimestampInfo = new WeakMap();\n        this.output = output;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onTrackClose(track) { }\n    validateAndNormalizeTimestamp(track, timestampInSeconds, isKeyFrame) {\n        timestampInSeconds += track.source._timestampOffset;\n        let timestampInfo = this.trackTimestampInfo.get(track);\n        if (!timestampInfo) {\n            if (!isKeyFrame) {\n                throw new Error('First frame must be a key frame.');\n            }\n            timestampInfo = {\n                maxTimestamp: timestampInSeconds,\n                maxTimestampBeforeLastKeyFrame: timestampInSeconds,\n            };\n            this.trackTimestampInfo.set(track, timestampInfo);\n        }\n        if (timestampInSeconds < 0) {\n            throw new Error(`Timestamps must be non-negative (got ${timestampInSeconds}s).`);\n        }\n        if (isKeyFrame) {\n            timestampInfo.maxTimestampBeforeLastKeyFrame = timestampInfo.maxTimestamp;\n        }\n        if (timestampInSeconds < timestampInfo.maxTimestampBeforeLastKeyFrame) {\n            throw new Error(`Timestamps cannot be smaller than the highest timestamp of the previous run (a run begins with a`\n                + ` key frame and ends right before the next key frame). Got ${timestampInSeconds}s, but highest`\n                + ` timestamp is ${timestampInfo.maxTimestampBeforeLastKeyFrame}s.`);\n        }\n        timestampInfo.maxTimestamp = Math.max(timestampInfo.maxTimestamp, timestampInSeconds);\n        return timestampInSeconds;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvbXV4ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN1QztBQUNoQztBQUNQO0FBQ0EseUJBQXlCLGdEQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLG1CQUFtQjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsbUJBQW1CO0FBQ2xHLG1DQUFtQyw2Q0FBNkM7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVkaWFidW5ueS9kaXN0L21vZHVsZXMvc3JjL211eGVyLmpzP2NlNjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjUtcHJlc2VudCwgVmFuaWxhZ3kgYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwczovL21vemlsbGEub3JnL01QTC8yLjAvLlxuICovXG5pbXBvcnQgeyBBc3luY011dGV4IH0gZnJvbSAnLi9taXNjLmpzJztcbmV4cG9ydCBjbGFzcyBNdXhlciB7XG4gICAgY29uc3RydWN0b3Iob3V0cHV0KSB7XG4gICAgICAgIHRoaXMubXV0ZXggPSBuZXcgQXN5bmNNdXRleCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBmaWVsZCBpcyB1c2VkIHRvIHN5bmNocm9uaXplIG11bHRpcGxlIE1lZGlhU3RyZWFtVHJhY2tzLiBUaGV5IHVzZSB0aGUgc2FtZSB0aW1lIGNvb3JkaW5hdGUgc3lzdGVtIGFjcm9zc1xuICAgICAgICAgKiB0cmFja3MsIGFuZCB0byBlbnN1cmUgY29ycmVjdCBhdWRpby12aWRlbyBzeW5jLCB3ZSBtdXN0IHVzZSB0aGUgc2FtZSBvZmZzZXQgZm9yIGFsbCBvZiB0aGVtLiBUaGUgcmVhc29uIGFuIG9mZnNldFxuICAgICAgICAgKiBpcyBuZWVkZWQgYXQgYWxsIGlzIGJlY2F1c2UgdGhlIHRpbWVzdGFtcHMgdHlwaWNhbGx5IGRvbid0IHN0YXJ0IGF0IHplcm8uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZpcnN0TWVkaWFTdHJlYW1UaW1lc3RhbXAgPSBudWxsO1xuICAgICAgICB0aGlzLnRyYWNrVGltZXN0YW1wSW5mbyA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgIHRoaXMub3V0cHV0ID0gb3V0cHV0O1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgb25UcmFja0Nsb3NlKHRyYWNrKSB7IH1cbiAgICB2YWxpZGF0ZUFuZE5vcm1hbGl6ZVRpbWVzdGFtcCh0cmFjaywgdGltZXN0YW1wSW5TZWNvbmRzLCBpc0tleUZyYW1lKSB7XG4gICAgICAgIHRpbWVzdGFtcEluU2Vjb25kcyArPSB0cmFjay5zb3VyY2UuX3RpbWVzdGFtcE9mZnNldDtcbiAgICAgICAgbGV0IHRpbWVzdGFtcEluZm8gPSB0aGlzLnRyYWNrVGltZXN0YW1wSW5mby5nZXQodHJhY2spO1xuICAgICAgICBpZiAoIXRpbWVzdGFtcEluZm8pIHtcbiAgICAgICAgICAgIGlmICghaXNLZXlGcmFtZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmlyc3QgZnJhbWUgbXVzdCBiZSBhIGtleSBmcmFtZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbWVzdGFtcEluZm8gPSB7XG4gICAgICAgICAgICAgICAgbWF4VGltZXN0YW1wOiB0aW1lc3RhbXBJblNlY29uZHMsXG4gICAgICAgICAgICAgICAgbWF4VGltZXN0YW1wQmVmb3JlTGFzdEtleUZyYW1lOiB0aW1lc3RhbXBJblNlY29uZHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50cmFja1RpbWVzdGFtcEluZm8uc2V0KHRyYWNrLCB0aW1lc3RhbXBJbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXN0YW1wSW5TZWNvbmRzIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaW1lc3RhbXBzIG11c3QgYmUgbm9uLW5lZ2F0aXZlIChnb3QgJHt0aW1lc3RhbXBJblNlY29uZHN9cykuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzS2V5RnJhbWUpIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcEluZm8ubWF4VGltZXN0YW1wQmVmb3JlTGFzdEtleUZyYW1lID0gdGltZXN0YW1wSW5mby5tYXhUaW1lc3RhbXA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVzdGFtcEluU2Vjb25kcyA8IHRpbWVzdGFtcEluZm8ubWF4VGltZXN0YW1wQmVmb3JlTGFzdEtleUZyYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRpbWVzdGFtcHMgY2Fubm90IGJlIHNtYWxsZXIgdGhhbiB0aGUgaGlnaGVzdCB0aW1lc3RhbXAgb2YgdGhlIHByZXZpb3VzIHJ1biAoYSBydW4gYmVnaW5zIHdpdGggYWBcbiAgICAgICAgICAgICAgICArIGAga2V5IGZyYW1lIGFuZCBlbmRzIHJpZ2h0IGJlZm9yZSB0aGUgbmV4dCBrZXkgZnJhbWUpLiBHb3QgJHt0aW1lc3RhbXBJblNlY29uZHN9cywgYnV0IGhpZ2hlc3RgXG4gICAgICAgICAgICAgICAgKyBgIHRpbWVzdGFtcCBpcyAke3RpbWVzdGFtcEluZm8ubWF4VGltZXN0YW1wQmVmb3JlTGFzdEtleUZyYW1lfXMuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGltZXN0YW1wSW5mby5tYXhUaW1lc3RhbXAgPSBNYXRoLm1heCh0aW1lc3RhbXBJbmZvLm1heFRpbWVzdGFtcCwgdGltZXN0YW1wSW5TZWNvbmRzKTtcbiAgICAgICAgcmV0dXJuIHRpbWVzdGFtcEluU2Vjb25kcztcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/muxer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/ogg/ogg-misc.js":
/*!******************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/ogg/ogg-misc.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OGGS: function() { return /* binding */ OGGS; },\n/* harmony export */   buildOggMimeType: function() { return /* binding */ buildOggMimeType; },\n/* harmony export */   computeOggPageCrc: function() { return /* binding */ computeOggPageCrc; },\n/* harmony export */   extractSampleMetadata: function() { return /* binding */ extractSampleMetadata; }\n/* harmony export */ });\n/* harmony import */ var _codec_data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../codec-data.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec-data.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\nconst OGGS = 0x5367674f; // 'OggS'\nconst OGG_CRC_POLYNOMIAL = 0x04c11db7;\nconst OGG_CRC_TABLE = new Uint32Array(256);\nfor (let n = 0; n < 256; n++) {\n    let crc = n << 24;\n    for (let k = 0; k < 8; k++) {\n        crc = (crc & 0x80000000)\n            ? ((crc << 1) ^ OGG_CRC_POLYNOMIAL)\n            : (crc << 1);\n    }\n    OGG_CRC_TABLE[n] = (crc >>> 0) & 0xffffffff;\n}\nconst computeOggPageCrc = (bytes) => {\n    const view = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toDataView)(bytes);\n    const originalChecksum = view.getUint32(22, true);\n    view.setUint32(22, 0, true); // Zero out checksum field\n    let crc = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const byte = bytes[i];\n        crc = ((crc << 8) ^ OGG_CRC_TABLE[(crc >>> 24) ^ byte]) >>> 0;\n    }\n    view.setUint32(22, originalChecksum, true); // Restore checksum field\n    return crc;\n};\nconst extractSampleMetadata = (data, codecInfo, vorbisLastBlocksize) => {\n    let durationInSamples = 0;\n    let currentBlocksize = null;\n    if (data.length > 0) {\n        // To know sample duration, we'll need to peak inside the packet\n        if (codecInfo.codec === 'vorbis') {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(codecInfo.vorbisInfo);\n            const vorbisModeCount = codecInfo.vorbisInfo.modeBlockflags.length;\n            const bitCount = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.ilog)(vorbisModeCount - 1);\n            const modeMask = ((1 << bitCount) - 1) << 1;\n            const modeNumber = (data[0] & modeMask) >> 1;\n            if (modeNumber >= codecInfo.vorbisInfo.modeBlockflags.length) {\n                throw new Error('Invalid mode number.');\n            }\n            // In Vorbis, packet duration also depends on the blocksize of the previous packet\n            let prevBlocksize = vorbisLastBlocksize;\n            const blockflag = codecInfo.vorbisInfo.modeBlockflags[modeNumber];\n            currentBlocksize = codecInfo.vorbisInfo.blocksizes[blockflag];\n            if (blockflag === 1) {\n                const prevMask = (modeMask | 0x1) + 1;\n                const flag = data[0] & prevMask ? 1 : 0;\n                prevBlocksize = codecInfo.vorbisInfo.blocksizes[flag];\n            }\n            durationInSamples = prevBlocksize !== null\n                ? (prevBlocksize + currentBlocksize) >> 2\n                : 0; // The first sample outputs no audio data and therefore has a duration of 0\n        }\n        else if (codecInfo.codec === 'opus') {\n            const toc = (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_1__.parseOpusTocByte)(data);\n            durationInSamples = toc.durationInSamples;\n        }\n    }\n    return {\n        durationInSamples,\n        vorbisBlockSize: currentBlocksize,\n    };\n};\nconst buildOggMimeType = (info) => {\n    let string = 'audio/ogg';\n    if (info.codecStrings) {\n        const uniqueCodecMimeTypes = [...new Set(info.codecStrings)];\n        string += `; codecs=\"${uniqueCodecMimeTypes.join(', ')}\"`;\n    }\n    return string;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvb2dnL29nZy1taXNjLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29EO0FBQ0U7QUFDL0MseUJBQXlCO0FBQ2hDO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsaUJBQWlCLG9EQUFVO0FBQzNCO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZ0RBQU07QUFDbEI7QUFDQSw2QkFBNkIsOENBQUk7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHdCQUF3QixnRUFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFVBQVUsZ0NBQWdDO0FBQy9EO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVkaWFidW5ueS9kaXN0L21vZHVsZXMvc3JjL29nZy9vZ2ctbWlzYy5qcz82ODliIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDI1LXByZXNlbnQsIFZhbmlsYWd5IGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cbiAqL1xuaW1wb3J0IHsgcGFyc2VPcHVzVG9jQnl0ZSB9IGZyb20gJy4uL2NvZGVjLWRhdGEuanMnO1xuaW1wb3J0IHsgYXNzZXJ0LCBpbG9nLCB0b0RhdGFWaWV3IH0gZnJvbSAnLi4vbWlzYy5qcyc7XG5leHBvcnQgY29uc3QgT0dHUyA9IDB4NTM2NzY3NGY7IC8vICdPZ2dTJ1xuY29uc3QgT0dHX0NSQ19QT0xZTk9NSUFMID0gMHgwNGMxMWRiNztcbmNvbnN0IE9HR19DUkNfVEFCTEUgPSBuZXcgVWludDMyQXJyYXkoMjU2KTtcbmZvciAobGV0IG4gPSAwOyBuIDwgMjU2OyBuKyspIHtcbiAgICBsZXQgY3JjID0gbiA8PCAyNDtcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgICBjcmMgPSAoY3JjICYgMHg4MDAwMDAwMClcbiAgICAgICAgICAgID8gKChjcmMgPDwgMSkgXiBPR0dfQ1JDX1BPTFlOT01JQUwpXG4gICAgICAgICAgICA6IChjcmMgPDwgMSk7XG4gICAgfVxuICAgIE9HR19DUkNfVEFCTEVbbl0gPSAoY3JjID4+PiAwKSAmIDB4ZmZmZmZmZmY7XG59XG5leHBvcnQgY29uc3QgY29tcHV0ZU9nZ1BhZ2VDcmMgPSAoYnl0ZXMpID0+IHtcbiAgICBjb25zdCB2aWV3ID0gdG9EYXRhVmlldyhieXRlcyk7XG4gICAgY29uc3Qgb3JpZ2luYWxDaGVja3N1bSA9IHZpZXcuZ2V0VWludDMyKDIyLCB0cnVlKTtcbiAgICB2aWV3LnNldFVpbnQzMigyMiwgMCwgdHJ1ZSk7IC8vIFplcm8gb3V0IGNoZWNrc3VtIGZpZWxkXG4gICAgbGV0IGNyYyA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBieXRlID0gYnl0ZXNbaV07XG4gICAgICAgIGNyYyA9ICgoY3JjIDw8IDgpIF4gT0dHX0NSQ19UQUJMRVsoY3JjID4+PiAyNCkgXiBieXRlXSkgPj4+IDA7XG4gICAgfVxuICAgIHZpZXcuc2V0VWludDMyKDIyLCBvcmlnaW5hbENoZWNrc3VtLCB0cnVlKTsgLy8gUmVzdG9yZSBjaGVja3N1bSBmaWVsZFxuICAgIHJldHVybiBjcmM7XG59O1xuZXhwb3J0IGNvbnN0IGV4dHJhY3RTYW1wbGVNZXRhZGF0YSA9IChkYXRhLCBjb2RlY0luZm8sIHZvcmJpc0xhc3RCbG9ja3NpemUpID0+IHtcbiAgICBsZXQgZHVyYXRpb25JblNhbXBsZXMgPSAwO1xuICAgIGxldCBjdXJyZW50QmxvY2tzaXplID0gbnVsbDtcbiAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFRvIGtub3cgc2FtcGxlIGR1cmF0aW9uLCB3ZSdsbCBuZWVkIHRvIHBlYWsgaW5zaWRlIHRoZSBwYWNrZXRcbiAgICAgICAgaWYgKGNvZGVjSW5mby5jb2RlYyA9PT0gJ3ZvcmJpcycpIHtcbiAgICAgICAgICAgIGFzc2VydChjb2RlY0luZm8udm9yYmlzSW5mbyk7XG4gICAgICAgICAgICBjb25zdCB2b3JiaXNNb2RlQ291bnQgPSBjb2RlY0luZm8udm9yYmlzSW5mby5tb2RlQmxvY2tmbGFncy5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBiaXRDb3VudCA9IGlsb2codm9yYmlzTW9kZUNvdW50IC0gMSk7XG4gICAgICAgICAgICBjb25zdCBtb2RlTWFzayA9ICgoMSA8PCBiaXRDb3VudCkgLSAxKSA8PCAxO1xuICAgICAgICAgICAgY29uc3QgbW9kZU51bWJlciA9IChkYXRhWzBdICYgbW9kZU1hc2spID4+IDE7XG4gICAgICAgICAgICBpZiAobW9kZU51bWJlciA+PSBjb2RlY0luZm8udm9yYmlzSW5mby5tb2RlQmxvY2tmbGFncy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbW9kZSBudW1iZXIuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJbiBWb3JiaXMsIHBhY2tldCBkdXJhdGlvbiBhbHNvIGRlcGVuZHMgb24gdGhlIGJsb2Nrc2l6ZSBvZiB0aGUgcHJldmlvdXMgcGFja2V0XG4gICAgICAgICAgICBsZXQgcHJldkJsb2Nrc2l6ZSA9IHZvcmJpc0xhc3RCbG9ja3NpemU7XG4gICAgICAgICAgICBjb25zdCBibG9ja2ZsYWcgPSBjb2RlY0luZm8udm9yYmlzSW5mby5tb2RlQmxvY2tmbGFnc1ttb2RlTnVtYmVyXTtcbiAgICAgICAgICAgIGN1cnJlbnRCbG9ja3NpemUgPSBjb2RlY0luZm8udm9yYmlzSW5mby5ibG9ja3NpemVzW2Jsb2NrZmxhZ107XG4gICAgICAgICAgICBpZiAoYmxvY2tmbGFnID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldk1hc2sgPSAobW9kZU1hc2sgfCAweDEpICsgMTtcbiAgICAgICAgICAgICAgICBjb25zdCBmbGFnID0gZGF0YVswXSAmIHByZXZNYXNrID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgcHJldkJsb2Nrc2l6ZSA9IGNvZGVjSW5mby52b3JiaXNJbmZvLmJsb2Nrc2l6ZXNbZmxhZ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkdXJhdGlvbkluU2FtcGxlcyA9IHByZXZCbG9ja3NpemUgIT09IG51bGxcbiAgICAgICAgICAgICAgICA/IChwcmV2QmxvY2tzaXplICsgY3VycmVudEJsb2Nrc2l6ZSkgPj4gMlxuICAgICAgICAgICAgICAgIDogMDsgLy8gVGhlIGZpcnN0IHNhbXBsZSBvdXRwdXRzIG5vIGF1ZGlvIGRhdGEgYW5kIHRoZXJlZm9yZSBoYXMgYSBkdXJhdGlvbiBvZiAwXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29kZWNJbmZvLmNvZGVjID09PSAnb3B1cycpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvYyA9IHBhcnNlT3B1c1RvY0J5dGUoZGF0YSk7XG4gICAgICAgICAgICBkdXJhdGlvbkluU2FtcGxlcyA9IHRvYy5kdXJhdGlvbkluU2FtcGxlcztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBkdXJhdGlvbkluU2FtcGxlcyxcbiAgICAgICAgdm9yYmlzQmxvY2tTaXplOiBjdXJyZW50QmxvY2tzaXplLFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IGJ1aWxkT2dnTWltZVR5cGUgPSAoaW5mbykgPT4ge1xuICAgIGxldCBzdHJpbmcgPSAnYXVkaW8vb2dnJztcbiAgICBpZiAoaW5mby5jb2RlY1N0cmluZ3MpIHtcbiAgICAgICAgY29uc3QgdW5pcXVlQ29kZWNNaW1lVHlwZXMgPSBbLi4ubmV3IFNldChpbmZvLmNvZGVjU3RyaW5ncyldO1xuICAgICAgICBzdHJpbmcgKz0gYDsgY29kZWNzPVwiJHt1bmlxdWVDb2RlY01pbWVUeXBlcy5qb2luKCcsICcpfVwiYDtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/ogg/ogg-misc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/ogg/ogg-muxer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/ogg/ogg-muxer.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OggMuxer: function() { return /* binding */ OggMuxer; }\n/* harmony export */ });\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _codec_data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../codec-data.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec-data.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _muxer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/muxer.js\");\n/* harmony import */ var _ogg_misc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ogg-misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/ogg/ogg-misc.js\");\n/* harmony import */ var _ogg_reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ogg-reader.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/ogg/ogg-reader.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n\nconst PAGE_SIZE_TARGET = 8192;\nclass OggMuxer extends _muxer_js__WEBPACK_IMPORTED_MODULE_0__.Muxer {\n    constructor(output, format) {\n        super(output);\n        this.trackDatas = [];\n        this.bosPagesWritten = false;\n        this.allTracksKnown = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.promiseWithResolvers)();\n        this.pageBytes = new Uint8Array(_ogg_reader_js__WEBPACK_IMPORTED_MODULE_2__.MAX_PAGE_SIZE);\n        this.pageView = new DataView(this.pageBytes.buffer);\n        this.format = format;\n        this.writer = output._writer;\n        this.writer.ensureMonotonicity = true; // Ogg is always monotonically written!\n    }\n    async start() {\n        // Nothin'\n    }\n    async getMimeType() {\n        await this.allTracksKnown.promise;\n        return (0,_ogg_misc_js__WEBPACK_IMPORTED_MODULE_3__.buildOggMimeType)({\n            codecStrings: this.trackDatas.map(x => x.codecInfo.codec),\n        });\n    }\n    addEncodedVideoPacket() {\n        throw new Error('Video tracks are not supported.');\n    }\n    getTrackData(track, meta) {\n        const existingTrackData = this.trackDatas.find(td => td.track === track);\n        if (existingTrackData) {\n            return existingTrackData;\n        }\n        // Give the track a unique random serial number\n        let serialNumber;\n        do {\n            serialNumber = Math.floor(2 ** 32 * Math.random());\n        } while (this.trackDatas.some(td => td.serialNumber === serialNumber));\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(track.source._codec === 'vorbis' || track.source._codec === 'opus');\n        (0,_codec_js__WEBPACK_IMPORTED_MODULE_4__.validateAudioChunkMetadata)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta.decoderConfig);\n        const newTrackData = {\n            track,\n            serialNumber,\n            internalSampleRate: track.source._codec === 'opus'\n                ? _codec_js__WEBPACK_IMPORTED_MODULE_4__.OPUS_SAMPLE_RATE\n                : meta.decoderConfig.sampleRate,\n            codecInfo: {\n                codec: track.source._codec,\n                vorbisInfo: null,\n                opusInfo: null,\n            },\n            vorbisLastBlocksize: null,\n            packetQueue: [],\n            currentTimestampInSamples: 0,\n            pagesWritten: 0,\n            currentGranulePosition: 0,\n            currentLacingValues: [],\n            currentPageData: [],\n            currentPageSize: 27,\n            currentPageStartsWithFreshPacket: true,\n        };\n        this.queueHeaderPackets(newTrackData, meta);\n        this.trackDatas.push(newTrackData);\n        if (this.allTracksAreKnown()) {\n            this.allTracksKnown.resolve();\n        }\n        return newTrackData;\n    }\n    queueHeaderPackets(trackData, meta) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta.decoderConfig);\n        if (trackData.track.source._codec === 'vorbis') {\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(meta.decoderConfig.description);\n            const bytes = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(meta.decoderConfig.description);\n            if (bytes[0] !== 2) {\n                throw new TypeError('First byte of Vorbis decoder description must be 2.');\n            }\n            let pos = 1;\n            const readPacketLength = () => {\n                let length = 0;\n                while (true) {\n                    const value = bytes[pos++];\n                    if (value === undefined) {\n                        throw new TypeError('Vorbis decoder description is too short.');\n                    }\n                    length += value;\n                    if (value < 255) {\n                        return length;\n                    }\n                }\n            };\n            const identificationHeaderLength = readPacketLength();\n            const commentHeaderLength = readPacketLength();\n            const setupHeaderLength = bytes.length - pos; // Setup header fills the remaining bytes\n            if (setupHeaderLength <= 0) {\n                throw new TypeError('Vorbis decoder description is too short.');\n            }\n            const identificationHeader = bytes.subarray(pos, pos += identificationHeaderLength);\n            pos += commentHeaderLength; // Skip the comment header, we'll build our own\n            const setupHeader = bytes.subarray(pos);\n            const commentHeaderHeader = new Uint8Array(7);\n            commentHeaderHeader[0] = 3; // Packet type\n            commentHeaderHeader[1] = 0x76; // 'v'\n            commentHeaderHeader[2] = 0x6f; // 'o'\n            commentHeaderHeader[3] = 0x72; // 'r'\n            commentHeaderHeader[4] = 0x62; // 'b'\n            commentHeaderHeader[5] = 0x69; // 'i'\n            commentHeaderHeader[6] = 0x73; // 's'\n            const commentHeader = this.createVorbisComments(commentHeaderHeader);\n            trackData.packetQueue.push({\n                data: identificationHeader,\n                endGranulePosition: 0,\n                timestamp: 0,\n                forcePageFlush: true,\n            }, {\n                data: commentHeader,\n                endGranulePosition: 0,\n                timestamp: 0,\n                forcePageFlush: false,\n            }, {\n                data: setupHeader,\n                endGranulePosition: 0,\n                timestamp: 0,\n                forcePageFlush: true, // The last header packet must flush the page\n            });\n            const view = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.toDataView)(identificationHeader);\n            const blockSizeByte = view.getUint8(28);\n            trackData.codecInfo.vorbisInfo = {\n                blocksizes: [\n                    1 << (blockSizeByte & 0xf),\n                    1 << (blockSizeByte >> 4),\n                ],\n                modeBlockflags: (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_5__.parseModesFromVorbisSetupPacket)(setupHeader).modeBlockflags,\n            };\n        }\n        else if (trackData.track.source._codec === 'opus') {\n            if (!meta.decoderConfig.description) {\n                throw new TypeError('For Ogg, Opus decoder description is required.');\n            }\n            const identificationHeader = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(meta.decoderConfig.description);\n            const commentHeaderHeader = new Uint8Array(8);\n            const commentHeaderHeaderView = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.toDataView)(commentHeaderHeader);\n            commentHeaderHeaderView.setUint32(0, 0x4f707573, false); // 'Opus'\n            commentHeaderHeaderView.setUint32(4, 0x54616773, false); // 'Tags'\n            const commentHeader = this.createVorbisComments(commentHeaderHeader);\n            trackData.packetQueue.push({\n                data: identificationHeader,\n                endGranulePosition: 0,\n                timestamp: 0,\n                forcePageFlush: true,\n            }, {\n                data: commentHeader,\n                endGranulePosition: 0,\n                timestamp: 0,\n                forcePageFlush: true, // The last header packet must flush the page\n            });\n            trackData.codecInfo.opusInfo = {\n                preSkip: (0,_codec_data_js__WEBPACK_IMPORTED_MODULE_5__.parseOpusIdentificationHeader)(identificationHeader).preSkip,\n            };\n        }\n    }\n    createVorbisComments(headerBytes) {\n        // https://datatracker.ietf.org/doc/html/rfc7845#section-5.2\n        const tags = this.output._metadataTags;\n        const commentHeaderParts = [\n            headerBytes,\n        ];\n        let vendorString = '';\n        if (typeof tags.raw?.['vendor'] === 'string') {\n            vendorString = tags.raw?.['vendor'];\n        }\n        const encodedVendorString = _misc_js__WEBPACK_IMPORTED_MODULE_1__.textEncoder.encode(vendorString);\n        let currentBuffer = new Uint8Array(4 + encodedVendorString.length);\n        let currentView = new DataView(currentBuffer.buffer);\n        currentView.setUint32(0, encodedVendorString.length, true);\n        currentBuffer.set(encodedVendorString, 4);\n        commentHeaderParts.push(currentBuffer);\n        const writtenTags = new Set();\n        const addCommentTag = (key, value) => {\n            const joined = `${key}=${value}`;\n            const encoded = _misc_js__WEBPACK_IMPORTED_MODULE_1__.textEncoder.encode(joined);\n            currentBuffer = new Uint8Array(4 + encoded.length);\n            currentView = new DataView(currentBuffer.buffer);\n            currentView.setUint32(0, encoded.length, true);\n            currentBuffer.set(encoded, 4);\n            commentHeaderParts.push(currentBuffer);\n            writtenTags.add(key);\n        };\n        for (const { key, value } of (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.keyValueIterator)(tags)) {\n            switch (key) {\n                case 'title':\n                    {\n                        addCommentTag('TITLE', value);\n                    }\n                    ;\n                    break;\n                case 'description':\n                    {\n                        addCommentTag('DESCRIPTION', value);\n                    }\n                    ;\n                    break;\n                case 'artist':\n                    {\n                        addCommentTag('ARTIST', value);\n                    }\n                    ;\n                    break;\n                case 'album':\n                    {\n                        addCommentTag('ALBUM', value);\n                    }\n                    ;\n                    break;\n                case 'albumArtist':\n                    {\n                        addCommentTag('ALBUMARTIST', value);\n                    }\n                    ;\n                    break;\n                case 'genre':\n                    {\n                        addCommentTag('GENRE', value);\n                    }\n                    ;\n                    break;\n                case 'date':\n                    {\n                        addCommentTag('DATE', value.toISOString().slice(0, 10));\n                    }\n                    ;\n                    break;\n                case 'comment':\n                    {\n                        addCommentTag('COMMENT', value);\n                    }\n                    ;\n                    break;\n                case 'lyrics':\n                    {\n                        addCommentTag('LYRICS', value);\n                    }\n                    ;\n                    break;\n                case 'trackNumber':\n                    {\n                        addCommentTag('TRACKNUMBER', value.toString());\n                    }\n                    ;\n                    break;\n                case 'tracksTotal':\n                    {\n                        addCommentTag('TRACKTOTAL', value.toString());\n                    }\n                    ;\n                    break;\n                case 'discNumber':\n                    {\n                        addCommentTag('DISCNUMBER', value.toString());\n                    }\n                    ;\n                    break;\n                case 'discsTotal':\n                    {\n                        addCommentTag('DISCTOTAL', value.toString());\n                    }\n                    ;\n                    break;\n                case 'images':\n                    {\n                        for (const image of value) {\n                            // https://datatracker.ietf.org/doc/rfc9639/ Section 8.8\n                            const pictureType = image.kind === 'coverFront' ? 3 : image.kind === 'coverBack' ? 4 : 0;\n                            const encodedMediaType = new Uint8Array(image.mimeType.length);\n                            for (let i = 0; i < image.mimeType.length; i++) {\n                                encodedMediaType[i] = image.mimeType.charCodeAt(i);\n                            }\n                            const encodedDescription = _misc_js__WEBPACK_IMPORTED_MODULE_1__.textEncoder.encode(image.description ?? '');\n                            const buffer = new Uint8Array(4 // Picture type\n                                + 4 // MIME type length\n                                + encodedMediaType.length // MIME type\n                                + 4 // Description length\n                                + encodedDescription.length // Description\n                                + 16 // Width, height, color depth, number of colors\n                                + 4 // Picture data length\n                                + image.data.length);\n                            const view = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.toDataView)(buffer);\n                            view.setUint32(0, pictureType, false);\n                            view.setUint32(4, encodedMediaType.length, false);\n                            buffer.set(encodedMediaType, 8);\n                            view.setUint32(8 + encodedMediaType.length, encodedDescription.length, false);\n                            buffer.set(encodedDescription, 12 + encodedMediaType.length);\n                            // Skip a bunch of fields (width, height, color depth, number of colors)\n                            view.setUint32(28 + encodedMediaType.length + encodedDescription.length, image.data.length, false);\n                            buffer.set(image.data, 32 + encodedMediaType.length + encodedDescription.length);\n                            const encoded = (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBase64)(buffer);\n                            addCommentTag('METADATA_BLOCK_PICTURE', encoded);\n                        }\n                    }\n                    ;\n                    break;\n                case 'raw':\n                    {\n                        // Handled later\n                    }\n                    ;\n                    break;\n                default: (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assertNever)(key);\n            }\n        }\n        if (tags.raw) {\n            for (const key in tags.raw) {\n                const value = tags.raw[key];\n                if (key === 'vendor' || value == null || writtenTags.has(key)) {\n                    continue;\n                }\n                if (typeof value === 'string') {\n                    addCommentTag(key, value);\n                }\n            }\n        }\n        const listLengthBuffer = new Uint8Array(4);\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.toDataView)(listLengthBuffer).setUint32(0, writtenTags.size, true);\n        commentHeaderParts.splice(2, 0, listLengthBuffer); // Insert after the header and vendor section\n        // Merge all comment header parts into a single buffer\n        const commentHeaderLength = commentHeaderParts.reduce((a, b) => a + b.length, 0);\n        const commentHeader = new Uint8Array(commentHeaderLength);\n        let pos = 0;\n        for (const part of commentHeaderParts) {\n            commentHeader.set(part, pos);\n            pos += part.length;\n        }\n        return commentHeader;\n    }\n    async addEncodedAudioPacket(track, packet, meta) {\n        const release = await this.mutex.acquire();\n        try {\n            const trackData = this.getTrackData(track, meta);\n            this.validateAndNormalizeTimestamp(trackData.track, packet.timestamp, packet.type === 'key');\n            const currentTimestampInSamples = trackData.currentTimestampInSamples;\n            const { durationInSamples, vorbisBlockSize } = (0,_ogg_misc_js__WEBPACK_IMPORTED_MODULE_3__.extractSampleMetadata)(packet.data, trackData.codecInfo, trackData.vorbisLastBlocksize);\n            trackData.currentTimestampInSamples += durationInSamples;\n            trackData.vorbisLastBlocksize = vorbisBlockSize;\n            trackData.packetQueue.push({\n                data: packet.data,\n                endGranulePosition: trackData.currentTimestampInSamples,\n                timestamp: currentTimestampInSamples / trackData.internalSampleRate,\n                forcePageFlush: false,\n            });\n            await this.interleavePages();\n        }\n        finally {\n            release();\n        }\n    }\n    addSubtitleCue() {\n        throw new Error('Subtitle tracks are not supported.');\n    }\n    allTracksAreKnown() {\n        for (const track of this.output._tracks) {\n            if (!track.source._closed && !this.trackDatas.some(x => x.track === track)) {\n                return false; // We haven't seen a sample from this open track yet\n            }\n        }\n        return true;\n    }\n    async interleavePages(isFinalCall = false) {\n        if (!this.bosPagesWritten) {\n            if (!this.allTracksAreKnown()) {\n                return; // We can't interleave yet as we don't yet know how many tracks we'll truly have\n            }\n            // Write the header page for all bitstreams\n            for (const trackData of this.trackDatas) {\n                while (trackData.packetQueue.length > 0) {\n                    const packet = trackData.packetQueue.shift();\n                    this.writePacket(trackData, packet, false);\n                    if (packet.forcePageFlush) {\n                        // We say the header page ends once the first packet is encountered that forces a page flush\n                        break;\n                    }\n                }\n            }\n            this.bosPagesWritten = true;\n        }\n        outer: while (true) {\n            let trackWithMinTimestamp = null;\n            let minTimestamp = Infinity;\n            for (const trackData of this.trackDatas) {\n                if (!isFinalCall\n                    && trackData.packetQueue.length <= 1 // Limit is 1, not 0, for correct EOS flag logic\n                    && !trackData.track.source._closed) {\n                    break outer;\n                }\n                if (trackData.packetQueue.length > 0\n                    && trackData.packetQueue[0].timestamp < minTimestamp) {\n                    trackWithMinTimestamp = trackData;\n                    minTimestamp = trackData.packetQueue[0].timestamp;\n                }\n            }\n            if (!trackWithMinTimestamp) {\n                break;\n            }\n            const packet = trackWithMinTimestamp.packetQueue.shift();\n            const isFinalPacket = trackWithMinTimestamp.packetQueue.length === 0;\n            this.writePacket(trackWithMinTimestamp, packet, isFinalPacket);\n        }\n        if (!isFinalCall) {\n            await this.writer.flush();\n        }\n    }\n    writePacket(trackData, packet, isFinalPacket) {\n        let remainingLength = packet.data.length;\n        let dataStartOffset = 0;\n        let dataOffset = 0;\n        while (true) {\n            if (trackData.currentLacingValues.length === 0 && dataStartOffset > 0) {\n                // This is a packet spanning multiple pages\n                trackData.currentPageStartsWithFreshPacket = false;\n            }\n            const segmentSize = Math.min(255, remainingLength);\n            trackData.currentLacingValues.push(segmentSize);\n            trackData.currentPageSize++;\n            dataOffset += segmentSize;\n            const segmentIsLastOfPacket = remainingLength < 255;\n            if (trackData.currentLacingValues.length === 255) {\n                // The page is full, we need to add part of the packet data and then flush the page\n                const slice = packet.data.subarray(dataStartOffset, dataOffset);\n                dataStartOffset = dataOffset;\n                trackData.currentPageData.push(slice);\n                trackData.currentPageSize += slice.length;\n                this.writePage(trackData, isFinalPacket && segmentIsLastOfPacket);\n                if (segmentIsLastOfPacket) {\n                    return;\n                }\n            }\n            if (segmentIsLastOfPacket) {\n                break;\n            }\n            remainingLength -= 255;\n        }\n        const slice = packet.data.subarray(dataStartOffset);\n        trackData.currentPageData.push(slice);\n        trackData.currentPageSize += slice.length;\n        trackData.currentGranulePosition = packet.endGranulePosition;\n        if (trackData.currentPageSize >= PAGE_SIZE_TARGET || packet.forcePageFlush) {\n            this.writePage(trackData, isFinalPacket);\n        }\n    }\n    writePage(trackData, isEos) {\n        this.pageView.setUint32(0, _ogg_misc_js__WEBPACK_IMPORTED_MODULE_3__.OGGS, true); // Capture pattern\n        this.pageView.setUint8(4, 0); // Version\n        let headerType = 0;\n        if (!trackData.currentPageStartsWithFreshPacket) {\n            headerType |= 1;\n        }\n        if (trackData.pagesWritten === 0) {\n            headerType |= 2; // Beginning of stream\n        }\n        if (isEos) {\n            headerType |= 4; // End of stream\n        }\n        this.pageView.setUint8(5, headerType); // Header type\n        const granulePosition = trackData.currentLacingValues.every(x => x === 255)\n            ? -1 // No packets end on this page\n            : trackData.currentGranulePosition;\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.setInt64)(this.pageView, 6, granulePosition, true); // Granule position\n        this.pageView.setUint32(14, trackData.serialNumber, true); // Serial number\n        this.pageView.setUint32(18, trackData.pagesWritten, true); // Page sequence number\n        this.pageView.setUint32(22, 0, true); // Checksum placeholder\n        this.pageView.setUint8(26, trackData.currentLacingValues.length); // Number of page segments\n        this.pageBytes.set(trackData.currentLacingValues, 27);\n        let pos = 27 + trackData.currentLacingValues.length;\n        for (const data of trackData.currentPageData) {\n            this.pageBytes.set(data, pos);\n            pos += data.length;\n        }\n        const slice = this.pageBytes.subarray(0, pos);\n        const crc = (0,_ogg_misc_js__WEBPACK_IMPORTED_MODULE_3__.computeOggPageCrc)(slice);\n        this.pageView.setUint32(22, crc, true); // Checksum\n        trackData.pagesWritten++;\n        trackData.currentLacingValues.length = 0;\n        trackData.currentPageData.length = 0;\n        trackData.currentPageSize = 27;\n        trackData.currentPageStartsWithFreshPacket = true;\n        if (this.format._options.onPage) {\n            this.writer.startTrackingWrites();\n        }\n        this.writer.write(slice);\n        if (this.format._options.onPage) {\n            const { data, start } = this.writer.stopTrackingWrites();\n            this.format._options.onPage(data, start, trackData.track.source);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async onTrackClose() {\n        const release = await this.mutex.acquire();\n        if (this.allTracksAreKnown()) {\n            this.allTracksKnown.resolve();\n        }\n        // Since a track is now closed, we may be able to write out chunks that were previously waiting\n        await this.interleavePages();\n        release();\n    }\n    async finalize() {\n        const release = await this.mutex.acquire();\n        this.allTracksKnown.resolve();\n        await this.interleavePages(true);\n        for (const trackData of this.trackDatas) {\n            if (trackData.currentLacingValues.length > 0) {\n                this.writePage(trackData, true);\n            }\n        }\n        release();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/ogg/ogg-muxer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/ogg/ogg-reader.js":
/*!********************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/ogg/ogg-reader.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_PAGE_HEADER_SIZE: function() { return /* binding */ MAX_PAGE_HEADER_SIZE; },\n/* harmony export */   MAX_PAGE_SIZE: function() { return /* binding */ MAX_PAGE_SIZE; },\n/* harmony export */   MIN_PAGE_HEADER_SIZE: function() { return /* binding */ MIN_PAGE_HEADER_SIZE; },\n/* harmony export */   findNextPageHeader: function() { return /* binding */ findNextPageHeader; },\n/* harmony export */   readPageHeader: function() { return /* binding */ readPageHeader; }\n/* harmony export */ });\n/* harmony import */ var _reader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reader.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/reader.js\");\n/* harmony import */ var _ogg_misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ogg-misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/ogg/ogg-misc.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\nconst MIN_PAGE_HEADER_SIZE = 27;\nconst MAX_PAGE_HEADER_SIZE = 27 + 255;\nconst MAX_PAGE_SIZE = MAX_PAGE_HEADER_SIZE + 255 * 255;\nconst readPageHeader = (slice) => {\n    const startPos = slice.filePos;\n    const capturePattern = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU32Le)(slice);\n    if (capturePattern !== _ogg_misc_js__WEBPACK_IMPORTED_MODULE_1__.OGGS) {\n        return null;\n    }\n    slice.skip(1); // Version\n    const headerType = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU8)(slice);\n    const granulePosition = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readI64Le)(slice);\n    const serialNumber = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU32Le)(slice);\n    const sequenceNumber = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU32Le)(slice);\n    const checksum = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU32Le)(slice);\n    const numberPageSegments = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU8)(slice);\n    const lacingValues = new Uint8Array(numberPageSegments);\n    for (let i = 0; i < numberPageSegments; i++) {\n        lacingValues[i] = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU8)(slice);\n    }\n    const headerSize = 27 + numberPageSegments;\n    const dataSize = lacingValues.reduce((a, b) => a + b, 0);\n    const totalSize = headerSize + dataSize;\n    return {\n        headerStartPos: startPos,\n        totalSize,\n        dataStartPos: startPos + headerSize,\n        dataSize,\n        headerType,\n        granulePosition,\n        serialNumber,\n        sequenceNumber,\n        checksum,\n        lacingValues,\n    };\n};\nconst findNextPageHeader = (slice, until) => {\n    while (slice.filePos < until - (4 - 1)) { // Size of word minus 1\n        const word = (0,_reader_js__WEBPACK_IMPORTED_MODULE_0__.readU32Le)(slice);\n        const firstByte = word & 0xff;\n        const secondByte = (word >>> 8) & 0xff;\n        const thirdByte = (word >>> 16) & 0xff;\n        const fourthByte = (word >>> 24) & 0xff;\n        const O = 0x4f; // 'O'\n        if (firstByte !== O && secondByte !== O && thirdByte !== O && fourthByte !== O) {\n            continue;\n        }\n        slice.skip(-4);\n        if (word === _ogg_misc_js__WEBPACK_IMPORTED_MODULE_1__.OGGS) {\n            // We have found the capture pattern\n            return true;\n        }\n        slice.skip(1);\n    }\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvb2dnL29nZy1yZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzREO0FBQ3ZCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ1A7QUFDQSwyQkFBMkIscURBQVM7QUFDcEMsMkJBQTJCLDhDQUFJO0FBQy9CO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsdUJBQXVCLGtEQUFNO0FBQzdCLDRCQUE0QixxREFBUztBQUNyQyx5QkFBeUIscURBQVM7QUFDbEMsMkJBQTJCLHFEQUFTO0FBQ3BDLHFCQUFxQixxREFBUztBQUM5QiwrQkFBK0Isa0RBQU07QUFDckM7QUFDQSxvQkFBb0Isd0JBQXdCO0FBQzVDLDBCQUEwQixrREFBTTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCw4Q0FBOEM7QUFDOUMscUJBQXFCLHFEQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDhDQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvb2dnL29nZy1yZWFkZXIuanM/YzliNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyNS1wcmVzZW50LCBWYW5pbGFneSBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICogZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHBzOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG4gKi9cbmltcG9ydCB7IHJlYWRJNjRMZSwgcmVhZFUzMkxlLCByZWFkVTggfSBmcm9tICcuLi9yZWFkZXIuanMnO1xuaW1wb3J0IHsgT0dHUyB9IGZyb20gJy4vb2dnLW1pc2MuanMnO1xuZXhwb3J0IGNvbnN0IE1JTl9QQUdFX0hFQURFUl9TSVpFID0gMjc7XG5leHBvcnQgY29uc3QgTUFYX1BBR0VfSEVBREVSX1NJWkUgPSAyNyArIDI1NTtcbmV4cG9ydCBjb25zdCBNQVhfUEFHRV9TSVpFID0gTUFYX1BBR0VfSEVBREVSX1NJWkUgKyAyNTUgKiAyNTU7XG5leHBvcnQgY29uc3QgcmVhZFBhZ2VIZWFkZXIgPSAoc2xpY2UpID0+IHtcbiAgICBjb25zdCBzdGFydFBvcyA9IHNsaWNlLmZpbGVQb3M7XG4gICAgY29uc3QgY2FwdHVyZVBhdHRlcm4gPSByZWFkVTMyTGUoc2xpY2UpO1xuICAgIGlmIChjYXB0dXJlUGF0dGVybiAhPT0gT0dHUykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2xpY2Uuc2tpcCgxKTsgLy8gVmVyc2lvblxuICAgIGNvbnN0IGhlYWRlclR5cGUgPSByZWFkVTgoc2xpY2UpO1xuICAgIGNvbnN0IGdyYW51bGVQb3NpdGlvbiA9IHJlYWRJNjRMZShzbGljZSk7XG4gICAgY29uc3Qgc2VyaWFsTnVtYmVyID0gcmVhZFUzMkxlKHNsaWNlKTtcbiAgICBjb25zdCBzZXF1ZW5jZU51bWJlciA9IHJlYWRVMzJMZShzbGljZSk7XG4gICAgY29uc3QgY2hlY2tzdW0gPSByZWFkVTMyTGUoc2xpY2UpO1xuICAgIGNvbnN0IG51bWJlclBhZ2VTZWdtZW50cyA9IHJlYWRVOChzbGljZSk7XG4gICAgY29uc3QgbGFjaW5nVmFsdWVzID0gbmV3IFVpbnQ4QXJyYXkobnVtYmVyUGFnZVNlZ21lbnRzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlclBhZ2VTZWdtZW50czsgaSsrKSB7XG4gICAgICAgIGxhY2luZ1ZhbHVlc1tpXSA9IHJlYWRVOChzbGljZSk7XG4gICAgfVxuICAgIGNvbnN0IGhlYWRlclNpemUgPSAyNyArIG51bWJlclBhZ2VTZWdtZW50cztcbiAgICBjb25zdCBkYXRhU2l6ZSA9IGxhY2luZ1ZhbHVlcy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgICBjb25zdCB0b3RhbFNpemUgPSBoZWFkZXJTaXplICsgZGF0YVNpemU7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGVhZGVyU3RhcnRQb3M6IHN0YXJ0UG9zLFxuICAgICAgICB0b3RhbFNpemUsXG4gICAgICAgIGRhdGFTdGFydFBvczogc3RhcnRQb3MgKyBoZWFkZXJTaXplLFxuICAgICAgICBkYXRhU2l6ZSxcbiAgICAgICAgaGVhZGVyVHlwZSxcbiAgICAgICAgZ3JhbnVsZVBvc2l0aW9uLFxuICAgICAgICBzZXJpYWxOdW1iZXIsXG4gICAgICAgIHNlcXVlbmNlTnVtYmVyLFxuICAgICAgICBjaGVja3N1bSxcbiAgICAgICAgbGFjaW5nVmFsdWVzLFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IGZpbmROZXh0UGFnZUhlYWRlciA9IChzbGljZSwgdW50aWwpID0+IHtcbiAgICB3aGlsZSAoc2xpY2UuZmlsZVBvcyA8IHVudGlsIC0gKDQgLSAxKSkgeyAvLyBTaXplIG9mIHdvcmQgbWludXMgMVxuICAgICAgICBjb25zdCB3b3JkID0gcmVhZFUzMkxlKHNsaWNlKTtcbiAgICAgICAgY29uc3QgZmlyc3RCeXRlID0gd29yZCAmIDB4ZmY7XG4gICAgICAgIGNvbnN0IHNlY29uZEJ5dGUgPSAod29yZCA+Pj4gOCkgJiAweGZmO1xuICAgICAgICBjb25zdCB0aGlyZEJ5dGUgPSAod29yZCA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgY29uc3QgZm91cnRoQnl0ZSA9ICh3b3JkID4+PiAyNCkgJiAweGZmO1xuICAgICAgICBjb25zdCBPID0gMHg0ZjsgLy8gJ08nXG4gICAgICAgIGlmIChmaXJzdEJ5dGUgIT09IE8gJiYgc2Vjb25kQnl0ZSAhPT0gTyAmJiB0aGlyZEJ5dGUgIT09IE8gJiYgZm91cnRoQnl0ZSAhPT0gTykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgc2xpY2Uuc2tpcCgtNCk7XG4gICAgICAgIGlmICh3b3JkID09PSBPR0dTKSB7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIGZvdW5kIHRoZSBjYXB0dXJlIHBhdHRlcm5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHNsaWNlLnNraXAoMSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/ogg/ogg-reader.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/output-format.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/output-format.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdtsOutputFormat: function() { return /* binding */ AdtsOutputFormat; },\n/* harmony export */   IsobmffOutputFormat: function() { return /* binding */ IsobmffOutputFormat; },\n/* harmony export */   MkvOutputFormat: function() { return /* binding */ MkvOutputFormat; },\n/* harmony export */   MovOutputFormat: function() { return /* binding */ MovOutputFormat; },\n/* harmony export */   Mp3OutputFormat: function() { return /* binding */ Mp3OutputFormat; },\n/* harmony export */   Mp4OutputFormat: function() { return /* binding */ Mp4OutputFormat; },\n/* harmony export */   OggOutputFormat: function() { return /* binding */ OggOutputFormat; },\n/* harmony export */   OutputFormat: function() { return /* binding */ OutputFormat; },\n/* harmony export */   WavOutputFormat: function() { return /* binding */ WavOutputFormat; },\n/* harmony export */   WebMOutputFormat: function() { return /* binding */ WebMOutputFormat; }\n/* harmony export */ });\n/* harmony import */ var _adts_adts_muxer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./adts/adts-muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/adts/adts-muxer.js\");\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _isobmff_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isobmff/isobmff-muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/isobmff/isobmff-muxer.js\");\n/* harmony import */ var _matroska_matroska_muxer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./matroska/matroska-muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/matroska/matroska-muxer.js\");\n/* harmony import */ var _mp3_mp3_muxer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mp3/mp3-muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/mp3/mp3-muxer.js\");\n/* harmony import */ var _ogg_ogg_muxer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ogg/ogg-muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/ogg/ogg-muxer.js\");\n/* harmony import */ var _wave_wave_muxer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wave/wave-muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/wave/wave-muxer.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n\n\n/**\n * Base class representing an output media file format.\n * @group Output formats\n * @public\n */\nclass OutputFormat {\n    /** Returns a list of video codecs that this output format can contain. */\n    getSupportedVideoCodecs() {\n        return this.getSupportedCodecs()\n            .filter(codec => _codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS.includes(codec));\n    }\n    /** Returns a list of audio codecs that this output format can contain. */\n    getSupportedAudioCodecs() {\n        return this.getSupportedCodecs()\n            .filter(codec => _codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS.includes(codec));\n    }\n    /** Returns a list of subtitle codecs that this output format can contain. */\n    getSupportedSubtitleCodecs() {\n        return this.getSupportedCodecs()\n            .filter(codec => _codec_js__WEBPACK_IMPORTED_MODULE_0__.SUBTITLE_CODECS.includes(codec));\n    }\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _codecUnsupportedHint(codec) {\n        return '';\n    }\n}\n/**\n * Format representing files compatible with the ISO base media file format (ISOBMFF), like MP4 or MOV files.\n * @group Output formats\n * @public\n */\nclass IsobmffOutputFormat extends OutputFormat {\n    /** Internal constructor. */\n    constructor(options = {}) {\n        if (!options || typeof options !== 'object') {\n            throw new TypeError('options must be an object.');\n        }\n        if (options.fastStart !== undefined && ![false, 'in-memory', 'fragmented'].includes(options.fastStart)) {\n            throw new TypeError('options.fastStart, when provided, must be false, \"in-memory\", or \"fragmented\".');\n        }\n        if (options.minimumFragmentDuration !== undefined\n            && (!Number.isFinite(options.minimumFragmentDuration) || options.minimumFragmentDuration < 0)) {\n            throw new TypeError('options.minimumFragmentDuration, when provided, must be a non-negative number.');\n        }\n        if (options.onFtyp !== undefined && typeof options.onFtyp !== 'function') {\n            throw new TypeError('options.onFtyp, when provided, must be a function.');\n        }\n        if (options.onMoov !== undefined && typeof options.onMoov !== 'function') {\n            throw new TypeError('options.onMoov, when provided, must be a function.');\n        }\n        if (options.onMdat !== undefined && typeof options.onMdat !== 'function') {\n            throw new TypeError('options.onMdat, when provided, must be a function.');\n        }\n        if (options.onMoof !== undefined && typeof options.onMoof !== 'function') {\n            throw new TypeError('options.onMoof, when provided, must be a function.');\n        }\n        super();\n        this._options = options;\n    }\n    getSupportedTrackCounts() {\n        return {\n            video: { min: 0, max: Infinity },\n            audio: { min: 0, max: Infinity },\n            subtitle: { min: 0, max: Infinity },\n            total: { min: 1, max: 2 ** 32 - 1 }, // Have fun reaching this one\n        };\n    }\n    get supportsVideoRotationMetadata() {\n        return true;\n    }\n    /** @internal */\n    _createMuxer(output) {\n        return new _isobmff_isobmff_muxer_js__WEBPACK_IMPORTED_MODULE_1__.IsobmffMuxer(output, this);\n    }\n}\n/**\n * MPEG-4 Part 14 (MP4) file format. Supports most codecs.\n * @group Output formats\n * @public\n */\nclass Mp4OutputFormat extends IsobmffOutputFormat {\n    /** Creates a new {@link Mp4OutputFormat} configured with the specified `options`. */\n    constructor(options) {\n        super(options);\n    }\n    /** @internal */\n    get _name() {\n        return 'MP4';\n    }\n    get fileExtension() {\n        return '.mp4';\n    }\n    get mimeType() {\n        return 'video/mp4';\n    }\n    getSupportedCodecs() {\n        return [\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS,\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.NON_PCM_AUDIO_CODECS,\n            // These are supported via ISO/IEC 23003-5\n            'pcm-s16',\n            'pcm-s16be',\n            'pcm-s24',\n            'pcm-s24be',\n            'pcm-s32',\n            'pcm-s32be',\n            'pcm-f32',\n            'pcm-f32be',\n            'pcm-f64',\n            'pcm-f64be',\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.SUBTITLE_CODECS,\n        ];\n    }\n    /** @internal */\n    _codecUnsupportedHint(codec) {\n        if (new MovOutputFormat().getSupportedCodecs().includes(codec)) {\n            return ' Switching to MOV will grant support for this codec.';\n        }\n        return '';\n    }\n}\n/**\n * QuickTime File Format (QTFF), often called MOV. Supports all video and audio codecs, but not subtitle codecs.\n * @group Output formats\n * @public\n */\nclass MovOutputFormat extends IsobmffOutputFormat {\n    /** Creates a new {@link MovOutputFormat} configured with the specified `options`. */\n    constructor(options) {\n        super(options);\n    }\n    /** @internal */\n    get _name() {\n        return 'MOV';\n    }\n    get fileExtension() {\n        return '.mov';\n    }\n    get mimeType() {\n        return 'video/quicktime';\n    }\n    getSupportedCodecs() {\n        return [\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS,\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS,\n        ];\n    }\n    /** @internal */\n    _codecUnsupportedHint(codec) {\n        if (new Mp4OutputFormat().getSupportedCodecs().includes(codec)) {\n            return ' Switching to MP4 will grant support for this codec.';\n        }\n        return '';\n    }\n}\n/**\n * Matroska file format.\n * @group Output formats\n * @public\n */\nclass MkvOutputFormat extends OutputFormat {\n    /** Creates a new {@link MkvOutputFormat} configured with the specified `options`. */\n    constructor(options = {}) {\n        if (!options || typeof options !== 'object') {\n            throw new TypeError('options must be an object.');\n        }\n        if (options.appendOnly !== undefined && typeof options.appendOnly !== 'boolean') {\n            throw new TypeError('options.appendOnly, when provided, must be a boolean.');\n        }\n        if (options.minimumClusterDuration !== undefined\n            && (!Number.isFinite(options.minimumClusterDuration) || options.minimumClusterDuration < 0)) {\n            throw new TypeError('options.minimumClusterDuration, when provided, must be a non-negative number.');\n        }\n        if (options.onEbmlHeader !== undefined && typeof options.onEbmlHeader !== 'function') {\n            throw new TypeError('options.onEbmlHeader, when provided, must be a function.');\n        }\n        if (options.onSegmentHeader !== undefined && typeof options.onSegmentHeader !== 'function') {\n            throw new TypeError('options.onHeader, when provided, must be a function.');\n        }\n        if (options.onCluster !== undefined && typeof options.onCluster !== 'function') {\n            throw new TypeError('options.onCluster, when provided, must be a function.');\n        }\n        super();\n        this._options = options;\n    }\n    /** @internal */\n    _createMuxer(output) {\n        return new _matroska_matroska_muxer_js__WEBPACK_IMPORTED_MODULE_2__.MatroskaMuxer(output, this);\n    }\n    /** @internal */\n    get _name() {\n        return 'Matroska';\n    }\n    getSupportedTrackCounts() {\n        return {\n            video: { min: 0, max: Infinity },\n            audio: { min: 0, max: Infinity },\n            subtitle: { min: 0, max: Infinity },\n            total: { min: 1, max: 127 },\n        };\n    }\n    get fileExtension() {\n        return '.mkv';\n    }\n    get mimeType() {\n        return 'video/x-matroska';\n    }\n    getSupportedCodecs() {\n        return [\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS,\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.NON_PCM_AUDIO_CODECS,\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.PCM_AUDIO_CODECS.filter(codec => !['pcm-s8', 'pcm-f32be', 'pcm-f64be', 'ulaw', 'alaw'].includes(codec)),\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.SUBTITLE_CODECS,\n        ];\n    }\n    get supportsVideoRotationMetadata() {\n        // While it technically does support it with ProjectionPoseRoll, many players appear to ignore this value\n        return false;\n    }\n}\n/**\n * WebM file format, based on Matroska.\n * @group Output formats\n * @public\n */\nclass WebMOutputFormat extends MkvOutputFormat {\n    /** Creates a new {@link WebMOutputFormat} configured with the specified `options`. */\n    constructor(options) {\n        super(options);\n    }\n    getSupportedCodecs() {\n        return [\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.VIDEO_CODECS.filter(codec => ['vp8', 'vp9', 'av1'].includes(codec)),\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS.filter(codec => ['opus', 'vorbis'].includes(codec)),\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.SUBTITLE_CODECS,\n        ];\n    }\n    /** @internal */\n    get _name() {\n        return 'WebM';\n    }\n    get fileExtension() {\n        return '.webm';\n    }\n    get mimeType() {\n        return 'video/webm';\n    }\n    /** @internal */\n    _codecUnsupportedHint(codec) {\n        if (new MkvOutputFormat().getSupportedCodecs().includes(codec)) {\n            return ' Switching to MKV will grant support for this codec.';\n        }\n        return '';\n    }\n}\n/**\n * MP3 file format.\n * @group Output formats\n * @public\n */\nclass Mp3OutputFormat extends OutputFormat {\n    /** Creates a new {@link Mp3OutputFormat} configured with the specified `options`. */\n    constructor(options = {}) {\n        if (!options || typeof options !== 'object') {\n            throw new TypeError('options must be an object.');\n        }\n        if (options.xingHeader !== undefined && typeof options.xingHeader !== 'boolean') {\n            throw new TypeError('options.xingHeader, when provided, must be a boolean.');\n        }\n        if (options.onXingFrame !== undefined && typeof options.onXingFrame !== 'function') {\n            throw new TypeError('options.onXingFrame, when provided, must be a function.');\n        }\n        super();\n        this._options = options;\n    }\n    /** @internal */\n    _createMuxer(output) {\n        return new _mp3_mp3_muxer_js__WEBPACK_IMPORTED_MODULE_3__.Mp3Muxer(output, this);\n    }\n    /** @internal */\n    get _name() {\n        return 'MP3';\n    }\n    getSupportedTrackCounts() {\n        return {\n            video: { min: 0, max: 0 },\n            audio: { min: 1, max: 1 },\n            subtitle: { min: 0, max: 0 },\n            total: { min: 1, max: 1 },\n        };\n    }\n    get fileExtension() {\n        return '.mp3';\n    }\n    get mimeType() {\n        return 'audio/mpeg';\n    }\n    getSupportedCodecs() {\n        return ['mp3'];\n    }\n    get supportsVideoRotationMetadata() {\n        return false;\n    }\n}\n/**\n * WAVE file format, based on RIFF.\n * @group Output formats\n * @public\n */\nclass WavOutputFormat extends OutputFormat {\n    /** Creates a new {@link WavOutputFormat} configured with the specified `options`. */\n    constructor(options = {}) {\n        if (!options || typeof options !== 'object') {\n            throw new TypeError('options must be an object.');\n        }\n        if (options.large !== undefined && typeof options.large !== 'boolean') {\n            throw new TypeError('options.large, when provided, must be a boolean.');\n        }\n        if (options.onHeader !== undefined && typeof options.onHeader !== 'function') {\n            throw new TypeError('options.onHeader, when provided, must be a function.');\n        }\n        super();\n        this._options = options;\n    }\n    /** @internal */\n    _createMuxer(output) {\n        return new _wave_wave_muxer_js__WEBPACK_IMPORTED_MODULE_4__.WaveMuxer(output, this);\n    }\n    /** @internal */\n    get _name() {\n        return 'WAVE';\n    }\n    getSupportedTrackCounts() {\n        return {\n            video: { min: 0, max: 0 },\n            audio: { min: 1, max: 1 },\n            subtitle: { min: 0, max: 0 },\n            total: { min: 1, max: 1 },\n        };\n    }\n    get fileExtension() {\n        return '.wav';\n    }\n    get mimeType() {\n        return 'audio/wav';\n    }\n    getSupportedCodecs() {\n        return [\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.PCM_AUDIO_CODECS.filter(codec => ['pcm-s16', 'pcm-s24', 'pcm-s32', 'pcm-f32', 'pcm-u8', 'ulaw', 'alaw'].includes(codec)),\n        ];\n    }\n    get supportsVideoRotationMetadata() {\n        return false;\n    }\n}\n/**\n * Ogg file format.\n * @group Output formats\n * @public\n */\nclass OggOutputFormat extends OutputFormat {\n    /** Creates a new {@link OggOutputFormat} configured with the specified `options`. */\n    constructor(options = {}) {\n        if (!options || typeof options !== 'object') {\n            throw new TypeError('options must be an object.');\n        }\n        if (options.onPage !== undefined && typeof options.onPage !== 'function') {\n            throw new TypeError('options.onPage, when provided, must be a function.');\n        }\n        super();\n        this._options = options;\n    }\n    /** @internal */\n    _createMuxer(output) {\n        return new _ogg_ogg_muxer_js__WEBPACK_IMPORTED_MODULE_5__.OggMuxer(output, this);\n    }\n    /** @internal */\n    get _name() {\n        return 'Ogg';\n    }\n    getSupportedTrackCounts() {\n        return {\n            video: { min: 0, max: 0 },\n            audio: { min: 0, max: Infinity },\n            subtitle: { min: 0, max: 0 },\n            total: { min: 1, max: 2 ** 32 },\n        };\n    }\n    get fileExtension() {\n        return '.ogg';\n    }\n    get mimeType() {\n        return 'application/ogg';\n    }\n    getSupportedCodecs() {\n        return [\n            ..._codec_js__WEBPACK_IMPORTED_MODULE_0__.AUDIO_CODECS.filter(codec => ['vorbis', 'opus'].includes(codec)),\n        ];\n    }\n    get supportsVideoRotationMetadata() {\n        return false;\n    }\n}\n/**\n * ADTS file format.\n * @group Output formats\n * @public\n */\nclass AdtsOutputFormat extends OutputFormat {\n    /** Creates a new {@link AdtsOutputFormat} configured with the specified `options`. */\n    constructor(options = {}) {\n        if (!options || typeof options !== 'object') {\n            throw new TypeError('options must be an object.');\n        }\n        if (options.onFrame !== undefined && typeof options.onFrame !== 'function') {\n            throw new TypeError('options.onFrame, when provided, must be a function.');\n        }\n        super();\n        this._options = options;\n    }\n    /** @internal */\n    _createMuxer(output) {\n        return new _adts_adts_muxer_js__WEBPACK_IMPORTED_MODULE_6__.AdtsMuxer(output, this);\n    }\n    /** @internal */\n    get _name() {\n        return 'ADTS';\n    }\n    getSupportedTrackCounts() {\n        return {\n            video: { min: 0, max: 0 },\n            audio: { min: 1, max: 1 },\n            subtitle: { min: 0, max: 0 },\n            total: { min: 1, max: 1 },\n        };\n    }\n    get fileExtension() {\n        return '.aac';\n    }\n    get mimeType() {\n        return 'audio/aac';\n    }\n    getSupportedCodecs() {\n        return ['aac'];\n    }\n    get supportsVideoRotationMetadata() {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/output-format.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/output.js":
/*!************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/output.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALL_TRACK_TYPES: function() { return /* binding */ ALL_TRACK_TYPES; },\n/* harmony export */   Output: function() { return /* binding */ Output; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _tags_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tags.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/tags.js\");\n/* harmony import */ var _output_format_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./output-format.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/output-format.js\");\n/* harmony import */ var _media_source_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./media-source.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/media-source.js\");\n/* harmony import */ var _target_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./target.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/target.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n/**\n * List of all track types.\n * @group Miscellaneous\n * @public\n */\nconst ALL_TRACK_TYPES = ['video', 'audio', 'subtitle'];\nconst validateBaseTrackMetadata = (metadata) => {\n    if (!metadata || typeof metadata !== 'object') {\n        throw new TypeError('metadata must be an object.');\n    }\n    if (metadata.languageCode !== undefined && !(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isIso639Dash2LanguageCode)(metadata.languageCode)) {\n        throw new TypeError('metadata.languageCode, when provided, must be a three-letter, ISO 639-2/T language code.');\n    }\n    if (metadata.name !== undefined && typeof metadata.name !== 'string') {\n        throw new TypeError('metadata.name, when provided, must be a string.');\n    }\n};\n/**\n * Main class orchestrating the creation of a new media file.\n * @group Output files\n * @public\n */\nclass Output {\n    /**\n     * Creates a new instance of {@link Output} which can then be used to create a new media file according to the\n     * specified {@link OutputOptions}.\n     */\n    constructor(options) {\n        /** The current state of the output. */\n        this.state = 'pending';\n        /** @internal */\n        this._tracks = [];\n        /** @internal */\n        this._startPromise = null;\n        /** @internal */\n        this._cancelPromise = null;\n        /** @internal */\n        this._finalizePromise = null;\n        /** @internal */\n        this._mutex = new _misc_js__WEBPACK_IMPORTED_MODULE_0__.AsyncMutex();\n        /** @internal */\n        this._metadataTags = {};\n        if (!options || typeof options !== 'object') {\n            throw new TypeError('options must be an object.');\n        }\n        if (!(options.format instanceof _output_format_js__WEBPACK_IMPORTED_MODULE_1__.OutputFormat)) {\n            throw new TypeError('options.format must be an OutputFormat.');\n        }\n        if (!(options.target instanceof _target_js__WEBPACK_IMPORTED_MODULE_2__.Target)) {\n            throw new TypeError('options.target must be a Target.');\n        }\n        if (options.target._output) {\n            throw new Error('Target is already used for another output.');\n        }\n        options.target._output = this;\n        this.format = options.format;\n        this.target = options.target;\n        this._writer = options.target._createWriter();\n        this._muxer = options.format._createMuxer(this);\n    }\n    /** Adds a video track to the output with the given source. Must be called before output is started. */\n    addVideoTrack(source, metadata = {}) {\n        if (!(source instanceof _media_source_js__WEBPACK_IMPORTED_MODULE_3__.VideoSource)) {\n            throw new TypeError('source must be a VideoSource.');\n        }\n        validateBaseTrackMetadata(metadata);\n        if (metadata.rotation !== undefined && ![0, 90, 180, 270].includes(metadata.rotation)) {\n            throw new TypeError(`Invalid video rotation: ${metadata.rotation}. Has to be 0, 90, 180 or 270.`);\n        }\n        if (!this.format.supportsVideoRotationMetadata && metadata.rotation) {\n            throw new Error(`${this.format._name} does not support video rotation metadata.`);\n        }\n        if (metadata.frameRate !== undefined\n            && (!Number.isFinite(metadata.frameRate) || metadata.frameRate <= 0)) {\n            throw new TypeError(`Invalid video frame rate: ${metadata.frameRate}. Must be a positive number.`);\n        }\n        this._addTrack('video', source, metadata);\n    }\n    /** Adds an audio track to the output with the given source. Must be called before output is started. */\n    addAudioTrack(source, metadata = {}) {\n        if (!(source instanceof _media_source_js__WEBPACK_IMPORTED_MODULE_3__.AudioSource)) {\n            throw new TypeError('source must be an AudioSource.');\n        }\n        validateBaseTrackMetadata(metadata);\n        this._addTrack('audio', source, metadata);\n    }\n    /** Adds a subtitle track to the output with the given source. Must be called before output is started. */\n    addSubtitleTrack(source, metadata = {}) {\n        if (!(source instanceof _media_source_js__WEBPACK_IMPORTED_MODULE_3__.SubtitleSource)) {\n            throw new TypeError('source must be a SubtitleSource.');\n        }\n        validateBaseTrackMetadata(metadata);\n        this._addTrack('subtitle', source, metadata);\n    }\n    /**\n     * Sets descriptive metadata tags about the media file, such as title, author, date, or cover art. When called\n     * multiple times, only the metadata from the last call will be used.\n     *\n     * Must be called before output is started.\n     */\n    setMetadataTags(tags) {\n        (0,_tags_js__WEBPACK_IMPORTED_MODULE_4__.validateMetadataTags)(tags);\n        if (this.state !== 'pending') {\n            throw new Error('Cannot set metadata tags after output has been started or canceled.');\n        }\n        this._metadataTags = tags;\n    }\n    /** @internal */\n    _addTrack(type, source, metadata) {\n        if (this.state !== 'pending') {\n            throw new Error('Cannot add track after output has been started or canceled.');\n        }\n        if (source._connectedTrack) {\n            throw new Error('Source is already used for a track.');\n        }\n        // Verify maximum track count constraints\n        const supportedTrackCounts = this.format.getSupportedTrackCounts();\n        const presentTracksOfThisType = this._tracks.reduce((count, track) => count + (track.type === type ? 1 : 0), 0);\n        const maxCount = supportedTrackCounts[type].max;\n        if (presentTracksOfThisType === maxCount) {\n            throw new Error(maxCount === 0\n                ? `${this.format._name} does not support ${type} tracks.`\n                : (`${this.format._name} does not support more than ${maxCount} ${type} track`\n                    + `${maxCount === 1 ? '' : 's'}.`));\n        }\n        const maxTotalCount = supportedTrackCounts.total.max;\n        if (this._tracks.length === maxTotalCount) {\n            throw new Error(`${this.format._name} does not support more than ${maxTotalCount} tracks`\n                + `${maxTotalCount === 1 ? '' : 's'} in total.`);\n        }\n        const track = {\n            id: this._tracks.length + 1,\n            output: this,\n            type,\n            source: source,\n            metadata,\n        };\n        if (track.type === 'video') {\n            const supportedVideoCodecs = this.format.getSupportedVideoCodecs();\n            if (supportedVideoCodecs.length === 0) {\n                throw new Error(`${this.format._name} does not support video tracks.`\n                    + this.format._codecUnsupportedHint(track.source._codec));\n            }\n            else if (!supportedVideoCodecs.includes(track.source._codec)) {\n                throw new Error(`Codec '${track.source._codec}' cannot be contained within ${this.format._name}. Supported`\n                    + ` video codecs are: ${supportedVideoCodecs.map(codec => `'${codec}'`).join(', ')}.`\n                    + this.format._codecUnsupportedHint(track.source._codec));\n            }\n        }\n        else if (track.type === 'audio') {\n            const supportedAudioCodecs = this.format.getSupportedAudioCodecs();\n            if (supportedAudioCodecs.length === 0) {\n                throw new Error(`${this.format._name} does not support audio tracks.`\n                    + this.format._codecUnsupportedHint(track.source._codec));\n            }\n            else if (!supportedAudioCodecs.includes(track.source._codec)) {\n                throw new Error(`Codec '${track.source._codec}' cannot be contained within ${this.format._name}. Supported`\n                    + ` audio codecs are: ${supportedAudioCodecs.map(codec => `'${codec}'`).join(', ')}.`\n                    + this.format._codecUnsupportedHint(track.source._codec));\n            }\n        }\n        else if (track.type === 'subtitle') {\n            const supportedSubtitleCodecs = this.format.getSupportedSubtitleCodecs();\n            if (supportedSubtitleCodecs.length === 0) {\n                throw new Error(`${this.format._name} does not support subtitle tracks.`\n                    + this.format._codecUnsupportedHint(track.source._codec));\n            }\n            else if (!supportedSubtitleCodecs.includes(track.source._codec)) {\n                throw new Error(`Codec '${track.source._codec}' cannot be contained within ${this.format._name}. Supported`\n                    + ` subtitle codecs are: ${supportedSubtitleCodecs.map(codec => `'${codec}'`).join(', ')}.`\n                    + this.format._codecUnsupportedHint(track.source._codec));\n            }\n        }\n        this._tracks.push(track);\n        source._connectedTrack = track;\n    }\n    /**\n     * Starts the creation of the output file. This method should be called after all tracks have been added. Only after\n     * the output has started can media samples be added to the tracks.\n     *\n     * @returns A promise that resolves when the output has successfully started and is ready to receive media samples.\n     */\n    async start() {\n        // Verify minimum track count constraints\n        const supportedTrackCounts = this.format.getSupportedTrackCounts();\n        for (const trackType of ALL_TRACK_TYPES) {\n            const presentTracksOfThisType = this._tracks.reduce((count, track) => count + (track.type === trackType ? 1 : 0), 0);\n            const minCount = supportedTrackCounts[trackType].min;\n            if (presentTracksOfThisType < minCount) {\n                throw new Error(minCount === supportedTrackCounts[trackType].max\n                    ? (`${this.format._name} requires exactly ${minCount} ${trackType}`\n                        + ` track${minCount === 1 ? '' : 's'}.`)\n                    : (`${this.format._name} requires at least ${minCount} ${trackType}`\n                        + ` track${minCount === 1 ? '' : 's'}.`));\n            }\n        }\n        const totalMinCount = supportedTrackCounts.total.min;\n        if (this._tracks.length < totalMinCount) {\n            throw new Error(totalMinCount === supportedTrackCounts.total.max\n                ? (`${this.format._name} requires exactly ${totalMinCount} track`\n                    + `${totalMinCount === 1 ? '' : 's'}.`)\n                : (`${this.format._name} requires at least ${totalMinCount} track`\n                    + `${totalMinCount === 1 ? '' : 's'}.`));\n        }\n        if (this.state === 'canceled') {\n            throw new Error('Output has been canceled.');\n        }\n        if (this._startPromise) {\n            console.warn('Output has already been started.');\n            return this._startPromise;\n        }\n        return this._startPromise = (async () => {\n            this.state = 'started';\n            this._writer.start();\n            const release = await this._mutex.acquire();\n            await this._muxer.start();\n            const promises = this._tracks.map(track => track.source._start());\n            await Promise.all(promises);\n            release();\n        })();\n    }\n    /**\n     * Resolves with the full MIME type of the output file, including track codecs.\n     *\n     * The returned promise will resolve only once the precise codec strings of all tracks are known.\n     */\n    getMimeType() {\n        return this._muxer.getMimeType();\n    }\n    /**\n     * Cancels the creation of the output file, releasing internal resources like encoders and preventing further\n     * samples from being added.\n     *\n     * @returns A promise that resolves once all internal resources have been released.\n     */\n    async cancel() {\n        if (this._cancelPromise) {\n            console.warn('Output has already been canceled.');\n            return this._cancelPromise;\n        }\n        else if (this.state === 'finalizing' || this.state === 'finalized') {\n            console.warn('Output has already been finalized.');\n            return;\n        }\n        return this._cancelPromise = (async () => {\n            this.state = 'canceled';\n            const release = await this._mutex.acquire();\n            const promises = this._tracks.map(x => x.source._flushOrWaitForOngoingClose(true)); // Force close\n            await Promise.all(promises);\n            await this._writer.close();\n            release();\n        })();\n    }\n    /**\n     * Finalizes the output file. This method must be called after all media samples across all tracks have been added.\n     * Once the Promise returned by this method completes, the output file is ready.\n     */\n    async finalize() {\n        if (this.state === 'pending') {\n            throw new Error('Cannot finalize before starting.');\n        }\n        if (this.state === 'canceled') {\n            throw new Error('Cannot finalize after canceling.');\n        }\n        if (this._finalizePromise) {\n            console.warn('Output has already been finalized.');\n            return this._finalizePromise;\n        }\n        return this._finalizePromise = (async () => {\n            this.state = 'finalizing';\n            const release = await this._mutex.acquire();\n            const promises = this._tracks.map(x => x.source._flushOrWaitForOngoingClose(false));\n            await Promise.all(promises);\n            await this._muxer.finalize();\n            await this._writer.flush();\n            await this._writer.finalize();\n            this.state = 'finalized';\n            release();\n        })();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/output.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/packet.js":
/*!************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/packet.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncodedPacket: function() { return /* binding */ EncodedPacket; },\n/* harmony export */   PLACEHOLDER_DATA: function() { return /* binding */ PLACEHOLDER_DATA; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\nconst PLACEHOLDER_DATA = new Uint8Array(0);\n/**\n * Represents an encoded chunk of media. Mainly used as an expressive wrapper around WebCodecs API's\n * [`EncodedVideoChunk`](https://developer.mozilla.org/en-US/docs/Web/API/EncodedVideoChunk) and\n * [`EncodedAudioChunk`](https://developer.mozilla.org/en-US/docs/Web/API/EncodedAudioChunk), but can also be used\n * standalone.\n * @group Packets\n * @public\n */\nclass EncodedPacket {\n    /** Creates a new {@link EncodedPacket} from raw bytes and timing information. */\n    constructor(\n    /** The encoded data of this packet. */\n    data, \n    /** The type of this packet. */\n    type, \n    /**\n     * The presentation timestamp of this packet in seconds. May be negative. Samples with negative end timestamps\n     * should not be presented.\n     */\n    timestamp, \n    /** The duration of this packet in seconds. */\n    duration, \n    /**\n     * The sequence number indicates the decode order of the packets. Packet A  must be decoded before packet B if A\n     * has a lower sequence number than B. If two packets have the same sequence number, they are the same packet.\n     * Otherwise, sequence numbers are arbitrary and are not guaranteed to have any meaning besides their relative\n     * ordering. Negative sequence numbers mean the sequence number is undefined.\n     */\n    sequenceNumber = -1, byteLength) {\n        this.data = data;\n        this.type = type;\n        this.timestamp = timestamp;\n        this.duration = duration;\n        this.sequenceNumber = sequenceNumber;\n        if (data === PLACEHOLDER_DATA && byteLength === undefined) {\n            throw new Error('Internal error: byteLength must be explicitly provided when constructing metadata-only packets.');\n        }\n        if (byteLength === undefined) {\n            byteLength = data.byteLength;\n        }\n        if (!(data instanceof Uint8Array)) {\n            throw new TypeError('data must be a Uint8Array.');\n        }\n        if (type !== 'key' && type !== 'delta') {\n            throw new TypeError('type must be either \"key\" or \"delta\".');\n        }\n        if (!Number.isFinite(timestamp)) {\n            throw new TypeError('timestamp must be a number.');\n        }\n        if (!Number.isFinite(duration) || duration < 0) {\n            throw new TypeError('duration must be a non-negative number.');\n        }\n        if (!Number.isFinite(sequenceNumber)) {\n            throw new TypeError('sequenceNumber must be a number.');\n        }\n        if (!Number.isInteger(byteLength) || byteLength < 0) {\n            throw new TypeError('byteLength must be a non-negative integer.');\n        }\n        this.byteLength = byteLength;\n    }\n    /** If this packet is a metadata-only packet. Metadata-only packets don't contain their packet data. */\n    get isMetadataOnly() {\n        return this.data === PLACEHOLDER_DATA;\n    }\n    /** The timestamp of this packet in microseconds. */\n    get microsecondTimestamp() {\n        return Math.trunc(_misc_js__WEBPACK_IMPORTED_MODULE_0__.SECOND_TO_MICROSECOND_FACTOR * this.timestamp);\n    }\n    /** The duration of this packet in microseconds. */\n    get microsecondDuration() {\n        return Math.trunc(_misc_js__WEBPACK_IMPORTED_MODULE_0__.SECOND_TO_MICROSECOND_FACTOR * this.duration);\n    }\n    /** Converts this packet to an EncodedVideoChunk for use with the WebCodecs API. */\n    toEncodedVideoChunk() {\n        if (this.isMetadataOnly) {\n            throw new TypeError('Metadata-only packets cannot be converted to a video chunk.');\n        }\n        if (typeof EncodedVideoChunk === 'undefined') {\n            throw new Error('Your browser does not support EncodedVideoChunk.');\n        }\n        return new EncodedVideoChunk({\n            data: this.data,\n            type: this.type,\n            timestamp: this.microsecondTimestamp,\n            duration: this.microsecondDuration,\n        });\n    }\n    /** Converts this packet to an EncodedAudioChunk for use with the WebCodecs API. */\n    toEncodedAudioChunk() {\n        if (this.isMetadataOnly) {\n            throw new TypeError('Metadata-only packets cannot be converted to an audio chunk.');\n        }\n        if (typeof EncodedAudioChunk === 'undefined') {\n            throw new Error('Your browser does not support EncodedAudioChunk.');\n        }\n        return new EncodedAudioChunk({\n            data: this.data,\n            type: this.type,\n            timestamp: this.microsecondTimestamp,\n            duration: this.microsecondDuration,\n        });\n    }\n    /**\n     * Creates an EncodedPacket from an EncodedVideoChunk or EncodedAudioChunk. This method is useful for converting\n     * chunks from the WebCodecs API to EncodedPackets.\n     */\n    static fromEncodedChunk(chunk) {\n        if (!(chunk instanceof EncodedVideoChunk || chunk instanceof EncodedAudioChunk)) {\n            throw new TypeError('chunk must be an EncodedVideoChunk or EncodedAudioChunk.');\n        }\n        const data = new Uint8Array(chunk.byteLength);\n        chunk.copyTo(data);\n        return new EncodedPacket(data, chunk.type, chunk.timestamp / 1e6, (chunk.duration ?? 0) / 1e6);\n    }\n    /** Clones this packet while optionally updating timing information. */\n    clone(options) {\n        if (options !== undefined && (typeof options !== 'object' || options === null)) {\n            throw new TypeError('options, when provided, must be an object.');\n        }\n        if (options?.timestamp !== undefined && !Number.isFinite(options.timestamp)) {\n            throw new TypeError('options.timestamp, when provided, must be a number.');\n        }\n        if (options?.duration !== undefined && !Number.isFinite(options.duration)) {\n            throw new TypeError('options.duration, when provided, must be a number.');\n        }\n        return new EncodedPacket(this.data, this.type, options?.timestamp ?? this.timestamp, options?.duration ?? this.duration, this.sequenceNumber, this.byteLength);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/packet.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/pcm.js":
/*!*********************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/pcm.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromAlaw: function() { return /* binding */ fromAlaw; },\n/* harmony export */   fromUlaw: function() { return /* binding */ fromUlaw; },\n/* harmony export */   toAlaw: function() { return /* binding */ toAlaw; },\n/* harmony export */   toUlaw: function() { return /* binding */ toUlaw; }\n/* harmony export */ });\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n// https://github.com/dystopiancode/pcm-g711/blob/master/pcm-g711/g711.c\nconst toUlaw = (s16) => {\n    const MULAW_MAX = 0x1FFF;\n    const MULAW_BIAS = 33;\n    let number = s16;\n    let mask = 0x1000;\n    let sign = 0;\n    let position = 12;\n    let lsb = 0;\n    if (number < 0) {\n        number = -number;\n        sign = 0x80;\n    }\n    number += MULAW_BIAS;\n    if (number > MULAW_MAX) {\n        number = MULAW_MAX;\n    }\n    while ((number & mask) !== mask && position >= 5) {\n        mask >>= 1;\n        position--;\n    }\n    lsb = (number >> (position - 4)) & 0x0f;\n    return ~(sign | ((position - 5) << 4) | lsb) & 0xFF;\n};\nconst fromUlaw = (u8) => {\n    const MULAW_BIAS = 33;\n    let sign = 0;\n    let position = 0;\n    let number = ~u8;\n    if (number & 0x80) {\n        number &= ~(1 << 7);\n        sign = -1;\n    }\n    position = ((number & 0xF0) >> 4) + 5;\n    const decoded = ((1 << position) | ((number & 0x0F) << (position - 4))\n        | (1 << (position - 5))) - MULAW_BIAS;\n    return (sign === 0) ? decoded : -decoded;\n};\nconst toAlaw = (s16) => {\n    const ALAW_MAX = 0xFFF;\n    let mask = 0x800;\n    let sign = 0;\n    let position = 11;\n    let lsb = 0;\n    let number = s16;\n    if (number < 0) {\n        number = -number;\n        sign = 0x80;\n    }\n    if (number > ALAW_MAX) {\n        number = ALAW_MAX;\n    }\n    while ((number & mask) !== mask && position >= 5) {\n        mask >>= 1;\n        position--;\n    }\n    lsb = (number >> ((position === 4) ? 1 : (position - 4))) & 0x0f;\n    return (sign | ((position - 4) << 4) | lsb) ^ 0x55;\n};\nconst fromAlaw = (u8) => {\n    let sign = 0x00;\n    let position = 0;\n    let number = u8 ^ 0x55;\n    if (number & 0x80) {\n        number &= ~(1 << 7);\n        sign = -1;\n    }\n    position = ((number & 0xF0) >> 4) + 4;\n    let decoded = 0;\n    if (position !== 4) {\n        decoded = ((1 << position) | ((number & 0x0F) << (position - 4))\n            | (1 << (position - 5)));\n    }\n    else {\n        decoded = (number << 1) | 1;\n    }\n    return (sign === 0) ? decoded : -decoded;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvcGNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVkaWFidW5ueS9kaXN0L21vZHVsZXMvc3JjL3BjbS5qcz84NDZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDI1LXByZXNlbnQsIFZhbmlsYWd5IGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cbiAqL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2R5c3RvcGlhbmNvZGUvcGNtLWc3MTEvYmxvYi9tYXN0ZXIvcGNtLWc3MTEvZzcxMS5jXG5leHBvcnQgY29uc3QgdG9VbGF3ID0gKHMxNikgPT4ge1xuICAgIGNvbnN0IE1VTEFXX01BWCA9IDB4MUZGRjtcbiAgICBjb25zdCBNVUxBV19CSUFTID0gMzM7XG4gICAgbGV0IG51bWJlciA9IHMxNjtcbiAgICBsZXQgbWFzayA9IDB4MTAwMDtcbiAgICBsZXQgc2lnbiA9IDA7XG4gICAgbGV0IHBvc2l0aW9uID0gMTI7XG4gICAgbGV0IGxzYiA9IDA7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICAgICAgc2lnbiA9IDB4ODA7XG4gICAgfVxuICAgIG51bWJlciArPSBNVUxBV19CSUFTO1xuICAgIGlmIChudW1iZXIgPiBNVUxBV19NQVgpIHtcbiAgICAgICAgbnVtYmVyID0gTVVMQVdfTUFYO1xuICAgIH1cbiAgICB3aGlsZSAoKG51bWJlciAmIG1hc2spICE9PSBtYXNrICYmIHBvc2l0aW9uID49IDUpIHtcbiAgICAgICAgbWFzayA+Pj0gMTtcbiAgICAgICAgcG9zaXRpb24tLTtcbiAgICB9XG4gICAgbHNiID0gKG51bWJlciA+PiAocG9zaXRpb24gLSA0KSkgJiAweDBmO1xuICAgIHJldHVybiB+KHNpZ24gfCAoKHBvc2l0aW9uIC0gNSkgPDwgNCkgfCBsc2IpICYgMHhGRjtcbn07XG5leHBvcnQgY29uc3QgZnJvbVVsYXcgPSAodTgpID0+IHtcbiAgICBjb25zdCBNVUxBV19CSUFTID0gMzM7XG4gICAgbGV0IHNpZ24gPSAwO1xuICAgIGxldCBwb3NpdGlvbiA9IDA7XG4gICAgbGV0IG51bWJlciA9IH51ODtcbiAgICBpZiAobnVtYmVyICYgMHg4MCkge1xuICAgICAgICBudW1iZXIgJj0gfigxIDw8IDcpO1xuICAgICAgICBzaWduID0gLTE7XG4gICAgfVxuICAgIHBvc2l0aW9uID0gKChudW1iZXIgJiAweEYwKSA+PiA0KSArIDU7XG4gICAgY29uc3QgZGVjb2RlZCA9ICgoMSA8PCBwb3NpdGlvbikgfCAoKG51bWJlciAmIDB4MEYpIDw8IChwb3NpdGlvbiAtIDQpKVxuICAgICAgICB8ICgxIDw8IChwb3NpdGlvbiAtIDUpKSkgLSBNVUxBV19CSUFTO1xuICAgIHJldHVybiAoc2lnbiA9PT0gMCkgPyBkZWNvZGVkIDogLWRlY29kZWQ7XG59O1xuZXhwb3J0IGNvbnN0IHRvQWxhdyA9IChzMTYpID0+IHtcbiAgICBjb25zdCBBTEFXX01BWCA9IDB4RkZGO1xuICAgIGxldCBtYXNrID0gMHg4MDA7XG4gICAgbGV0IHNpZ24gPSAwO1xuICAgIGxldCBwb3NpdGlvbiA9IDExO1xuICAgIGxldCBsc2IgPSAwO1xuICAgIGxldCBudW1iZXIgPSBzMTY7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICAgICAgc2lnbiA9IDB4ODA7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiBBTEFXX01BWCkge1xuICAgICAgICBudW1iZXIgPSBBTEFXX01BWDtcbiAgICB9XG4gICAgd2hpbGUgKChudW1iZXIgJiBtYXNrKSAhPT0gbWFzayAmJiBwb3NpdGlvbiA+PSA1KSB7XG4gICAgICAgIG1hc2sgPj49IDE7XG4gICAgICAgIHBvc2l0aW9uLS07XG4gICAgfVxuICAgIGxzYiA9IChudW1iZXIgPj4gKChwb3NpdGlvbiA9PT0gNCkgPyAxIDogKHBvc2l0aW9uIC0gNCkpKSAmIDB4MGY7XG4gICAgcmV0dXJuIChzaWduIHwgKChwb3NpdGlvbiAtIDQpIDw8IDQpIHwgbHNiKSBeIDB4NTU7XG59O1xuZXhwb3J0IGNvbnN0IGZyb21BbGF3ID0gKHU4KSA9PiB7XG4gICAgbGV0IHNpZ24gPSAweDAwO1xuICAgIGxldCBwb3NpdGlvbiA9IDA7XG4gICAgbGV0IG51bWJlciA9IHU4IF4gMHg1NTtcbiAgICBpZiAobnVtYmVyICYgMHg4MCkge1xuICAgICAgICBudW1iZXIgJj0gfigxIDw8IDcpO1xuICAgICAgICBzaWduID0gLTE7XG4gICAgfVxuICAgIHBvc2l0aW9uID0gKChudW1iZXIgJiAweEYwKSA+PiA0KSArIDQ7XG4gICAgbGV0IGRlY29kZWQgPSAwO1xuICAgIGlmIChwb3NpdGlvbiAhPT0gNCkge1xuICAgICAgICBkZWNvZGVkID0gKCgxIDw8IHBvc2l0aW9uKSB8ICgobnVtYmVyICYgMHgwRikgPDwgKHBvc2l0aW9uIC0gNCkpXG4gICAgICAgICAgICB8ICgxIDw8IChwb3NpdGlvbiAtIDUpKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZWNvZGVkID0gKG51bWJlciA8PCAxKSB8IDE7XG4gICAgfVxuICAgIHJldHVybiAoc2lnbiA9PT0gMCkgPyBkZWNvZGVkIDogLWRlY29kZWQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/pcm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/reader.js":
/*!************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/reader.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileSlice: function() { return /* binding */ FileSlice; },\n/* harmony export */   Reader: function() { return /* binding */ Reader; },\n/* harmony export */   readAscii: function() { return /* binding */ readAscii; },\n/* harmony export */   readBytes: function() { return /* binding */ readBytes; },\n/* harmony export */   readF32Be: function() { return /* binding */ readF32Be; },\n/* harmony export */   readF64Be: function() { return /* binding */ readF64Be; },\n/* harmony export */   readI16Be: function() { return /* binding */ readI16Be; },\n/* harmony export */   readI32Be: function() { return /* binding */ readI32Be; },\n/* harmony export */   readI32Le: function() { return /* binding */ readI32Le; },\n/* harmony export */   readI64Be: function() { return /* binding */ readI64Be; },\n/* harmony export */   readI64Le: function() { return /* binding */ readI64Le; },\n/* harmony export */   readU16: function() { return /* binding */ readU16; },\n/* harmony export */   readU16Be: function() { return /* binding */ readU16Be; },\n/* harmony export */   readU24Be: function() { return /* binding */ readU24Be; },\n/* harmony export */   readU32: function() { return /* binding */ readU32; },\n/* harmony export */   readU32Be: function() { return /* binding */ readU32Be; },\n/* harmony export */   readU32Le: function() { return /* binding */ readU32Le; },\n/* harmony export */   readU64: function() { return /* binding */ readU64; },\n/* harmony export */   readU64Be: function() { return /* binding */ readU64Be; },\n/* harmony export */   readU8: function() { return /* binding */ readU8; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\nclass Reader {\n    constructor(source) {\n        this.source = source;\n    }\n    requestSlice(start, length) {\n        if (this.fileSize !== null && start + length > this.fileSize) {\n            return null;\n        }\n        const end = start + length;\n        const result = this.source._read(start, end);\n        if (result instanceof Promise) {\n            return result.then((x) => {\n                if (!x) {\n                    return null;\n                }\n                return new FileSlice(x.bytes, x.view, x.offset, start, end);\n            });\n        }\n        else {\n            if (!result) {\n                return null;\n            }\n            return new FileSlice(result.bytes, result.view, result.offset, start, end);\n        }\n    }\n    requestSliceRange(start, minLength, maxLength) {\n        if (this.fileSize !== null) {\n            return this.requestSlice(start, (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(this.fileSize - start, minLength, maxLength));\n        }\n        else {\n            const promisedAttempt = this.requestSlice(start, maxLength);\n            const handleAttempt = (attempt) => {\n                if (attempt) {\n                    return attempt;\n                }\n                const handleFileSize = (fileSize) => {\n                    (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(fileSize !== null); // The slice couldn't fit, meaning we must know the file size now\n                    return this.requestSlice(start, (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(fileSize - start, minLength, maxLength));\n                };\n                const promisedFileSize = this.source._retrieveSize();\n                if (promisedFileSize instanceof Promise) {\n                    return promisedFileSize.then(handleFileSize);\n                }\n                else {\n                    return handleFileSize(promisedFileSize);\n                }\n            };\n            if (promisedAttempt instanceof Promise) {\n                return promisedAttempt.then(handleAttempt);\n            }\n            else {\n                return handleAttempt(promisedAttempt);\n            }\n        }\n    }\n}\nclass FileSlice {\n    constructor(bytes, view, offset, start, end) {\n        this.bytes = bytes;\n        this.view = view;\n        this.offset = offset;\n        this.start = start;\n        this.end = end;\n        this.bufferPos = start - offset;\n    }\n    static tempFromBytes(bytes) {\n        return new FileSlice(bytes, (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toDataView)(bytes), 0, 0, bytes.length);\n    }\n    get length() {\n        return this.end - this.start;\n    }\n    get filePos() {\n        return this.offset + this.bufferPos;\n    }\n    set filePos(value) {\n        this.bufferPos = value - this.offset;\n    }\n    skip(byteCount) {\n        this.bufferPos += byteCount;\n    }\n    slice(filePos, length = this.end - filePos) {\n        if (filePos < this.start || filePos + length > this.end) {\n            throw new RangeError('Slicing outside of original slice.');\n        }\n        return new FileSlice(this.bytes, this.view, this.offset, filePos, filePos + length);\n    }\n}\nconst readBytes = (slice, length) => {\n    const bytes = slice.bytes.subarray(slice.bufferPos, slice.bufferPos + length);\n    slice.bufferPos += length;\n    return bytes;\n};\nconst readU8 = (slice) => slice.view.getUint8(slice.bufferPos++);\nconst readU16 = (slice, littleEndian) => {\n    const value = slice.view.getUint16(slice.bufferPos, littleEndian);\n    slice.bufferPos += 2;\n    return value;\n};\nconst readU16Be = (slice) => {\n    const value = slice.view.getUint16(slice.bufferPos, false);\n    slice.bufferPos += 2;\n    return value;\n};\nconst readU24Be = (slice) => {\n    const high = readU16Be(slice);\n    const low = readU8(slice);\n    return high * 0x100 + low;\n};\nconst readI16Be = (slice) => {\n    const value = slice.view.getInt16(slice.bufferPos, false);\n    slice.bufferPos += 2;\n    return value;\n};\nconst readU32 = (slice, littleEndian) => {\n    const value = slice.view.getUint32(slice.bufferPos, littleEndian);\n    slice.bufferPos += 4;\n    return value;\n};\nconst readU32Be = (slice) => {\n    const value = slice.view.getUint32(slice.bufferPos, false);\n    slice.bufferPos += 4;\n    return value;\n};\nconst readU32Le = (slice) => {\n    const value = slice.view.getUint32(slice.bufferPos, true);\n    slice.bufferPos += 4;\n    return value;\n};\nconst readI32Be = (slice) => {\n    const value = slice.view.getInt32(slice.bufferPos, false);\n    slice.bufferPos += 4;\n    return value;\n};\nconst readI32Le = (slice) => {\n    const value = slice.view.getInt32(slice.bufferPos, true);\n    slice.bufferPos += 4;\n    return value;\n};\nconst readU64 = (slice, littleEndian) => {\n    let low;\n    let high;\n    if (littleEndian) {\n        low = readU32(slice, true);\n        high = readU32(slice, true);\n    }\n    else {\n        high = readU32(slice, false);\n        low = readU32(slice, false);\n    }\n    return high * 0x100000000 + low;\n};\nconst readU64Be = (slice) => {\n    const high = readU32Be(slice);\n    const low = readU32Be(slice);\n    return high * 0x100000000 + low;\n};\nconst readI64Be = (slice) => {\n    const high = readI32Be(slice);\n    const low = readU32Be(slice);\n    return high * 0x100000000 + low;\n};\nconst readI64Le = (slice) => {\n    const low = readU32Le(slice);\n    const high = readI32Le(slice);\n    return high * 0x100000000 + low;\n};\nconst readF32Be = (slice) => {\n    const value = slice.view.getFloat32(slice.bufferPos, false);\n    slice.bufferPos += 4;\n    return value;\n};\nconst readF64Be = (slice) => {\n    const value = slice.view.getFloat64(slice.bufferPos, false);\n    slice.bufferPos += 8;\n    return value;\n};\nconst readAscii = (slice, length) => {\n    if (slice.bufferPos + length > slice.bytes.length) {\n        throw new RangeError('Reading past end of slice.');\n    }\n    let str = '';\n    for (let i = 0; i < length; i++) {\n        str += String.fromCharCode(slice.bytes[slice.bufferPos++]);\n    }\n    return str;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/reader.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/sample.js":
/*!************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/sample.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioSample: function() { return /* binding */ AudioSample; },\n/* harmony export */   VideoSample: function() { return /* binding */ VideoSample; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n/**\n * Represents a raw, unencoded video sample (frame). Mainly used as an expressive wrapper around WebCodecs API's\n * [`VideoFrame`](https://developer.mozilla.org/en-US/docs/Web/API/VideoFrame), but can also be used standalone.\n * @group Samples\n * @public\n */\nclass VideoSample {\n    /** The width of the frame in pixels after rotation. */\n    get displayWidth() {\n        return this.rotation % 180 === 0 ? this.codedWidth : this.codedHeight;\n    }\n    /** The height of the frame in pixels after rotation. */\n    get displayHeight() {\n        return this.rotation % 180 === 0 ? this.codedHeight : this.codedWidth;\n    }\n    /** The presentation timestamp of the frame in microseconds. */\n    get microsecondTimestamp() {\n        return Math.trunc(_misc_js__WEBPACK_IMPORTED_MODULE_0__.SECOND_TO_MICROSECOND_FACTOR * this.timestamp);\n    }\n    /** The duration of the frame in microseconds. */\n    get microsecondDuration() {\n        return Math.trunc(_misc_js__WEBPACK_IMPORTED_MODULE_0__.SECOND_TO_MICROSECOND_FACTOR * this.duration);\n    }\n    constructor(data, init) {\n        /** @internal */\n        this._closed = false;\n        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n            if (!init || typeof init !== 'object') {\n                throw new TypeError('init must be an object.');\n            }\n            if (!('format' in init) || typeof init.format !== 'string') {\n                throw new TypeError('init.format must be a string.');\n            }\n            if (!Number.isInteger(init.codedWidth) || init.codedWidth <= 0) {\n                throw new TypeError('init.codedWidth must be a positive integer.');\n            }\n            if (!Number.isInteger(init.codedHeight) || init.codedHeight <= 0) {\n                throw new TypeError('init.codedHeight must be a positive integer.');\n            }\n            if (init.rotation !== undefined && ![0, 90, 180, 270].includes(init.rotation)) {\n                throw new TypeError('init.rotation, when provided, must be 0, 90, 180, or 270.');\n            }\n            if (!Number.isFinite(init.timestamp)) {\n                throw new TypeError('init.timestamp must be a number.');\n            }\n            if (init.duration !== undefined && (!Number.isFinite(init.duration) || init.duration < 0)) {\n                throw new TypeError('init.duration, when provided, must be a non-negative number.');\n            }\n            this._data = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toUint8Array)(data).slice(); // Copy it\n            this.format = init.format;\n            this.codedWidth = init.codedWidth;\n            this.codedHeight = init.codedHeight;\n            this.rotation = init.rotation ?? 0;\n            this.timestamp = init.timestamp;\n            this.duration = init.duration ?? 0;\n            this.colorSpace = new VideoColorSpace(init.colorSpace);\n        }\n        else if (typeof VideoFrame !== 'undefined' && data instanceof VideoFrame) {\n            if (init?.rotation !== undefined && ![0, 90, 180, 270].includes(init.rotation)) {\n                throw new TypeError('init.rotation, when provided, must be 0, 90, 180, or 270.');\n            }\n            if (init?.timestamp !== undefined && !Number.isFinite(init?.timestamp)) {\n                throw new TypeError('init.timestamp, when provided, must be a number.');\n            }\n            if (init?.duration !== undefined && (!Number.isFinite(init.duration) || init.duration < 0)) {\n                throw new TypeError('init.duration, when provided, must be a non-negative number.');\n            }\n            this._data = data;\n            this.format = data.format;\n            // Copying the display dimensions here, assuming no innate VideoFrame rotation\n            this.codedWidth = data.displayWidth;\n            this.codedHeight = data.displayHeight;\n            // The VideoFrame's rotation is ignored here. It's still a new field, and I'm not sure of any application\n            // where the browser makes use of it. If a case gets found, I'll add it.\n            this.rotation = init?.rotation ?? 0;\n            this.timestamp = init?.timestamp ?? data.timestamp / 1e6;\n            this.duration = init?.duration ?? (data.duration ?? 0) / 1e6;\n            this.colorSpace = data.colorSpace;\n        }\n        else if ((typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement)\n            || (typeof SVGImageElement !== 'undefined' && data instanceof SVGImageElement)\n            || (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap)\n            || (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement)\n            || (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement)\n            || (typeof OffscreenCanvas !== 'undefined' && data instanceof OffscreenCanvas)) {\n            if (!init || typeof init !== 'object') {\n                throw new TypeError('init must be an object.');\n            }\n            if (init.rotation !== undefined && ![0, 90, 180, 270].includes(init.rotation)) {\n                throw new TypeError('init.rotation, when provided, must be 0, 90, 180, or 270.');\n            }\n            if (!Number.isFinite(init.timestamp)) {\n                throw new TypeError('init.timestamp must be a number.');\n            }\n            if (init.duration !== undefined && (!Number.isFinite(init.duration) || init.duration < 0)) {\n                throw new TypeError('init.duration, when provided, must be a non-negative number.');\n            }\n            if (typeof VideoFrame !== 'undefined') {\n                return new VideoSample(new VideoFrame(data, {\n                    timestamp: Math.trunc(init.timestamp * _misc_js__WEBPACK_IMPORTED_MODULE_0__.SECOND_TO_MICROSECOND_FACTOR),\n                    duration: Math.trunc((init.duration ?? 0) * _misc_js__WEBPACK_IMPORTED_MODULE_0__.SECOND_TO_MICROSECOND_FACTOR),\n                }), init);\n            }\n            let width = 0;\n            let height = 0;\n            // Determine the dimensions of the thing\n            if ('naturalWidth' in data) {\n                width = data.naturalWidth;\n                height = data.naturalHeight;\n            }\n            else if ('videoWidth' in data) {\n                width = data.videoWidth;\n                height = data.videoHeight;\n            }\n            else if ('width' in data) {\n                width = Number(data.width);\n                height = Number(data.height);\n            }\n            if (!width || !height) {\n                throw new TypeError('Could not determine dimensions.');\n            }\n            const canvas = new OffscreenCanvas(width, height);\n            const context = canvas.getContext('2d', { alpha: false, willReadFrequently: true });\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(context);\n            // Draw it to a canvas\n            context.drawImage(data, 0, 0);\n            this._data = canvas;\n            this.format = 'RGBX';\n            this.codedWidth = width;\n            this.codedHeight = height;\n            this.rotation = init.rotation ?? 0;\n            this.timestamp = init.timestamp;\n            this.duration = init.duration ?? 0;\n            this.colorSpace = new VideoColorSpace({\n                matrix: 'rgb',\n                primaries: 'bt709',\n                transfer: 'iec61966-2-1',\n                fullRange: true,\n            });\n        }\n        else {\n            throw new TypeError('Invalid data type: Must be a BufferSource or CanvasImageSource.');\n        }\n    }\n    /** Clones this video sample. */\n    clone() {\n        if (this._closed) {\n            throw new Error('VideoSample is closed.');\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this._data !== null);\n        if (isVideoFrame(this._data)) {\n            return new VideoSample(this._data.clone(), {\n                timestamp: this.timestamp,\n                duration: this.duration,\n                rotation: this.rotation,\n            });\n        }\n        else if (this._data instanceof Uint8Array) {\n            return new VideoSample(this._data.slice(), {\n                format: this.format,\n                codedWidth: this.codedWidth,\n                codedHeight: this.codedHeight,\n                timestamp: this.timestamp,\n                duration: this.duration,\n                colorSpace: this.colorSpace,\n                rotation: this.rotation,\n            });\n        }\n        else {\n            return new VideoSample(this._data, {\n                format: this.format,\n                codedWidth: this.codedWidth,\n                codedHeight: this.codedHeight,\n                timestamp: this.timestamp,\n                duration: this.duration,\n                colorSpace: this.colorSpace,\n                rotation: this.rotation,\n            });\n        }\n    }\n    /**\n     * Closes this video sample, releasing held resources. Video samples should be closed as soon as they are not\n     * needed anymore.\n     */\n    close() {\n        if (this._closed) {\n            return;\n        }\n        if (isVideoFrame(this._data)) {\n            this._data.close();\n        }\n        else {\n            this._data = null; // GC that shit\n        }\n        this._closed = true;\n    }\n    /** Returns the number of bytes required to hold this video sample's pixel data. */\n    allocationSize() {\n        if (this._closed) {\n            throw new Error('VideoSample is closed.');\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this._data !== null);\n        if (isVideoFrame(this._data)) {\n            return this._data.allocationSize();\n        }\n        else if (this._data instanceof Uint8Array) {\n            return this._data.byteLength;\n        }\n        else {\n            return this.codedWidth * this.codedHeight * 4; // RGBX\n        }\n    }\n    /** Copies this video sample's pixel data to an ArrayBuffer or ArrayBufferView. */\n    async copyTo(destination) {\n        if (!(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isAllowSharedBufferSource)(destination)) {\n            throw new TypeError('destination must be an ArrayBuffer or an ArrayBuffer view.');\n        }\n        if (this._closed) {\n            throw new Error('VideoSample is closed.');\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this._data !== null);\n        if (isVideoFrame(this._data)) {\n            await this._data.copyTo(destination);\n        }\n        else if (this._data instanceof Uint8Array) {\n            const dest = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toUint8Array)(destination);\n            dest.set(this._data);\n        }\n        else {\n            const canvas = this._data;\n            const context = canvas.getContext('2d', { alpha: false });\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(context);\n            const imageData = context.getImageData(0, 0, this.codedWidth, this.codedHeight);\n            const dest = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toUint8Array)(destination);\n            dest.set(imageData.data);\n        }\n    }\n    /**\n     * Converts this video sample to a VideoFrame for use with the WebCodecs API. The VideoFrame returned by this\n     * method *must* be closed separately from this video sample.\n     */\n    toVideoFrame() {\n        if (this._closed) {\n            throw new Error('VideoSample is closed.');\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this._data !== null);\n        if (isVideoFrame(this._data)) {\n            return new VideoFrame(this._data, {\n                timestamp: this.microsecondTimestamp,\n                duration: this.microsecondDuration || undefined, // Drag 0 duration to undefined, glitches some codecs\n            });\n        }\n        else if (this._data instanceof Uint8Array) {\n            return new VideoFrame(this._data, {\n                format: this.format,\n                codedWidth: this.codedWidth,\n                codedHeight: this.codedHeight,\n                timestamp: this.microsecondTimestamp,\n                duration: this.microsecondDuration,\n                colorSpace: this.colorSpace,\n            });\n        }\n        else {\n            return new VideoFrame(this._data, {\n                timestamp: this.microsecondTimestamp,\n                duration: this.microsecondDuration,\n            });\n        }\n    }\n    draw(context, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {\n        let sx = 0;\n        let sy = 0;\n        let sWidth = this.displayWidth;\n        let sHeight = this.displayHeight;\n        let dx = 0;\n        let dy = 0;\n        let dWidth = this.displayWidth;\n        let dHeight = this.displayHeight;\n        if (arg5 !== undefined) {\n            sx = arg1;\n            sy = arg2;\n            sWidth = arg3;\n            sHeight = arg4;\n            dx = arg5;\n            dy = arg6;\n            if (arg7 !== undefined) {\n                dWidth = arg7;\n                dHeight = arg8;\n            }\n            else {\n                dWidth = sWidth;\n                dHeight = sHeight;\n            }\n        }\n        else {\n            dx = arg1;\n            dy = arg2;\n            if (arg3 !== undefined) {\n                dWidth = arg3;\n                dHeight = arg4;\n            }\n        }\n        if (!((typeof CanvasRenderingContext2D !== 'undefined' && context instanceof CanvasRenderingContext2D)\n            || (typeof OffscreenCanvasRenderingContext2D !== 'undefined'\n                && context instanceof OffscreenCanvasRenderingContext2D))) {\n            throw new TypeError('context must be a CanvasRenderingContext2D or OffscreenCanvasRenderingContext2D.');\n        }\n        if (!Number.isFinite(sx)) {\n            throw new TypeError('sx must be a number.');\n        }\n        if (!Number.isFinite(sy)) {\n            throw new TypeError('sy must be a number.');\n        }\n        if (!Number.isFinite(sWidth) || sWidth < 0) {\n            throw new TypeError('sWidth must be a non-negative number.');\n        }\n        if (!Number.isFinite(sHeight) || sHeight < 0) {\n            throw new TypeError('sHeight must be a non-negative number.');\n        }\n        if (!Number.isFinite(dx)) {\n            throw new TypeError('dx must be a number.');\n        }\n        if (!Number.isFinite(dy)) {\n            throw new TypeError('dy must be a number.');\n        }\n        if (!Number.isFinite(dWidth) || dWidth < 0) {\n            throw new TypeError('dWidth must be a non-negative number.');\n        }\n        if (!Number.isFinite(dHeight) || dHeight < 0) {\n            throw new TypeError('dHeight must be a non-negative number.');\n        }\n        if (this._closed) {\n            throw new Error('VideoSample is closed.');\n        }\n        // The provided sx,sy,sWidth,sHeight refer to the final rotated image, but that's not actually how the image is\n        // stored. Therefore, we must map these back onto the original, pre-rotation image.\n        if (this.rotation === 90) {\n            [sx, sy, sWidth, sHeight] = [\n                sy,\n                this.codedHeight - sx - sWidth,\n                sHeight,\n                sWidth,\n            ];\n        }\n        else if (this.rotation === 180) {\n            [sx, sy] = [\n                this.codedWidth - sx - sWidth,\n                this.codedHeight - sy - sHeight,\n            ];\n        }\n        else if (this.rotation === 270) {\n            [sx, sy, sWidth, sHeight] = [\n                this.codedWidth - sy - sHeight,\n                sx,\n                sHeight,\n                sWidth,\n            ];\n        }\n        const source = this.toCanvasImageSource();\n        context.save();\n        const centerX = dx + dWidth / 2;\n        const centerY = dy + dHeight / 2;\n        context.translate(centerX, centerY);\n        context.rotate(this.rotation * Math.PI / 180);\n        const aspectRatioChange = this.rotation % 180 === 0 ? 1 : dWidth / dHeight;\n        // Scale to compensate for aspect ratio changes when rotated\n        context.scale(1 / aspectRatioChange, aspectRatioChange);\n        context.drawImage(source, sx, sy, sWidth, sHeight, -dWidth / 2, -dHeight / 2, dWidth, dHeight);\n        // Restore the previous transformation state\n        context.restore();\n    }\n    /**\n     * Draws the sample in the middle of the canvas corresponding to the context with the specified fit behavior.\n     */\n    drawWithFit(context, options) {\n        const canvasWidth = context.canvas.width;\n        const canvasHeight = context.canvas.height;\n        const rotation = options.rotation ?? this.rotation;\n        // These variables specify where the final sample will be drawn on the canvas\n        let dx;\n        let dy;\n        let newWidth;\n        let newHeight;\n        if (options.fit === 'fill') {\n            dx = 0;\n            dy = 0;\n            newWidth = canvasWidth;\n            newHeight = canvasHeight;\n        }\n        else {\n            const [sampleWidth, sampleHeight] = rotation % 180 === 0\n                ? [this.codedWidth, this.codedHeight]\n                : [this.codedHeight, this.codedWidth];\n            const scale = options.fit === 'contain'\n                ? Math.min(canvasWidth / sampleWidth, canvasHeight / sampleHeight)\n                : Math.max(canvasWidth / sampleWidth, canvasHeight / sampleHeight);\n            newWidth = sampleWidth * scale;\n            newHeight = sampleHeight * scale;\n            dx = (canvasWidth - newWidth) / 2;\n            dy = (canvasHeight - newHeight) / 2;\n        }\n        const aspectRatioChange = rotation % 180 === 0 ? 1 : newWidth / newHeight;\n        context.translate(canvasWidth / 2, canvasHeight / 2);\n        context.rotate(rotation * Math.PI / 180);\n        // This aspect ratio compensation is done so that we can draw the sample with the intended dimensions and\n        // don't need to think about how those dimensions change after the rotation\n        context.scale(1 / aspectRatioChange, aspectRatioChange);\n        context.translate(-canvasWidth / 2, -canvasHeight / 2);\n        // Important that we don't use .draw() here since that would take rotation into account, but we wanna handle it\n        // ourselves here\n        context.drawImage(this.toCanvasImageSource(), dx, dy, newWidth, newHeight);\n    }\n    /**\n     * Converts this video sample to a\n     * [`CanvasImageSource`](https://udn.realityripple.com/docs/Web/API/CanvasImageSource) for drawing to a canvas.\n     *\n     * You must use the value returned by this method immediately, as any VideoFrame created internally will\n     * automatically be closed in the next microtask.\n     */\n    toCanvasImageSource() {\n        if (this._closed) {\n            throw new Error('VideoSample is closed.');\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this._data !== null);\n        if (this._data instanceof Uint8Array) {\n            // Requires VideoFrame to be defined\n            const videoFrame = this.toVideoFrame();\n            queueMicrotask(() => videoFrame.close()); // Let's automatically close the frame in the next microtask\n            return videoFrame;\n        }\n        else {\n            return this._data;\n        }\n    }\n    /** Sets the rotation metadata of this video sample. */\n    setRotation(newRotation) {\n        if (![0, 90, 180, 270].includes(newRotation)) {\n            throw new TypeError('newRotation must be 0, 90, 180, or 270.');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        this.rotation = newRotation;\n    }\n    /** Sets the presentation timestamp of this video sample, in seconds. */\n    setTimestamp(newTimestamp) {\n        if (!Number.isFinite(newTimestamp)) {\n            throw new TypeError('newTimestamp must be a number.');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        this.timestamp = newTimestamp;\n    }\n    /** Sets the duration of this video sample, in seconds. */\n    setDuration(newDuration) {\n        if (!Number.isFinite(newDuration) || newDuration < 0) {\n            throw new TypeError('newDuration must be a non-negative number.');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        this.duration = newDuration;\n    }\n}\nconst isVideoFrame = (x) => {\n    return typeof VideoFrame !== 'undefined' && x instanceof VideoFrame;\n};\nconst AUDIO_SAMPLE_FORMATS = new Set(['f32', 'f32-planar', 's16', 's16-planar', 's32', 's32-planar', 'u8', 'u8-planar']);\n/**\n * Represents a raw, unencoded audio sample. Mainly used as an expressive wrapper around WebCodecs API's\n * [`AudioData`](https://developer.mozilla.org/en-US/docs/Web/API/AudioData), but can also be used standalone.\n * @group Samples\n * @public\n */\nclass AudioSample {\n    /** The presentation timestamp of the sample in microseconds. */\n    get microsecondTimestamp() {\n        return Math.trunc(_misc_js__WEBPACK_IMPORTED_MODULE_0__.SECOND_TO_MICROSECOND_FACTOR * this.timestamp);\n    }\n    /** The duration of the sample in microseconds. */\n    get microsecondDuration() {\n        return Math.trunc(_misc_js__WEBPACK_IMPORTED_MODULE_0__.SECOND_TO_MICROSECOND_FACTOR * this.duration);\n    }\n    /**\n     * Creates a new {@link AudioSample}, either from an existing\n     * [`AudioData`](https://developer.mozilla.org/en-US/docs/Web/API/AudioData) or from raw bytes specified in\n     * {@link AudioSampleInit}.\n     */\n    constructor(init) {\n        /** @internal */\n        this._closed = false;\n        if (isAudioData(init)) {\n            if (init.format === null) {\n                throw new TypeError('AudioData with null format is not supported.');\n            }\n            this._data = init;\n            this.format = init.format;\n            this.sampleRate = init.sampleRate;\n            this.numberOfFrames = init.numberOfFrames;\n            this.numberOfChannels = init.numberOfChannels;\n            this.timestamp = init.timestamp / 1e6;\n            this.duration = init.numberOfFrames / init.sampleRate;\n        }\n        else {\n            if (!init || typeof init !== 'object') {\n                throw new TypeError('Invalid AudioDataInit: must be an object.');\n            }\n            if (!AUDIO_SAMPLE_FORMATS.has(init.format)) {\n                throw new TypeError('Invalid AudioDataInit: invalid format.');\n            }\n            if (!Number.isFinite(init.sampleRate) || init.sampleRate <= 0) {\n                throw new TypeError('Invalid AudioDataInit: sampleRate must be > 0.');\n            }\n            if (!Number.isInteger(init.numberOfChannels) || init.numberOfChannels === 0) {\n                throw new TypeError('Invalid AudioDataInit: numberOfChannels must be an integer > 0.');\n            }\n            if (!Number.isFinite(init?.timestamp)) {\n                throw new TypeError('init.timestamp must be a number.');\n            }\n            const numberOfFrames = init.data.byteLength / (getBytesPerSample(init.format) * init.numberOfChannels);\n            if (!Number.isInteger(numberOfFrames)) {\n                throw new TypeError('Invalid AudioDataInit: data size is not a multiple of frame size.');\n            }\n            this.format = init.format;\n            this.sampleRate = init.sampleRate;\n            this.numberOfFrames = numberOfFrames;\n            this.numberOfChannels = init.numberOfChannels;\n            this.timestamp = init.timestamp;\n            this.duration = numberOfFrames / init.sampleRate;\n            let dataBuffer;\n            if (init.data instanceof ArrayBuffer) {\n                dataBuffer = new Uint8Array(init.data);\n            }\n            else if (ArrayBuffer.isView(init.data)) {\n                dataBuffer = new Uint8Array(init.data.buffer, init.data.byteOffset, init.data.byteLength);\n            }\n            else {\n                throw new TypeError('Invalid AudioDataInit: data is not a BufferSource.');\n            }\n            const expectedSize = this.numberOfFrames * this.numberOfChannels * getBytesPerSample(this.format);\n            if (dataBuffer.byteLength < expectedSize) {\n                throw new TypeError('Invalid AudioDataInit: insufficient data size.');\n            }\n            this._data = dataBuffer;\n        }\n    }\n    /** Returns the number of bytes required to hold the audio sample's data as specified by the given options. */\n    allocationSize(options) {\n        if (!options || typeof options !== 'object') {\n            throw new TypeError('options must be an object.');\n        }\n        if (!Number.isInteger(options.planeIndex) || options.planeIndex < 0) {\n            throw new TypeError('planeIndex must be a non-negative integer.');\n        }\n        if (options.format !== undefined && !AUDIO_SAMPLE_FORMATS.has(options.format)) {\n            throw new TypeError('Invalid format.');\n        }\n        if (options.frameOffset !== undefined && (!Number.isInteger(options.frameOffset) || options.frameOffset < 0)) {\n            throw new TypeError('frameOffset must be a non-negative integer.');\n        }\n        if (options.frameCount !== undefined && (!Number.isInteger(options.frameCount) || options.frameCount < 0)) {\n            throw new TypeError('frameCount must be a non-negative integer.');\n        }\n        if (this._closed) {\n            throw new Error('AudioSample is closed.');\n        }\n        const destFormat = options.format ?? this.format;\n        const frameOffset = options.frameOffset ?? 0;\n        if (frameOffset >= this.numberOfFrames) {\n            throw new RangeError('frameOffset out of range');\n        }\n        const copyFrameCount = options.frameCount !== undefined ? options.frameCount : (this.numberOfFrames - frameOffset);\n        if (copyFrameCount > (this.numberOfFrames - frameOffset)) {\n            throw new RangeError('frameCount out of range');\n        }\n        const bytesPerSample = getBytesPerSample(destFormat);\n        const isPlanar = formatIsPlanar(destFormat);\n        if (isPlanar && options.planeIndex >= this.numberOfChannels) {\n            throw new RangeError('planeIndex out of range');\n        }\n        if (!isPlanar && options.planeIndex !== 0) {\n            throw new RangeError('planeIndex out of range');\n        }\n        const elementCount = isPlanar ? copyFrameCount : copyFrameCount * this.numberOfChannels;\n        return elementCount * bytesPerSample;\n    }\n    /** Copies the audio sample's data to an ArrayBuffer or ArrayBufferView as specified by the given options. */\n    copyTo(destination, options) {\n        if (!(0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isAllowSharedBufferSource)(destination)) {\n            throw new TypeError('destination must be an ArrayBuffer or an ArrayBuffer view.');\n        }\n        if (!options || typeof options !== 'object') {\n            throw new TypeError('options must be an object.');\n        }\n        if (!Number.isInteger(options.planeIndex) || options.planeIndex < 0) {\n            throw new TypeError('planeIndex must be a non-negative integer.');\n        }\n        if (options.format !== undefined && !AUDIO_SAMPLE_FORMATS.has(options.format)) {\n            throw new TypeError('Invalid format.');\n        }\n        if (options.frameOffset !== undefined && (!Number.isInteger(options.frameOffset) || options.frameOffset < 0)) {\n            throw new TypeError('frameOffset must be a non-negative integer.');\n        }\n        if (options.frameCount !== undefined && (!Number.isInteger(options.frameCount) || options.frameCount < 0)) {\n            throw new TypeError('frameCount must be a non-negative integer.');\n        }\n        if (this._closed) {\n            throw new Error('AudioSample is closed.');\n        }\n        const { planeIndex, format, frameCount: optFrameCount, frameOffset: optFrameOffset } = options;\n        const destFormat = format ?? this.format;\n        if (!destFormat)\n            throw new Error('Destination format not determined');\n        const numFrames = this.numberOfFrames;\n        const numChannels = this.numberOfChannels;\n        const frameOffset = optFrameOffset ?? 0;\n        if (frameOffset >= numFrames) {\n            throw new RangeError('frameOffset out of range');\n        }\n        const copyFrameCount = optFrameCount !== undefined ? optFrameCount : (numFrames - frameOffset);\n        if (copyFrameCount > (numFrames - frameOffset)) {\n            throw new RangeError('frameCount out of range');\n        }\n        const destBytesPerSample = getBytesPerSample(destFormat);\n        const destIsPlanar = formatIsPlanar(destFormat);\n        if (destIsPlanar && planeIndex >= numChannels) {\n            throw new RangeError('planeIndex out of range');\n        }\n        if (!destIsPlanar && planeIndex !== 0) {\n            throw new RangeError('planeIndex out of range');\n        }\n        const destElementCount = destIsPlanar ? copyFrameCount : copyFrameCount * numChannels;\n        const requiredSize = destElementCount * destBytesPerSample;\n        if (destination.byteLength < requiredSize) {\n            throw new RangeError('Destination buffer is too small');\n        }\n        const destView = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.toDataView)(destination);\n        const writeFn = getWriteFunction(destFormat);\n        if (isAudioData(this._data)) {\n            if (destIsPlanar) {\n                if (destFormat === 'f32-planar') {\n                    // Simple, since the browser must support f32-planar, we can just delegate here\n                    this._data.copyTo(destination, {\n                        planeIndex,\n                        frameOffset,\n                        frameCount: copyFrameCount,\n                        format: 'f32-planar',\n                    });\n                }\n                else {\n                    // Allocate temporary buffer for f32-planar data\n                    const tempBuffer = new ArrayBuffer(copyFrameCount * 4);\n                    const tempArray = new Float32Array(tempBuffer);\n                    this._data.copyTo(tempArray, {\n                        planeIndex,\n                        frameOffset,\n                        frameCount: copyFrameCount,\n                        format: 'f32-planar',\n                    });\n                    // Convert each f32 sample to destination format\n                    const tempView = new DataView(tempBuffer);\n                    for (let i = 0; i < copyFrameCount; i++) {\n                        const destOffset = i * destBytesPerSample;\n                        const sample = tempView.getFloat32(i * 4, true);\n                        writeFn(destView, destOffset, sample);\n                    }\n                }\n            }\n            else {\n                // Destination is interleaved.\n                // Allocate a temporary Float32Array to hold one channel's worth of data.\n                const numCh = numChannels;\n                const temp = new Float32Array(copyFrameCount);\n                for (let ch = 0; ch < numCh; ch++) {\n                    this._data.copyTo(temp, {\n                        planeIndex: ch,\n                        frameOffset,\n                        frameCount: copyFrameCount,\n                        format: 'f32-planar',\n                    });\n                    for (let i = 0; i < copyFrameCount; i++) {\n                        const destIndex = i * numCh + ch;\n                        const destOffset = destIndex * destBytesPerSample;\n                        writeFn(destView, destOffset, temp[i]);\n                    }\n                }\n            }\n        }\n        else {\n            // Branch for Uint8Array data (non-AudioData)\n            const uint8Data = this._data;\n            const srcView = new DataView(uint8Data.buffer, uint8Data.byteOffset, uint8Data.byteLength);\n            const srcFormat = this.format;\n            const readFn = getReadFunction(srcFormat);\n            const srcBytesPerSample = getBytesPerSample(srcFormat);\n            const srcIsPlanar = formatIsPlanar(srcFormat);\n            for (let i = 0; i < copyFrameCount; i++) {\n                if (destIsPlanar) {\n                    const destOffset = i * destBytesPerSample;\n                    let srcOffset;\n                    if (srcIsPlanar) {\n                        srcOffset = (planeIndex * numFrames + (i + frameOffset)) * srcBytesPerSample;\n                    }\n                    else {\n                        srcOffset = (((i + frameOffset) * numChannels) + planeIndex) * srcBytesPerSample;\n                    }\n                    const normalized = readFn(srcView, srcOffset);\n                    writeFn(destView, destOffset, normalized);\n                }\n                else {\n                    for (let ch = 0; ch < numChannels; ch++) {\n                        const destIndex = i * numChannels + ch;\n                        const destOffset = destIndex * destBytesPerSample;\n                        let srcOffset;\n                        if (srcIsPlanar) {\n                            srcOffset = (ch * numFrames + (i + frameOffset)) * srcBytesPerSample;\n                        }\n                        else {\n                            srcOffset = (((i + frameOffset) * numChannels) + ch) * srcBytesPerSample;\n                        }\n                        const normalized = readFn(srcView, srcOffset);\n                        writeFn(destView, destOffset, normalized);\n                    }\n                }\n            }\n        }\n    }\n    /** Clones this audio sample. */\n    clone() {\n        if (this._closed) {\n            throw new Error('AudioSample is closed.');\n        }\n        if (isAudioData(this._data)) {\n            const sample = new AudioSample(this._data.clone());\n            sample.setTimestamp(this.timestamp); // Make sure the timestamp is precise (beyond microsecond accuracy)\n            return sample;\n        }\n        else {\n            return new AudioSample({\n                format: this.format,\n                sampleRate: this.sampleRate,\n                numberOfFrames: this.numberOfFrames,\n                numberOfChannels: this.numberOfChannels,\n                timestamp: this.timestamp,\n                data: this._data,\n            });\n        }\n    }\n    /**\n     * Closes this audio sample, releasing held resources. Audio samples should be closed as soon as they are not\n     * needed anymore.\n     */\n    close() {\n        if (this._closed) {\n            return;\n        }\n        if (isAudioData(this._data)) {\n            this._data.close();\n        }\n        else {\n            this._data = new Uint8Array(0);\n        }\n        this._closed = true;\n    }\n    /**\n     * Converts this audio sample to an AudioData for use with the WebCodecs API. The AudioData returned by this\n     * method *must* be closed separately from this audio sample.\n     */\n    toAudioData() {\n        if (this._closed) {\n            throw new Error('AudioSample is closed.');\n        }\n        if (isAudioData(this._data)) {\n            if (this._data.timestamp === this.microsecondTimestamp) {\n                // Timestamp matches, let's just return the data (but cloned)\n                return this._data.clone();\n            }\n            else {\n                // It's impossible to simply change an AudioData's timestamp, so we'll need to create a new one\n                if (formatIsPlanar(this.format)) {\n                    const size = this.allocationSize({ planeIndex: 0, format: this.format });\n                    const data = new ArrayBuffer(size * this.numberOfChannels);\n                    // We gotta read out each plane individually\n                    for (let i = 0; i < this.numberOfChannels; i++) {\n                        this.copyTo(new Uint8Array(data, i * size, size), { planeIndex: i, format: this.format });\n                    }\n                    return new AudioData({\n                        format: this.format,\n                        sampleRate: this.sampleRate,\n                        numberOfFrames: this.numberOfFrames,\n                        numberOfChannels: this.numberOfChannels,\n                        timestamp: this.microsecondTimestamp,\n                        data,\n                    });\n                }\n                else {\n                    const data = new ArrayBuffer(this.allocationSize({ planeIndex: 0, format: this.format }));\n                    this.copyTo(data, { planeIndex: 0, format: this.format });\n                    return new AudioData({\n                        format: this.format,\n                        sampleRate: this.sampleRate,\n                        numberOfFrames: this.numberOfFrames,\n                        numberOfChannels: this.numberOfChannels,\n                        timestamp: this.microsecondTimestamp,\n                        data,\n                    });\n                }\n            }\n        }\n        else {\n            return new AudioData({\n                format: this.format,\n                sampleRate: this.sampleRate,\n                numberOfFrames: this.numberOfFrames,\n                numberOfChannels: this.numberOfChannels,\n                timestamp: this.microsecondTimestamp,\n                data: this._data,\n            });\n        }\n    }\n    /** Convert this audio sample to an AudioBuffer for use with the Web Audio API. */\n    toAudioBuffer() {\n        if (this._closed) {\n            throw new Error('AudioSample is closed.');\n        }\n        const audioBuffer = new AudioBuffer({\n            numberOfChannels: this.numberOfChannels,\n            length: this.numberOfFrames,\n            sampleRate: this.sampleRate,\n        });\n        const dataBytes = new Float32Array(this.allocationSize({ planeIndex: 0, format: 'f32-planar' }) / 4);\n        for (let i = 0; i < this.numberOfChannels; i++) {\n            this.copyTo(dataBytes, { planeIndex: i, format: 'f32-planar' });\n            audioBuffer.copyToChannel(dataBytes, i);\n        }\n        return audioBuffer;\n    }\n    /** Sets the presentation timestamp of this audio sample, in seconds. */\n    setTimestamp(newTimestamp) {\n        if (!Number.isFinite(newTimestamp)) {\n            throw new TypeError('newTimestamp must be a number.');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        this.timestamp = newTimestamp;\n    }\n    /** @internal */\n    static *_fromAudioBuffer(audioBuffer, timestamp) {\n        if (!(audioBuffer instanceof AudioBuffer)) {\n            throw new TypeError('audioBuffer must be an AudioBuffer.');\n        }\n        const MAX_FLOAT_COUNT = 48000 * 5; // 5 seconds of mono 48 kHz audio per sample\n        const numberOfChannels = audioBuffer.numberOfChannels;\n        const sampleRate = audioBuffer.sampleRate;\n        const totalFrames = audioBuffer.length;\n        const maxFramesPerChunk = Math.floor(MAX_FLOAT_COUNT / numberOfChannels);\n        let currentRelativeFrame = 0;\n        let remainingFrames = totalFrames;\n        // Create AudioSamples in a chunked fashion so we don't create huge Float32Arrays\n        while (remainingFrames > 0) {\n            const framesToCopy = Math.min(maxFramesPerChunk, remainingFrames);\n            const chunkData = new Float32Array(numberOfChannels * framesToCopy);\n            for (let channel = 0; channel < numberOfChannels; channel++) {\n                audioBuffer.copyFromChannel(chunkData.subarray(channel * framesToCopy, (channel + 1) * framesToCopy), channel, currentRelativeFrame);\n            }\n            yield new AudioSample({\n                format: 'f32-planar',\n                sampleRate,\n                numberOfFrames: framesToCopy,\n                numberOfChannels,\n                timestamp: timestamp + currentRelativeFrame / sampleRate,\n                data: chunkData,\n            });\n            currentRelativeFrame += framesToCopy;\n            remainingFrames -= framesToCopy;\n        }\n    }\n    /**\n     * Creates AudioSamples from an AudioBuffer, starting at the given timestamp in seconds. Typically creates exactly\n     * one sample, but may create multiple if the AudioBuffer is exceedingly large.\n     */\n    static fromAudioBuffer(audioBuffer, timestamp) {\n        if (!(audioBuffer instanceof AudioBuffer)) {\n            throw new TypeError('audioBuffer must be an AudioBuffer.');\n        }\n        const MAX_FLOAT_COUNT = 48000 * 5; // 5 seconds of mono 48 kHz audio per sample\n        const numberOfChannels = audioBuffer.numberOfChannels;\n        const sampleRate = audioBuffer.sampleRate;\n        const totalFrames = audioBuffer.length;\n        const maxFramesPerChunk = Math.floor(MAX_FLOAT_COUNT / numberOfChannels);\n        let currentRelativeFrame = 0;\n        let remainingFrames = totalFrames;\n        const result = [];\n        // Create AudioSamples in a chunked fashion so we don't create huge Float32Arrays\n        while (remainingFrames > 0) {\n            const framesToCopy = Math.min(maxFramesPerChunk, remainingFrames);\n            const chunkData = new Float32Array(numberOfChannels * framesToCopy);\n            for (let channel = 0; channel < numberOfChannels; channel++) {\n                audioBuffer.copyFromChannel(chunkData.subarray(channel * framesToCopy, (channel + 1) * framesToCopy), channel, currentRelativeFrame);\n            }\n            const audioSample = new AudioSample({\n                format: 'f32-planar',\n                sampleRate,\n                numberOfFrames: framesToCopy,\n                numberOfChannels,\n                timestamp: timestamp + currentRelativeFrame / sampleRate,\n                data: chunkData,\n            });\n            result.push(audioSample);\n            currentRelativeFrame += framesToCopy;\n            remainingFrames -= framesToCopy;\n        }\n        return result;\n    }\n}\nconst getBytesPerSample = (format) => {\n    switch (format) {\n        case 'u8':\n        case 'u8-planar':\n            return 1;\n        case 's16':\n        case 's16-planar':\n            return 2;\n        case 's32':\n        case 's32-planar':\n            return 4;\n        case 'f32':\n        case 'f32-planar':\n            return 4;\n        default:\n            throw new Error('Unknown AudioSampleFormat');\n    }\n};\nconst formatIsPlanar = (format) => {\n    switch (format) {\n        case 'u8-planar':\n        case 's16-planar':\n        case 's32-planar':\n        case 'f32-planar':\n            return true;\n        default:\n            return false;\n    }\n};\nconst getReadFunction = (format) => {\n    switch (format) {\n        case 'u8':\n        case 'u8-planar':\n            return (view, offset) => (view.getUint8(offset) - 128) / 128;\n        case 's16':\n        case 's16-planar':\n            return (view, offset) => view.getInt16(offset, true) / 32768;\n        case 's32':\n        case 's32-planar':\n            return (view, offset) => view.getInt32(offset, true) / 2147483648;\n        case 'f32':\n        case 'f32-planar':\n            return (view, offset) => view.getFloat32(offset, true);\n    }\n};\nconst getWriteFunction = (format) => {\n    switch (format) {\n        case 'u8':\n        case 'u8-planar':\n            return (view, offset, value) => view.setUint8(offset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.clamp)((value + 1) * 127.5, 0, 255));\n        case 's16':\n        case 's16-planar':\n            return (view, offset, value) => view.setInt16(offset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(Math.round(value * 32767), -32768, 32767), true);\n        case 's32':\n        case 's32-planar':\n            return (view, offset, value) => view.setInt32(offset, (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(Math.round(value * 2147483647), -2147483648, 2147483647), true);\n        case 'f32':\n        case 'f32-planar':\n            return (view, offset, value) => view.setFloat32(offset, value, true);\n    }\n};\nconst isAudioData = (x) => {\n    return typeof AudioData !== 'undefined' && x instanceof AudioData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/sample.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/subtitles.js":
/*!***************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/subtitles.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SubtitleParser: function() { return /* binding */ SubtitleParser; },\n/* harmony export */   formatSubtitleTimestamp: function() { return /* binding */ formatSubtitleTimestamp; },\n/* harmony export */   inlineTimestampRegex: function() { return /* binding */ inlineTimestampRegex; },\n/* harmony export */   parseSubtitleTimestamp: function() { return /* binding */ parseSubtitleTimestamp; }\n/* harmony export */ });\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nconst cueBlockHeaderRegex = /(?:(.+?)\\n)?((?:\\d{2}:)?\\d{2}:\\d{2}.\\d{3})\\s+-->\\s+((?:\\d{2}:)?\\d{2}:\\d{2}.\\d{3})/g;\nconst preambleStartRegex = /^WEBVTT(.|\\n)*?\\n{2}/;\nconst inlineTimestampRegex = /<(?:(\\d{2}):)?(\\d{2}):(\\d{2}).(\\d{3})>/g;\nclass SubtitleParser {\n    constructor(options) {\n        this.preambleText = null;\n        this.preambleEmitted = false;\n        this.options = options;\n    }\n    parse(text) {\n        text = text.replaceAll('\\r\\n', '\\n').replaceAll('\\r', '\\n');\n        cueBlockHeaderRegex.lastIndex = 0;\n        let match;\n        if (!this.preambleText) {\n            if (!preambleStartRegex.test(text)) {\n                throw new Error('WebVTT preamble incorrect.');\n            }\n            match = cueBlockHeaderRegex.exec(text);\n            const preamble = text.slice(0, match?.index ?? text.length).trimEnd();\n            if (!preamble) {\n                throw new Error('No WebVTT preamble provided.');\n            }\n            this.preambleText = preamble;\n            if (match) {\n                text = text.slice(match.index);\n                cueBlockHeaderRegex.lastIndex = 0;\n            }\n        }\n        while ((match = cueBlockHeaderRegex.exec(text))) {\n            const notes = text.slice(0, match.index);\n            const cueIdentifier = match[1];\n            const matchEnd = match.index + match[0].length;\n            const bodyStart = text.indexOf('\\n', matchEnd) + 1;\n            const cueSettings = text.slice(matchEnd, bodyStart).trim();\n            let bodyEnd = text.indexOf('\\n\\n', matchEnd);\n            if (bodyEnd === -1)\n                bodyEnd = text.length;\n            const startTime = parseSubtitleTimestamp(match[2]);\n            const endTime = parseSubtitleTimestamp(match[3]);\n            const duration = endTime - startTime;\n            const body = text.slice(bodyStart, bodyEnd).trim();\n            text = text.slice(bodyEnd).trimStart();\n            cueBlockHeaderRegex.lastIndex = 0;\n            const cue = {\n                timestamp: startTime / 1000,\n                duration: duration / 1000,\n                text: body,\n                identifier: cueIdentifier,\n                settings: cueSettings,\n                notes,\n            };\n            const meta = {};\n            if (!this.preambleEmitted) {\n                meta.config = {\n                    description: this.preambleText,\n                };\n                this.preambleEmitted = true;\n            }\n            this.options.output(cue, meta);\n        }\n    }\n}\nconst timestampRegex = /(?:(\\d{2}):)?(\\d{2}):(\\d{2}).(\\d{3})/;\nconst parseSubtitleTimestamp = (string) => {\n    const match = timestampRegex.exec(string);\n    if (!match)\n        throw new Error('Expected match.');\n    return 60 * 60 * 1000 * Number(match[1] || '0')\n        + 60 * 1000 * Number(match[2])\n        + 1000 * Number(match[3])\n        + Number(match[4]);\n};\nconst formatSubtitleTimestamp = (timestamp) => {\n    const hours = Math.floor(timestamp / (60 * 60 * 1000));\n    const minutes = Math.floor((timestamp % (60 * 60 * 1000)) / (60 * 1000));\n    const seconds = Math.floor((timestamp % (60 * 1000)) / 1000);\n    const milliseconds = timestamp % 1000;\n    return hours.toString().padStart(2, '0') + ':'\n        + minutes.toString().padStart(2, '0') + ':'\n        + seconds.toString().padStart(2, '0') + '.'\n        + milliseconds.toString().padStart(3, '0');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvc3VidGl0bGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQzdHLDhDQUE4QyxFQUFFO0FBQ3pDLHNDQUFzQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0FBQ2xFO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtBQUNwRDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVkaWFidW5ueS9kaXN0L21vZHVsZXMvc3JjL3N1YnRpdGxlcy5qcz8zOTYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDI1LXByZXNlbnQsIFZhbmlsYWd5IGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cbiAqL1xuY29uc3QgY3VlQmxvY2tIZWFkZXJSZWdleCA9IC8oPzooLis/KVxcbik/KCg/OlxcZHsyfTopP1xcZHsyfTpcXGR7Mn0uXFxkezN9KVxccystLT5cXHMrKCg/OlxcZHsyfTopP1xcZHsyfTpcXGR7Mn0uXFxkezN9KS9nO1xuY29uc3QgcHJlYW1ibGVTdGFydFJlZ2V4ID0gL15XRUJWVFQoLnxcXG4pKj9cXG57Mn0vO1xuZXhwb3J0IGNvbnN0IGlubGluZVRpbWVzdGFtcFJlZ2V4ID0gLzwoPzooXFxkezJ9KTopPyhcXGR7Mn0pOihcXGR7Mn0pLihcXGR7M30pPi9nO1xuZXhwb3J0IGNsYXNzIFN1YnRpdGxlUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMucHJlYW1ibGVUZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcmVhbWJsZUVtaXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgcGFyc2UodGV4dCkge1xuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlQWxsKCdcXHJcXG4nLCAnXFxuJykucmVwbGFjZUFsbCgnXFxyJywgJ1xcbicpO1xuICAgICAgICBjdWVCbG9ja0hlYWRlclJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgICAgIGxldCBtYXRjaDtcbiAgICAgICAgaWYgKCF0aGlzLnByZWFtYmxlVGV4dCkge1xuICAgICAgICAgICAgaWYgKCFwcmVhbWJsZVN0YXJ0UmVnZXgudGVzdCh0ZXh0KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2ViVlRUIHByZWFtYmxlIGluY29ycmVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hdGNoID0gY3VlQmxvY2tIZWFkZXJSZWdleC5leGVjKHRleHQpO1xuICAgICAgICAgICAgY29uc3QgcHJlYW1ibGUgPSB0ZXh0LnNsaWNlKDAsIG1hdGNoPy5pbmRleCA/PyB0ZXh0Lmxlbmd0aCkudHJpbUVuZCgpO1xuICAgICAgICAgICAgaWYgKCFwcmVhbWJsZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gV2ViVlRUIHByZWFtYmxlIHByb3ZpZGVkLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wcmVhbWJsZVRleHQgPSBwcmVhbWJsZTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKG1hdGNoLmluZGV4KTtcbiAgICAgICAgICAgICAgICBjdWVCbG9ja0hlYWRlclJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IGN1ZUJsb2NrSGVhZGVyUmVnZXguZXhlYyh0ZXh0KSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGVzID0gdGV4dC5zbGljZSgwLCBtYXRjaC5pbmRleCk7XG4gICAgICAgICAgICBjb25zdCBjdWVJZGVudGlmaWVyID0gbWF0Y2hbMV07XG4gICAgICAgICAgICBjb25zdCBtYXRjaEVuZCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgYm9keVN0YXJ0ID0gdGV4dC5pbmRleE9mKCdcXG4nLCBtYXRjaEVuZCkgKyAxO1xuICAgICAgICAgICAgY29uc3QgY3VlU2V0dGluZ3MgPSB0ZXh0LnNsaWNlKG1hdGNoRW5kLCBib2R5U3RhcnQpLnRyaW0oKTtcbiAgICAgICAgICAgIGxldCBib2R5RW5kID0gdGV4dC5pbmRleE9mKCdcXG5cXG4nLCBtYXRjaEVuZCk7XG4gICAgICAgICAgICBpZiAoYm9keUVuZCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgYm9keUVuZCA9IHRleHQubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGFyc2VTdWJ0aXRsZVRpbWVzdGFtcChtYXRjaFsyXSk7XG4gICAgICAgICAgICBjb25zdCBlbmRUaW1lID0gcGFyc2VTdWJ0aXRsZVRpbWVzdGFtcChtYXRjaFszXSk7XG4gICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gdGV4dC5zbGljZShib2R5U3RhcnQsIGJvZHlFbmQpLnRyaW0oKTtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKGJvZHlFbmQpLnRyaW1TdGFydCgpO1xuICAgICAgICAgICAgY3VlQmxvY2tIZWFkZXJSZWdleC5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgY29uc3QgY3VlID0ge1xuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogc3RhcnRUaW1lIC8gMTAwMCxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLyAxMDAwLFxuICAgICAgICAgICAgICAgIHRleHQ6IGJvZHksXG4gICAgICAgICAgICAgICAgaWRlbnRpZmllcjogY3VlSWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICBzZXR0aW5nczogY3VlU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgbm90ZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IHt9O1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByZWFtYmxlRW1pdHRlZCkge1xuICAgICAgICAgICAgICAgIG1ldGEuY29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5wcmVhbWJsZVRleHQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnByZWFtYmxlRW1pdHRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMub3V0cHV0KGN1ZSwgbWV0YSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCB0aW1lc3RhbXBSZWdleCA9IC8oPzooXFxkezJ9KTopPyhcXGR7Mn0pOihcXGR7Mn0pLihcXGR7M30pLztcbmV4cG9ydCBjb25zdCBwYXJzZVN1YnRpdGxlVGltZXN0YW1wID0gKHN0cmluZykgPT4ge1xuICAgIGNvbnN0IG1hdGNoID0gdGltZXN0YW1wUmVnZXguZXhlYyhzdHJpbmcpO1xuICAgIGlmICghbWF0Y2gpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbWF0Y2guJyk7XG4gICAgcmV0dXJuIDYwICogNjAgKiAxMDAwICogTnVtYmVyKG1hdGNoWzFdIHx8ICcwJylcbiAgICAgICAgKyA2MCAqIDEwMDAgKiBOdW1iZXIobWF0Y2hbMl0pXG4gICAgICAgICsgMTAwMCAqIE51bWJlcihtYXRjaFszXSlcbiAgICAgICAgKyBOdW1iZXIobWF0Y2hbNF0pO1xufTtcbmV4cG9ydCBjb25zdCBmb3JtYXRTdWJ0aXRsZVRpbWVzdGFtcCA9ICh0aW1lc3RhbXApID0+IHtcbiAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IodGltZXN0YW1wIC8gKDYwICogNjAgKiAxMDAwKSk7XG4gICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKHRpbWVzdGFtcCAlICg2MCAqIDYwICogMTAwMCkpIC8gKDYwICogMTAwMCkpO1xuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKCh0aW1lc3RhbXAgJSAoNjAgKiAxMDAwKSkgLyAxMDAwKTtcbiAgICBjb25zdCBtaWxsaXNlY29uZHMgPSB0aW1lc3RhbXAgJSAxMDAwO1xuICAgIHJldHVybiBob3Vycy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJykgKyAnOidcbiAgICAgICAgKyBtaW51dGVzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKSArICc6J1xuICAgICAgICArIHNlY29uZHMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpICsgJy4nXG4gICAgICAgICsgbWlsbGlzZWNvbmRzLnRvU3RyaW5nKCkucGFkU3RhcnQoMywgJzAnKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/subtitles.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/tags.js":
/*!**********************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/tags.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RichImageData: function() { return /* binding */ RichImageData; },\n/* harmony export */   metadataTagsAreEmpty: function() { return /* binding */ metadataTagsAreEmpty; },\n/* harmony export */   validateMetadataTags: function() { return /* binding */ validateMetadataTags; }\n/* harmony export */ });\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n/**\n * Image data with additional metadata.\n *\n * @group Metadata tags\n * @public\n */\nclass RichImageData {\n    /** Creates a new {@link RichImageData}. */\n    constructor(\n    /** The raw image data. */\n    data, \n    /** An RFC 6838 MIME type (e.g. image/jpeg, image/png, etc.) */\n    mimeType) {\n        this.data = data;\n        this.mimeType = mimeType;\n    }\n}\nconst validateMetadataTags = (tags) => {\n    if (!tags || typeof tags !== 'object') {\n        throw new TypeError('tags must be an object.');\n    }\n    if (tags.title !== undefined && typeof tags.title !== 'string') {\n        throw new TypeError('tags.title, when provided, must be a string.');\n    }\n    if (tags.description !== undefined && typeof tags.description !== 'string') {\n        throw new TypeError('tags.description, when provided, must be a string.');\n    }\n    if (tags.artist !== undefined && typeof tags.artist !== 'string') {\n        throw new TypeError('tags.artist, when provided, must be a string.');\n    }\n    if (tags.album !== undefined && typeof tags.album !== 'string') {\n        throw new TypeError('tags.album, when provided, must be a string.');\n    }\n    if (tags.albumArtist !== undefined && typeof tags.albumArtist !== 'string') {\n        throw new TypeError('tags.albumArtist, when provided, must be a string.');\n    }\n    if (tags.trackNumber !== undefined && (!Number.isInteger(tags.trackNumber) || tags.trackNumber <= 0)) {\n        throw new TypeError('tags.trackNumber, when provided, must be a positive integer.');\n    }\n    if (tags.tracksTotal !== undefined\n        && (!Number.isInteger(tags.tracksTotal) || tags.tracksTotal <= 0)) {\n        throw new TypeError('tags.tracksTotal, when provided, must be a positive integer.');\n    }\n    if (tags.discNumber !== undefined && (!Number.isInteger(tags.discNumber) || tags.discNumber <= 0)) {\n        throw new TypeError('tags.discNumber, when provided, must be a positive integer.');\n    }\n    if (tags.discsTotal !== undefined\n        && (!Number.isInteger(tags.discsTotal) || tags.discsTotal <= 0)) {\n        throw new TypeError('tags.discsTotal, when provided, must be a positive integer.');\n    }\n    if (tags.genre !== undefined && typeof tags.genre !== 'string') {\n        throw new TypeError('tags.genre, when provided, must be a string.');\n    }\n    if (tags.date !== undefined && (!(tags.date instanceof Date) || Number.isNaN(tags.date.getTime()))) {\n        throw new TypeError('tags.date, when provided, must be a valid Date.');\n    }\n    if (tags.lyrics !== undefined && typeof tags.lyrics !== 'string') {\n        throw new TypeError('tags.lyrics, when provided, must be a string.');\n    }\n    if (tags.images !== undefined) {\n        if (!Array.isArray(tags.images)) {\n            throw new TypeError('tags.images, when provided, must be an array.');\n        }\n        for (const image of tags.images) {\n            if (!image || typeof image !== 'object') {\n                throw new TypeError('Each image in tags.images must be an object.');\n            }\n            if (!(image.data instanceof Uint8Array)) {\n                throw new TypeError('Each image.data must be a Uint8Array.');\n            }\n            if (typeof image.mimeType !== 'string') {\n                throw new TypeError('Each image.mimeType must be a string.');\n            }\n            if (!['coverFront', 'coverBack', 'unknown'].includes(image.kind)) {\n                throw new TypeError('Each image.kind must be \\'coverFront\\', \\'coverBack\\', or \\'unknown\\'.');\n            }\n        }\n    }\n    if (tags.comment !== undefined && typeof tags.comment !== 'string') {\n        throw new TypeError('tags.comment, when provided, must be a string.');\n    }\n    if (tags.raw !== undefined) {\n        if (!tags.raw || typeof tags.raw !== 'object') {\n            throw new TypeError('tags.raw, when provided, must be an object.');\n        }\n        for (const value of Object.values(tags.raw)) {\n            if (value !== null\n                && typeof value !== 'string'\n                && !(value instanceof Uint8Array)\n                && !(value instanceof RichImageData)) {\n                throw new TypeError('Each value in tags.raw must be a string, Uint8Array, RichImageData, or null.');\n            }\n        }\n    }\n};\nconst metadataTagsAreEmpty = (tags) => {\n    return tags.title === undefined\n        && tags.description === undefined\n        && tags.artist === undefined\n        && tags.album === undefined\n        && tags.albumArtist === undefined\n        && tags.trackNumber === undefined\n        && tags.tracksTotal === undefined\n        && tags.discNumber === undefined\n        && tags.discsTotal === undefined\n        && tags.genre === undefined\n        && tags.date === undefined\n        && tags.lyrics === undefined\n        && (!tags.images || tags.images.length === 0)\n        && tags.comment === undefined\n        && (tags.raw === undefined || Object.keys(tags.raw).length === 0);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/tags.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/target.js":
/*!************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/target.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferTarget: function() { return /* binding */ BufferTarget; },\n/* harmony export */   NullTarget: function() { return /* binding */ NullTarget; },\n/* harmony export */   StreamTarget: function() { return /* binding */ StreamTarget; },\n/* harmony export */   Target: function() { return /* binding */ Target; }\n/* harmony export */ });\n/* harmony import */ var _writer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./writer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/writer.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n/**\n * Base class for targets, specifying where output files are written.\n * @group Output targets\n * @public\n */\nclass Target {\n    constructor() {\n        /** @internal */\n        this._output = null;\n        /**\n         * Called each time data is written to the target. Will be called with the byte range into which data was written.\n         *\n         * Use this callback to track the size of the output file as it grows. But be warned, this function is chatty and\n         * gets called *extremely* often.\n         */\n        this.onwrite = null;\n    }\n}\n/**\n * A target that writes data directly into an ArrayBuffer in memory. Great for performance, but not suitable for very\n * large files. The buffer will be available once the output has been finalized.\n * @group Output targets\n * @public\n */\nclass BufferTarget extends Target {\n    constructor() {\n        super(...arguments);\n        /** Stores the final output buffer. Until the output is finalized, this will be `null`. */\n        this.buffer = null;\n    }\n    /** @internal */\n    _createWriter() {\n        return new _writer_js__WEBPACK_IMPORTED_MODULE_0__.BufferTargetWriter(this);\n    }\n}\n/**\n * This target writes data to a [`WritableStream`](https://developer.mozilla.org/en-US/docs/Web/API/WritableStream),\n * making it a general-purpose target for writing data anywhere. It is also compatible with\n * [`FileSystemWritableFileStream`](https://developer.mozilla.org/en-US/docs/Web/API/FileSystemWritableFileStream) for\n * use with the [File System Access API](https://developer.mozilla.org/en-US/docs/Web/API/File_System_API). The\n * `WritableStream` can also apply backpressure, which will propagate to the output and throttle the encoders.\n * @group Output targets\n * @public\n */\nclass StreamTarget extends Target {\n    /** Creates a new {@link StreamTarget} which writes to the specified `writable`. */\n    constructor(writable, options = {}) {\n        super();\n        if (!(writable instanceof WritableStream)) {\n            throw new TypeError('StreamTarget requires a WritableStream instance.');\n        }\n        if (options != null && typeof options !== 'object') {\n            throw new TypeError('StreamTarget options, when provided, must be an object.');\n        }\n        if (options.chunked !== undefined && typeof options.chunked !== 'boolean') {\n            throw new TypeError('options.chunked, when provided, must be a boolean.');\n        }\n        if (options.chunkSize !== undefined && (!Number.isInteger(options.chunkSize) || options.chunkSize < 1024)) {\n            throw new TypeError('options.chunkSize, when provided, must be an integer and not smaller than 1024.');\n        }\n        this._writable = writable;\n        this._options = options;\n    }\n    /** @internal */\n    _createWriter() {\n        return new _writer_js__WEBPACK_IMPORTED_MODULE_0__.StreamTargetWriter(this);\n    }\n}\n/**\n * This target just discards all incoming data. It is useful for when you need an {@link Output} but extract data from\n * it differently, for example through format-specific callbacks (`onMoof`, `onMdat`, ...) or encoder events.\n * @group Output targets\n * @public\n */\nclass NullTarget extends Target {\n    /** @internal */\n    _createWriter() {\n        return new _writer_js__WEBPACK_IMPORTED_MODULE_0__.NullTargetWriter(this);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvdGFyZ2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDdUY7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwwREFBa0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsdUJBQXVCLG9CQUFvQjtBQUMzQyxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDBEQUFrQjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsY0FBYztBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLG1CQUFtQix3REFBZ0I7QUFDbkM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVkaWFidW5ueS9kaXN0L21vZHVsZXMvc3JjL3RhcmdldC5qcz9lMTMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDI1LXByZXNlbnQsIFZhbmlsYWd5IGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cbiAqL1xuaW1wb3J0IHsgQnVmZmVyVGFyZ2V0V3JpdGVyLCBOdWxsVGFyZ2V0V3JpdGVyLCBTdHJlYW1UYXJnZXRXcml0ZXIgfSBmcm9tICcuL3dyaXRlci5qcyc7XG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHRhcmdldHMsIHNwZWNpZnlpbmcgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZSB3cml0dGVuLlxuICogQGdyb3VwIE91dHB1dCB0YXJnZXRzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBUYXJnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMuX291dHB1dCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgZWFjaCB0aW1lIGRhdGEgaXMgd3JpdHRlbiB0byB0aGUgdGFyZ2V0LiBXaWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBieXRlIHJhbmdlIGludG8gd2hpY2ggZGF0YSB3YXMgd3JpdHRlbi5cbiAgICAgICAgICpcbiAgICAgICAgICogVXNlIHRoaXMgY2FsbGJhY2sgdG8gdHJhY2sgdGhlIHNpemUgb2YgdGhlIG91dHB1dCBmaWxlIGFzIGl0IGdyb3dzLiBCdXQgYmUgd2FybmVkLCB0aGlzIGZ1bmN0aW9uIGlzIGNoYXR0eSBhbmRcbiAgICAgICAgICogZ2V0cyBjYWxsZWQgKmV4dHJlbWVseSogb2Z0ZW4uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9ud3JpdGUgPSBudWxsO1xuICAgIH1cbn1cbi8qKlxuICogQSB0YXJnZXQgdGhhdCB3cml0ZXMgZGF0YSBkaXJlY3RseSBpbnRvIGFuIEFycmF5QnVmZmVyIGluIG1lbW9yeS4gR3JlYXQgZm9yIHBlcmZvcm1hbmNlLCBidXQgbm90IHN1aXRhYmxlIGZvciB2ZXJ5XG4gKiBsYXJnZSBmaWxlcy4gVGhlIGJ1ZmZlciB3aWxsIGJlIGF2YWlsYWJsZSBvbmNlIHRoZSBvdXRwdXQgaGFzIGJlZW4gZmluYWxpemVkLlxuICogQGdyb3VwIE91dHB1dCB0YXJnZXRzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWZmZXJUYXJnZXQgZXh0ZW5kcyBUYXJnZXQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICAvKiogU3RvcmVzIHRoZSBmaW5hbCBvdXRwdXQgYnVmZmVyLiBVbnRpbCB0aGUgb3V0cHV0IGlzIGZpbmFsaXplZCwgdGhpcyB3aWxsIGJlIGBudWxsYC4gKi9cbiAgICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2NyZWF0ZVdyaXRlcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJUYXJnZXRXcml0ZXIodGhpcyk7XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIHRhcmdldCB3cml0ZXMgZGF0YSB0byBhIFtgV3JpdGFibGVTdHJlYW1gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV3JpdGFibGVTdHJlYW0pLFxuICogbWFraW5nIGl0IGEgZ2VuZXJhbC1wdXJwb3NlIHRhcmdldCBmb3Igd3JpdGluZyBkYXRhIGFueXdoZXJlLiBJdCBpcyBhbHNvIGNvbXBhdGlibGUgd2l0aFxuICogW2BGaWxlU3lzdGVtV3JpdGFibGVGaWxlU3RyZWFtYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZpbGVTeXN0ZW1Xcml0YWJsZUZpbGVTdHJlYW0pIGZvclxuICogdXNlIHdpdGggdGhlIFtGaWxlIFN5c3RlbSBBY2Nlc3MgQVBJXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmlsZV9TeXN0ZW1fQVBJKS4gVGhlXG4gKiBgV3JpdGFibGVTdHJlYW1gIGNhbiBhbHNvIGFwcGx5IGJhY2twcmVzc3VyZSwgd2hpY2ggd2lsbCBwcm9wYWdhdGUgdG8gdGhlIG91dHB1dCBhbmQgdGhyb3R0bGUgdGhlIGVuY29kZXJzLlxuICogQGdyb3VwIE91dHB1dCB0YXJnZXRzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJlYW1UYXJnZXQgZXh0ZW5kcyBUYXJnZXQge1xuICAgIC8qKiBDcmVhdGVzIGEgbmV3IHtAbGluayBTdHJlYW1UYXJnZXR9IHdoaWNoIHdyaXRlcyB0byB0aGUgc3BlY2lmaWVkIGB3cml0YWJsZWAuICovXG4gICAgY29uc3RydWN0b3Iod3JpdGFibGUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoISh3cml0YWJsZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RyZWFtKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU3RyZWFtVGFyZ2V0IHJlcXVpcmVzIGEgV3JpdGFibGVTdHJlYW0gaW5zdGFuY2UuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgIT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1N0cmVhbVRhcmdldCBvcHRpb25zLCB3aGVuIHByb3ZpZGVkLCBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jaHVua2VkICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdGlvbnMuY2h1bmtlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zLmNodW5rZWQsIHdoZW4gcHJvdmlkZWQsIG11c3QgYmUgYSBib29sZWFuLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNodW5rU2l6ZSAhPT0gdW5kZWZpbmVkICYmICghTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmNodW5rU2l6ZSkgfHwgb3B0aW9ucy5jaHVua1NpemUgPCAxMDI0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucy5jaHVua1NpemUsIHdoZW4gcHJvdmlkZWQsIG11c3QgYmUgYW4gaW50ZWdlciBhbmQgbm90IHNtYWxsZXIgdGhhbiAxMDI0LicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dyaXRhYmxlID0gd3JpdGFibGU7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2NyZWF0ZVdyaXRlcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW1UYXJnZXRXcml0ZXIodGhpcyk7XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIHRhcmdldCBqdXN0IGRpc2NhcmRzIGFsbCBpbmNvbWluZyBkYXRhLiBJdCBpcyB1c2VmdWwgZm9yIHdoZW4geW91IG5lZWQgYW4ge0BsaW5rIE91dHB1dH0gYnV0IGV4dHJhY3QgZGF0YSBmcm9tXG4gKiBpdCBkaWZmZXJlbnRseSwgZm9yIGV4YW1wbGUgdGhyb3VnaCBmb3JtYXQtc3BlY2lmaWMgY2FsbGJhY2tzIChgb25Nb29mYCwgYG9uTWRhdGAsIC4uLikgb3IgZW5jb2RlciBldmVudHMuXG4gKiBAZ3JvdXAgT3V0cHV0IHRhcmdldHNcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE51bGxUYXJnZXQgZXh0ZW5kcyBUYXJnZXQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfY3JlYXRlV3JpdGVyKCkge1xuICAgICAgICByZXR1cm4gbmV3IE51bGxUYXJnZXRXcml0ZXIodGhpcyk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/target.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/wave/riff-writer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/wave/riff-writer.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RiffWriter: function() { return /* binding */ RiffWriter; }\n/* harmony export */ });\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\nclass RiffWriter {\n    constructor(writer) {\n        this.writer = writer;\n        this.helper = new Uint8Array(8);\n        this.helperView = new DataView(this.helper.buffer);\n    }\n    writeU16(value) {\n        this.helperView.setUint16(0, value, true);\n        this.writer.write(this.helper.subarray(0, 2));\n    }\n    writeU32(value) {\n        this.helperView.setUint32(0, value, true);\n        this.writer.write(this.helper.subarray(0, 4));\n    }\n    writeU64(value) {\n        this.helperView.setUint32(0, value, true);\n        this.helperView.setUint32(4, Math.floor(value / 2 ** 32), true);\n        this.writer.write(this.helper);\n    }\n    writeAscii(text) {\n        this.writer.write(new TextEncoder().encode(text));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvd2F2ZS9yaWZmLXdyaXRlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tZWRpYWJ1bm55L2Rpc3QvbW9kdWxlcy9zcmMvd2F2ZS9yaWZmLXdyaXRlci5qcz9lNmZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDI1LXByZXNlbnQsIFZhbmlsYWd5IGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cHM6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJpZmZXcml0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHdyaXRlcikge1xuICAgICAgICB0aGlzLndyaXRlciA9IHdyaXRlcjtcbiAgICAgICAgdGhpcy5oZWxwZXIgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICAgICAgdGhpcy5oZWxwZXJWaWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuaGVscGVyLmJ1ZmZlcik7XG4gICAgfVxuICAgIHdyaXRlVTE2KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaGVscGVyVmlldy5zZXRVaW50MTYoMCwgdmFsdWUsIHRydWUpO1xuICAgICAgICB0aGlzLndyaXRlci53cml0ZSh0aGlzLmhlbHBlci5zdWJhcnJheSgwLCAyKSk7XG4gICAgfVxuICAgIHdyaXRlVTMyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaGVscGVyVmlldy5zZXRVaW50MzIoMCwgdmFsdWUsIHRydWUpO1xuICAgICAgICB0aGlzLndyaXRlci53cml0ZSh0aGlzLmhlbHBlci5zdWJhcnJheSgwLCA0KSk7XG4gICAgfVxuICAgIHdyaXRlVTY0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaGVscGVyVmlldy5zZXRVaW50MzIoMCwgdmFsdWUsIHRydWUpO1xuICAgICAgICB0aGlzLmhlbHBlclZpZXcuc2V0VWludDMyKDQsIE1hdGguZmxvb3IodmFsdWUgLyAyICoqIDMyKSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMud3JpdGVyLndyaXRlKHRoaXMuaGVscGVyKTtcbiAgICB9XG4gICAgd3JpdGVBc2NpaSh0ZXh0KSB7XG4gICAgICAgIHRoaXMud3JpdGVyLndyaXRlKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh0ZXh0KSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/wave/riff-writer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/wave/wave-demuxer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/wave/wave-demuxer.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WaveDemuxer: function() { return /* binding */ WaveDemuxer; },\n/* harmony export */   WaveFormat: function() { return /* binding */ WaveFormat; }\n/* harmony export */ });\n/* harmony import */ var _demuxer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../demuxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/demuxer.js\");\n/* harmony import */ var _input_track_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../input-track.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/input-track.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _packet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../packet.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/packet.js\");\n/* harmony import */ var _reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reader.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/reader.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\nvar WaveFormat;\n(function (WaveFormat) {\n    WaveFormat[WaveFormat[\"PCM\"] = 1] = \"PCM\";\n    WaveFormat[WaveFormat[\"IEEE_FLOAT\"] = 3] = \"IEEE_FLOAT\";\n    WaveFormat[WaveFormat[\"ALAW\"] = 6] = \"ALAW\";\n    WaveFormat[WaveFormat[\"MULAW\"] = 7] = \"MULAW\";\n    WaveFormat[WaveFormat[\"EXTENSIBLE\"] = 65534] = \"EXTENSIBLE\";\n})(WaveFormat || (WaveFormat = {}));\nclass WaveDemuxer extends _demuxer_js__WEBPACK_IMPORTED_MODULE_0__.Demuxer {\n    constructor(input) {\n        super(input);\n        this.metadataPromise = null;\n        this.dataStart = -1;\n        this.dataSize = -1;\n        this.audioInfo = null;\n        this.tracks = [];\n        this.lastKnownPacketIndex = 0;\n        this.metadataTags = {};\n        this.reader = input._reader;\n    }\n    async readMetadata() {\n        return this.metadataPromise ??= (async () => {\n            let slice = this.reader.requestSlice(0, 12);\n            if (slice instanceof Promise)\n                slice = await slice;\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(slice);\n            const riffType = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readAscii)(slice, 4);\n            const littleEndian = riffType !== 'RIFX';\n            const isRf64 = riffType === 'RF64';\n            const outerChunkSize = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU32)(slice, littleEndian);\n            let totalFileSize = isRf64\n                ? this.reader.fileSize\n                : Math.min(outerChunkSize + 8, this.reader.fileSize ?? Infinity);\n            const format = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readAscii)(slice, 4);\n            if (format !== 'WAVE') {\n                throw new Error('Invalid WAVE file - wrong format');\n            }\n            let chunksRead = 0;\n            let dataChunkSize = null;\n            let currentPos = slice.filePos;\n            while (totalFileSize === null || currentPos < totalFileSize) {\n                let slice = this.reader.requestSlice(currentPos, 8);\n                if (slice instanceof Promise)\n                    slice = await slice;\n                if (!slice)\n                    break;\n                const chunkId = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readAscii)(slice, 4);\n                const chunkSize = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU32)(slice, littleEndian);\n                const startPos = slice.filePos;\n                if (isRf64 && chunksRead === 0 && chunkId !== 'ds64') {\n                    throw new Error('Invalid RF64 file: First chunk must be \"ds64\".');\n                }\n                if (chunkId === 'fmt ') {\n                    await this.parseFmtChunk(startPos, chunkSize, littleEndian);\n                }\n                else if (chunkId === 'data') {\n                    dataChunkSize ??= chunkSize;\n                    this.dataStart = slice.filePos;\n                    this.dataSize = Math.min(dataChunkSize, (totalFileSize ?? Infinity) - this.dataStart);\n                    if (this.reader.fileSize === null) {\n                        break; // Stop once we hit the data chunk\n                    }\n                }\n                else if (chunkId === 'ds64') {\n                    // File and data chunk sizes are defined in here instead\n                    const riffChunkSize = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU64)(slice, littleEndian);\n                    dataChunkSize = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU64)(slice, littleEndian);\n                    totalFileSize = Math.min(riffChunkSize + 8, this.reader.fileSize ?? Infinity);\n                }\n                else if (chunkId === 'LIST') {\n                    await this.parseListChunk(startPos, chunkSize, littleEndian);\n                }\n                currentPos = startPos + chunkSize + (chunkSize & 1); // Handle padding\n                chunksRead++;\n            }\n            if (!this.audioInfo) {\n                throw new Error('Invalid WAVE file - missing \"fmt \" chunk');\n            }\n            if (this.dataStart === -1) {\n                throw new Error('Invalid WAVE file - missing \"data\" chunk');\n            }\n            const blockSize = this.audioInfo.blockSizeInBytes;\n            this.dataSize = Math.floor(this.dataSize / blockSize) * blockSize;\n            this.tracks.push(new _input_track_js__WEBPACK_IMPORTED_MODULE_3__.InputAudioTrack(new WaveAudioTrackBacking(this)));\n        })();\n    }\n    async parseFmtChunk(startPos, size, littleEndian) {\n        let slice = this.reader.requestSlice(startPos, size);\n        if (slice instanceof Promise)\n            slice = await slice;\n        if (!slice)\n            return; // File too short\n        let formatTag = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU16)(slice, littleEndian);\n        const numChannels = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU16)(slice, littleEndian);\n        const sampleRate = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU32)(slice, littleEndian);\n        slice.skip(4); // Bytes per second\n        const blockAlign = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU16)(slice, littleEndian);\n        let bitsPerSample;\n        if (size === 14) { // Plain WAVEFORMAT\n            bitsPerSample = 8;\n        }\n        else {\n            bitsPerSample = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU16)(slice, littleEndian);\n        }\n        // Handle WAVEFORMATEXTENSIBLE\n        if (size >= 18 && formatTag !== 0x0165) {\n            const cbSize = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU16)(slice, littleEndian);\n            const remainingSize = size - 18;\n            const extensionSize = Math.min(remainingSize, cbSize);\n            if (extensionSize >= 22 && formatTag === WaveFormat.EXTENSIBLE) {\n                // Parse WAVEFORMATEXTENSIBLE\n                slice.skip(2 + 4);\n                const subFormat = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readBytes)(slice, 16);\n                // Get actual format from subFormat GUID\n                formatTag = subFormat[0] | (subFormat[1] << 8);\n            }\n        }\n        if (formatTag === WaveFormat.MULAW || formatTag === WaveFormat.ALAW) {\n            bitsPerSample = 8;\n        }\n        this.audioInfo = {\n            format: formatTag,\n            numberOfChannels: numChannels,\n            sampleRate,\n            sampleSizeInBytes: Math.ceil(bitsPerSample / 8),\n            blockSizeInBytes: blockAlign,\n        };\n    }\n    async parseListChunk(startPos, size, littleEndian) {\n        let slice = this.reader.requestSlice(startPos, size);\n        if (slice instanceof Promise)\n            slice = await slice;\n        if (!slice)\n            return; // File too short\n        const infoType = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readAscii)(slice, 4);\n        if (infoType !== 'INFO' && infoType !== 'INF0') { // exiftool.org claims INF0 can happen\n            return; // Not an INFO chunk\n        }\n        let currentPos = slice.filePos;\n        while (currentPos <= startPos + size - 8) {\n            slice.filePos = currentPos;\n            const chunkName = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readAscii)(slice, 4);\n            const chunkSize = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readU32)(slice, littleEndian);\n            const bytes = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readBytes)(slice, chunkSize);\n            let stringLength = 0;\n            for (let i = 0; i < bytes.length; i++) {\n                if (bytes[i] === 0) {\n                    break;\n                }\n                stringLength++;\n            }\n            const value = String.fromCharCode(...bytes.subarray(0, stringLength));\n            this.metadataTags.raw ??= {};\n            this.metadataTags.raw[chunkName] = value;\n            switch (chunkName) {\n                case 'INAM':\n                case 'TITL':\n                    {\n                        this.metadataTags.title ??= value;\n                    }\n                    ;\n                    break;\n                case 'TIT3':\n                    {\n                        this.metadataTags.description ??= value;\n                    }\n                    ;\n                    break;\n                case 'IART':\n                    {\n                        this.metadataTags.artist ??= value;\n                    }\n                    ;\n                    break;\n                case 'IPRD':\n                    {\n                        this.metadataTags.album ??= value;\n                    }\n                    ;\n                    break;\n                case 'IPRT':\n                case 'ITRK':\n                case 'TRCK':\n                    {\n                        const parts = value.split('/');\n                        const trackNum = Number.parseInt(parts[0], 10);\n                        const tracksTotal = parts[1] && Number.parseInt(parts[1], 10);\n                        if (Number.isInteger(trackNum) && trackNum > 0) {\n                            this.metadataTags.trackNumber ??= trackNum;\n                        }\n                        if (tracksTotal && Number.isInteger(tracksTotal) && tracksTotal > 0) {\n                            this.metadataTags.tracksTotal ??= tracksTotal;\n                        }\n                    }\n                    ;\n                    break;\n                case 'ICRD':\n                case 'IDIT':\n                    {\n                        const date = new Date(value);\n                        if (!Number.isNaN(date.getTime())) {\n                            this.metadataTags.date ??= date;\n                        }\n                    }\n                    ;\n                    break;\n                case 'YEAR':\n                    {\n                        const year = Number.parseInt(value, 10);\n                        if (Number.isInteger(year) && year > 0) {\n                            this.metadataTags.date ??= new Date(year, 0, 1);\n                        }\n                    }\n                    ;\n                    break;\n                case 'IGNR':\n                case 'GENR':\n                    {\n                        this.metadataTags.genre ??= value;\n                    }\n                    ;\n                    break;\n                case 'ICMT':\n                case 'CMNT':\n                case 'COMM':\n                    {\n                        this.metadataTags.comment ??= value;\n                    }\n                    ;\n                    break;\n            }\n            currentPos += 8 + chunkSize + (chunkSize & 1); // Handle padding\n        }\n    }\n    getCodec() {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.audioInfo);\n        if (this.audioInfo.format === WaveFormat.MULAW) {\n            return 'ulaw';\n        }\n        if (this.audioInfo.format === WaveFormat.ALAW) {\n            return 'alaw';\n        }\n        if (this.audioInfo.format === WaveFormat.PCM) {\n            // All formats are little-endian\n            if (this.audioInfo.sampleSizeInBytes === 1) {\n                return 'pcm-u8';\n            }\n            else if (this.audioInfo.sampleSizeInBytes === 2) {\n                return 'pcm-s16';\n            }\n            else if (this.audioInfo.sampleSizeInBytes === 3) {\n                return 'pcm-s24';\n            }\n            else if (this.audioInfo.sampleSizeInBytes === 4) {\n                return 'pcm-s32';\n            }\n        }\n        if (this.audioInfo.format === WaveFormat.IEEE_FLOAT) {\n            if (this.audioInfo.sampleSizeInBytes === 4) {\n                return 'pcm-f32';\n            }\n        }\n        return null;\n    }\n    async getMimeType() {\n        return 'audio/wav';\n    }\n    async computeDuration() {\n        await this.readMetadata();\n        const track = this.tracks[0];\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(track);\n        return track.computeDuration();\n    }\n    async getTracks() {\n        await this.readMetadata();\n        return this.tracks;\n    }\n    async getMetadataTags() {\n        await this.readMetadata();\n        return this.metadataTags;\n    }\n}\nconst PACKET_SIZE_IN_FRAMES = 2048;\nclass WaveAudioTrackBacking {\n    constructor(demuxer) {\n        this.demuxer = demuxer;\n    }\n    getId() {\n        return 1;\n    }\n    getCodec() {\n        return this.demuxer.getCodec();\n    }\n    getInternalCodecId() {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.demuxer.audioInfo);\n        return this.demuxer.audioInfo.format;\n    }\n    async getDecoderConfig() {\n        const codec = this.demuxer.getCodec();\n        if (!codec) {\n            return null;\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.demuxer.audioInfo);\n        return {\n            codec,\n            numberOfChannels: this.demuxer.audioInfo.numberOfChannels,\n            sampleRate: this.demuxer.audioInfo.sampleRate,\n        };\n    }\n    async computeDuration() {\n        const lastPacket = await this.getPacket(Infinity, { metadataOnly: true });\n        return (lastPacket?.timestamp ?? 0) + (lastPacket?.duration ?? 0);\n    }\n    getNumberOfChannels() {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.demuxer.audioInfo);\n        return this.demuxer.audioInfo.numberOfChannels;\n    }\n    getSampleRate() {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.demuxer.audioInfo);\n        return this.demuxer.audioInfo.sampleRate;\n    }\n    getTimeResolution() {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.demuxer.audioInfo);\n        return this.demuxer.audioInfo.sampleRate;\n    }\n    getName() {\n        return null;\n    }\n    getLanguageCode() {\n        return _misc_js__WEBPACK_IMPORTED_MODULE_1__.UNDETERMINED_LANGUAGE;\n    }\n    async getFirstTimestamp() {\n        return 0;\n    }\n    async getPacketAtIndex(packetIndex, options) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.demuxer.audioInfo);\n        const startOffset = packetIndex * PACKET_SIZE_IN_FRAMES * this.demuxer.audioInfo.blockSizeInBytes;\n        if (startOffset >= this.demuxer.dataSize) {\n            return null;\n        }\n        const sizeInBytes = Math.min(PACKET_SIZE_IN_FRAMES * this.demuxer.audioInfo.blockSizeInBytes, this.demuxer.dataSize - startOffset);\n        if (this.demuxer.reader.fileSize === null) {\n            // If the file size is unknown, we weren't able to cap the dataSize in the init logic and we instead have to\n            // rely on the headers telling us how large the file is. But, these might be wrong, so let's check if the\n            // requested slice actually exists.\n            let slice = this.demuxer.reader.requestSlice(this.demuxer.dataStart + startOffset, sizeInBytes);\n            if (slice instanceof Promise)\n                slice = await slice;\n            if (!slice) {\n                return null;\n            }\n        }\n        let data;\n        if (options.metadataOnly) {\n            data = _packet_js__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_DATA;\n        }\n        else {\n            let slice = this.demuxer.reader.requestSlice(this.demuxer.dataStart + startOffset, sizeInBytes);\n            if (slice instanceof Promise)\n                slice = await slice;\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(slice);\n            data = (0,_reader_js__WEBPACK_IMPORTED_MODULE_2__.readBytes)(slice, sizeInBytes);\n        }\n        const timestamp = packetIndex * PACKET_SIZE_IN_FRAMES / this.demuxer.audioInfo.sampleRate;\n        const duration = sizeInBytes / this.demuxer.audioInfo.blockSizeInBytes / this.demuxer.audioInfo.sampleRate;\n        this.demuxer.lastKnownPacketIndex = Math.max(packetIndex, timestamp);\n        return new _packet_js__WEBPACK_IMPORTED_MODULE_4__.EncodedPacket(data, 'key', timestamp, duration, packetIndex, sizeInBytes);\n    }\n    getFirstPacket(options) {\n        return this.getPacketAtIndex(0, options);\n    }\n    async getPacket(timestamp, options) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.demuxer.audioInfo);\n        const packetIndex = Math.floor(Math.min(timestamp * this.demuxer.audioInfo.sampleRate / PACKET_SIZE_IN_FRAMES, (this.demuxer.dataSize - 1) / (PACKET_SIZE_IN_FRAMES * this.demuxer.audioInfo.blockSizeInBytes)));\n        const packet = await this.getPacketAtIndex(packetIndex, options);\n        if (packet) {\n            return packet;\n        }\n        if (packetIndex === 0) {\n            return null; // Empty data chunk\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.demuxer.reader.fileSize === null);\n        // The file is shorter than we thought, meaning the packet we were looking for doesn't exist. So, let's find\n        // the last packet by doing a sequential scan, instead.\n        let currentPacket = await this.getPacketAtIndex(this.demuxer.lastKnownPacketIndex, options);\n        while (currentPacket) {\n            const nextPacket = await this.getNextPacket(currentPacket, options);\n            if (!nextPacket) {\n                break;\n            }\n            currentPacket = nextPacket;\n        }\n        return currentPacket;\n    }\n    getNextPacket(packet, options) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_1__.assert)(this.demuxer.audioInfo);\n        const packetIndex = Math.round(packet.timestamp * this.demuxer.audioInfo.sampleRate / PACKET_SIZE_IN_FRAMES);\n        return this.getPacketAtIndex(packetIndex + 1, options);\n    }\n    getKeyPacket(timestamp, options) {\n        return this.getPacket(timestamp, options);\n    }\n    getNextKeyPacket(packet, options) {\n        return this.getNextPacket(packet, options);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/wave/wave-demuxer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/wave/wave-muxer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/wave/wave-muxer.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WaveMuxer: function() { return /* binding */ WaveMuxer; }\n/* harmony export */ });\n/* harmony import */ var _muxer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../muxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/muxer.js\");\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../codec.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/codec.js\");\n/* harmony import */ var _wave_demuxer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wave-demuxer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/wave/wave-demuxer.js\");\n/* harmony import */ var _riff_writer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./riff-writer.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/wave/riff-writer.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/* harmony import */ var _tags_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tags.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/tags.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\n\n\n\n\n\nclass WaveMuxer extends _muxer_js__WEBPACK_IMPORTED_MODULE_0__.Muxer {\n    constructor(output, format) {\n        super(output);\n        this.headerWritten = false;\n        this.dataSize = 0;\n        this.sampleRate = null;\n        this.sampleCount = 0;\n        this.riffSizePos = null;\n        this.dataSizePos = null;\n        this.ds64RiffSizePos = null;\n        this.ds64DataSizePos = null;\n        this.ds64SampleCountPos = null;\n        this.format = format;\n        this.writer = output._writer;\n        this.riffWriter = new _riff_writer_js__WEBPACK_IMPORTED_MODULE_1__.RiffWriter(output._writer);\n        this.isRf64 = !!format._options.large;\n    }\n    async start() {\n        // Nothing needed here - we'll write the header with the first sample\n    }\n    async getMimeType() {\n        return 'audio/wav';\n    }\n    async addEncodedVideoPacket() {\n        throw new Error('WAVE does not support video.');\n    }\n    async addEncodedAudioPacket(track, packet, meta) {\n        const release = await this.mutex.acquire();\n        try {\n            if (!this.headerWritten) {\n                (0,_codec_js__WEBPACK_IMPORTED_MODULE_2__.validateAudioChunkMetadata)(meta);\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(meta);\n                (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(meta.decoderConfig);\n                this.writeHeader(track, meta.decoderConfig);\n                this.sampleRate = meta.decoderConfig.sampleRate;\n                this.headerWritten = true;\n            }\n            this.validateAndNormalizeTimestamp(track, packet.timestamp, packet.type === 'key');\n            if (!this.isRf64 && this.writer.getPos() + packet.data.byteLength >= 2 ** 32) {\n                throw new Error('Adding more audio data would exceed the maximum RIFF size of 4 GiB. To write larger files, use'\n                    + ' RF64 by setting `large: true` in the WavOutputFormatOptions.');\n            }\n            this.writer.write(packet.data);\n            this.dataSize += packet.data.byteLength;\n            this.sampleCount += Math.round(packet.duration * this.sampleRate);\n            await this.writer.flush();\n        }\n        finally {\n            release();\n        }\n    }\n    async addSubtitleCue() {\n        throw new Error('WAVE does not support subtitles.');\n    }\n    writeHeader(track, config) {\n        if (this.format._options.onHeader) {\n            this.writer.startTrackingWrites();\n        }\n        let format;\n        const codec = track.source._codec;\n        const pcmInfo = (0,_codec_js__WEBPACK_IMPORTED_MODULE_2__.parsePcmCodec)(codec);\n        if (pcmInfo.dataType === 'ulaw') {\n            format = _wave_demuxer_js__WEBPACK_IMPORTED_MODULE_4__.WaveFormat.MULAW;\n        }\n        else if (pcmInfo.dataType === 'alaw') {\n            format = _wave_demuxer_js__WEBPACK_IMPORTED_MODULE_4__.WaveFormat.ALAW;\n        }\n        else if (pcmInfo.dataType === 'float') {\n            format = _wave_demuxer_js__WEBPACK_IMPORTED_MODULE_4__.WaveFormat.IEEE_FLOAT;\n        }\n        else {\n            format = _wave_demuxer_js__WEBPACK_IMPORTED_MODULE_4__.WaveFormat.PCM;\n        }\n        const channels = config.numberOfChannels;\n        const sampleRate = config.sampleRate;\n        const blockSize = pcmInfo.sampleSize * channels;\n        // RIFF header\n        this.riffWriter.writeAscii(this.isRf64 ? 'RF64' : 'RIFF');\n        if (this.isRf64) {\n            this.riffWriter.writeU32(0xffffffff); // Not used in RF64\n        }\n        else {\n            this.riffSizePos = this.writer.getPos();\n            this.riffWriter.writeU32(0); // File size placeholder\n        }\n        this.riffWriter.writeAscii('WAVE');\n        if (this.isRf64) {\n            this.riffWriter.writeAscii('ds64');\n            this.riffWriter.writeU32(28); // Chunk size\n            this.ds64RiffSizePos = this.writer.getPos();\n            this.riffWriter.writeU64(0); // RIFF size placeholder\n            this.ds64DataSizePos = this.writer.getPos();\n            this.riffWriter.writeU64(0); // Data size placeholder\n            this.ds64SampleCountPos = this.writer.getPos();\n            this.riffWriter.writeU64(0); // Sample count placeholder\n            this.riffWriter.writeU32(0); // Table length\n            // Empty table\n        }\n        // fmt chunk\n        this.riffWriter.writeAscii('fmt ');\n        this.riffWriter.writeU32(16); // Chunk size\n        this.riffWriter.writeU16(format);\n        this.riffWriter.writeU16(channels);\n        this.riffWriter.writeU32(sampleRate);\n        this.riffWriter.writeU32(sampleRate * blockSize); // Bytes per second\n        this.riffWriter.writeU16(blockSize);\n        this.riffWriter.writeU16(8 * pcmInfo.sampleSize);\n        if (!(0,_tags_js__WEBPACK_IMPORTED_MODULE_5__.metadataTagsAreEmpty)(this.output._metadataTags)) {\n            // Metadata exists, let's write an INFO chunk\n            this.writeInfoChunk(this.output._metadataTags);\n        }\n        // data chunk\n        this.riffWriter.writeAscii('data');\n        if (this.isRf64) {\n            this.riffWriter.writeU32(0xffffffff); // Not used in RF64\n        }\n        else {\n            this.dataSizePos = this.writer.getPos();\n            this.riffWriter.writeU32(0); // Data size placeholder\n        }\n        if (this.format._options.onHeader) {\n            const { data, start } = this.writer.stopTrackingWrites();\n            this.format._options.onHeader(data, start);\n        }\n    }\n    writeInfoChunk(metadata) {\n        const startPos = this.writer.getPos();\n        this.riffWriter.writeAscii('LIST');\n        this.riffWriter.writeU32(0); // Size placeholder\n        this.riffWriter.writeAscii('INFO');\n        const writtenTags = new Set();\n        const writeInfoTag = (tag, value) => {\n            if (!(0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.isIso88591Compatible)(value)) {\n                // No Unicode supported here\n                console.warn(`Didn't write tag '${tag}' because '${value}' is not ISO 8859-1-compatible.`);\n                return;\n            }\n            const size = value.length + 1; // +1 for null terminator\n            const bytes = new Uint8Array(size);\n            for (let i = 0; i < value.length; i++) {\n                bytes[i] = value.charCodeAt(i);\n            }\n            this.riffWriter.writeAscii(tag);\n            this.riffWriter.writeU32(size);\n            this.writer.write(bytes);\n            // Add padding byte if size is odd\n            if (size & 1) {\n                this.writer.write(new Uint8Array(1));\n            }\n            writtenTags.add(tag);\n        };\n        for (const { key, value } of (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.keyValueIterator)(metadata)) {\n            switch (key) {\n                case 'title':\n                    {\n                        writeInfoTag('INAM', value);\n                        writtenTags.add('INAM');\n                    }\n                    ;\n                    break;\n                case 'artist':\n                    {\n                        writeInfoTag('IART', value);\n                        writtenTags.add('IART');\n                    }\n                    ;\n                    break;\n                case 'album':\n                    {\n                        writeInfoTag('IPRD', value);\n                        writtenTags.add('IPRD');\n                    }\n                    ;\n                    break;\n                case 'trackNumber':\n                    {\n                        const string = metadata.tracksTotal !== undefined\n                            ? `${value}/${metadata.tracksTotal}`\n                            : value.toString();\n                        writeInfoTag('ITRK', string);\n                        writtenTags.add('ITRK');\n                    }\n                    ;\n                    break;\n                case 'genre':\n                    {\n                        writeInfoTag('IGNR', value);\n                        writtenTags.add('IGNR');\n                    }\n                    ;\n                    break;\n                case 'date':\n                    {\n                        writeInfoTag('ICRD', value.toISOString().slice(0, 10));\n                        writtenTags.add('ICRD');\n                    }\n                    ;\n                    break;\n                case 'comment':\n                    {\n                        writeInfoTag('ICMT', value);\n                        writtenTags.add('ICMT');\n                    }\n                    ;\n                    break;\n                case 'albumArtist':\n                case 'discNumber':\n                case 'tracksTotal':\n                case 'discsTotal':\n                case 'description':\n                case 'lyrics':\n                case 'images':\n                    {\n                        // Not supported in RIFF INFO\n                    }\n                    ;\n                    break;\n                case 'raw':\n                    {\n                        // Handled later\n                    }\n                    ;\n                    break;\n                default: (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assertNever)(key);\n            }\n        }\n        if (metadata.raw) {\n            for (const key in metadata.raw) {\n                const value = metadata.raw[key];\n                if (value == null || key.length !== 4 || writtenTags.has(key)) {\n                    continue;\n                }\n                if (typeof value === 'string') {\n                    writeInfoTag(key, value);\n                }\n            }\n        }\n        const endPos = this.writer.getPos();\n        const chunkSize = endPos - startPos - 8;\n        this.writer.seek(startPos + 4);\n        this.riffWriter.writeU32(chunkSize);\n        this.writer.seek(endPos);\n        // Add padding byte if chunk size is odd\n        if (chunkSize & 1) {\n            this.writer.write(new Uint8Array(1));\n        }\n    }\n    async finalize() {\n        const release = await this.mutex.acquire();\n        const endPos = this.writer.getPos();\n        if (this.isRf64) {\n            // Write riff size\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.ds64RiffSizePos !== null);\n            this.writer.seek(this.ds64RiffSizePos);\n            this.riffWriter.writeU64(endPos - 8);\n            // Write data size\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.ds64DataSizePos !== null);\n            this.writer.seek(this.ds64DataSizePos);\n            this.riffWriter.writeU64(this.dataSize);\n            // Write sample count\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.ds64SampleCountPos !== null);\n            this.writer.seek(this.ds64SampleCountPos);\n            this.riffWriter.writeU64(this.sampleCount);\n        }\n        else {\n            // Write file size\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.riffSizePos !== null);\n            this.writer.seek(this.riffSizePos);\n            this.riffWriter.writeU32(endPos - 8);\n            // Write data chunk size\n            (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.assert)(this.dataSizePos !== null);\n            this.writer.seek(this.dataSizePos);\n            this.riffWriter.writeU32(this.dataSize);\n        }\n        this.writer.seek(endPos);\n        release();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/wave/wave-muxer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/writer.js":
/*!************************************************************!*\
  !*** ./node_modules/mediabunny/dist/modules/src/writer.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferTargetWriter: function() { return /* binding */ BufferTargetWriter; },\n/* harmony export */   NullTargetWriter: function() { return /* binding */ NullTargetWriter; },\n/* harmony export */   StreamTargetWriter: function() { return /* binding */ StreamTargetWriter; },\n/* harmony export */   Writer: function() { return /* binding */ Writer; }\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/misc.js\");\n/*!\n * Copyright (c) 2025-present, Vanilagy and contributors\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n\nclass Writer {\n    constructor() {\n        /** Setting this to true will cause the writer to ensure data is written in a strictly monotonic, streamable way. */\n        this.ensureMonotonicity = false;\n        this.trackedWrites = null;\n        this.trackedStart = -1;\n        this.trackedEnd = -1;\n    }\n    start() { }\n    maybeTrackWrites(data) {\n        if (!this.trackedWrites) {\n            return;\n        }\n        // Handle negative relative write positions\n        let pos = this.getPos();\n        if (pos < this.trackedStart) {\n            if (pos + data.byteLength <= this.trackedStart) {\n                return;\n            }\n            data = data.subarray(this.trackedStart - pos);\n            pos = 0;\n        }\n        const neededSize = pos + data.byteLength - this.trackedStart;\n        let newLength = this.trackedWrites.byteLength;\n        while (newLength < neededSize) {\n            newLength *= 2;\n        }\n        // Check if we need to resize the buffer\n        if (newLength !== this.trackedWrites.byteLength) {\n            const copy = new Uint8Array(newLength);\n            copy.set(this.trackedWrites, 0);\n            this.trackedWrites = copy;\n        }\n        this.trackedWrites.set(data, pos - this.trackedStart);\n        this.trackedEnd = Math.max(this.trackedEnd, pos + data.byteLength);\n    }\n    startTrackingWrites() {\n        this.trackedWrites = new Uint8Array(2 ** 10);\n        this.trackedStart = this.getPos();\n        this.trackedEnd = this.trackedStart;\n    }\n    stopTrackingWrites() {\n        if (!this.trackedWrites) {\n            throw new Error('Internal error: Can\\'t get tracked writes since nothing was tracked.');\n        }\n        const slice = this.trackedWrites.subarray(0, this.trackedEnd - this.trackedStart);\n        const result = {\n            data: slice,\n            start: this.trackedStart,\n            end: this.trackedEnd,\n        };\n        this.trackedWrites = null;\n        return result;\n    }\n}\nconst ARRAY_BUFFER_INITIAL_SIZE = 2 ** 16;\nconst ARRAY_BUFFER_MAX_SIZE = 2 ** 32;\nclass BufferTargetWriter extends Writer {\n    constructor(target) {\n        super();\n        this.pos = 0;\n        this.maxPos = 0;\n        this.target = target;\n        this.supportsResize = 'resize' in new ArrayBuffer(0);\n        if (this.supportsResize) {\n            try {\n                // @ts-expect-error Don't want to bump \"lib\" in tsconfig\n                this.buffer = new ArrayBuffer(ARRAY_BUFFER_INITIAL_SIZE, { maxByteLength: ARRAY_BUFFER_MAX_SIZE });\n            }\n            catch {\n                this.buffer = new ArrayBuffer(ARRAY_BUFFER_INITIAL_SIZE);\n                this.supportsResize = false;\n            }\n        }\n        else {\n            this.buffer = new ArrayBuffer(ARRAY_BUFFER_INITIAL_SIZE);\n        }\n        this.bytes = new Uint8Array(this.buffer);\n    }\n    ensureSize(size) {\n        let newLength = this.buffer.byteLength;\n        while (newLength < size)\n            newLength *= 2;\n        if (newLength === this.buffer.byteLength)\n            return;\n        if (newLength > ARRAY_BUFFER_MAX_SIZE) {\n            throw new Error(`ArrayBuffer exceeded maximum size of ${ARRAY_BUFFER_MAX_SIZE} bytes. Please consider using another`\n                + ` target.`);\n        }\n        if (this.supportsResize) {\n            // Use resize if it exists\n            // @ts-expect-error Don't want to bump \"lib\" in tsconfig\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            this.buffer.resize(newLength);\n            // The Uint8Array scales automatically\n        }\n        else {\n            const newBuffer = new ArrayBuffer(newLength);\n            const newBytes = new Uint8Array(newBuffer);\n            newBytes.set(this.bytes, 0);\n            this.buffer = newBuffer;\n            this.bytes = newBytes;\n        }\n    }\n    write(data) {\n        this.maybeTrackWrites(data);\n        this.ensureSize(this.pos + data.byteLength);\n        this.bytes.set(data, this.pos);\n        this.target.onwrite?.(this.pos, this.pos + data.byteLength);\n        this.pos += data.byteLength;\n        this.maxPos = Math.max(this.maxPos, this.pos);\n    }\n    seek(newPos) {\n        this.pos = newPos;\n    }\n    getPos() {\n        return this.pos;\n    }\n    async flush() { }\n    async finalize() {\n        this.ensureSize(this.pos);\n        this.target.buffer = this.buffer.slice(0, Math.max(this.maxPos, this.pos));\n    }\n    async close() { }\n    getSlice(start, end) {\n        return this.bytes.slice(start, end);\n    }\n}\nconst DEFAULT_CHUNK_SIZE = 2 ** 24;\nconst MAX_CHUNKS_AT_ONCE = 2;\n/**\n * Writes to a StreamTarget every time it is flushed, sending out all of the new data written since the\n * last flush. This is useful for streaming applications, like piping the output to disk. When using the chunked mode,\n * data will first be accumulated in larger chunks, and then the entire chunk will be flushed out at once when ready.\n */\nclass StreamTargetWriter extends Writer {\n    constructor(target) {\n        super();\n        this.pos = 0;\n        this.sections = [];\n        this.lastWriteEnd = 0;\n        this.lastFlushEnd = 0;\n        this.writer = null;\n        /**\n         * The data is divided up into fixed-size chunks, whose contents are first filled in RAM and then flushed out.\n         * A chunk is flushed if all of its contents have been written.\n         */\n        this.chunks = [];\n        this.target = target;\n        this.chunked = target._options.chunked ?? false;\n        this.chunkSize = target._options.chunkSize ?? DEFAULT_CHUNK_SIZE;\n    }\n    start() {\n        this.writer = this.target._writable.getWriter();\n    }\n    write(data) {\n        if (this.pos > this.lastWriteEnd) {\n            const paddingBytesNeeded = this.pos - this.lastWriteEnd;\n            this.pos = this.lastWriteEnd;\n            this.write(new Uint8Array(paddingBytesNeeded));\n        }\n        this.maybeTrackWrites(data);\n        this.sections.push({\n            data: data.slice(),\n            start: this.pos,\n        });\n        this.target.onwrite?.(this.pos, this.pos + data.byteLength);\n        this.pos += data.byteLength;\n        this.lastWriteEnd = Math.max(this.lastWriteEnd, this.pos);\n    }\n    seek(newPos) {\n        this.pos = newPos;\n    }\n    getPos() {\n        return this.pos;\n    }\n    async flush() {\n        if (this.pos > this.lastWriteEnd) {\n            // There's a \"void\" between the last written byte and the next byte we're about to write. Let's pad that\n            // void with zeroes explicitly.\n            const paddingBytesNeeded = this.pos - this.lastWriteEnd;\n            this.pos = this.lastWriteEnd;\n            this.write(new Uint8Array(paddingBytesNeeded));\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.writer);\n        if (this.sections.length === 0)\n            return;\n        const chunks = [];\n        const sorted = [...this.sections].sort((a, b) => a.start - b.start);\n        chunks.push({\n            start: sorted[0].start,\n            size: sorted[0].data.byteLength,\n        });\n        // Figure out how many contiguous chunks we have\n        for (let i = 1; i < sorted.length; i++) {\n            const lastChunk = chunks[chunks.length - 1];\n            const section = sorted[i];\n            if (section.start <= lastChunk.start + lastChunk.size) {\n                lastChunk.size = Math.max(lastChunk.size, section.start + section.data.byteLength - lastChunk.start);\n            }\n            else {\n                chunks.push({\n                    start: section.start,\n                    size: section.data.byteLength,\n                });\n            }\n        }\n        for (const chunk of chunks) {\n            chunk.data = new Uint8Array(chunk.size);\n            // Make sure to write the data in the correct order for correct overwriting\n            for (const section of this.sections) {\n                // Check if the section is in the chunk\n                if (chunk.start <= section.start && section.start < chunk.start + chunk.size) {\n                    chunk.data.set(section.data, section.start - chunk.start);\n                }\n            }\n            if (this.writer.desiredSize !== null && this.writer.desiredSize <= 0) {\n                await this.writer.ready; // Allow the writer to apply backpressure\n            }\n            if (this.chunked) {\n                // Let's first gather the data into bigger chunks before writing it\n                this.writeDataIntoChunks(chunk.data, chunk.start);\n                this.tryToFlushChunks();\n            }\n            else {\n                if (this.ensureMonotonicity && chunk.start !== this.lastFlushEnd) {\n                    throw new Error('Internal error: Monotonicity violation.');\n                }\n                // Write out the data immediately\n                void this.writer.write({\n                    type: 'write',\n                    data: chunk.data,\n                    position: chunk.start,\n                });\n                this.lastFlushEnd = chunk.start + chunk.data.byteLength;\n            }\n        }\n        this.sections.length = 0;\n    }\n    writeDataIntoChunks(data, position) {\n        // First, find the chunk to write the data into, or create one if none exists\n        let chunkIndex = this.chunks.findIndex(x => x.start <= position && position < x.start + this.chunkSize);\n        if (chunkIndex === -1)\n            chunkIndex = this.createChunk(position);\n        const chunk = this.chunks[chunkIndex];\n        // Figure out how much to write to the chunk, and then write to the chunk\n        const relativePosition = position - chunk.start;\n        const toWrite = data.subarray(0, Math.min(this.chunkSize - relativePosition, data.byteLength));\n        chunk.data.set(toWrite, relativePosition);\n        // Create a section describing the region of data that was just written to\n        const section = {\n            start: relativePosition,\n            end: relativePosition + toWrite.byteLength,\n        };\n        this.insertSectionIntoChunk(chunk, section);\n        // Queue chunk for flushing to target if it has been fully written to\n        if (chunk.written[0].start === 0 && chunk.written[0].end === this.chunkSize) {\n            chunk.shouldFlush = true;\n        }\n        // Make sure we don't hold too many chunks in memory at once to keep memory usage down\n        if (this.chunks.length > MAX_CHUNKS_AT_ONCE) {\n            // Flush all but the last chunk\n            for (let i = 0; i < this.chunks.length - 1; i++) {\n                this.chunks[i].shouldFlush = true;\n            }\n            this.tryToFlushChunks();\n        }\n        // If the data didn't fit in one chunk, recurse with the remaining data\n        if (toWrite.byteLength < data.byteLength) {\n            this.writeDataIntoChunks(data.subarray(toWrite.byteLength), position + toWrite.byteLength);\n        }\n    }\n    insertSectionIntoChunk(chunk, section) {\n        let low = 0;\n        let high = chunk.written.length - 1;\n        let index = -1;\n        // Do a binary search to find the last section with a start not larger than `section`'s start\n        while (low <= high) {\n            const mid = Math.floor(low + (high - low + 1) / 2);\n            if (chunk.written[mid].start <= section.start) {\n                low = mid + 1;\n                index = mid;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        // Insert the new section\n        chunk.written.splice(index + 1, 0, section);\n        if (index === -1 || chunk.written[index].end < section.start)\n            index++;\n        // Merge overlapping sections\n        while (index < chunk.written.length - 1 && chunk.written[index].end >= chunk.written[index + 1].start) {\n            chunk.written[index].end = Math.max(chunk.written[index].end, chunk.written[index + 1].end);\n            chunk.written.splice(index + 1, 1);\n        }\n    }\n    createChunk(includesPosition) {\n        const start = Math.floor(includesPosition / this.chunkSize) * this.chunkSize;\n        const chunk = {\n            start,\n            data: new Uint8Array(this.chunkSize),\n            written: [],\n            shouldFlush: false,\n        };\n        this.chunks.push(chunk);\n        this.chunks.sort((a, b) => a.start - b.start);\n        return this.chunks.indexOf(chunk);\n    }\n    tryToFlushChunks(force = false) {\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.writer);\n        for (let i = 0; i < this.chunks.length; i++) {\n            const chunk = this.chunks[i];\n            if (!chunk.shouldFlush && !force)\n                continue;\n            for (const section of chunk.written) {\n                const position = chunk.start + section.start;\n                if (this.ensureMonotonicity && position !== this.lastFlushEnd) {\n                    throw new Error('Internal error: Monotonicity violation.');\n                }\n                void this.writer.write({\n                    type: 'write',\n                    data: chunk.data.subarray(section.start, section.end),\n                    position,\n                });\n                this.lastFlushEnd = chunk.start + section.end;\n            }\n            this.chunks.splice(i--, 1);\n        }\n    }\n    finalize() {\n        if (this.chunked) {\n            this.tryToFlushChunks(true);\n        }\n        (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this.writer);\n        return this.writer.close();\n    }\n    async close() {\n        return this.writer?.close();\n    }\n}\nclass NullTargetWriter extends Writer {\n    constructor(target) {\n        super();\n        this.target = target;\n        this.pos = 0;\n    }\n    write(data) {\n        this.maybeTrackWrites(data);\n        this.target.onwrite?.(this.pos, this.pos + data.byteLength);\n        this.pos += data.byteLength;\n    }\n    getPos() {\n        return this.pos;\n    }\n    seek(newPos) {\n        this.pos = newPos;\n    }\n    async flush() { }\n    async finalize() { }\n    async close() { }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/mediabunny/dist/modules/src/writer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/tailwind-merge/dist/bundle-mjs.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTailwindMerge: function() { return /* binding */ createTailwindMerge; },\n/* harmony export */   extendTailwindMerge: function() { return /* binding */ extendTailwindMerge; },\n/* harmony export */   fromTheme: function() { return /* binding */ fromTheme; },\n/* harmony export */   getDefaultConfig: function() { return /* binding */ getDefaultConfig; },\n/* harmony export */   mergeConfigs: function() { return /* binding */ mergeConfigs; },\n/* harmony export */   twJoin: function() { return /* binding */ twJoin; },\n/* harmony export */   twMerge: function() { return /* binding */ twMerge; },\n/* harmony export */   validators: function() { return /* binding */ validators; }\n/* harmony export */ });\nconst CLASS_PART_SEPARATOR = '-';\nconst createClassGroupUtils = config => {\n  const classMap = createClassMap(config);\n  const {\n    conflictingClassGroups,\n    conflictingClassGroupModifiers\n  } = config;\n  const getClassGroupId = className => {\n    const classParts = className.split(CLASS_PART_SEPARATOR);\n    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n    if (classParts[0] === '' && classParts.length !== 1) {\n      classParts.shift();\n    }\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n  };\n  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {\n    const conflicts = conflictingClassGroups[classGroupId] || [];\n    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];\n    }\n    return conflicts;\n  };\n  return {\n    getClassGroupId,\n    getConflictingClassGroupIds\n  };\n};\nconst getGroupRecursive = (classParts, classPartObject) => {\n  if (classParts.length === 0) {\n    return classPartObject.classGroupId;\n  }\n  const currentClassPart = classParts[0];\n  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;\n  if (classGroupFromNextClassPart) {\n    return classGroupFromNextClassPart;\n  }\n  if (classPartObject.validators.length === 0) {\n    return undefined;\n  }\n  const classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return classPartObject.validators.find(({\n    validator\n  }) => validator(classRest))?.classGroupId;\n};\nconst arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nconst getGroupIdForArbitraryProperty = className => {\n  if (arbitraryPropertyRegex.test(className)) {\n    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));\n    if (property) {\n      // I use two dots here because one dot is used as prefix for class groups in plugins\n      return 'arbitrary..' + property;\n    }\n  }\n};\n/**\n * Exported for testing only\n */\nconst createClassMap = config => {\n  const {\n    theme,\n    prefix\n  } = config;\n  const classMap = {\n    nextPart: new Map(),\n    validators: []\n  };\n  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {\n    processClassesRecursively(classGroup, classMap, classGroupId, theme);\n  });\n  return classMap;\n};\nconst processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {\n  classGroup.forEach(classDefinition => {\n    if (typeof classDefinition === 'string') {\n      const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition === 'function') {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(([key, classGroup]) => {\n      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n};\nconst getPart = (classPartObject, path) => {\n  let currentClassPartObject = classPartObject;\n  path.split(CLASS_PART_SEPARATOR).forEach(pathPart => {\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\n      currentClassPartObject.nextPart.set(pathPart, {\n        nextPart: new Map(),\n        validators: []\n      });\n    }\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  });\n  return currentClassPartObject;\n};\nconst isThemeGetter = func => func.isThemeGetter;\nconst getPrefixedClassGroupEntries = (classGroupEntries, prefix) => {\n  if (!prefix) {\n    return classGroupEntries;\n  }\n  return classGroupEntries.map(([classGroupId, classGroup]) => {\n    const prefixedClassGroup = classGroup.map(classDefinition => {\n      if (typeof classDefinition === 'string') {\n        return prefix + classDefinition;\n      }\n      if (typeof classDefinition === 'object') {\n        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));\n      }\n      return classDefinition;\n    });\n    return [classGroupId, prefixedClassGroup];\n  });\n};\n\n// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance\nconst createLruCache = maxCacheSize => {\n  if (maxCacheSize < 1) {\n    return {\n      get: () => undefined,\n      set: () => {}\n    };\n  }\n  let cacheSize = 0;\n  let cache = new Map();\n  let previousCache = new Map();\n  const update = (key, value) => {\n    cache.set(key, value);\n    cacheSize++;\n    if (cacheSize > maxCacheSize) {\n      cacheSize = 0;\n      previousCache = cache;\n      cache = new Map();\n    }\n  };\n  return {\n    get(key) {\n      let value = cache.get(key);\n      if (value !== undefined) {\n        return value;\n      }\n      if ((value = previousCache.get(key)) !== undefined) {\n        update(key, value);\n        return value;\n      }\n    },\n    set(key, value) {\n      if (cache.has(key)) {\n        cache.set(key, value);\n      } else {\n        update(key, value);\n      }\n    }\n  };\n};\nconst IMPORTANT_MODIFIER = '!';\nconst createParseClassName = config => {\n  const {\n    separator,\n    experimentalParseClassName\n  } = config;\n  const isSeparatorSingleCharacter = separator.length === 1;\n  const firstSeparatorCharacter = separator[0];\n  const separatorLength = separator.length;\n  // parseClassName inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\n  const parseClassName = className => {\n    const modifiers = [];\n    let bracketDepth = 0;\n    let modifierStart = 0;\n    let postfixModifierPosition;\n    for (let index = 0; index < className.length; index++) {\n      let currentCharacter = className[index];\n      if (bracketDepth === 0) {\n        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {\n          modifiers.push(className.slice(modifierStart, index));\n          modifierStart = index + separatorLength;\n          continue;\n        }\n        if (currentCharacter === '/') {\n          postfixModifierPosition = index;\n          continue;\n        }\n      }\n      if (currentCharacter === '[') {\n        bracketDepth++;\n      } else if (currentCharacter === ']') {\n        bracketDepth--;\n      }\n    }\n    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);\n    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;\n    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;\n    return {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    };\n  };\n  if (experimentalParseClassName) {\n    return className => experimentalParseClassName({\n      className,\n      parseClassName\n    });\n  }\n  return parseClassName;\n};\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */\nconst sortModifiers = modifiers => {\n  if (modifiers.length <= 1) {\n    return modifiers;\n  }\n  const sortedModifiers = [];\n  let unsortedModifiers = [];\n  modifiers.forEach(modifier => {\n    const isArbitraryVariant = modifier[0] === '[';\n    if (isArbitraryVariant) {\n      sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n      unsortedModifiers = [];\n    } else {\n      unsortedModifiers.push(modifier);\n    }\n  });\n  sortedModifiers.push(...unsortedModifiers.sort());\n  return sortedModifiers;\n};\nconst createConfigUtils = config => ({\n  cache: createLruCache(config.cacheSize),\n  parseClassName: createParseClassName(config),\n  ...createClassGroupUtils(config)\n});\nconst SPLIT_CLASSES_REGEX = /\\s+/;\nconst mergeClassList = (classList, configUtils) => {\n  const {\n    parseClassName,\n    getClassGroupId,\n    getConflictingClassGroupIds\n  } = configUtils;\n  /**\n   * Set of classGroupIds in following format:\n   * `{importantModifier}{variantModifiers}{classGroupId}`\n   * @example 'float'\n   * @example 'hover:focus:bg-color'\n   * @example 'md:!pr'\n   */\n  const classGroupsInConflict = [];\n  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n  let result = '';\n  for (let index = classNames.length - 1; index >= 0; index -= 1) {\n    const originalClassName = classNames[index];\n    const {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    } = parseClassName(originalClassName);\n    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);\n    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n    if (!classGroupId) {\n      if (!hasPostfixModifier) {\n        // Not a Tailwind class\n        result = originalClassName + (result.length > 0 ? ' ' + result : result);\n        continue;\n      }\n      classGroupId = getClassGroupId(baseClassName);\n      if (!classGroupId) {\n        // Not a Tailwind class\n        result = originalClassName + (result.length > 0 ? ' ' + result : result);\n        continue;\n      }\n      hasPostfixModifier = false;\n    }\n    const variantModifier = sortModifiers(modifiers).join(':');\n    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n    const classId = modifierId + classGroupId;\n    if (classGroupsInConflict.includes(classId)) {\n      // Tailwind class omitted due to conflict\n      continue;\n    }\n    classGroupsInConflict.push(classId);\n    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n    for (let i = 0; i < conflictGroups.length; ++i) {\n      const group = conflictGroups[i];\n      classGroupsInConflict.push(modifierId + group);\n    }\n    // Tailwind class not in conflict\n    result = originalClassName + (result.length > 0 ? ' ' + result : result);\n  }\n  return result;\n};\n\n/**\n * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.\n *\n * Specifically:\n * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js\n * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts\n *\n * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n */\nfunction twJoin() {\n  let index = 0;\n  let argument;\n  let resolvedValue;\n  let string = '';\n  while (index < arguments.length) {\n    if (argument = arguments[index++]) {\n      if (resolvedValue = toValue(argument)) {\n        string && (string += ' ');\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n}\nconst toValue = mix => {\n  if (typeof mix === 'string') {\n    return mix;\n  }\n  let resolvedValue;\n  let string = '';\n  for (let k = 0; k < mix.length; k++) {\n    if (mix[k]) {\n      if (resolvedValue = toValue(mix[k])) {\n        string && (string += ' ');\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n};\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\n  let configUtils;\n  let cacheGet;\n  let cacheSet;\n  let functionToCall = initTailwindMerge;\n  function initTailwindMerge(classList) {\n    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());\n    configUtils = createConfigUtils(config);\n    cacheGet = configUtils.cache.get;\n    cacheSet = configUtils.cache.set;\n    functionToCall = tailwindMerge;\n    return tailwindMerge(classList);\n  }\n  function tailwindMerge(classList) {\n    const cachedResult = cacheGet(classList);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const result = mergeClassList(classList, configUtils);\n    cacheSet(classList, result);\n    return result;\n  }\n  return function callTailwindMerge() {\n    return functionToCall(twJoin.apply(null, arguments));\n  };\n}\nconst fromTheme = key => {\n  const themeGetter = theme => theme[key] || [];\n  themeGetter.isThemeGetter = true;\n  return themeGetter;\n};\nconst arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i;\nconst fractionRegex = /^\\d+\\/\\d+$/;\nconst stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nconst lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nconst colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\n// Shadow always begins with x and y offset separated by underscore optionally prepended by inset\nconst shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nconst imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nconst isLength = value => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);\nconst isArbitraryLength = value => getIsArbitraryValue(value, 'length', isLengthOnly);\nconst isNumber = value => Boolean(value) && !Number.isNaN(Number(value));\nconst isArbitraryNumber = value => getIsArbitraryValue(value, 'number', isNumber);\nconst isInteger = value => Boolean(value) && Number.isInteger(Number(value));\nconst isPercent = value => value.endsWith('%') && isNumber(value.slice(0, -1));\nconst isArbitraryValue = value => arbitraryValueRegex.test(value);\nconst isTshirtSize = value => tshirtUnitRegex.test(value);\nconst sizeLabels = /*#__PURE__*/new Set(['length', 'size', 'percentage']);\nconst isArbitrarySize = value => getIsArbitraryValue(value, sizeLabels, isNever);\nconst isArbitraryPosition = value => getIsArbitraryValue(value, 'position', isNever);\nconst imageLabels = /*#__PURE__*/new Set(['image', 'url']);\nconst isArbitraryImage = value => getIsArbitraryValue(value, imageLabels, isImage);\nconst isArbitraryShadow = value => getIsArbitraryValue(value, '', isShadow);\nconst isAny = () => true;\nconst getIsArbitraryValue = (value, label, testValue) => {\n  const result = arbitraryValueRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return typeof label === 'string' ? result[1] === label : label.has(result[1]);\n    }\n    return testValue(result[2]);\n  }\n  return false;\n};\nconst isLengthOnly = value =>\n// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n// For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n// I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\nlengthUnitRegex.test(value) && !colorFunctionRegex.test(value);\nconst isNever = () => false;\nconst isShadow = value => shadowRegex.test(value);\nconst isImage = value => imageRegex.test(value);\nconst validators = /*#__PURE__*/Object.defineProperty({\n  __proto__: null,\n  isAny,\n  isArbitraryImage,\n  isArbitraryLength,\n  isArbitraryNumber,\n  isArbitraryPosition,\n  isArbitraryShadow,\n  isArbitrarySize,\n  isArbitraryValue,\n  isInteger,\n  isLength,\n  isNumber,\n  isPercent,\n  isTshirtSize\n}, Symbol.toStringTag, {\n  value: 'Module'\n});\nconst getDefaultConfig = () => {\n  const colors = fromTheme('colors');\n  const spacing = fromTheme('spacing');\n  const blur = fromTheme('blur');\n  const brightness = fromTheme('brightness');\n  const borderColor = fromTheme('borderColor');\n  const borderRadius = fromTheme('borderRadius');\n  const borderSpacing = fromTheme('borderSpacing');\n  const borderWidth = fromTheme('borderWidth');\n  const contrast = fromTheme('contrast');\n  const grayscale = fromTheme('grayscale');\n  const hueRotate = fromTheme('hueRotate');\n  const invert = fromTheme('invert');\n  const gap = fromTheme('gap');\n  const gradientColorStops = fromTheme('gradientColorStops');\n  const gradientColorStopPositions = fromTheme('gradientColorStopPositions');\n  const inset = fromTheme('inset');\n  const margin = fromTheme('margin');\n  const opacity = fromTheme('opacity');\n  const padding = fromTheme('padding');\n  const saturate = fromTheme('saturate');\n  const scale = fromTheme('scale');\n  const sepia = fromTheme('sepia');\n  const skew = fromTheme('skew');\n  const space = fromTheme('space');\n  const translate = fromTheme('translate');\n  const getOverscroll = () => ['auto', 'contain', 'none'];\n  const getOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll'];\n  const getSpacingWithAutoAndArbitrary = () => ['auto', isArbitraryValue, spacing];\n  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];\n  const getLengthWithEmptyAndArbitrary = () => ['', isLength, isArbitraryLength];\n  const getNumberWithAutoAndArbitrary = () => ['auto', isNumber, isArbitraryValue];\n  const getPositions = () => ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top'];\n  const getLineStyles = () => ['solid', 'dashed', 'dotted', 'double', 'none'];\n  const getBlendModes = () => ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity'];\n  const getAlign = () => ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch'];\n  const getZeroAndEmpty = () => ['', '0', isArbitraryValue];\n  const getBreaks = () => ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];\n  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];\n  return {\n    cacheSize: 500,\n    separator: ':',\n    theme: {\n      colors: [isAny],\n      spacing: [isLength, isArbitraryLength],\n      blur: ['none', '', isTshirtSize, isArbitraryValue],\n      brightness: getNumberAndArbitrary(),\n      borderColor: [colors],\n      borderRadius: ['none', '', 'full', isTshirtSize, isArbitraryValue],\n      borderSpacing: getSpacingWithArbitrary(),\n      borderWidth: getLengthWithEmptyAndArbitrary(),\n      contrast: getNumberAndArbitrary(),\n      grayscale: getZeroAndEmpty(),\n      hueRotate: getNumberAndArbitrary(),\n      invert: getZeroAndEmpty(),\n      gap: getSpacingWithArbitrary(),\n      gradientColorStops: [colors],\n      gradientColorStopPositions: [isPercent, isArbitraryLength],\n      inset: getSpacingWithAutoAndArbitrary(),\n      margin: getSpacingWithAutoAndArbitrary(),\n      opacity: getNumberAndArbitrary(),\n      padding: getSpacingWithArbitrary(),\n      saturate: getNumberAndArbitrary(),\n      scale: getNumberAndArbitrary(),\n      sepia: getZeroAndEmpty(),\n      skew: getNumberAndArbitrary(),\n      space: getSpacingWithArbitrary(),\n      translate: getSpacingWithArbitrary()\n    },\n    classGroups: {\n      // Layout\n      /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */\n      aspect: [{\n        aspect: ['auto', 'square', 'video', isArbitraryValue]\n      }],\n      /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       */\n      container: ['container'],\n      /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */\n      columns: [{\n        columns: [isTshirtSize]\n      }],\n      /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */\n      'break-after': [{\n        'break-after': getBreaks()\n      }],\n      /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */\n      'break-before': [{\n        'break-before': getBreaks()\n      }],\n      /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */\n      'break-inside': [{\n        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']\n      }],\n      /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */\n      'box-decoration': [{\n        'box-decoration': ['slice', 'clone']\n      }],\n      /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */\n      box: [{\n        box: ['border', 'content']\n      }],\n      /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */\n      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],\n      /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */\n      float: [{\n        float: ['right', 'left', 'none', 'start', 'end']\n      }],\n      /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */\n      clear: [{\n        clear: ['left', 'right', 'both', 'none', 'start', 'end']\n      }],\n      /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */\n      isolation: ['isolate', 'isolation-auto'],\n      /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */\n      'object-fit': [{\n        object: ['contain', 'cover', 'fill', 'none', 'scale-down']\n      }],\n      /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */\n      'object-position': [{\n        object: [...getPositions(), isArbitraryValue]\n      }],\n      /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      overflow: [{\n        overflow: getOverflow()\n      }],\n      /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      'overflow-x': [{\n        'overflow-x': getOverflow()\n      }],\n      /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      'overflow-y': [{\n        'overflow-y': getOverflow()\n      }],\n      /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      overscroll: [{\n        overscroll: getOverscroll()\n      }],\n      /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      'overscroll-x': [{\n        'overscroll-x': getOverscroll()\n      }],\n      /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      'overscroll-y': [{\n        'overscroll-y': getOverscroll()\n      }],\n      /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */\n      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],\n      /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      inset: [{\n        inset: [inset]\n      }],\n      /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      'inset-x': [{\n        'inset-x': [inset]\n      }],\n      /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      'inset-y': [{\n        'inset-y': [inset]\n      }],\n      /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      start: [{\n        start: [inset]\n      }],\n      /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      end: [{\n        end: [inset]\n      }],\n      /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      top: [{\n        top: [inset]\n      }],\n      /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      right: [{\n        right: [inset]\n      }],\n      /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      bottom: [{\n        bottom: [inset]\n      }],\n      /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      left: [{\n        left: [inset]\n      }],\n      /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */\n      visibility: ['visible', 'invisible', 'collapse'],\n      /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */\n      z: [{\n        z: ['auto', isInteger, isArbitraryValue]\n      }],\n      // Flexbox and Grid\n      /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */\n      basis: [{\n        basis: getSpacingWithAutoAndArbitrary()\n      }],\n      /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */\n      'flex-direction': [{\n        flex: ['row', 'row-reverse', 'col', 'col-reverse']\n      }],\n      /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */\n      'flex-wrap': [{\n        flex: ['wrap', 'wrap-reverse', 'nowrap']\n      }],\n      /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */\n      flex: [{\n        flex: ['1', 'auto', 'initial', 'none', isArbitraryValue]\n      }],\n      /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */\n      grow: [{\n        grow: getZeroAndEmpty()\n      }],\n      /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */\n      shrink: [{\n        shrink: getZeroAndEmpty()\n      }],\n      /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */\n      order: [{\n        order: ['first', 'last', 'none', isInteger, isArbitraryValue]\n      }],\n      /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */\n      'grid-cols': [{\n        'grid-cols': [isAny]\n      }],\n      /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-start-end': [{\n        col: ['auto', {\n          span: ['full', isInteger, isArbitraryValue]\n        }, isArbitraryValue]\n      }],\n      /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-start': [{\n        'col-start': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-end': [{\n        'col-end': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */\n      'grid-rows': [{\n        'grid-rows': [isAny]\n      }],\n      /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-start-end': [{\n        row: ['auto', {\n          span: [isInteger, isArbitraryValue]\n        }, isArbitraryValue]\n      }],\n      /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-start': [{\n        'row-start': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-end': [{\n        'row-end': getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */\n      'grid-flow': [{\n        'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']\n      }],\n      /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */\n      'auto-cols': [{\n        'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue]\n      }],\n      /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */\n      'auto-rows': [{\n        'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue]\n      }],\n      /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */\n      gap: [{\n        gap: [gap]\n      }],\n      /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */\n      'gap-x': [{\n        'gap-x': [gap]\n      }],\n      /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */\n      'gap-y': [{\n        'gap-y': [gap]\n      }],\n      /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */\n      'justify-content': [{\n        justify: ['normal', ...getAlign()]\n      }],\n      /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */\n      'justify-items': [{\n        'justify-items': ['start', 'end', 'center', 'stretch']\n      }],\n      /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */\n      'justify-self': [{\n        'justify-self': ['auto', 'start', 'end', 'center', 'stretch']\n      }],\n      /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */\n      'align-content': [{\n        content: ['normal', ...getAlign(), 'baseline']\n      }],\n      /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */\n      'align-items': [{\n        items: ['start', 'end', 'center', 'baseline', 'stretch']\n      }],\n      /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */\n      'align-self': [{\n        self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline']\n      }],\n      /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */\n      'place-content': [{\n        'place-content': [...getAlign(), 'baseline']\n      }],\n      /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */\n      'place-items': [{\n        'place-items': ['start', 'end', 'center', 'baseline', 'stretch']\n      }],\n      /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */\n      'place-self': [{\n        'place-self': ['auto', 'start', 'end', 'center', 'stretch']\n      }],\n      // Spacing\n      /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */\n      p: [{\n        p: [padding]\n      }],\n      /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */\n      px: [{\n        px: [padding]\n      }],\n      /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */\n      py: [{\n        py: [padding]\n      }],\n      /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */\n      ps: [{\n        ps: [padding]\n      }],\n      /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pe: [{\n        pe: [padding]\n      }],\n      /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pt: [{\n        pt: [padding]\n      }],\n      /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pr: [{\n        pr: [padding]\n      }],\n      /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pb: [{\n        pb: [padding]\n      }],\n      /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pl: [{\n        pl: [padding]\n      }],\n      /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */\n      m: [{\n        m: [margin]\n      }],\n      /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mx: [{\n        mx: [margin]\n      }],\n      /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */\n      my: [{\n        my: [margin]\n      }],\n      /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ms: [{\n        ms: [margin]\n      }],\n      /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */\n      me: [{\n        me: [margin]\n      }],\n      /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mt: [{\n        mt: [margin]\n      }],\n      /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mr: [{\n        mr: [margin]\n      }],\n      /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mb: [{\n        mb: [margin]\n      }],\n      /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ml: [{\n        ml: [margin]\n      }],\n      /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-x': [{\n        'space-x': [space]\n      }],\n      /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-x-reverse': ['space-x-reverse'],\n      /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-y': [{\n        'space-y': [space]\n      }],\n      /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/space\n       */\n      'space-y-reverse': ['space-y-reverse'],\n      // Sizing\n      /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */\n      w: [{\n        w: ['auto', 'min', 'max', 'fit', 'svw', 'lvw', 'dvw', isArbitraryValue, spacing]\n      }],\n      /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */\n      'min-w': [{\n        'min-w': [isArbitraryValue, spacing, 'min', 'max', 'fit']\n      }],\n      /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */\n      'max-w': [{\n        'max-w': [isArbitraryValue, spacing, 'none', 'full', 'min', 'max', 'fit', 'prose', {\n          screen: [isTshirtSize]\n        }, isTshirtSize]\n      }],\n      /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */\n      h: [{\n        h: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']\n      }],\n      /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */\n      'min-h': [{\n        'min-h': [isArbitraryValue, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']\n      }],\n      /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */\n      'max-h': [{\n        'max-h': [isArbitraryValue, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']\n      }],\n      /**\n       * Size\n       * @see https://tailwindcss.com/docs/size\n       */\n      size: [{\n        size: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit']\n      }],\n      // Typography\n      /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */\n      'font-size': [{\n        text: ['base', isTshirtSize, isArbitraryLength]\n      }],\n      /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */\n      'font-smoothing': ['antialiased', 'subpixel-antialiased'],\n      /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */\n      'font-style': ['italic', 'not-italic'],\n      /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */\n      'font-weight': [{\n        font: ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black', isArbitraryNumber]\n      }],\n      /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */\n      'font-family': [{\n        font: [isAny]\n      }],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-normal': ['normal-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-ordinal': ['ordinal'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-slashed-zero': ['slashed-zero'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-figure': ['lining-nums', 'oldstyle-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-spacing': ['proportional-nums', 'tabular-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-fraction': ['diagonal-fractions', 'stacked-fractions'],\n      /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */\n      tracking: [{\n        tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', isArbitraryValue]\n      }],\n      /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */\n      'line-clamp': [{\n        'line-clamp': ['none', isNumber, isArbitraryNumber]\n      }],\n      /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */\n      leading: [{\n        leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isLength, isArbitraryValue]\n      }],\n      /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */\n      'list-image': [{\n        'list-image': ['none', isArbitraryValue]\n      }],\n      /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */\n      'list-style-type': [{\n        list: ['none', 'disc', 'decimal', isArbitraryValue]\n      }],\n      /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */\n      'list-style-position': [{\n        list: ['inside', 'outside']\n      }],\n      /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/placeholder-color\n       */\n      'placeholder-color': [{\n        placeholder: [colors]\n      }],\n      /**\n       * Placeholder Opacity\n       * @see https://tailwindcss.com/docs/placeholder-opacity\n       */\n      'placeholder-opacity': [{\n        'placeholder-opacity': [opacity]\n      }],\n      /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */\n      'text-alignment': [{\n        text: ['left', 'center', 'right', 'justify', 'start', 'end']\n      }],\n      /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */\n      'text-color': [{\n        text: [colors]\n      }],\n      /**\n       * Text Opacity\n       * @see https://tailwindcss.com/docs/text-opacity\n       */\n      'text-opacity': [{\n        'text-opacity': [opacity]\n      }],\n      /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */\n      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],\n      /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */\n      'text-decoration-style': [{\n        decoration: [...getLineStyles(), 'wavy']\n      }],\n      /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */\n      'text-decoration-thickness': [{\n        decoration: ['auto', 'from-font', isLength, isArbitraryLength]\n      }],\n      /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */\n      'underline-offset': [{\n        'underline-offset': ['auto', isLength, isArbitraryValue]\n      }],\n      /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */\n      'text-decoration-color': [{\n        decoration: [colors]\n      }],\n      /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */\n      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],\n      /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */\n      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],\n      /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */\n      'text-wrap': [{\n        text: ['wrap', 'nowrap', 'balance', 'pretty']\n      }],\n      /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */\n      indent: [{\n        indent: getSpacingWithArbitrary()\n      }],\n      /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */\n      'vertical-align': [{\n        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryValue]\n      }],\n      /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */\n      whitespace: [{\n        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']\n      }],\n      /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */\n      break: [{\n        break: ['normal', 'words', 'all', 'keep']\n      }],\n      /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */\n      hyphens: [{\n        hyphens: ['none', 'manual', 'auto']\n      }],\n      /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */\n      content: [{\n        content: ['none', isArbitraryValue]\n      }],\n      // Backgrounds\n      /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */\n      'bg-attachment': [{\n        bg: ['fixed', 'local', 'scroll']\n      }],\n      /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */\n      'bg-clip': [{\n        'bg-clip': ['border', 'padding', 'content', 'text']\n      }],\n      /**\n       * Background Opacity\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/background-opacity\n       */\n      'bg-opacity': [{\n        'bg-opacity': [opacity]\n      }],\n      /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */\n      'bg-origin': [{\n        'bg-origin': ['border', 'padding', 'content']\n      }],\n      /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */\n      'bg-position': [{\n        bg: [...getPositions(), isArbitraryPosition]\n      }],\n      /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */\n      'bg-repeat': [{\n        bg: ['no-repeat', {\n          repeat: ['', 'x', 'y', 'round', 'space']\n        }]\n      }],\n      /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */\n      'bg-size': [{\n        bg: ['auto', 'cover', 'contain', isArbitrarySize]\n      }],\n      /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */\n      'bg-image': [{\n        bg: ['none', {\n          'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']\n        }, isArbitraryImage]\n      }],\n      /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */\n      'bg-color': [{\n        bg: [colors]\n      }],\n      /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-from-pos': [{\n        from: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-via-pos': [{\n        via: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-to-pos': [{\n        to: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-from': [{\n        from: [gradientColorStops]\n      }],\n      /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-via': [{\n        via: [gradientColorStops]\n      }],\n      /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-to': [{\n        to: [gradientColorStops]\n      }],\n      // Borders\n      /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      rounded: [{\n        rounded: [borderRadius]\n      }],\n      /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-s': [{\n        'rounded-s': [borderRadius]\n      }],\n      /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-e': [{\n        'rounded-e': [borderRadius]\n      }],\n      /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-t': [{\n        'rounded-t': [borderRadius]\n      }],\n      /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-r': [{\n        'rounded-r': [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-b': [{\n        'rounded-b': [borderRadius]\n      }],\n      /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-l': [{\n        'rounded-l': [borderRadius]\n      }],\n      /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-ss': [{\n        'rounded-ss': [borderRadius]\n      }],\n      /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-se': [{\n        'rounded-se': [borderRadius]\n      }],\n      /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-ee': [{\n        'rounded-ee': [borderRadius]\n      }],\n      /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-es': [{\n        'rounded-es': [borderRadius]\n      }],\n      /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-tl': [{\n        'rounded-tl': [borderRadius]\n      }],\n      /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-tr': [{\n        'rounded-tr': [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-br': [{\n        'rounded-br': [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-bl': [{\n        'rounded-bl': [borderRadius]\n      }],\n      /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w': [{\n        border: [borderWidth]\n      }],\n      /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-x': [{\n        'border-x': [borderWidth]\n      }],\n      /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-y': [{\n        'border-y': [borderWidth]\n      }],\n      /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-s': [{\n        'border-s': [borderWidth]\n      }],\n      /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-e': [{\n        'border-e': [borderWidth]\n      }],\n      /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-t': [{\n        'border-t': [borderWidth]\n      }],\n      /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-r': [{\n        'border-r': [borderWidth]\n      }],\n      /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-b': [{\n        'border-b': [borderWidth]\n      }],\n      /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-l': [{\n        'border-l': [borderWidth]\n      }],\n      /**\n       * Border Opacity\n       * @see https://tailwindcss.com/docs/border-opacity\n       */\n      'border-opacity': [{\n        'border-opacity': [opacity]\n      }],\n      /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */\n      'border-style': [{\n        border: [...getLineStyles(), 'hidden']\n      }],\n      /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-x': [{\n        'divide-x': [borderWidth]\n      }],\n      /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-x-reverse': ['divide-x-reverse'],\n      /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-y': [{\n        'divide-y': [borderWidth]\n      }],\n      /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      'divide-y-reverse': ['divide-y-reverse'],\n      /**\n       * Divide Opacity\n       * @see https://tailwindcss.com/docs/divide-opacity\n       */\n      'divide-opacity': [{\n        'divide-opacity': [opacity]\n      }],\n      /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/divide-style\n       */\n      'divide-style': [{\n        divide: getLineStyles()\n      }],\n      /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color': [{\n        border: [borderColor]\n      }],\n      /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-x': [{\n        'border-x': [borderColor]\n      }],\n      /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-y': [{\n        'border-y': [borderColor]\n      }],\n      /**\n       * Border Color S\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-s': [{\n        'border-s': [borderColor]\n      }],\n      /**\n       * Border Color E\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-e': [{\n        'border-e': [borderColor]\n      }],\n      /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-t': [{\n        'border-t': [borderColor]\n      }],\n      /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-r': [{\n        'border-r': [borderColor]\n      }],\n      /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-b': [{\n        'border-b': [borderColor]\n      }],\n      /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-l': [{\n        'border-l': [borderColor]\n      }],\n      /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */\n      'divide-color': [{\n        divide: [borderColor]\n      }],\n      /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */\n      'outline-style': [{\n        outline: ['', ...getLineStyles()]\n      }],\n      /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */\n      'outline-offset': [{\n        'outline-offset': [isLength, isArbitraryValue]\n      }],\n      /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */\n      'outline-w': [{\n        outline: [isLength, isArbitraryLength]\n      }],\n      /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */\n      'outline-color': [{\n        outline: [colors]\n      }],\n      /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/ring-width\n       */\n      'ring-w': [{\n        ring: getLengthWithEmptyAndArbitrary()\n      }],\n      /**\n       * Ring Width Inset\n       * @see https://tailwindcss.com/docs/ring-width\n       */\n      'ring-w-inset': ['ring-inset'],\n      /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/ring-color\n       */\n      'ring-color': [{\n        ring: [colors]\n      }],\n      /**\n       * Ring Opacity\n       * @see https://tailwindcss.com/docs/ring-opacity\n       */\n      'ring-opacity': [{\n        'ring-opacity': [opacity]\n      }],\n      /**\n       * Ring Offset Width\n       * @see https://tailwindcss.com/docs/ring-offset-width\n       */\n      'ring-offset-w': [{\n        'ring-offset': [isLength, isArbitraryLength]\n      }],\n      /**\n       * Ring Offset Color\n       * @see https://tailwindcss.com/docs/ring-offset-color\n       */\n      'ring-offset-color': [{\n        'ring-offset': [colors]\n      }],\n      // Effects\n      /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */\n      shadow: [{\n        shadow: ['', 'inner', 'none', isTshirtSize, isArbitraryShadow]\n      }],\n      /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow-color\n       */\n      'shadow-color': [{\n        shadow: [isAny]\n      }],\n      /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */\n      opacity: [{\n        opacity: [opacity]\n      }],\n      /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */\n      'mix-blend': [{\n        'mix-blend': [...getBlendModes(), 'plus-lighter', 'plus-darker']\n      }],\n      /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */\n      'bg-blend': [{\n        'bg-blend': getBlendModes()\n      }],\n      // Filters\n      /**\n       * Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/filter\n       */\n      filter: [{\n        filter: ['', 'none']\n      }],\n      /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */\n      blur: [{\n        blur: [blur]\n      }],\n      /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */\n      brightness: [{\n        brightness: [brightness]\n      }],\n      /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */\n      contrast: [{\n        contrast: [contrast]\n      }],\n      /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */\n      'drop-shadow': [{\n        'drop-shadow': ['', 'none', isTshirtSize, isArbitraryValue]\n      }],\n      /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */\n      grayscale: [{\n        grayscale: [grayscale]\n      }],\n      /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */\n      'hue-rotate': [{\n        'hue-rotate': [hueRotate]\n      }],\n      /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */\n      invert: [{\n        invert: [invert]\n      }],\n      /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */\n      saturate: [{\n        saturate: [saturate]\n      }],\n      /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */\n      sepia: [{\n        sepia: [sepia]\n      }],\n      /**\n       * Backdrop Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */\n      'backdrop-filter': [{\n        'backdrop-filter': ['', 'none']\n      }],\n      /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */\n      'backdrop-blur': [{\n        'backdrop-blur': [blur]\n      }],\n      /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */\n      'backdrop-brightness': [{\n        'backdrop-brightness': [brightness]\n      }],\n      /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */\n      'backdrop-contrast': [{\n        'backdrop-contrast': [contrast]\n      }],\n      /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */\n      'backdrop-grayscale': [{\n        'backdrop-grayscale': [grayscale]\n      }],\n      /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */\n      'backdrop-hue-rotate': [{\n        'backdrop-hue-rotate': [hueRotate]\n      }],\n      /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */\n      'backdrop-invert': [{\n        'backdrop-invert': [invert]\n      }],\n      /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */\n      'backdrop-opacity': [{\n        'backdrop-opacity': [opacity]\n      }],\n      /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */\n      'backdrop-saturate': [{\n        'backdrop-saturate': [saturate]\n      }],\n      /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */\n      'backdrop-sepia': [{\n        'backdrop-sepia': [sepia]\n      }],\n      // Tables\n      /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */\n      'border-collapse': [{\n        border: ['collapse', 'separate']\n      }],\n      /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing': [{\n        'border-spacing': [borderSpacing]\n      }],\n      /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing-x': [{\n        'border-spacing-x': [borderSpacing]\n      }],\n      /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing-y': [{\n        'border-spacing-y': [borderSpacing]\n      }],\n      /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */\n      'table-layout': [{\n        table: ['auto', 'fixed']\n      }],\n      /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */\n      caption: [{\n        caption: ['top', 'bottom']\n      }],\n      // Transitions and Animation\n      /**\n       * Tranisition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */\n      transition: [{\n        transition: ['none', 'all', '', 'colors', 'opacity', 'shadow', 'transform', isArbitraryValue]\n      }],\n      /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */\n      duration: [{\n        duration: getNumberAndArbitrary()\n      }],\n      /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */\n      ease: [{\n        ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue]\n      }],\n      /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */\n      delay: [{\n        delay: getNumberAndArbitrary()\n      }],\n      /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */\n      animate: [{\n        animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue]\n      }],\n      // Transforms\n      /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */\n      transform: [{\n        transform: ['', 'gpu', 'none']\n      }],\n      /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */\n      scale: [{\n        scale: [scale]\n      }],\n      /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-x': [{\n        'scale-x': [scale]\n      }],\n      /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-y': [{\n        'scale-y': [scale]\n      }],\n      /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      rotate: [{\n        rotate: [isInteger, isArbitraryValue]\n      }],\n      /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-x': [{\n        'translate-x': [translate]\n      }],\n      /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-y': [{\n        'translate-y': [translate]\n      }],\n      /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */\n      'skew-x': [{\n        'skew-x': [skew]\n      }],\n      /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */\n      'skew-y': [{\n        'skew-y': [skew]\n      }],\n      /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */\n      'transform-origin': [{\n        origin: ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryValue]\n      }],\n      // Interactivity\n      /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */\n      accent: [{\n        accent: ['auto', colors]\n      }],\n      /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */\n      appearance: [{\n        appearance: ['none', 'auto']\n      }],\n      /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */\n      cursor: [{\n        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryValue]\n      }],\n      /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */\n      'caret-color': [{\n        caret: [colors]\n      }],\n      /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */\n      'pointer-events': [{\n        'pointer-events': ['none', 'auto']\n      }],\n      /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */\n      resize: [{\n        resize: ['none', 'y', 'x', '']\n      }],\n      /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */\n      'scroll-behavior': [{\n        scroll: ['auto', 'smooth']\n      }],\n      /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-m': [{\n        'scroll-m': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mx': [{\n        'scroll-mx': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-my': [{\n        'scroll-my': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-ms': [{\n        'scroll-ms': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-me': [{\n        'scroll-me': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mt': [{\n        'scroll-mt': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mr': [{\n        'scroll-mr': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mb': [{\n        'scroll-mb': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-ml': [{\n        'scroll-ml': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-p': [{\n        'scroll-p': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-px': [{\n        'scroll-px': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-py': [{\n        'scroll-py': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-ps': [{\n        'scroll-ps': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pe': [{\n        'scroll-pe': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pt': [{\n        'scroll-pt': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pr': [{\n        'scroll-pr': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pb': [{\n        'scroll-pb': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pl': [{\n        'scroll-pl': getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */\n      'snap-align': [{\n        snap: ['start', 'end', 'center', 'align-none']\n      }],\n      /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */\n      'snap-stop': [{\n        snap: ['normal', 'always']\n      }],\n      /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      'snap-type': [{\n        snap: ['none', 'x', 'y', 'both']\n      }],\n      /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      'snap-strictness': [{\n        snap: ['mandatory', 'proximity']\n      }],\n      /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      touch: [{\n        touch: ['auto', 'none', 'manipulation']\n      }],\n      /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-x': [{\n        'touch-pan': ['x', 'left', 'right']\n      }],\n      /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-y': [{\n        'touch-pan': ['y', 'up', 'down']\n      }],\n      /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-pz': ['touch-pinch-zoom'],\n      /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */\n      select: [{\n        select: ['none', 'text', 'all', 'auto']\n      }],\n      /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */\n      'will-change': [{\n        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue]\n      }],\n      // SVG\n      /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */\n      fill: [{\n        fill: [colors, 'none']\n      }],\n      /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */\n      'stroke-w': [{\n        stroke: [isLength, isArbitraryLength, isArbitraryNumber]\n      }],\n      /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */\n      stroke: [{\n        stroke: [colors, 'none']\n      }],\n      // Accessibility\n      /**\n       * Screen Readers\n       * @see https://tailwindcss.com/docs/screen-readers\n       */\n      sr: ['sr-only', 'not-sr-only'],\n      /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */\n      'forced-color-adjust': [{\n        'forced-color-adjust': ['auto', 'none']\n      }]\n    },\n    conflictingClassGroups: {\n      overflow: ['overflow-x', 'overflow-y'],\n      overscroll: ['overscroll-x', 'overscroll-y'],\n      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],\n      'inset-x': ['right', 'left'],\n      'inset-y': ['top', 'bottom'],\n      flex: ['basis', 'grow', 'shrink'],\n      gap: ['gap-x', 'gap-y'],\n      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],\n      px: ['pr', 'pl'],\n      py: ['pt', 'pb'],\n      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],\n      mx: ['mr', 'ml'],\n      my: ['mt', 'mb'],\n      size: ['w', 'h'],\n      'font-size': ['leading'],\n      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],\n      'fvn-ordinal': ['fvn-normal'],\n      'fvn-slashed-zero': ['fvn-normal'],\n      'fvn-figure': ['fvn-normal'],\n      'fvn-spacing': ['fvn-normal'],\n      'fvn-fraction': ['fvn-normal'],\n      'line-clamp': ['display', 'overflow'],\n      rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],\n      'rounded-s': ['rounded-ss', 'rounded-es'],\n      'rounded-e': ['rounded-se', 'rounded-ee'],\n      'rounded-t': ['rounded-tl', 'rounded-tr'],\n      'rounded-r': ['rounded-tr', 'rounded-br'],\n      'rounded-b': ['rounded-br', 'rounded-bl'],\n      'rounded-l': ['rounded-tl', 'rounded-bl'],\n      'border-spacing': ['border-spacing-x', 'border-spacing-y'],\n      'border-w': ['border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],\n      'border-w-x': ['border-w-r', 'border-w-l'],\n      'border-w-y': ['border-w-t', 'border-w-b'],\n      'border-color': ['border-color-s', 'border-color-e', 'border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],\n      'border-color-x': ['border-color-r', 'border-color-l'],\n      'border-color-y': ['border-color-t', 'border-color-b'],\n      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],\n      'scroll-mx': ['scroll-mr', 'scroll-ml'],\n      'scroll-my': ['scroll-mt', 'scroll-mb'],\n      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],\n      'scroll-px': ['scroll-pr', 'scroll-pl'],\n      'scroll-py': ['scroll-pt', 'scroll-pb'],\n      touch: ['touch-x', 'touch-y', 'touch-pz'],\n      'touch-x': ['touch'],\n      'touch-y': ['touch'],\n      'touch-pz': ['touch']\n    },\n    conflictingClassGroupModifiers: {\n      'font-size': ['leading']\n    }\n  };\n};\n\n/**\n * @param baseConfig Config where other config will be merged into. This object will be mutated.\n * @param configExtension Partial config to merge into the `baseConfig`.\n */\nconst mergeConfigs = (baseConfig, {\n  cacheSize,\n  prefix,\n  separator,\n  experimentalParseClassName,\n  extend = {},\n  override = {}\n}) => {\n  overrideProperty(baseConfig, 'cacheSize', cacheSize);\n  overrideProperty(baseConfig, 'prefix', prefix);\n  overrideProperty(baseConfig, 'separator', separator);\n  overrideProperty(baseConfig, 'experimentalParseClassName', experimentalParseClassName);\n  for (const configKey in override) {\n    overrideConfigProperties(baseConfig[configKey], override[configKey]);\n  }\n  for (const key in extend) {\n    mergeConfigProperties(baseConfig[key], extend[key]);\n  }\n  return baseConfig;\n};\nconst overrideProperty = (baseObject, overrideKey, overrideValue) => {\n  if (overrideValue !== undefined) {\n    baseObject[overrideKey] = overrideValue;\n  }\n};\nconst overrideConfigProperties = (baseObject, overrideObject) => {\n  if (overrideObject) {\n    for (const key in overrideObject) {\n      overrideProperty(baseObject, key, overrideObject[key]);\n    }\n  }\n};\nconst mergeConfigProperties = (baseObject, mergeObject) => {\n  if (mergeObject) {\n    for (const key in mergeObject) {\n      const mergeValue = mergeObject[key];\n      if (mergeValue !== undefined) {\n        baseObject[key] = (baseObject[key] || []).concat(mergeValue);\n      }\n    }\n  }\n};\nconst extendTailwindMerge = (configExtension, ...createConfig) => typeof configExtension === 'function' ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);\nconst twMerge = /*#__PURE__*/createTailwindMerge(getDefaultConfig);\n\n//# sourceMappingURL=bundle-mjs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Csanjo%5C%5CDocuments%5C%5Cmatch%20cut%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);