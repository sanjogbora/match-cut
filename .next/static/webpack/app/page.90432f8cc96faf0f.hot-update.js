"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/imageAlignment.ts":
/*!*******************************!*\
  !*** ./lib/imageAlignment.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageAligner: function() { return /* binding */ ImageAligner; }\n/* harmony export */ });\nclass ImageAligner {\n    // Enhanced eye center calculation using pupil approximation\n    calculatePreciseEyeCenter(landmarks, eyeIndices) {\n        const validLandmarks = eyeIndices.map((idx)=>landmarks[idx]).filter((landmark)=>landmark);\n        if (validLandmarks.length === 0) {\n            throw new Error(\"No valid eye landmarks found\");\n        }\n        // Weight inner eye landmarks more heavily (closer to actual pupil position)\n        let weightedX = 0, weightedY = 0, totalWeight = 0;\n        validLandmarks.forEach((landmark, i)=>{\n            // Inner landmarks get higher weight for better pupil approximation\n            const isCorner = eyeIndices[i] === 33 || eyeIndices[i] === 133 || eyeIndices[i] === 362 || eyeIndices[i] === 263;\n            const weight = isCorner ? 0.5 : 1.5; // Reduce weight of corner points\n            weightedX += landmark.x * weight;\n            weightedY += landmark.y * weight;\n            totalWeight += weight;\n        });\n        return [\n            weightedX / totalWeight,\n            weightedY / totalWeight\n        ];\n    }\n    alignImage(sourceImage, eyePoints, targetResolution) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = targetResolution.width;\n        canvas.height = targetResolution.height;\n        const ctx = canvas.getContext(\"2d\");\n        // Calculate alignment transform\n        const transform = this.calculateAlignmentTransform(eyePoints, targetResolution);\n        // Apply transformation and draw image\n        ctx.save();\n        ctx.setTransform(transform.matrix[0][0], transform.matrix[0][1], transform.matrix[1][0], transform.matrix[1][1], transform.matrix[0][2], transform.matrix[1][2]);\n        ctx.drawImage(sourceImage, 0, 0);\n        ctx.restore();\n        return canvas;\n    }\n    calculateAlignmentTransform(eyePoints, targetResolution) {\n        const { left, right } = eyePoints;\n        const { width, height } = targetResolution;\n        // Calculate current eye properties\n        const eyeCenterX = (left[0] + right[0]) / 2;\n        const eyeCenterY = (left[1] + right[1]) / 2;\n        const currentEyeDistance = Math.sqrt(Math.pow(right[0] - left[0], 2) + Math.pow(right[1] - left[1], 2));\n        const eyeAngle = Math.atan2(right[1] - left[1], right[0] - left[0]);\n        // Calculate target eye properties\n        const targetEyeDistancePixels = width * this.targetEyeDistance;\n        const targetEyeCenterX = width / 2;\n        const targetEyeCenterY = height * this.targetEyeY;\n        // Calculate transformations\n        const scale = targetEyeDistancePixels / currentEyeDistance;\n        const rotation = -eyeAngle; // Negative to counter-rotate\n        // Create transformation matrix\n        const cos = Math.cos(rotation);\n        const sin = Math.sin(rotation);\n        // Translation to center eyes at origin\n        const tx1 = -eyeCenterX;\n        const ty1 = -eyeCenterY;\n        // Scale and rotate\n        const scaleRotateMatrix = [\n            [\n                scale * cos,\n                -scale * sin\n            ],\n            [\n                scale * sin,\n                scale * cos\n            ]\n        ];\n        // Translation to target position\n        const tx2 = targetEyeCenterX;\n        const ty2 = targetEyeCenterY;\n        // Combine transformations: translate -> scale/rotate -> translate\n        const matrix = [\n            [\n                scaleRotateMatrix[0][0],\n                scaleRotateMatrix[0][1],\n                scaleRotateMatrix[0][0] * tx1 + scaleRotateMatrix[0][1] * ty1 + tx2\n            ],\n            [\n                scaleRotateMatrix[1][0],\n                scaleRotateMatrix[1][1],\n                scaleRotateMatrix[1][0] * tx1 + scaleRotateMatrix[1][1] * ty1 + ty2\n            ]\n        ];\n        return {\n            rotation: rotation * (180 / Math.PI),\n            scale,\n            translation: [\n                tx2 - eyeCenterX * scale,\n                ty2 - eyeCenterY * scale\n            ],\n            matrix\n        };\n    }\n    // Full image alignment method that preserves entire image on canvas\n    alignImageFull(sourceImage, eyePoints, targetResolution) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = targetResolution.width;\n        canvas.height = targetResolution.height;\n        const ctx = canvas.getContext(\"2d\");\n        const { left, right } = eyePoints;\n        const { width: canvasWidth, height: canvasHeight } = targetResolution;\n        // Calculate eye properties in source image\n        const eyeCenterX = (left[0] + right[0]) / 2;\n        const eyeCenterY = (left[1] + right[1]) / 2;\n        const eyeAngle = Math.atan2(right[1] - left[1], right[0] - left[0]);\n        const currentEyeDistance = Math.sqrt(Math.pow(right[0] - left[0], 2) + Math.pow(right[1] - left[1], 2));\n        // Target eye properties on canvas\n        const targetEyeDistance = canvasWidth * this.targetEyeDistance;\n        const targetEyeCenterX = canvasWidth / 2;\n        const targetEyeCenterY = canvasHeight * this.targetEyeY;\n        // Calculate scale based on eye distance\n        const eyeScale = targetEyeDistance / currentEyeDistance;\n        // Calculate the scaled image dimensions\n        const scaledImageWidth = sourceImage.width * eyeScale;\n        const scaledImageHeight = sourceImage.height * eyeScale;\n        // Calculate final scale to fit entire image on canvas if needed\n        const canvasFitScaleX = canvasWidth / scaledImageWidth;\n        const canvasFitScaleY = canvasHeight / scaledImageHeight;\n        const canvasFitScale = Math.min(canvasFitScaleX, canvasFitScaleY, 1); // Don't upscale beyond eye scale\n        // Final scale combines eye alignment and canvas fitting\n        const finalScale = eyeScale * canvasFitScale;\n        // Calculate where the image should be positioned to keep eyes at target position\n        const scaledEyeCenterX = eyeCenterX * finalScale;\n        const scaledEyeCenterY = eyeCenterY * finalScale;\n        // Calculate image position (top-left corner) to place eyes at target position\n        const cos = Math.cos(-eyeAngle);\n        const sin = Math.sin(-eyeAngle);\n        // Apply transformations\n        ctx.save();\n        // Clear canvas with transparent background\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n        console.log(\"alignImageFull debug:\", {\n            sourceImageSize: {\n                width: sourceImage.width,\n                height: sourceImage.height\n            },\n            canvasSize: {\n                width: canvasWidth,\n                height: canvasHeight\n            },\n            eyeScale,\n            canvasFitScale,\n            finalScale,\n            eyeCenterX,\n            eyeCenterY,\n            targetEyeCenterX,\n            targetEyeCenterY,\n            eyeAngle: eyeAngle * (180 / Math.PI) + \" degrees\",\n            imageComplete: sourceImage.complete,\n            imageSrc: sourceImage.src.substring(0, 50) + \"...\"\n        });\n        // Verify source image has content by drawing to a test canvas\n        const testCanvas = document.createElement(\"canvas\");\n        testCanvas.width = sourceImage.width;\n        testCanvas.height = sourceImage.height;\n        const testCtx = testCanvas.getContext(\"2d\");\n        testCtx.drawImage(sourceImage, 0, 0);\n        const testImageData = testCtx.getImageData(0, 0, sourceImage.width, sourceImage.height);\n        const sourceHasContent = testImageData.data.some((value, index)=>{\n            return index % 4 === 3 && value > 0; // Check alpha channel\n        });\n        console.log(\"Source image has content:\", sourceHasContent);\n        // Move to target eye center\n        ctx.translate(targetEyeCenterX, targetEyeCenterY);\n        // Rotate to align eyes horizontally\n        ctx.rotate(-eyeAngle);\n        // Scale to match target eye distance and fit canvas\n        ctx.scale(finalScale, finalScale);\n        // Draw image centered on eye center in the scaled/rotated coordinate system\n        ctx.drawImage(sourceImage, -eyeCenterX, -eyeCenterY, sourceImage.width, sourceImage.height);\n        console.log(\"DrawImage parameters:\", {\n            dx: -eyeCenterX,\n            dy: -eyeCenterY,\n            dWidth: sourceImage.width,\n            dHeight: sourceImage.height,\n            currentTransform: ctx.getTransform()\n        });\n        // Check immediately if drawing worked within the transform\n        const immediateCheck = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n        const drewSomething = immediateCheck.data.some((value, index)=>{\n            return index % 4 === 3 && value > 0;\n        });\n        console.log(\"Content exists immediately after drawImage (within transform):\", drewSomething);\n        ctx.restore();\n        // Debug: Check if canvas has content\n        const imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n        const hasContent = imageData.data.some((value, index)=>{\n            return index % 4 === 3 && value > 0; // Check alpha channel for non-transparent pixels\n        });\n        console.log(\"Canvas has content after drawing:\", hasContent);\n        if (!hasContent) {\n            console.warn(\"WARNING: Canvas appears to be empty after alignment\");\n            // Debug: Try a simple red rectangle to verify canvas is working\n            ctx.fillStyle = \"red\";\n            ctx.fillRect(10, 10, 50, 50);\n            console.log(\"Added debug red rectangle to empty canvas\");\n        }\n        return canvas;\n    }\n    // Smart face cropping alignment - focuses on face region while maintaining eye alignment\n    alignImageFaceCrop(sourceImage, faceResult, targetResolution) {\n        let padding = arguments.length > 3 && arguments[3] !== void 0 // 60% padding around face for better framing\n         ? arguments[3] : 0.6;\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = targetResolution.width;\n        canvas.height = targetResolution.height;\n        const ctx = canvas.getContext(\"2d\");\n        const { eyePoints, faceBounds } = faceResult;\n        const { width: canvasWidth, height: canvasHeight } = targetResolution;\n        if (!faceBounds) {\n            // Fallback to full alignment if no face bounds\n            return this.alignImageFull(sourceImage, eyePoints, targetResolution);\n        }\n        // Calculate padded face region with extra vertical padding\n        const faceWidth = faceBounds.width;\n        const faceHeight = faceBounds.height;\n        const paddingX = faceWidth * padding;\n        const paddingY = faceHeight * (padding + 0.2); // Extra 20% vertical padding for forehead/chin\n        const cropLeft = Math.max(0, faceBounds.left - paddingX);\n        const cropTop = Math.max(0, faceBounds.top - paddingY);\n        const cropRight = Math.min(sourceImage.width, faceBounds.right + paddingX);\n        const cropBottom = Math.min(sourceImage.height, faceBounds.bottom + paddingY);\n        const cropWidth = cropRight - cropLeft;\n        const cropHeight = cropBottom - cropTop;\n        // Adjust eye points relative to crop region\n        const adjustedEyePoints = {\n            left: [\n                eyePoints.left[0] - cropLeft,\n                eyePoints.left[1] - cropTop\n            ],\n            right: [\n                eyePoints.right[0] - cropLeft,\n                eyePoints.right[1] - cropTop\n            ]\n        };\n        // Calculate eye properties in cropped region\n        const eyeCenterX = (adjustedEyePoints.left[0] + adjustedEyePoints.right[0]) / 2;\n        const eyeCenterY = (adjustedEyePoints.left[1] + adjustedEyePoints.right[1]) / 2;\n        const eyeAngle = Math.atan2(adjustedEyePoints.right[1] - adjustedEyePoints.left[1], adjustedEyePoints.right[0] - adjustedEyePoints.left[0]);\n        const currentEyeDistance = Math.sqrt(Math.pow(adjustedEyePoints.right[0] - adjustedEyePoints.left[0], 2) + Math.pow(adjustedEyePoints.right[1] - adjustedEyePoints.left[1], 2));\n        // Target eye properties\n        const targetEyeDistance = canvasWidth * this.targetEyeDistance;\n        const targetEyeCenterX = canvasWidth / 2;\n        const targetEyeCenterY = canvasHeight * this.targetEyeY;\n        // Calculate scale to fit cropped region to canvas\n        const eyeScale = targetEyeDistance / currentEyeDistance;\n        const scaleToFitX = canvasWidth / cropWidth;\n        const scaleToFitY = canvasHeight / cropHeight;\n        const fitScale = Math.min(scaleToFitX, scaleToFitY);\n        // Use the more appropriate scale\n        const finalScale = Math.min(eyeScale, fitScale * 1.2); // Allow slight overflow for better framing\n        // Apply transformations\n        ctx.save();\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n        console.log(\"alignImageFaceCrop debug:\", {\n            cropRegion: {\n                left: cropLeft,\n                top: cropTop,\n                width: cropWidth,\n                height: cropHeight\n            },\n            canvasSize: {\n                width: canvasWidth,\n                height: canvasHeight\n            },\n            eyeScale,\n            fitScale,\n            finalScale,\n            eyeCenterX,\n            eyeCenterY,\n            targetEyeCenterX,\n            targetEyeCenterY,\n            eyeAngle: eyeAngle * (180 / Math.PI) + \" degrees\"\n        });\n        // Move to target eye center\n        ctx.translate(targetEyeCenterX, targetEyeCenterY);\n        // Rotate to align eyes horizontally\n        ctx.rotate(-eyeAngle);\n        // Scale the cropped region\n        ctx.scale(finalScale, finalScale);\n        // Draw the cropped region centered on eye center\n        ctx.drawImage(sourceImage, cropLeft, cropTop, cropWidth, cropHeight, -eyeCenterX, -eyeCenterY, cropWidth, cropHeight // Destination\n        );\n        ctx.restore();\n        // Debug: Check if canvas has content\n        const imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n        const hasContent = imageData.data.some((value, index)=>{\n            return index % 4 === 3 && value > 0; // Check alpha channel for non-transparent pixels\n        });\n        console.log(\"Canvas has content after face crop drawing:\", hasContent);\n        if (!hasContent) {\n            console.warn(\"WARNING: Face crop canvas appears to be empty after alignment\");\n            // Debug: Try a simple blue rectangle to verify canvas is working\n            ctx.fillStyle = \"blue\";\n            ctx.fillRect(10, 10, 50, 50);\n            console.log(\"Added debug blue rectangle to empty face crop canvas\");\n        }\n        return canvas;\n    }\n    // Alternative simpler alignment method using canvas transforms\n    alignImageSimple(sourceImage, eyePoints, targetResolution) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = targetResolution.width;\n        canvas.height = targetResolution.height;\n        const ctx = canvas.getContext(\"2d\");\n        const { left, right } = eyePoints;\n        const { width, height } = targetResolution;\n        // Calculate eye center and angle\n        const eyeCenterX = (left[0] + right[0]) / 2;\n        const eyeCenterY = (left[1] + right[1]) / 2;\n        const eyeAngle = Math.atan2(right[1] - left[1], right[0] - left[0]);\n        const currentEyeDistance = Math.sqrt(Math.pow(right[0] - left[0], 2) + Math.pow(right[1] - left[1], 2));\n        // Target properties\n        const targetEyeDistance = width * this.targetEyeDistance;\n        const targetCenterX = width / 2;\n        const targetCenterY = height * this.targetEyeY;\n        const scale = targetEyeDistance / currentEyeDistance;\n        // Apply transformations\n        ctx.save();\n        // Move to target center\n        ctx.translate(targetCenterX, targetCenterY);\n        // Rotate to align eyes horizontally\n        ctx.rotate(-eyeAngle);\n        // Scale to match target eye distance\n        ctx.scale(scale, scale);\n        // Draw image centered on eye center\n        ctx.drawImage(sourceImage, -eyeCenterX, -eyeCenterY);\n        ctx.restore();\n        return canvas;\n    }\n    // Method to check if eye points are valid for alignment\n    validateEyePoints(eyePoints, imageWidth, imageHeight) {\n        const { left, right } = eyePoints;\n        // Check if points are within image bounds\n        if (left[0] < 0 || left[0] > imageWidth || left[1] < 0 || left[1] > imageHeight) {\n            return false;\n        }\n        if (right[0] < 0 || right[0] > imageWidth || right[1] < 0 || right[1] > imageHeight) {\n            return false;\n        }\n        // Check if eyes are reasonably far apart\n        const eyeDistance = Math.sqrt(Math.pow(right[0] - left[0], 2) + Math.pow(right[1] - left[1], 2));\n        const minEyeDistance = Math.min(imageWidth, imageHeight) * 0.05; // 5% of smaller dimension\n        const maxEyeDistance = Math.max(imageWidth, imageHeight) * 0.8; // 80% of larger dimension\n        return eyeDistance >= minEyeDistance && eyeDistance <= maxEyeDistance;\n    }\n    // Get preview of alignment transformation\n    getAlignmentPreview(sourceImage, eyePoints, targetResolution) {\n        let previewSize = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 200;\n        // Create smaller preview\n        const previewResolution = {\n            width: previewSize,\n            height: previewSize * targetResolution.height / targetResolution.width\n        };\n        return this.alignImageFull(sourceImage, eyePoints, previewResolution);\n    }\n    constructor(targetEyeDistance = 0.35, targetEyeY = 0.4){\n        this.targetEyeDistance = 0.35 // Target eye distance as proportion of canvas width\n        ;\n        this.targetEyeY = 0.4 // Target eye Y position as proportion of canvas height\n        ;\n        // Enhanced alignment features\n        this.previousTransforms = [];\n        this.smoothingFactor = 0.15 // Temporal smoothing to reduce jitter\n        ;\n        this.useSubPixelPrecision = true;\n        this.targetEyeDistance = targetEyeDistance;\n        this.targetEyeY = targetEyeY;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/imageAlignment.ts\n"));

/***/ })

});